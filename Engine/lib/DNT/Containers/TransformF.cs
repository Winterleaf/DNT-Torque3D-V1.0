// Copyright (C) 2012 Winterleaf Entertainment L,L,C.
// 
// THE SOFTW ARE IS PROVIDED ON AN “ AS IS” BASIS, WITHOUT W ARRANTY OF ANY KIND,
// INCLUDING WITHOUT LIMIT ATION THE W ARRANTIES OF MERCHANT ABILITY, FITNESS
// FOR A PARTICULAR PURPOSE OR NON-INFRINGEMENT . THE ENTIRE RISK AS TO THE
// QUALITY AND PERFORMANCE OF THE SOFTW ARE IS THE RESPONSIBILITY OF LICENSEE.
// SHOULD THE SOFTW ARE PROVE DEFECTIVE IN ANY RESPECT , LICENSEE AND NOT LICEN -
// SOR OR ITS SUPPLIERS OR RESELLERS ASSUMES THE ENTIRE COST OF AN Y SERVICE AND
// REPAIR. THIS DISCLAIMER OF W ARRANTY CONSTITUTES AN ESSENTIAL PART OF THIS
// AGREEMENT. NO USE OF THE SOFTW ARE IS AUTHORIZED HEREUNDER EXCEPT UNDER
// THIS DISCLAIMER.
// 
// The use of the WinterLeaf Entertainment LLC DotNetT orque (“DNT ”) and DotNetT orque
// Customizer (“DNTC”)is governed by this license agreement (“ Agreement”).
// 
// R E S T R I C T I O N S
// 
// (a) Licensee may not: (i) create any derivative works of DNT or DNTC, including but not
// limited to translations, localizations, technology add-ons, or game making software
// other than Games; (ii) reverse engineer , or otherwise attempt to derive the algorithms
// for DNT or DNTC (iii) redistribute, encumber , sell, rent, lease, sublicense, or otherwise
// transfer rights to DNT or DNTC; or (iv) remove or alter any tra demark, logo, copyright
// or other proprietary notices, legends, symbols or labels in DNT or DNTC; or (iiv) use
// the Software to develop or distribute any software that compete s with the Software
// without WinterLeaf Entertainment’s prior written consent; or (i iiv) use the Software for
// any illegal purpose.
// (b) Licensee may not distribute the DNTC in any manner.
// 
// LI C E N S E G R A N T .
// This license allows companies of any size, government entities or individuals to cre -
// ate, sell, rent, lease, or otherwise profit commercially from, games using executables
// created from the source code of DNT
// 
// **********************************************************************************
// **********************************************************************************
// **********************************************************************************
// THE SOURCE CODE GENERATED BY DNTC CAN BE  DISTRIBUTED PUBLICLY PROVIDED THAT THE 
// DISTRIBUTOR PROVIDES  THE GENERATE SOURCE CODE FREE OF CHARGE.
// 
// THIS SOURCE CODE (DNT) CAN BE DISTRIBUTED PUBLICLY PROVIDED THAT THE DISTRIBUTOR 
// PROVIDES  THE SOURCE CODE (DNT) FREE OF CHARGE.
// **********************************************************************************
// **********************************************************************************
// **********************************************************************************
// 
// Please visit http://www.winterleafentertainment.com for more information about the project and latest updates.
// 
// Last updated: 10/18/2012
// 

#region

using System;
using WinterLeaf.Classes;

#endregion

namespace WinterLeaf.Containers
    {
    /// <summary>
    /// The CSharp equiv to the TransformF torque class.
    /// </summary>
    public sealed class TransformF
        {
        private const double POINT_EPSILON = (1e-4);
        private readonly bool isempty;
        private float mAngle;
        private Point3F mOrientation;
        private Point3F mPosition;

        public TransformF(bool m_empty)
            {
            isempty = true;
            }

        public TransformF()
            {
            mPosition = new Point3F("0 0 0 ");
            mOrientation = new Point3F("0 0 0 ");
            }

        public TransformF(string transform)
            {
            string[] parts = transform.Split(' ');
            if (parts.GetUpperBound(0) >= 2)
                {
                mPosition = new Point3F(parts[0].AsFloat(), parts[1].AsFloat(), parts[2].AsFloat());
                mOrientation = new Point3F();
                }
            if (parts.GetUpperBound(0) != 6)
                return;
            mOrientation = new Point3F(parts[3].AsFloat(), parts[4].AsFloat(), parts[5].AsFloat());
            mAngle = parts[6].AsFloat();
            }

        public TransformF(float x, float y, float z)
            {
            mPosition = new Point3F(x, y, z);
            mOrientation = new Point3F("0 0 0 ");
            }

        public TransformF(float x, float y, float z, float axis_x, float axis_y, float axis_z, float angle)
            {
            mPosition = new Point3F(x, y, z);
            mOrientation = new Point3F(axis_x, axis_y, axis_z);
            mAngle = angle;
            }

        public TransformF(Point3F p)
            {
            mPosition = p;
            mOrientation = new Point3F();
            mAngle = 0;
            }

        public Point3F MPosition
            {
            get { return mPosition; }
            set { mPosition = value; }
            }

        public Point3F MOrientation
            {
            get { return mOrientation; }
            set { mOrientation = value; }
            }

        public float MAngle
            {
            get { return mAngle; }
            set { mAngle = value; }
            }

        public override string ToString()
            {
            if (!isempty)
                return string.Format("{0} {1} {2} {3} {4} {5} {6}", mPosition.x.AsString(), mPosition.y.AsString(), mPosition.z.AsString(), mOrientation.x.AsString(), mOrientation.y.AsString(), mOrientation.z.AsString(), mAngle.AsString());
            return "";
            }

        public string AsString()
            {
            if (!isempty)
                return string.Format("{0} {1} {2} {3} {4} {5} {6}", mPosition.x.AsString(), mPosition.y.AsString(), mPosition.z.AsString(), mOrientation.x.AsString(), mOrientation.y.AsString(), mOrientation.z.AsString(), mAngle.AsString());
            return "";
            }

        public override int GetHashCode()
            {
            return base.GetHashCode();
            }

        public override bool Equals(object _testo)
            {
            TransformF _test = (TransformF) _testo;
            return (MPosition.x == _test.MPosition.x) && (MPosition.y == _test.MPosition.y) && (MPosition.z == _test.MPosition.z);
            }

        public static bool operator ==(TransformF x, TransformF _test)
            {
            return (x.MPosition.x == _test.MPosition.x) && (x.MPosition.y == _test.MPosition.y) && (x.MPosition.z == _test.MPosition.z);
            }

        public static bool operator !=(TransformF x, TransformF _test)
            {
            return x == (_test) == false;
            }

        public static TransformF operator +(TransformF x, TransformF _add)
            {
            return new TransformF(x.MPosition.x + _add.MPosition.x, x.MPosition.y + _add.MPosition.y, x.MPosition.z + _add.MPosition.z);
            }

        public static TransformF operator -(TransformF x, TransformF _rSub)
            {
            return new TransformF(x.MPosition.x - _rSub.MPosition.x, x.MPosition.y - _rSub.MPosition.y, x.MPosition.z - _rSub.MPosition.z);
            }

        public static TransformF operator *(TransformF x, float _mul)
            {
            return new TransformF(x.MPosition.x*_mul, x.MPosition.y*_mul, x.MPosition.z*_mul);
            }

        public static TransformF operator /(TransformF x, float _div)
            {
            if (_div == 0.0)
                throw new Exception("Error, Divide by Zero");
            float inv = 1.0f/_div;
            return new TransformF(x.MPosition.x*inv, x.MPosition.y*inv, x.MPosition.z*inv);
            }

        public static TransformF operator -(TransformF x)
            {
            return new TransformF(-x.MPosition.x, -x.MPosition.y, -x.MPosition.z);
            }

        public TransformF copy()
            {
            TransformF t = new TransformF(mPosition.x, mPosition.y, mPosition.z, mOrientation.x, mOrientation.y, mOrientation.z, MAngle);

            return t;
            }

        public TransformF normalizeSafe()
            {
            double vmag = magnitudeSafe();

            if (vmag > POINT_EPSILON)
                {
                mPosition.x *= (float) (1.0/vmag);
                mPosition.y *= (float) (1.0/vmag);
                mPosition.z *= (float) (1.0/vmag);
                }
            return this;
            }

        public double magnitudeSafe()
            {
            if (isZero())
                {
                return 0.0f;
                }
            else
                {
                return len();
                }
            }

        public bool isZero()
            {
            return ((mPosition.x*mPosition.x) <= POINT_EPSILON) && ((mPosition.y*mPosition.y) <= POINT_EPSILON) && ((mPosition.z*mPosition.z) <= POINT_EPSILON);
            }

        public double len()
            {
            return Math.Sqrt(mPosition.x*mPosition.x + mPosition.y*mPosition.y + mPosition.z*mPosition.z);
            }

        public TransformF vectorScale(float scalar)
            {
            return this*scalar;
            }

        public static double getMin(double a, double b)
            {
            return a > b ? b : a;
            }

        public static double getMax(double a, double b)
            {
            return a > b ? a : b;
            }

        public static double mDegToRad(double d)
            {
            return ((d*Math.PI)/180.0);
            }

        public static double mRadToDeg(double r)
            {
            return ((r*180.0)/Math.PI);
            }

        public static TransformF vectorScale(TransformF point, float scalar)
            {
            return point*scalar;
            }

        public static float vectorDot(TransformF p1, Point3F p2)
            {
            return (p1.mPosition.x*p2.x + p1.mPosition.y*p2.y + p1.mPosition.z*p2.z);
            }
        }
    }
