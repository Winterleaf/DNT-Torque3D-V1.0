// Copyright (C) 2012 Winterleaf Entertainment L,L,C.
// 
// THE SOFTW ARE IS PROVIDED ON AN “ AS IS” BASIS, WITHOUT W ARRANTY OF ANY KIND,
// INCLUDING WITHOUT LIMIT ATION THE W ARRANTIES OF MERCHANT ABILITY, FITNESS
// FOR A PARTICULAR PURPOSE OR NON-INFRINGEMENT . THE ENTIRE RISK AS TO THE
// QUALITY AND PERFORMANCE OF THE SOFTW ARE IS THE RESPONSIBILITY OF LICENSEE.
// SHOULD THE SOFTW ARE PROVE DEFECTIVE IN ANY RESPECT , LICENSEE AND NOT LICEN -
// SOR OR ITS SUPPLIERS OR RESELLERS ASSUMES THE ENTIRE COST OF AN Y SERVICE AND
// REPAIR. THIS DISCLAIMER OF W ARRANTY CONSTITUTES AN ESSENTIAL PART OF THIS
// AGREEMENT. NO USE OF THE SOFTW ARE IS AUTHORIZED HEREUNDER EXCEPT UNDER
// THIS DISCLAIMER.
// 
// The use of the WinterLeaf Entertainment LLC DotNetT orque (“DNT ”) and DotNetT orque
// Customizer (“DNTC”)is governed by this license agreement (“ Agreement”).
// 
// R E S T R I C T I O N S
// 
// (a) Licensee may not: (i) create any derivative works of DNT or DNTC, including but not
// limited to translations, localizations, technology add-ons, or game making software
// other than Games; (ii) reverse engineer , or otherwise attempt to derive the algorithms
// for DNT or DNTC (iii) redistribute, encumber , sell, rent, lease, sublicense, or otherwise
// transfer rights to DNT or DNTC; or (iv) remove or alter any tra demark, logo, copyright
// or other proprietary notices, legends, symbols or labels in DNT or DNTC; or (iiv) use
// the Software to develop or distribute any software that compete s with the Software
// without WinterLeaf Entertainment’s prior written consent; or (i iiv) use the Software for
// any illegal purpose.
// (b) Licensee may not distribute the DNTC in any manner.
// 
// LI C E N S E G R A N T .
// This license allows companies of any size, government entities or individuals to cre -
// ate, sell, rent, lease, or otherwise profit commercially from, games using executables
// created from the source code of DNT
// 
// **********************************************************************************
// **********************************************************************************
// **********************************************************************************
// THE SOURCE CODE GENERATED BY DNTC CAN BE  DISTRIBUTED PUBLICLY PROVIDED THAT THE 
// DISTRIBUTOR PROVIDES  THE GENERATE SOURCE CODE FREE OF CHARGE.
// 
// THIS SOURCE CODE (DNT) CAN BE DISTRIBUTED PUBLICLY PROVIDED THAT THE DISTRIBUTOR 
// PROVIDES  THE SOURCE CODE (DNT) FREE OF CHARGE.
// **********************************************************************************
// **********************************************************************************
// **********************************************************************************
// 
// Please visit http://www.winterleafentertainment.com for more information about the project and latest updates.
// 
// Last updated: 10/18/2012
// 

using System.Text;
using WinterLeaf.Classes;

namespace WinterLeaf
{
    sealed public partial class dnTorque
    {
	
/// <summary>
/// @brief Add a string to the bad word filter
/// 
///    The bad word filter is a table containing words which will not be 
///    displayed in chat windows. Instead, a designated replacement string will be displayed.  
///    There are already a number of bad words automatically defined.
/// 
///    @param badWord Exact text of the word to restrict.
///    @return True if word was successfully added, false if the word or a subset of it already exists in the table
/// 
///    @see filterString()
/// 
///    @tsexample
///       // In this game, \"Foobar\" is banned
///       %badWord = \"Foobar\";
///       // Returns true, word was successfully added
///       addBadWord(%badWord);
///       // Returns false, word has already been added
///       addBadWord(\"Foobar\");
///    @endtsexample
/// 
///    @ingroup Game)
/// 
/// </summary>

internal bool fn_addBadWord (string badWord)
{
var sbbadWord = new StringBuilder(badWord, 4096);

return  SafeNativeMethods.mwle_fn_addBadWord(sbbadWord)>=1;
}
/// <summary>
/// @brief Replaces the characters in a string with designated text
/// 
///    Uses the bad word filter to determine which characters within the string will be replaced.
/// 
///    @param baseString  The original string to filter.
///    @param replacementChars A string containing letters you wish to swap in the baseString.
///    @return The new scrambled string 
/// 
///    @see addBadWord()
///    @see containsBadWords()
/// 
///    @tsexample
///       // Create the base string, can come from anywhere
///       %baseString = \"Foobar\";
///       // Create a string of random letters
///       %replacementChars = \"knqwrtlzs\";
///       // Filter the string
///       %newString = filterString(%baseString, %replacementChars);
///       // Print the new string to console
///       echo(%newString);
///    @endtsexample
/// 
///    @ingroup Game)
/// 
/// </summary>

internal string fn_filterString (string baseString, string replacementChars)
{
var returnbuff = new StringBuilder(4096);
var sbbaseString = new StringBuilder(baseString, 4096);
var sbreplacementChars = new StringBuilder(replacementChars, 4096);

SafeNativeMethods.mwle_fn_filterString(sbbaseString, sbreplacementChars, returnbuff);
return returnbuff.ToString();

}
/// <summary>
/// @brief Checks to see if text is a bad word
/// 
///    The text is considered to be a bad word if it has been added to the bad word filter.
/// 
///    @param text Text to scan for bad words
///    @return True if the text has bad word(s), false if it is clean
/// 
///    @see addBadWord()
///    @see filterString()
/// 
///    @tsexample
///       // In this game, \"Foobar\" is banned
///       %badWord = \"Foobar\";
///       // Add a banned word to the bad word filter
///       addBadWord(%badWord);
///       // Create the base string, can come from anywhere like user chat
///       %userText = \"Foobar\";
///       // Create a string of random letters
///       %replacementChars = \"knqwrtlzs\";
///       // If the text contains a bad word, filter it before printing
///       // Otherwise print the original text
///       if(containsBadWords(%userText))
///       {
///       	// Filter the string
///       	%filteredText = filterString(%userText, %replacementChars);
///       	// Print filtered text
///       	echo(%filteredText);
///       }
///       else
///       	echo(%userText);
///    @endtsexample
/// 
///    @ingroup Game)
/// 
/// </summary>

internal bool fn_containsBadWords (string text)
{
var sbtext = new StringBuilder(text, 4096);

return  SafeNativeMethods.mwle_fn_containsBadWords(sbtext)>=1;
}
/// <summary>
/// ( strToPlayerName, const char*, 2, 2, strToPlayerName( string ) )
/// 
/// </summary>

internal string fn__strToPlayerName (string a1)
{
var returnbuff = new StringBuilder(4096);
var sba1 = new StringBuilder(a1, 4096);

SafeNativeMethods.mwle_fn__strToPlayerName(sba1, returnbuff);
return returnbuff.ToString();

}
/// <summary>
/// ( lockMouse, void, 2, 2, (bool isLocked)
///             @brief Lock or unlock the mouse to the window.
///             When true, prevents the mouse from leaving the bounds of the game window.
///             @ingroup Input)
/// 
/// </summary>

internal void fn__lockMouse (string a1)
{
var sba1 = new StringBuilder(a1, 4096);

SafeNativeMethods.mwle_fn__lockMouse(sba1);
}
/// <summary>
/// ( setNetPort, bool, 2, 3, (int port, bool bind=true)
///    @brief Set the network port for the game to use.
/// 
///    @param port The port to use.
///    @param bind True if bind() should be called on the port.
/// 
///    @returns True if the port was successfully opened.
/// 
///    This will trigger a windows firewall prompt.  
///    If you don't have firewall tunneling tech you can set this to false to avoid the prompt.
///    @ingroup Networking)
/// 
/// </summary>

internal bool fn__setNetPort (string a1, string a2)
{
var sba1 = new StringBuilder(a1, 4096);
var sba2 = new StringBuilder(a2, 4096);

return  SafeNativeMethods.mwle_fn__setNetPort(sba1, sba2)>=1;
}
/// <summary>
/// ( getVersionNumber, S32, 1, 1, Get the version of the build, as a string.
/// 				@ingroup Debugging)
/// 
/// </summary>

internal int fn__getVersionNumber ()
{

return  SafeNativeMethods.mwle_fn__getVersionNumber();
}
/// <summary>
/// ( getVersionString, const char*, 1, 1, Get the version of the build, as a string.
/// 				@ingroup Debugging)
/// 
/// </summary>

internal string fn__getVersionString ()
{
var returnbuff = new StringBuilder(4096);

SafeNativeMethods.mwle_fn__getVersionString(returnbuff);
return returnbuff.ToString();

}
/// <summary>
/// ( getEngineName, const char*, 1, 1, Get the name of the engine product that this is running from, as a string.
/// 				@ingroup Debugging)
/// 
/// </summary>

internal string fn__getEngineName ()
{
var returnbuff = new StringBuilder(4096);

SafeNativeMethods.mwle_fn__getEngineName(returnbuff);
return returnbuff.ToString();

}
/// <summary>
/// ( getBuildString, const char*, 1, 1, Get the type of build, \"Debug\" or \"Release\".
/// 				@ingroup Debugging)
/// 
/// </summary>

internal string fn__getBuildString ()
{
var returnbuff = new StringBuilder(4096);

SafeNativeMethods.mwle_fn__getBuildString(returnbuff);
return returnbuff.ToString();

}
/// <summary>
///  ),
///    @brief Send a GET command to a server to send or retrieve data.
/// 
///    @param Address HTTP web address to send this get call to. Be sure to include the port at the end (IE: \"www.garagegames.com:80\").
///    @param requirstURI Specific location on the server to access (IE: \"index.php\".)
///    @param query Optional. Actual data to transmit to the server. Can be anything required providing it sticks with limitations of the HTTP protocol. 
///    If you were building the URL manually, this is the text that follows the question mark.  For example: http://www.google.com/ig/api?<b>weather=Las-Vegas,US</b>
///    
///    @tsexample
/// 	   // Create an HTTP object for communications
/// 	   %httpObj = new HTTPObject();
/// 	   // Specify a URL to transmit to
///       %url = \"www.garagegames.com:80\";
/// 	   // Specify a URI to communicate with
/// 	   %URI = \"/index.php\";
/// 	   // Specify a query to send.
/// 	   %query = \"\";
/// 	   // Send the GET command to the server
/// 	   %httpObj.get(%url,%URI,%query);
///    @endtsexample
///    )
/// 
/// </summary>

internal void fnHTTPObject_get (string httpobject, string Address, string requirstURI, string query)
{
var sbhttpobject = new StringBuilder(httpobject, 1024);
var sbAddress = new StringBuilder(Address, 4096);
var sbrequirstURI = new StringBuilder(requirstURI, 4096);
var sbquery = new StringBuilder(query, 4096);

SafeNativeMethods.mwle_fnHTTPObject_get(sbhttpobject, sbAddress, sbrequirstURI, sbquery);
}
/// <summary>
/// @brief Send POST command to a server to send or retrieve data.
/// 
///    @param Address HTTP web address to send this get call to. Be sure to include the port at the end (IE: \"www.garagegames.com:80\").
///    @param requirstURI Specific location on the server to access (IE: \"index.php\".)
///    @param query Actual data to transmit to the server. Can be anything required providing it sticks with limitations of the HTTP protocol. 
///    @param post Submission data to be processed.
///    
///    @note The post() method is currently non-functional.
/// 
///    @tsexample
/// 	   // Create an HTTP object for communications
/// 	   %httpObj = new HTTPObject();
/// 	   // Specify a URL to transmit to
///       %url = \"www.garagegames.com:80\";
/// 	   // Specify a URI to communicate with
/// 	   %URI = \"/index.php\";
/// 	   // Specify a query to send.
/// 	   %query = \"\";
/// 	   // Specify the submission data.
/// 	   %post = \"\";
/// 	   // Send the POST command to the server
/// 	   %httpObj.POST(%url,%URI,%query,%post);
///    @endtsexample
///    )
/// 
/// </summary>

internal void fnHTTPObject_post (string httpobject, string Address, string requirstURI, string query, string post)
{
var sbhttpobject = new StringBuilder(httpobject, 1024);
var sbAddress = new StringBuilder(Address, 4096);
var sbrequirstURI = new StringBuilder(requirstURI, 4096);
var sbquery = new StringBuilder(query, 4096);
var sbpost = new StringBuilder(post, 4096);

SafeNativeMethods.mwle_fnHTTPObject_post(sbhttpobject, sbAddress, sbrequirstURI, sbquery, sbpost);
}
/// <summary>
/// (removeTaggedString, void, 2, 2, (int tag)
///    @brief Remove a tagged string from the Net String Table
/// 
///    @param tag The tag associated with the string
/// 
///    @see \\ref syntaxDataTypes under Tagged %Strings
///    @see addTaggedString()
///    @see getTaggedString()
///    @ingroup Networking)
/// 
/// </summary>

internal void fn__removeTaggedString (string a1)
{
var sba1 = new StringBuilder(a1, 4096);

SafeNativeMethods.mwle_fn__removeTaggedString(sba1);
}
/// <summary>
/// ( addTaggedString, const char*, 2, 2, (string str)
///    @brief Use the addTaggedString function to tag a new string and add it to the NetStringTable
/// 
///    @param str The string to be tagged and placed in the NetStringTable. Tagging ignores case, 
///    so tagging the same string (excluding case differences) will be ignored as a duplicated tag.
/// 
///    @return Returns a string( containing a numeric value) equivalent to the string ID for the newly tagged string
/// 
///    @see \\ref syntaxDataTypes under Tagged %Strings
///    @see removeTaggedString()
///    @see getTaggedString()
///    @ingroup Networking)
/// 
/// </summary>

internal string fn__addTaggedString (string a1)
{
var returnbuff = new StringBuilder(4096);
var sba1 = new StringBuilder(a1, 4096);

SafeNativeMethods.mwle_fn__addTaggedString(sba1, returnbuff);
return returnbuff.ToString();

}
/// <summary>
/// ( buildTaggedString, const char*, 2, 11, (string format, ...)
///    @brief Build a string using the specified tagged string format.
/// 
///    This function takes an already tagged string (passed in as a tagged string ID) and one 
///    or more additional strings.  If the tagged string contains argument tags that range from 
///    %%1 through %%9, then each additional string will be substituted into the tagged string.  
///    The final (non-tagged) combined string will be returned.  The maximum length of the tagged 
///    string plus any inserted additional strings is 511 characters.
/// 
///    @param format A tagged string ID that contains zero or more argument tags, in the form of 
///    %%1 through %%9.
///    @param ... A variable number of arguments that are insterted into the tagged string 
///    based on the argument tags within the format string.
/// 
///    @returns An ordinary string that is a combination of the original tagged string with any additional 
///    strings passed in inserted in place of each argument tag.
/// 
///    @tsexample
///       // Create a tagged string with argument tags
///       %taggedStringID = addTaggedString(\"Welcome %1 to the game!\");
/// 
///       // Some point later, combine the tagged string with some other string
///       %string = buildTaggedString(%taggedStringID, %playerName);
///       echo(%string);
/// 	@endtsexample
/// 
///    @see \\ref syntaxDataTypes under Tagged %Strings
///    @see addTaggedString()
///    @see getTaggedString()
///    @ingroup Networking)
/// 
/// </summary>

internal string fn__buildTaggedString (string a1, string a2, string a3, string a4, string a5, string a6, string a7, string a8, string a9, string a10)
{
var returnbuff = new StringBuilder(4096);
var sba1 = new StringBuilder(a1, 4096);
var sba2 = new StringBuilder(a2, 4096);
var sba3 = new StringBuilder(a3, 4096);
var sba4 = new StringBuilder(a4, 4096);
var sba5 = new StringBuilder(a5, 4096);
var sba6 = new StringBuilder(a6, 4096);
var sba7 = new StringBuilder(a7, 4096);
var sba8 = new StringBuilder(a8, 4096);
var sba9 = new StringBuilder(a9, 4096);
var sba10 = new StringBuilder(a10, 4096);

SafeNativeMethods.mwle_fn__buildTaggedString(sba1, sba2, sba3, sba4, sba5, sba6, sba7, sba8, sba9, sba10, returnbuff);
return returnbuff.ToString();

}
/// <summary>
/// ( queryAllServers, void, 12, 12, queryAllServers(...); )
/// 
/// </summary>

internal void fn__queryAllServers (string a1, string a2, string a3, string a4, string a5, string a6, string a7, string a8, string a9, string a10, string a11)
{
var sba1 = new StringBuilder(a1, 4096);
var sba2 = new StringBuilder(a2, 4096);
var sba3 = new StringBuilder(a3, 4096);
var sba4 = new StringBuilder(a4, 4096);
var sba5 = new StringBuilder(a5, 4096);
var sba6 = new StringBuilder(a6, 4096);
var sba7 = new StringBuilder(a7, 4096);
var sba8 = new StringBuilder(a8, 4096);
var sba9 = new StringBuilder(a9, 4096);
var sba10 = new StringBuilder(a10, 4096);
var sba11 = new StringBuilder(a11, 4096);

SafeNativeMethods.mwle_fn__queryAllServers(sba1, sba2, sba3, sba4, sba5, sba6, sba7, sba8, sba9, sba10, sba11);
}
/// <summary>
/// ( queryLanServers, void, 12, 12, queryLanServers(...); )
/// 
/// </summary>

internal void fn__queryLanServers (string a1, string a2, string a3, string a4, string a5, string a6, string a7, string a8, string a9, string a10, string a11)
{
var sba1 = new StringBuilder(a1, 4096);
var sba2 = new StringBuilder(a2, 4096);
var sba3 = new StringBuilder(a3, 4096);
var sba4 = new StringBuilder(a4, 4096);
var sba5 = new StringBuilder(a5, 4096);
var sba6 = new StringBuilder(a6, 4096);
var sba7 = new StringBuilder(a7, 4096);
var sba8 = new StringBuilder(a8, 4096);
var sba9 = new StringBuilder(a9, 4096);
var sba10 = new StringBuilder(a10, 4096);
var sba11 = new StringBuilder(a11, 4096);

SafeNativeMethods.mwle_fn__queryLanServers(sba1, sba2, sba3, sba4, sba5, sba6, sba7, sba8, sba9, sba10, sba11);
}
/// <summary>
/// ( queryMasterServer, void, 11, 11, queryMasterServer(...); )
/// 
/// </summary>

internal void fn__queryMasterServer (string a1, string a2, string a3, string a4, string a5, string a6, string a7, string a8, string a9, string a10)
{
var sba1 = new StringBuilder(a1, 4096);
var sba2 = new StringBuilder(a2, 4096);
var sba3 = new StringBuilder(a3, 4096);
var sba4 = new StringBuilder(a4, 4096);
var sba5 = new StringBuilder(a5, 4096);
var sba6 = new StringBuilder(a6, 4096);
var sba7 = new StringBuilder(a7, 4096);
var sba8 = new StringBuilder(a8, 4096);
var sba9 = new StringBuilder(a9, 4096);
var sba10 = new StringBuilder(a10, 4096);

SafeNativeMethods.mwle_fn__queryMasterServer(sba1, sba2, sba3, sba4, sba5, sba6, sba7, sba8, sba9, sba10);
}
/// <summary>
/// ( querySingleServer, void, 3, 3, querySingleServer(address, flags); )
/// 
/// </summary>

internal void fn__querySingleServer (string a1, string a2)
{
var sba1 = new StringBuilder(a1, 4096);
var sba2 = new StringBuilder(a2, 4096);

SafeNativeMethods.mwle_fn__querySingleServer(sba1, sba2);
}
/// <summary>
/// ( setServerInfo, bool, 2, 2, setServerInfo(index); )
/// 
/// </summary>

internal bool fn__setServerInfo (string a1)
{
var sba1 = new StringBuilder(a1, 4096);

return  SafeNativeMethods.mwle_fn__setServerInfo(sba1)>=1;
}
/// <summary>
/// @brief Transmits the data string to the connected computer.
/// 
///    This method is used to send text data to the connected computer regardless if we initiated the 
///    connection using connect(), or listening to a port using listen().
/// 
///    @param data The data string to send.
/// 
///    @tsexample
///       // Set the command data
///       %data = \"GET \" @ $RSSFeed::serverURL @ \" HTTP/1.0\\r\\";
///       %data = %data @ \"Host: \" @ $RSSFeed::serverName @ \"\\r\\";
///       %data = %data @ \"User-Agent: \" @ $RSSFeed::userAgent @ \"\\r\\\r\\"
/// 
///       // Send the command to the connected server.
///       %thisTCPObj.send(%data);
///    @endtsexample)
/// 
/// </summary>

internal void fnTCPObject_send (string tcpobject, string data)
{
var sbtcpobject = new StringBuilder(tcpobject, 1024);
var sbdata = new StringBuilder(data, 4096);

SafeNativeMethods.mwle_fnTCPObject_send(sbtcpobject, sbdata);
}
/// <summary>
/// @brief Start listening on the specified port for connections.
/// 
///    This method starts a listener which looks for incoming TCP connections to a port.  
///    You must overload the onConnectionRequest callback to create a new TCPObject to 
///    read, write, or reject the new connection.
/// 
///    @param port Port for this TCPObject to start listening for connections on.
/// 
///    @tsexample
/// 
///     // Create a listener on port 8080.
///     new TCPObject( TCPListener );
///     TCPListener.listen( 8080 );
/// 
///     function TCPListener::onConnectionRequest( %this, %address, %id )
///     {
///        // Create a new object to manage the connection.
///        new TCPObject( TCPClient, %id );
///     }
/// 
///     function TCPClient::onLine( %this, %line )
///     {
///        // Print the line of text from client.
///        echo( %line );
///     }
/// 
///    @endtsexample)
/// 
/// </summary>

internal void fnTCPObject_listen (string tcpobject, int port)
{
var sbtcpobject = new StringBuilder(tcpobject, 1024);

SafeNativeMethods.mwle_fnTCPObject_listen(sbtcpobject, port);
}
/// <summary>
/// @brief Connect to the given address.
/// 
///    @param address Server address (including port) to connect to.
/// 
///    @tsexample
///       // Set the address.
///       %address = \"www.garagegames.com:80\";
/// 
///       // Inform this TCPObject to connect to the specified address.
///       %thisTCPObj.connect(%address);
///    @endtsexample)
/// 
/// </summary>

internal void fnTCPObject_connect (string tcpobject, string address)
{
var sbtcpobject = new StringBuilder(tcpobject, 1024);
var sbaddress = new StringBuilder(address, 4096);

SafeNativeMethods.mwle_fnTCPObject_connect(sbtcpobject, sbaddress);
}
/// <summary>
/// @brief Disconnect from whatever this TCPObject is currently connected to, if anything.
/// 
///    @tsexample
///       // Inform this TCPObject to disconnect from anything it is currently connected to.
///       %thisTCPObj.disconnect();
///    @endtsexample)
/// 
/// </summary>

internal void fnTCPObject_disconnect (string tcpobject)
{
var sbtcpobject = new StringBuilder(tcpobject, 1024);

SafeNativeMethods.mwle_fnTCPObject_disconnect(sbtcpobject);
}
/// <summary>
/// (testJavaScriptBridge, const char *, 4, 4, testBridge(arg1, arg2, arg3))
/// 
/// </summary>

internal string fn__testJavaScriptBridge (string a1, string a2, string a3)
{
var returnbuff = new StringBuilder(4096);
var sba1 = new StringBuilder(a1, 4096);
var sba2 = new StringBuilder(a2, 4096);
var sba3 = new StringBuilder(a3, 4096);

SafeNativeMethods.mwle_fn__testJavaScriptBridge(sba1, sba2, sba3, returnbuff);
return returnbuff.ToString();

}
/// <summary>
/// (TestFunction2Args, const char *, 3, 3, testFunction(arg1, arg2))
/// 
/// </summary>

internal string fn__TestFunction2Args (string a1, string a2)
{
var returnbuff = new StringBuilder(4096);
var sba1 = new StringBuilder(a1, 4096);
var sba2 = new StringBuilder(a2, 4096);

SafeNativeMethods.mwle_fn__TestFunction2Args(sba1, sba2, returnbuff);
return returnbuff.ToString();

}
/// <summary>
/// ( DynamicConsoleMethodComponent, callMethod, void, 3, 64 , (methodName, argi) Calls script defined method
/// 			  @param methodName The method's name as a string
/// 			  @param argi Any arguments to pass to the method
/// 			  @return No return value
/// 			  @note %obj.callMethod( %methodName, %arg1, %arg2, ... );)
/// 
/// 
/// </summary>

internal void fnDynamicConsoleMethodComponent_callMethod (string dynamicconsolemethodcomponent, string a2, string a3, string a4, string a5, string a6, string a7, string a8, string a9, string a10, string a11, string a12, string a13, string a14, string a15, string a16, string a17, string a18, string a19, string a20, string a21, string a22, string a23, string a24, string a25, string a26, string a27, string a28, string a29, string a30, string a31, string a32, string a33, string a34, string a35, string a36, string a37, string a38, string a39, string a40, string a41, string a42, string a43, string a44, string a45, string a46, string a47, string a48, string a49, string a50, string a51, string a52, string a53, string a54, string a55, string a56, string a57, string a58, string a59, string a60, string a61, string a62, string a63)
{
var sbdynamicconsolemethodcomponent = new StringBuilder(dynamicconsolemethodcomponent, 1024);
var sba2 = new StringBuilder(a2, 4096);
var sba3 = new StringBuilder(a3, 4096);
var sba4 = new StringBuilder(a4, 4096);
var sba5 = new StringBuilder(a5, 4096);
var sba6 = new StringBuilder(a6, 4096);
var sba7 = new StringBuilder(a7, 4096);
var sba8 = new StringBuilder(a8, 4096);
var sba9 = new StringBuilder(a9, 4096);
var sba10 = new StringBuilder(a10, 4096);
var sba11 = new StringBuilder(a11, 4096);
var sba12 = new StringBuilder(a12, 4096);
var sba13 = new StringBuilder(a13, 4096);
var sba14 = new StringBuilder(a14, 4096);
var sba15 = new StringBuilder(a15, 4096);
var sba16 = new StringBuilder(a16, 4096);
var sba17 = new StringBuilder(a17, 4096);
var sba18 = new StringBuilder(a18, 4096);
var sba19 = new StringBuilder(a19, 4096);
var sba20 = new StringBuilder(a20, 4096);
var sba21 = new StringBuilder(a21, 4096);
var sba22 = new StringBuilder(a22, 4096);
var sba23 = new StringBuilder(a23, 4096);
var sba24 = new StringBuilder(a24, 4096);
var sba25 = new StringBuilder(a25, 4096);
var sba26 = new StringBuilder(a26, 4096);
var sba27 = new StringBuilder(a27, 4096);
var sba28 = new StringBuilder(a28, 4096);
var sba29 = new StringBuilder(a29, 4096);
var sba30 = new StringBuilder(a30, 4096);
var sba31 = new StringBuilder(a31, 4096);
var sba32 = new StringBuilder(a32, 4096);
var sba33 = new StringBuilder(a33, 4096);
var sba34 = new StringBuilder(a34, 4096);
var sba35 = new StringBuilder(a35, 4096);
var sba36 = new StringBuilder(a36, 4096);
var sba37 = new StringBuilder(a37, 4096);
var sba38 = new StringBuilder(a38, 4096);
var sba39 = new StringBuilder(a39, 4096);
var sba40 = new StringBuilder(a40, 4096);
var sba41 = new StringBuilder(a41, 4096);
var sba42 = new StringBuilder(a42, 4096);
var sba43 = new StringBuilder(a43, 4096);
var sba44 = new StringBuilder(a44, 4096);
var sba45 = new StringBuilder(a45, 4096);
var sba46 = new StringBuilder(a46, 4096);
var sba47 = new StringBuilder(a47, 4096);
var sba48 = new StringBuilder(a48, 4096);
var sba49 = new StringBuilder(a49, 4096);
var sba50 = new StringBuilder(a50, 4096);
var sba51 = new StringBuilder(a51, 4096);
var sba52 = new StringBuilder(a52, 4096);
var sba53 = new StringBuilder(a53, 4096);
var sba54 = new StringBuilder(a54, 4096);
var sba55 = new StringBuilder(a55, 4096);
var sba56 = new StringBuilder(a56, 4096);
var sba57 = new StringBuilder(a57, 4096);
var sba58 = new StringBuilder(a58, 4096);
var sba59 = new StringBuilder(a59, 4096);
var sba60 = new StringBuilder(a60, 4096);
var sba61 = new StringBuilder(a61, 4096);
var sba62 = new StringBuilder(a62, 4096);
var sba63 = new StringBuilder(a63, 4096);

SafeNativeMethods.mwle_fnDynamicConsoleMethodComponent_callMethod(sbdynamicconsolemethodcomponent, sba2, sba3, sba4, sba5, sba6, sba7, sba8, sba9, sba10, sba11, sba12, sba13, sba14, sba15, sba16, sba17, sba18, sba19, sba20, sba21, sba22, sba23, sba24, sba25, sba26, sba27, sba28, sba29, sba30, sba31, sba32, sba33, sba34, sba35, sba36, sba37, sba38, sba39, sba40, sba41, sba42, sba43, sba44, sba45, sba46, sba47, sba48, sba49, sba50, sba51, sba52, sba53, sba54, sba55, sba56, sba57, sba58, sba59, sba60, sba61, sba62, sba63);
}
/// <summary>
/// ( SimComponent, addComponents, bool, 3, 64, %obj.addComponents( %compObjName, %compObjName2, ... );
/// 			  Adds additional components to current list.
/// 			  @param Up to 62 component names
/// 			  @return Returns true on success, false otherwise.)
/// 
/// </summary>

internal bool fnSimComponent_addComponents (string simcomponent, string a2, string a3, string a4, string a5, string a6, string a7, string a8, string a9, string a10, string a11, string a12, string a13, string a14, string a15, string a16, string a17, string a18, string a19, string a20, string a21, string a22, string a23, string a24, string a25, string a26, string a27, string a28, string a29, string a30, string a31, string a32, string a33, string a34, string a35, string a36, string a37, string a38, string a39, string a40, string a41, string a42, string a43, string a44, string a45, string a46, string a47, string a48, string a49, string a50, string a51, string a52, string a53, string a54, string a55, string a56, string a57, string a58, string a59, string a60, string a61, string a62, string a63)
{
var sbsimcomponent = new StringBuilder(simcomponent, 1024);
var sba2 = new StringBuilder(a2, 4096);
var sba3 = new StringBuilder(a3, 4096);
var sba4 = new StringBuilder(a4, 4096);
var sba5 = new StringBuilder(a5, 4096);
var sba6 = new StringBuilder(a6, 4096);
var sba7 = new StringBuilder(a7, 4096);
var sba8 = new StringBuilder(a8, 4096);
var sba9 = new StringBuilder(a9, 4096);
var sba10 = new StringBuilder(a10, 4096);
var sba11 = new StringBuilder(a11, 4096);
var sba12 = new StringBuilder(a12, 4096);
var sba13 = new StringBuilder(a13, 4096);
var sba14 = new StringBuilder(a14, 4096);
var sba15 = new StringBuilder(a15, 4096);
var sba16 = new StringBuilder(a16, 4096);
var sba17 = new StringBuilder(a17, 4096);
var sba18 = new StringBuilder(a18, 4096);
var sba19 = new StringBuilder(a19, 4096);
var sba20 = new StringBuilder(a20, 4096);
var sba21 = new StringBuilder(a21, 4096);
var sba22 = new StringBuilder(a22, 4096);
var sba23 = new StringBuilder(a23, 4096);
var sba24 = new StringBuilder(a24, 4096);
var sba25 = new StringBuilder(a25, 4096);
var sba26 = new StringBuilder(a26, 4096);
var sba27 = new StringBuilder(a27, 4096);
var sba28 = new StringBuilder(a28, 4096);
var sba29 = new StringBuilder(a29, 4096);
var sba30 = new StringBuilder(a30, 4096);
var sba31 = new StringBuilder(a31, 4096);
var sba32 = new StringBuilder(a32, 4096);
var sba33 = new StringBuilder(a33, 4096);
var sba34 = new StringBuilder(a34, 4096);
var sba35 = new StringBuilder(a35, 4096);
var sba36 = new StringBuilder(a36, 4096);
var sba37 = new StringBuilder(a37, 4096);
var sba38 = new StringBuilder(a38, 4096);
var sba39 = new StringBuilder(a39, 4096);
var sba40 = new StringBuilder(a40, 4096);
var sba41 = new StringBuilder(a41, 4096);
var sba42 = new StringBuilder(a42, 4096);
var sba43 = new StringBuilder(a43, 4096);
var sba44 = new StringBuilder(a44, 4096);
var sba45 = new StringBuilder(a45, 4096);
var sba46 = new StringBuilder(a46, 4096);
var sba47 = new StringBuilder(a47, 4096);
var sba48 = new StringBuilder(a48, 4096);
var sba49 = new StringBuilder(a49, 4096);
var sba50 = new StringBuilder(a50, 4096);
var sba51 = new StringBuilder(a51, 4096);
var sba52 = new StringBuilder(a52, 4096);
var sba53 = new StringBuilder(a53, 4096);
var sba54 = new StringBuilder(a54, 4096);
var sba55 = new StringBuilder(a55, 4096);
var sba56 = new StringBuilder(a56, 4096);
var sba57 = new StringBuilder(a57, 4096);
var sba58 = new StringBuilder(a58, 4096);
var sba59 = new StringBuilder(a59, 4096);
var sba60 = new StringBuilder(a60, 4096);
var sba61 = new StringBuilder(a61, 4096);
var sba62 = new StringBuilder(a62, 4096);
var sba63 = new StringBuilder(a63, 4096);

return  SafeNativeMethods.mwle_fnSimComponent_addComponents(sbsimcomponent, sba2, sba3, sba4, sba5, sba6, sba7, sba8, sba9, sba10, sba11, sba12, sba13, sba14, sba15, sba16, sba17, sba18, sba19, sba20, sba21, sba22, sba23, sba24, sba25, sba26, sba27, sba28, sba29, sba30, sba31, sba32, sba33, sba34, sba35, sba36, sba37, sba38, sba39, sba40, sba41, sba42, sba43, sba44, sba45, sba46, sba47, sba48, sba49, sba50, sba51, sba52, sba53, sba54, sba55, sba56, sba57, sba58, sba59, sba60, sba61, sba62, sba63)>=1;
}
/// <summary>
/// ( SimComponent, removeComponents, bool, 3, 64, %obj.removeComponents( %compObjName, %compObjName2, ... );
/// 			  Removes components by name from current list.
/// 			  @param objNamex Up to 62 component names
/// 			  @return Returns true on success, false otherwise.)
/// 
/// </summary>

internal bool fnSimComponent_removeComponents (string simcomponent, string a2, string a3, string a4, string a5, string a6, string a7, string a8, string a9, string a10, string a11, string a12, string a13, string a14, string a15, string a16, string a17, string a18, string a19, string a20, string a21, string a22, string a23, string a24, string a25, string a26, string a27, string a28, string a29, string a30, string a31, string a32, string a33, string a34, string a35, string a36, string a37, string a38, string a39, string a40, string a41, string a42, string a43, string a44, string a45, string a46, string a47, string a48, string a49, string a50, string a51, string a52, string a53, string a54, string a55, string a56, string a57, string a58, string a59, string a60, string a61, string a62, string a63)
{
var sbsimcomponent = new StringBuilder(simcomponent, 1024);
var sba2 = new StringBuilder(a2, 4096);
var sba3 = new StringBuilder(a3, 4096);
var sba4 = new StringBuilder(a4, 4096);
var sba5 = new StringBuilder(a5, 4096);
var sba6 = new StringBuilder(a6, 4096);
var sba7 = new StringBuilder(a7, 4096);
var sba8 = new StringBuilder(a8, 4096);
var sba9 = new StringBuilder(a9, 4096);
var sba10 = new StringBuilder(a10, 4096);
var sba11 = new StringBuilder(a11, 4096);
var sba12 = new StringBuilder(a12, 4096);
var sba13 = new StringBuilder(a13, 4096);
var sba14 = new StringBuilder(a14, 4096);
var sba15 = new StringBuilder(a15, 4096);
var sba16 = new StringBuilder(a16, 4096);
var sba17 = new StringBuilder(a17, 4096);
var sba18 = new StringBuilder(a18, 4096);
var sba19 = new StringBuilder(a19, 4096);
var sba20 = new StringBuilder(a20, 4096);
var sba21 = new StringBuilder(a21, 4096);
var sba22 = new StringBuilder(a22, 4096);
var sba23 = new StringBuilder(a23, 4096);
var sba24 = new StringBuilder(a24, 4096);
var sba25 = new StringBuilder(a25, 4096);
var sba26 = new StringBuilder(a26, 4096);
var sba27 = new StringBuilder(a27, 4096);
var sba28 = new StringBuilder(a28, 4096);
var sba29 = new StringBuilder(a29, 4096);
var sba30 = new StringBuilder(a30, 4096);
var sba31 = new StringBuilder(a31, 4096);
var sba32 = new StringBuilder(a32, 4096);
var sba33 = new StringBuilder(a33, 4096);
var sba34 = new StringBuilder(a34, 4096);
var sba35 = new StringBuilder(a35, 4096);
var sba36 = new StringBuilder(a36, 4096);
var sba37 = new StringBuilder(a37, 4096);
var sba38 = new StringBuilder(a38, 4096);
var sba39 = new StringBuilder(a39, 4096);
var sba40 = new StringBuilder(a40, 4096);
var sba41 = new StringBuilder(a41, 4096);
var sba42 = new StringBuilder(a42, 4096);
var sba43 = new StringBuilder(a43, 4096);
var sba44 = new StringBuilder(a44, 4096);
var sba45 = new StringBuilder(a45, 4096);
var sba46 = new StringBuilder(a46, 4096);
var sba47 = new StringBuilder(a47, 4096);
var sba48 = new StringBuilder(a48, 4096);
var sba49 = new StringBuilder(a49, 4096);
var sba50 = new StringBuilder(a50, 4096);
var sba51 = new StringBuilder(a51, 4096);
var sba52 = new StringBuilder(a52, 4096);
var sba53 = new StringBuilder(a53, 4096);
var sba54 = new StringBuilder(a54, 4096);
var sba55 = new StringBuilder(a55, 4096);
var sba56 = new StringBuilder(a56, 4096);
var sba57 = new StringBuilder(a57, 4096);
var sba58 = new StringBuilder(a58, 4096);
var sba59 = new StringBuilder(a59, 4096);
var sba60 = new StringBuilder(a60, 4096);
var sba61 = new StringBuilder(a61, 4096);
var sba62 = new StringBuilder(a62, 4096);
var sba63 = new StringBuilder(a63, 4096);

return  SafeNativeMethods.mwle_fnSimComponent_removeComponents(sbsimcomponent, sba2, sba3, sba4, sba5, sba6, sba7, sba8, sba9, sba10, sba11, sba12, sba13, sba14, sba15, sba16, sba17, sba18, sba19, sba20, sba21, sba22, sba23, sba24, sba25, sba26, sba27, sba28, sba29, sba30, sba31, sba32, sba33, sba34, sba35, sba36, sba37, sba38, sba39, sba40, sba41, sba42, sba43, sba44, sba45, sba46, sba47, sba48, sba49, sba50, sba51, sba52, sba53, sba54, sba55, sba56, sba57, sba58, sba59, sba60, sba61, sba62, sba63)>=1;
}
/// <summary>
/// ( SimComponent, getComponentCount, S32, 2, 2, () Get the current component count
/// 			  @return The number of components in the list as an integer)
/// 
/// </summary>

internal int fnSimComponent_getComponentCount (string simcomponent)
{
var sbsimcomponent = new StringBuilder(simcomponent, 1024);

return  SafeNativeMethods.mwle_fnSimComponent_getComponentCount(sbsimcomponent);
}
/// <summary>
/// ( SimComponent, getComponent, S32, 3, 3, (idx) Get the component corresponding to the given index.
/// 			  @param idx An integer index value corresponding to the desired component.
/// 			  @return The id of the component at the given index as an integer)
/// 
/// </summary>

internal int fnSimComponent_getComponent (string simcomponent, string a2)
{
var sbsimcomponent = new StringBuilder(simcomponent, 1024);
var sba2 = new StringBuilder(a2, 4096);

return  SafeNativeMethods.mwle_fnSimComponent_getComponent(sbsimcomponent, sba2);
}
/// <summary>
/// (SimComponent, setEnabled, void, 3, 3, (enabled) Sets or unsets the enabled flag
/// 			  @param enabled Boolean value
/// 			  @return No return value)
/// 
/// </summary>

internal void fnSimComponent_setEnabled (string simcomponent, string a2)
{
var sbsimcomponent = new StringBuilder(simcomponent, 1024);
var sba2 = new StringBuilder(a2, 4096);

SafeNativeMethods.mwle_fnSimComponent_setEnabled(sbsimcomponent, sba2);
}
/// <summary>
/// (SimComponent, isEnabled, bool, 2, 2, () Check whether SimComponent is currently enabled
/// 			  @return true if enabled and false if not)
/// 
/// </summary>

internal bool fnSimComponent_isEnabled (string simcomponent)
{
var sbsimcomponent = new StringBuilder(simcomponent, 1024);

return  SafeNativeMethods.mwle_fnSimComponent_isEnabled(sbsimcomponent)>=1;
}
/// <summary>
/// (SimComponent, setIsTemplate, void, 3, 3, (template) Sets or unsets the template flag
/// 			  @param template Boolean value
/// 			  @return No return value)
/// 
/// </summary>

internal void fnSimComponent_setIsTemplate (string simcomponent, string a2)
{
var sbsimcomponent = new StringBuilder(simcomponent, 1024);
var sba2 = new StringBuilder(a2, 4096);

SafeNativeMethods.mwle_fnSimComponent_setIsTemplate(sbsimcomponent, sba2);
}
/// <summary>
/// (SimComponent, getIsTemplate, bool, 2, 2, () Check whether SimComponent is currently a template
/// 			  @return true if is a template and false if not)
/// 
/// </summary>

internal bool fnSimComponent_getIsTemplate (string simcomponent)
{
var sbsimcomponent = new StringBuilder(simcomponent, 1024);

return  SafeNativeMethods.mwle_fnSimComponent_getIsTemplate(sbsimcomponent)>=1;
}
/// <summary>
/// Search the array from the current position for the element 
///    @param value Array value to search for
///    @return Index of the first element found, or -1 if none )
/// 
/// </summary>

internal int fnArrayObject_getIndexFromValue (string arrayobject, string value)
{
var sbarrayobject = new StringBuilder(arrayobject, 1024);
var sbvalue = new StringBuilder(value, 4096);

return  SafeNativeMethods.mwle_fnArrayObject_getIndexFromValue(sbarrayobject, sbvalue);
}
/// <summary>
/// Search the array from the current position for the key 
///    @param value Array key to search for
///    @return Index of the first element found, or -1 if none )
/// 
/// </summary>

internal int fnArrayObject_getIndexFromKey (string arrayobject, string key)
{
var sbarrayobject = new StringBuilder(arrayobject, 1024);
var sbkey = new StringBuilder(key, 4096);

return  SafeNativeMethods.mwle_fnArrayObject_getIndexFromKey(sbarrayobject, sbkey);
}
/// <summary>
/// Get the value of the array element at the submitted index.
///    @param index 0-based index of the array element to get
///    @return The value of the array element at the specified index, 
///    or \"\" if the index is out of range )
/// 
/// </summary>

internal string fnArrayObject_getValue (string arrayobject, int index)
{
var returnbuff = new StringBuilder(4096);
var sbarrayobject = new StringBuilder(arrayobject, 1024);

SafeNativeMethods.mwle_fnArrayObject_getValue(sbarrayobject, index, returnbuff);
return returnbuff.ToString();

}
/// <summary>
/// Get the key of the array element at the submitted index.
///    @param index 0-based index of the array element to get
///    @return The key associated with the array element at the 
///    specified index, or \"\" if the index is out of range )
/// 
/// </summary>

internal string fnArrayObject_getKey (string arrayobject, int index)
{
var returnbuff = new StringBuilder(4096);
var sbarrayobject = new StringBuilder(arrayobject, 1024);

SafeNativeMethods.mwle_fnArrayObject_getKey(sbarrayobject, index, returnbuff);
return returnbuff.ToString();

}
/// <summary>
/// Set the key at the given index.
///    @param key New key value
///    @param index 0-based index of the array element to update )
/// 
/// </summary>

internal void fnArrayObject_setKey (string arrayobject, string key, int index)
{
var sbarrayobject = new StringBuilder(arrayobject, 1024);
var sbkey = new StringBuilder(key, 4096);

SafeNativeMethods.mwle_fnArrayObject_setKey(sbarrayobject, sbkey, index);
}
/// <summary>
/// Set the value at the given index.
///    @param value New array element value
///    @param index 0-based index of the array element to update )
/// 
/// </summary>

internal void fnArrayObject_setValue (string arrayobject, string value, int index)
{
var sbarrayobject = new StringBuilder(arrayobject, 1024);
var sbvalue = new StringBuilder(value, 4096);

SafeNativeMethods.mwle_fnArrayObject_setValue(sbarrayobject, sbvalue, index);
}
/// <summary>
/// Get the number of elements in the array. )
/// 
/// </summary>

internal int fnArrayObject_count (string arrayobject)
{
var sbarrayobject = new StringBuilder(arrayobject, 1024);

return  SafeNativeMethods.mwle_fnArrayObject_count(sbarrayobject);
}
/// <summary>
/// Get the number of times a particular value is found in the array.
///    @param value Array element value to count )
/// 
/// </summary>

internal int fnArrayObject_countValue (string arrayobject, string value)
{
var sbarrayobject = new StringBuilder(arrayobject, 1024);
var sbvalue = new StringBuilder(value, 4096);

return  SafeNativeMethods.mwle_fnArrayObject_countValue(sbarrayobject, sbvalue);
}
/// <summary>
/// Get the number of times a particular key is found in the array.
///    @param key Key value to count )
/// 
/// </summary>

internal int fnArrayObject_countKey (string arrayobject, string key)
{
var sbarrayobject = new StringBuilder(arrayobject, 1024);
var sbkey = new StringBuilder(key, 4096);

return  SafeNativeMethods.mwle_fnArrayObject_countKey(sbarrayobject, sbkey);
}
/// <summary>
///  ),
///    Adds a new element to the end of an array (same as push_back()).
///    @param key Key for the new element
///    @param value Value for the new element )
/// 
/// </summary>

internal void fnArrayObject_add (string arrayobject, string key, string value)
{
var sbarrayobject = new StringBuilder(arrayobject, 1024);
var sbkey = new StringBuilder(key, 4096);
var sbvalue = new StringBuilder(value, 4096);

SafeNativeMethods.mwle_fnArrayObject_add(sbarrayobject, sbkey, sbvalue);
}
/// <summary>
///  ),
///    Adds a new element to the end of an array.
///    @param key Key for the new element
///    @param value Value for the new element )
/// 
/// </summary>

internal void fnArrayObject_push_back (string arrayobject, string key, string value)
{
var sbarrayobject = new StringBuilder(arrayobject, 1024);
var sbkey = new StringBuilder(key, 4096);
var sbvalue = new StringBuilder(value, 4096);

SafeNativeMethods.mwle_fnArrayObject_push_back(sbarrayobject, sbkey, sbvalue);
}
/// <summary>
///  ),
///    Adds a new element to the front of an array )
/// 
/// </summary>

internal void fnArrayObject_push_front (string arrayobject, string key, string value)
{
var sbarrayobject = new StringBuilder(arrayobject, 1024);
var sbkey = new StringBuilder(key, 4096);
var sbvalue = new StringBuilder(value, 4096);

SafeNativeMethods.mwle_fnArrayObject_push_front(sbarrayobject, sbkey, sbvalue);
}
/// <summary>
/// Adds a new element to a specified position in the array.
///    - @a index = 0 will insert an element at the start of the array (same as push_front())
///    - @a index = %array.count() will insert an element at the end of the array (same as push_back())
///    @param key Key for the new element
///    @param value Value for the new element
///    @param index 0-based index at which to insert the new element )
/// 
/// </summary>

internal void fnArrayObject_insert (string arrayobject, string key, string value, int index)
{
var sbarrayobject = new StringBuilder(arrayobject, 1024);
var sbkey = new StringBuilder(key, 4096);
var sbvalue = new StringBuilder(value, 4096);

SafeNativeMethods.mwle_fnArrayObject_insert(sbarrayobject, sbkey, sbvalue, index);
}
/// <summary>
/// Removes the last element from the array )
/// 
/// </summary>

internal void fnArrayObject_pop_back (string arrayobject)
{
var sbarrayobject = new StringBuilder(arrayobject, 1024);

SafeNativeMethods.mwle_fnArrayObject_pop_back(sbarrayobject);
}
/// <summary>
/// Removes the first element from the array )
/// 
/// </summary>

internal void fnArrayObject_pop_front (string arrayobject)
{
var sbarrayobject = new StringBuilder(arrayobject, 1024);

SafeNativeMethods.mwle_fnArrayObject_pop_front(sbarrayobject);
}
/// <summary>
/// Removes an element at a specific position from the array.
///    @param index 0-based index of the element to remove )
/// 
/// </summary>

internal void fnArrayObject_erase (string arrayobject, int index)
{
var sbarrayobject = new StringBuilder(arrayobject, 1024);

SafeNativeMethods.mwle_fnArrayObject_erase(sbarrayobject, index);
}
/// <summary>
/// Emptys all elements from an array )
/// 
/// </summary>

internal void fnArrayObject_empty (string arrayobject)
{
var sbarrayobject = new StringBuilder(arrayobject, 1024);

SafeNativeMethods.mwle_fnArrayObject_empty(sbarrayobject);
}
/// <summary>
/// Removes any elements that have duplicated values (leaving the first instance) )
/// 
/// </summary>

internal void fnArrayObject_uniqueValue (string arrayobject)
{
var sbarrayobject = new StringBuilder(arrayobject, 1024);

SafeNativeMethods.mwle_fnArrayObject_uniqueValue(sbarrayobject);
}
/// <summary>
/// Removes any elements that have duplicated keys (leaving the first instance) )
/// 
/// </summary>

internal void fnArrayObject_uniqueKey (string arrayobject)
{
var sbarrayobject = new StringBuilder(arrayobject, 1024);

SafeNativeMethods.mwle_fnArrayObject_uniqueKey(sbarrayobject);
}
/// <summary>
/// Alters array into an exact duplicate of the target array.
///    @param target ArrayObject to duplicate )
/// 
/// </summary>

internal bool fnArrayObject_duplicate (string arrayobject, string target)
{
var sbarrayobject = new StringBuilder(arrayobject, 1024);
var sbtarget = new StringBuilder(target, 1024);

return  SafeNativeMethods.mwle_fnArrayObject_duplicate(sbarrayobject, sbtarget)>=1;
}
/// <summary>
/// Removes elements with matching keys from array.
///    @param target ArrayObject containing keys to remove from this array )
/// 
/// </summary>

internal bool fnArrayObject_crop (string arrayobject, string target)
{
var sbarrayobject = new StringBuilder(arrayobject, 1024);
var sbtarget = new StringBuilder(target, 1024);

return  SafeNativeMethods.mwle_fnArrayObject_crop(sbarrayobject, sbtarget)>=1;
}
/// <summary>
/// Appends the target array to the array object.
///    @param target ArrayObject to append to the end of this array )
/// 
/// </summary>

internal bool fnArrayObject_append (string arrayobject, string target)
{
var sbarrayobject = new StringBuilder(arrayobject, 1024);
var sbtarget = new StringBuilder(target, 1024);

return  SafeNativeMethods.mwle_fnArrayObject_append(sbarrayobject, sbtarget)>=1;
}
/// <summary>
/// Alpha sorts the array by value
///    @param ascending [optional] True for ascending sort, false for descending sort )
/// 
/// </summary>

internal void fnArrayObject_sort (string arrayobject, bool ascending)
{
var sbarrayobject = new StringBuilder(arrayobject, 1024);

SafeNativeMethods.mwle_fnArrayObject_sort(sbarrayobject, ascending);
}
/// <summary>
/// Alpha sorts the array by value in ascending order )
/// 
/// </summary>

internal void fnArrayObject_sorta (string arrayobject)
{
var sbarrayobject = new StringBuilder(arrayobject, 1024);

SafeNativeMethods.mwle_fnArrayObject_sorta(sbarrayobject);
}
/// <summary>
/// Alpha sorts the array by value in descending order )
/// 
/// </summary>

internal void fnArrayObject_sortd (string arrayobject)
{
var sbarrayobject = new StringBuilder(arrayobject, 1024);

SafeNativeMethods.mwle_fnArrayObject_sortd(sbarrayobject);
}
/// <summary>
/// Alpha sorts the array by key
///    @param ascending [optional] True for ascending sort, false for descending sort )
/// 
/// </summary>

internal void fnArrayObject_sortk (string arrayobject, bool ascending)
{
var sbarrayobject = new StringBuilder(arrayobject, 1024);

SafeNativeMethods.mwle_fnArrayObject_sortk(sbarrayobject, ascending);
}
/// <summary>
/// Alpha sorts the array by key in ascending order )
/// 
/// </summary>

internal void fnArrayObject_sortka (string arrayobject)
{
var sbarrayobject = new StringBuilder(arrayobject, 1024);

SafeNativeMethods.mwle_fnArrayObject_sortka(sbarrayobject);
}
/// <summary>
/// Alpha sorts the array by key in descending order )
/// 
/// </summary>

internal void fnArrayObject_sortkd (string arrayobject)
{
var sbarrayobject = new StringBuilder(arrayobject, 1024);

SafeNativeMethods.mwle_fnArrayObject_sortkd(sbarrayobject);
}
/// <summary>
/// Numerically sorts the array by value
///    @param ascending [optional] True for ascending sort, false for descending sort )
/// 
/// </summary>

internal void fnArrayObject_sortn (string arrayobject, bool ascending)
{
var sbarrayobject = new StringBuilder(arrayobject, 1024);

SafeNativeMethods.mwle_fnArrayObject_sortn(sbarrayobject, ascending);
}
/// <summary>
/// Numerically sorts the array by value in ascending order ) 
/// 
/// </summary>

internal void fnArrayObject_sortna (string arrayobject)
{
var sbarrayobject = new StringBuilder(arrayobject, 1024);

SafeNativeMethods.mwle_fnArrayObject_sortna(sbarrayobject);
}
/// <summary>
/// Numerically sorts the array by value in descending order )
/// 
/// </summary>

internal void fnArrayObject_sortnd (string arrayobject)
{
var sbarrayobject = new StringBuilder(arrayobject, 1024);

SafeNativeMethods.mwle_fnArrayObject_sortnd(sbarrayobject);
}
/// <summary>
/// Numerically sorts the array by key
///    @param ascending [optional] True for ascending sort, false for descending sort )
/// 
/// </summary>

internal void fnArrayObject_sortnk (string arrayobject, bool ascending)
{
var sbarrayobject = new StringBuilder(arrayobject, 1024);

SafeNativeMethods.mwle_fnArrayObject_sortnk(sbarrayobject, ascending);
}
/// <summary>
/// Numerical sorts the array by key in ascending order )
/// 
/// </summary>

internal void fnArrayObject_sortnka (string arrayobject)
{
var sbarrayobject = new StringBuilder(arrayobject, 1024);

SafeNativeMethods.mwle_fnArrayObject_sortnka(sbarrayobject);
}
/// <summary>
/// Numerical sorts the array by key in descending order )
/// 
/// </summary>

internal void fnArrayObject_sortnkd (string arrayobject)
{
var sbarrayobject = new StringBuilder(arrayobject, 1024);

SafeNativeMethods.mwle_fnArrayObject_sortnkd(sbarrayobject);
}
/// <summary>
/// Sorts the array by value in ascending order using the given callback function.
///    @param functionName Name of a function that takes two arguments A and B and returns -1 if A is less, 1 if B is less, and 0 if both are equal.
///    @tsexample
///    function mySortCallback(%a, %b)
///    {
///       return strcmp( %a.name, %b.name );
///    }
///    %array.sortf( \"mySortCallback\" );
///    @endtsexample )
/// 
/// </summary>

internal void fnArrayObject_sortf (string arrayobject, string functionName)
{
var sbarrayobject = new StringBuilder(arrayobject, 1024);
var sbfunctionName = new StringBuilder(functionName, 4096);

SafeNativeMethods.mwle_fnArrayObject_sortf(sbarrayobject, sbfunctionName);
}
/// <summary>
/// Sorts the array by key in ascending order using the given callback function.
///    @param functionName Name of a function that takes two arguments A and B and returns -1 if A is less, 1 if B is less, and 0 if both are equal.
///    @see sortf )
/// 
/// </summary>

internal void fnArrayObject_sortfk (string arrayobject, string functionName)
{
var sbarrayobject = new StringBuilder(arrayobject, 1024);
var sbfunctionName = new StringBuilder(functionName, 4096);

SafeNativeMethods.mwle_fnArrayObject_sortfk(sbarrayobject, sbfunctionName);
}
/// <summary>
/// Sorts the array by value in descending order using the given callback function.
///    @param functionName Name of a function that takes two arguments A and B and returns -1 if A is less, 1 if B is less, and 0 if both are equal.
///    @see sortf )
/// 
/// </summary>

internal void fnArrayObject_sortfd (string arrayobject, string functionName)
{
var sbarrayobject = new StringBuilder(arrayobject, 1024);
var sbfunctionName = new StringBuilder(functionName, 4096);

SafeNativeMethods.mwle_fnArrayObject_sortfd(sbarrayobject, sbfunctionName);
}
/// <summary>
/// Sorts the array by key in descending order using the given callback function.
///    @param functionName Name of a function that takes two arguments A and B and returns -1 if A is less, 1 if B is less, and 0 if both are equal.
///    @see sortf )
/// 
/// </summary>

internal void fnArrayObject_sortfkd (string arrayobject, string functionName)
{
var sbarrayobject = new StringBuilder(arrayobject, 1024);
var sbfunctionName = new StringBuilder(functionName, 4096);

SafeNativeMethods.mwle_fnArrayObject_sortfkd(sbarrayobject, sbfunctionName);
}
/// <summary>
/// Moves array pointer to start of array
///    @return Returns the new array pointer )
/// 
/// </summary>

internal int fnArrayObject_moveFirst (string arrayobject)
{
var sbarrayobject = new StringBuilder(arrayobject, 1024);

return  SafeNativeMethods.mwle_fnArrayObject_moveFirst(sbarrayobject);
}
/// <summary>
/// Moves array pointer to end of array
///    @return Returns the new array pointer )
/// 
/// </summary>

internal int fnArrayObject_moveLast (string arrayobject)
{
var sbarrayobject = new StringBuilder(arrayobject, 1024);

return  SafeNativeMethods.mwle_fnArrayObject_moveLast(sbarrayobject);
}
/// <summary>
/// Moves array pointer to next position
///    @return Returns the new array pointer, or -1 if already at the end )
/// 
/// </summary>

internal int fnArrayObject_moveNext (string arrayobject)
{
var sbarrayobject = new StringBuilder(arrayobject, 1024);

return  SafeNativeMethods.mwle_fnArrayObject_moveNext(sbarrayobject);
}
/// <summary>
/// Moves array pointer to prev position
///    @return Returns the new array pointer, or -1 if already at the start )
/// 
/// </summary>

internal int fnArrayObject_movePrev (string arrayobject)
{
var sbarrayobject = new StringBuilder(arrayobject, 1024);

return  SafeNativeMethods.mwle_fnArrayObject_movePrev(sbarrayobject);
}
/// <summary>
/// Gets the current pointer index )
/// 
/// </summary>

internal int fnArrayObject_getCurrent (string arrayobject)
{
var sbarrayobject = new StringBuilder(arrayobject, 1024);

return  SafeNativeMethods.mwle_fnArrayObject_getCurrent(sbarrayobject);
}
/// <summary>
/// Sets the current pointer index.
///    @param index New 0-based pointer index )
/// 
/// </summary>

internal void fnArrayObject_setCurrent (string arrayobject, int index)
{
var sbarrayobject = new StringBuilder(arrayobject, 1024);

SafeNativeMethods.mwle_fnArrayObject_setCurrent(sbarrayobject, index);
}
/// <summary>
/// Echos the array contents to the console )
/// 
/// </summary>

internal void fnArrayObject_echo (string arrayobject)
{
var sbarrayobject = new StringBuilder(arrayobject, 1024);

SafeNativeMethods.mwle_fnArrayObject_echo(sbarrayobject);
}
/// <summary>
/// @brief Logs a message to the console.
///    @param message The message text.
///    @note By default, messages will appear white in the console.
///    @ingroup Logging)
/// 
/// </summary>

internal void fn_log (string message)
{
var sbmessage = new StringBuilder(message, 4096);

SafeNativeMethods.mwle_fn_log(sbmessage);
}
/// <summary>
/// @brief Logs an error message to the console.
///    @param message The message text.
///    @note By default, errors will appear red in the console.
///    @ingroup Logging)
/// 
/// </summary>

internal void fn_logError (string message)
{
var sbmessage = new StringBuilder(message, 4096);

SafeNativeMethods.mwle_fn_logError(sbmessage);
}
/// <summary>
/// @brief Logs a warning message to the console.
///    @param message The message text.
///    @note By default, warnings will appear turquoise in the console.
///    @ingroup Logging)
/// 
/// </summary>

internal void fn_logWarning (string message)
{
var sbmessage = new StringBuilder(message, 4096);

SafeNativeMethods.mwle_fn_logWarning(sbmessage);
}
/// <summary>
/// @brief Dumps all declared console classes to the console.
///             @param dumpScript Optional parameter specifying whether or not classes defined in script should be dumped.
///             @param dumpEngine Optional parameter specifying whether or not classes defined in the engine should be dumped.
/// 			@ingroup Logging)
/// 
/// </summary>

internal void fn_dumpConsoleClasses (bool dumpScript, bool dumpEngine)
{

SafeNativeMethods.mwle_fn_dumpConsoleClasses(dumpScript, dumpEngine);
}
/// <summary>
/// @brief Dumps all declared console functions to the console.
///             @param dumpScript Optional parameter specifying whether or not functions defined in script should be dumped.
///             @param dumpEngine Optional parameter specitying whether or not functions defined in the engine should be dumped.
/// 			@ingroup Logging)
/// 
/// </summary>

internal void fn_dumpConsoleFunctions (bool dumpScript, bool dumpEngine)
{

SafeNativeMethods.mwle_fn_dumpConsoleFunctions(dumpScript, dumpEngine);
}
/// <summary>
/// ( nextToken, const char *, 4, 4, ( string str, string token, string delimiters ) 
///    Tokenize a string using a set of delimiting characters.
///    This function first skips all leading charaters in @a str that are contained in @a delimiters. 
///    From that position, it then scans for the next character in @a str that is contained in @a delimiters and stores all characters 
///    from the starting position up to the first delimiter in a variable in the current scope called @a token.  Finally, it 
///    skips all characters in @a delimiters after the token and then returns the remaining string contents in @a str.
///    To scan out all tokens in a string, call this function repeatedly by passing the result it returns each time as the new @a str 
///    until the function returns \"\".
///    @param str A string.
///    @param token The name of the variable in which to store the current token.  This variable is set in the 
///       scope in which nextToken is called.
///    @param delimiters A string of characters.  Each character is considered a delimiter.
///    @return The remainder of @a str after the token has been parsed out or \"\" if no more tokens were found in @a str.
///    @tsexample
///       // Prints:
///       // a
///       // b
///       // c
///       %str = \"a   b c\";
///       while ( %str !$= \"\" )
///       {
///          // First time, stores \"a\" in the variable %token and sets %str to \"b c\".
///          %str = nextToken( %str, \"token\", \" \" );
///          echo( %token );
///       }
///    @endtsexample
///    @ingroup Strings )
/// 
/// </summary>

internal string fn__nextToken (string a1, string a2, string a3)
{
var returnbuff = new StringBuilder(4096);
var sba1 = new StringBuilder(a1, 4096);
var sba2 = new StringBuilder(a2, 4096);
var sba3 = new StringBuilder(a3, 4096);

SafeNativeMethods.mwle_fn__nextToken(sba1, sba2, sba3, returnbuff);
return returnbuff.ToString();

}
/// <summary>
/// (getTag, const char *, 2, 2, (string textTagString)
///    @brief Extracts the tag from a tagged string
/// 
///    Should only be used within the context of a function that receives a tagged 
///    string, and is not meant to be used outside of this context.
/// 
///    @param textTagString The tagged string to extract.
/// 
///    @returns The tag ID of the string.
/// 
///    @see \\ref syntaxDataTypes under Tagged %Strings
///    @see detag()
///    @ingroup Networking)
/// 
/// </summary>

internal string fn__getTag (string a1)
{
var returnbuff = new StringBuilder(4096);
var sba1 = new StringBuilder(a1, 4096);

SafeNativeMethods.mwle_fn__getTag(sba1, returnbuff);
return returnbuff.ToString();

}
/// <summary>
/// ( echo, void, 2, 0, ( string message... ) 
///    @brief Logs a message to the console.
///    Concatenates all given arguments to a single string and prints the string to the console. 
///    A newline is added automatically after the text.
///    @param message Any number of string arguments.
///    @ingroup Logging )
/// 
/// </summary>

internal void fn__echo (string a1, string a2, string a3, string a4, string a5, string a6, string a7, string a8, string a9, string a10, string a11, string a12, string a13, string a14, string a15, string a16, string a17, string a18, string a19)
{
var sba1 = new StringBuilder(a1, 4096);
var sba2 = new StringBuilder(a2, 4096);
var sba3 = new StringBuilder(a3, 4096);
var sba4 = new StringBuilder(a4, 4096);
var sba5 = new StringBuilder(a5, 4096);
var sba6 = new StringBuilder(a6, 4096);
var sba7 = new StringBuilder(a7, 4096);
var sba8 = new StringBuilder(a8, 4096);
var sba9 = new StringBuilder(a9, 4096);
var sba10 = new StringBuilder(a10, 4096);
var sba11 = new StringBuilder(a11, 4096);
var sba12 = new StringBuilder(a12, 4096);
var sba13 = new StringBuilder(a13, 4096);
var sba14 = new StringBuilder(a14, 4096);
var sba15 = new StringBuilder(a15, 4096);
var sba16 = new StringBuilder(a16, 4096);
var sba17 = new StringBuilder(a17, 4096);
var sba18 = new StringBuilder(a18, 4096);
var sba19 = new StringBuilder(a19, 4096);

SafeNativeMethods.mwle_fn__echo(sba1, sba2, sba3, sba4, sba5, sba6, sba7, sba8, sba9, sba10, sba11, sba12, sba13, sba14, sba15, sba16, sba17, sba18, sba19);
}
/// <summary>
/// ( warn, void, 2, 0, ( string message... ) 
///    @brief Logs a warning message to the console.
///    Concatenates all given arguments to a single string and prints the string to the console as a warning 
///    message (in the in-game console, these will show up using a turquoise font by default). 
///    A newline is added automatically after the text.
///    @param message Any number of string arguments.
///    @ingroup Logging )
/// 
/// </summary>

internal void fn__warn (string a1, string a2, string a3, string a4, string a5, string a6, string a7, string a8, string a9, string a10, string a11, string a12, string a13, string a14, string a15, string a16, string a17, string a18, string a19)
{
var sba1 = new StringBuilder(a1, 4096);
var sba2 = new StringBuilder(a2, 4096);
var sba3 = new StringBuilder(a3, 4096);
var sba4 = new StringBuilder(a4, 4096);
var sba5 = new StringBuilder(a5, 4096);
var sba6 = new StringBuilder(a6, 4096);
var sba7 = new StringBuilder(a7, 4096);
var sba8 = new StringBuilder(a8, 4096);
var sba9 = new StringBuilder(a9, 4096);
var sba10 = new StringBuilder(a10, 4096);
var sba11 = new StringBuilder(a11, 4096);
var sba12 = new StringBuilder(a12, 4096);
var sba13 = new StringBuilder(a13, 4096);
var sba14 = new StringBuilder(a14, 4096);
var sba15 = new StringBuilder(a15, 4096);
var sba16 = new StringBuilder(a16, 4096);
var sba17 = new StringBuilder(a17, 4096);
var sba18 = new StringBuilder(a18, 4096);
var sba19 = new StringBuilder(a19, 4096);

SafeNativeMethods.mwle_fn__warn(sba1, sba2, sba3, sba4, sba5, sba6, sba7, sba8, sba9, sba10, sba11, sba12, sba13, sba14, sba15, sba16, sba17, sba18, sba19);
}
/// <summary>
/// ( error, void, 2, 0, ( string message... ) 
///    @brief Logs an error message to the console.
///    Concatenates all given arguments to a single string and prints the string to the console as an error 
///    message (in the in-game console, these will show up using a red font by default). 
///    A newline is added automatically after the text.
///    @param message Any number of string arguments.
///    @ingroup Logging )
/// 
/// </summary>

internal void fn__error (string a1, string a2, string a3, string a4, string a5, string a6, string a7, string a8, string a9, string a10, string a11, string a12, string a13, string a14, string a15, string a16, string a17, string a18, string a19)
{
var sba1 = new StringBuilder(a1, 4096);
var sba2 = new StringBuilder(a2, 4096);
var sba3 = new StringBuilder(a3, 4096);
var sba4 = new StringBuilder(a4, 4096);
var sba5 = new StringBuilder(a5, 4096);
var sba6 = new StringBuilder(a6, 4096);
var sba7 = new StringBuilder(a7, 4096);
var sba8 = new StringBuilder(a8, 4096);
var sba9 = new StringBuilder(a9, 4096);
var sba10 = new StringBuilder(a10, 4096);
var sba11 = new StringBuilder(a11, 4096);
var sba12 = new StringBuilder(a12, 4096);
var sba13 = new StringBuilder(a13, 4096);
var sba14 = new StringBuilder(a14, 4096);
var sba15 = new StringBuilder(a15, 4096);
var sba16 = new StringBuilder(a16, 4096);
var sba17 = new StringBuilder(a17, 4096);
var sba18 = new StringBuilder(a18, 4096);
var sba19 = new StringBuilder(a19, 4096);

SafeNativeMethods.mwle_fn__error(sba1, sba2, sba3, sba4, sba5, sba6, sba7, sba8, sba9, sba10, sba11, sba12, sba13, sba14, sba15, sba16, sba17, sba18, sba19);
}
/// <summary>
/// ( realQuit, void, 1, 1,  )
/// 
/// </summary>

internal void fn__realQuit ()
{

SafeNativeMethods.mwle_fn__realQuit();
}
/// <summary>
/// ( call, const char *, 2, 0, ( string functionName, string args... ) 
///    Apply the given arguments to the specified global function and return the result of the call.
///    @param functionName The name of the function to call.  This function must be in the global namespace, i.e. 
///       you cannot call a function in a namespace through #call.  Use eval() for that.
///    @return The result of the function call.
///    @tsexample
///       function myFunction( %arg )
///       {
///         return ( %arg SPC \"World!\" );
///       }
///       
///       echo( call( \"myFunction\", \"Hello\" ) ); // Prints \"Hello World!\" to the console.
///    @endtsexample
///    @ingroup Scripting )
/// 
/// </summary>

internal string fn__call (string a1, string a2, string a3, string a4, string a5, string a6, string a7, string a8, string a9, string a10, string a11, string a12, string a13, string a14, string a15, string a16, string a17, string a18, string a19)
{
var returnbuff = new StringBuilder(4096);
var sba1 = new StringBuilder(a1, 4096);
var sba2 = new StringBuilder(a2, 4096);
var sba3 = new StringBuilder(a3, 4096);
var sba4 = new StringBuilder(a4, 4096);
var sba5 = new StringBuilder(a5, 4096);
var sba6 = new StringBuilder(a6, 4096);
var sba7 = new StringBuilder(a7, 4096);
var sba8 = new StringBuilder(a8, 4096);
var sba9 = new StringBuilder(a9, 4096);
var sba10 = new StringBuilder(a10, 4096);
var sba11 = new StringBuilder(a11, 4096);
var sba12 = new StringBuilder(a12, 4096);
var sba13 = new StringBuilder(a13, 4096);
var sba14 = new StringBuilder(a14, 4096);
var sba15 = new StringBuilder(a15, 4096);
var sba16 = new StringBuilder(a16, 4096);
var sba17 = new StringBuilder(a17, 4096);
var sba18 = new StringBuilder(a18, 4096);
var sba19 = new StringBuilder(a19, 4096);

SafeNativeMethods.mwle_fn__call(sba1, sba2, sba3, sba4, sba5, sba6, sba7, sba8, sba9, sba10, sba11, sba12, sba13, sba14, sba15, sba16, sba17, sba18, sba19, returnbuff);
return returnbuff.ToString();

}
/// <summary>
/// (eval, const char *, 2, 2, eval(consoleString))
/// 
/// </summary>

internal string fn__eval (string a1)
{
var returnbuff = new StringBuilder(4096);
var sba1 = new StringBuilder(a1, 4096);

SafeNativeMethods.mwle_fn__eval(sba1, returnbuff);
return returnbuff.ToString();

}
/// <summary>
/// (getVariable, const char *, 2, 2, (string varName)
///    @brief Returns the value of the named variable or an empty string if not found.
///    @varName Name of the variable to search for
///    @return Value contained by varName, \"\" if the variable does not exist
///    @ingroup Scripting)
/// 
/// </summary>

internal string fn__getVariable (string a1)
{
var returnbuff = new StringBuilder(4096);
var sba1 = new StringBuilder(a1, 4096);

SafeNativeMethods.mwle_fn__getVariable(sba1, returnbuff);
return returnbuff.ToString();

}
/// <summary>
/// (setVariable, void, 3, 3, (string varName, string value)
///    @brief Sets the value of the named variable.
///    @param varName Name of the variable to locate
///    @param value New value of the variable
///    @return True if variable was successfully found and set
///    @ingroup Scripting)
/// 
/// </summary>

internal void fn__setVariable (string a1, string a2)
{
var sba1 = new StringBuilder(a1, 4096);
var sba2 = new StringBuilder(a2, 4096);

SafeNativeMethods.mwle_fn__setVariable(sba1, sba2);
}
/// <summary>
/// (isFunction, bool, 2, 2, (string funcName)
/// 	@brief Determines if a function exists or not
/// 	@param funcName String containing name of the function
/// 	@return True if the function exists, false if not
/// 	@ingroup Scripting)
/// 
/// </summary>

internal bool fn__isFunction (string a1)
{
var sba1 = new StringBuilder(a1, 4096);

return  SafeNativeMethods.mwle_fn__isFunction(sba1)>=1;
}
/// <summary>
/// (isMethod, bool, 3, 3, (string namespace, string method)
/// 	@brief Determines if a class/namespace method exists
/// 	@param namespace Class or namespace, such as Player
/// 	@param method Name of the function to search for
/// 	@return True if the method exists, false if not
/// 	@ingroup Scripting)
/// 
/// </summary>

internal bool fn__isMethod (string a1, string a2)
{
var sba1 = new StringBuilder(a1, 4096);
var sba2 = new StringBuilder(a2, 4096);

return  SafeNativeMethods.mwle_fn__isMethod(sba1, sba2)>=1;
}
/// <summary>
/// (getMethodPackage, const char*, 3, 3, (string namespace, string method)
/// 	@brief Provides the name of the package the method belongs to
/// 	@param namespace Class or namespace, such as Player
/// 	@param method Name of the funciton to search for
/// 	@return The name of the method's package
/// 	@ingroup Packages)
/// 
/// </summary>

internal string fn__getMethodPackage (string a1, string a2)
{
var returnbuff = new StringBuilder(4096);
var sba1 = new StringBuilder(a1, 4096);
var sba2 = new StringBuilder(a2, 4096);

SafeNativeMethods.mwle_fn__getMethodPackage(sba1, sba2, returnbuff);
return returnbuff.ToString();

}
/// <summary>
/// (isDefined, bool, 2, 3, (string varName)
/// 	@brief Determines if a variable exists and contains a value
/// 	@param varName Name of the variable to search for
/// 	@return True if the variable was defined in script, false if not
///    @tsexample
///       isDefined( \"$myVar\" );
///    @endtsexample
/// 	@ingroup Scripting)
/// 
/// </summary>

internal bool fn__isDefined (string a1, string a2)
{
var sba1 = new StringBuilder(a1, 4096);
var sba2 = new StringBuilder(a2, 4096);

return  SafeNativeMethods.mwle_fn__isDefined(sba1, sba2)>=1;
}
/// <summary>
/// (getModNameFromPath, const char *, 2, 2, (string path)
/// 				@brief Attempts to extract a mod directory from path. Returns empty string on failure.
/// 				@param File path of mod folder
/// 				@note This is no longer relevant in Torque 3D (which does not use mod folders), should be deprecated
/// 				@internal)
/// 
/// </summary>

internal string fn__getModNameFromPath (string a1)
{
var returnbuff = new StringBuilder(4096);
var sba1 = new StringBuilder(a1, 4096);

SafeNativeMethods.mwle_fn__getModNameFromPath(sba1, returnbuff);
return returnbuff.ToString();

}
/// <summary>
/// (getPrefsPath, const char *, 1, 2, ([relativeFileName])
/// 				@note Appears to be useless in Torque 3D, should be deprecated
/// 				@internal)
/// 
/// </summary>

internal string fn__getPrefsPath (string a1)
{
var returnbuff = new StringBuilder(4096);
var sba1 = new StringBuilder(a1, 4096);

SafeNativeMethods.mwle_fn__getPrefsPath(sba1, returnbuff);
return returnbuff.ToString();

}
/// <summary>
/// ( execPrefs, bool, 2, 4, ( string relativeFileName, bool noCalls=false, bool journalScript=false )
/// 				@brief Manually execute a special script file that contains game or editor preferences
/// 				@param relativeFileName Name and path to file from project folder
/// 				@param noCalls Deprecated
/// 				@param journalScript Deprecated
/// 				@return True if script was successfully executed
/// 				@note Appears to be useless in Torque 3D, should be deprecated
/// 				@ingroup Scripting)
/// 
/// </summary>

internal bool fn__execPrefs (string a1, string a2, string a3)
{
var sba1 = new StringBuilder(a1, 4096);
var sba2 = new StringBuilder(a2, 4096);
var sba3 = new StringBuilder(a3, 4096);

return  SafeNativeMethods.mwle_fn__execPrefs(sba1, sba2, sba3)>=1;
}
/// <summary>
/// Return the integer character code value corresponding to the first character in the given string.
///    @param chr a (one-character) string.
///    @return the UTF32 code value for the first character in the given string.
///    @ingroup Strings )
/// 
/// </summary>

internal int fn_strasc (string chr)
{
var sbchr = new StringBuilder(chr, 4096);

return  SafeNativeMethods.mwle_fn_strasc(sbchr);
}
/// <summary>
/// Format the given value as a string using printf-style formatting.
///    @param format A printf-style format string.
///    @param value The value argument matching the given format string.
///    @tsexample
///    // Convert the given integer value to a string in a hex notation.
///    %hex = strformat( \"%x\", %value );
///    @endtsexample
///    @ingroup Strings
///    @see http://en.wikipedia.org/wiki/Printf )
/// 
/// </summary>

internal string fn_strformat (string format, string value)
{
var returnbuff = new StringBuilder(4096);
var sbformat = new StringBuilder(format, 4096);
var sbvalue = new StringBuilder(value, 4096);

SafeNativeMethods.mwle_fn_strformat(sbformat, sbvalue, returnbuff);
return returnbuff.ToString();

}
/// <summary>
/// Compares two strings using case-<b>sensitive</b> comparison.
///    @param str1 The first string.
///    @param str2 The second string.
///    @return 0 if both strings are equal, a value <0 if the first character different in str1 has a smaller character code 
///       value than the character at the same position in str2, and a value >1 otherwise.
///    @tsexample
///    if( strcmp( %var, \"foobar\" ) == 0 )
///       echo( \"%var is equal to 'foobar'\" );
///    @endtsexample
///    @see stricmp
///    @see strnatcmp
///    @ingroup Strings )
/// 
/// </summary>

internal int fn_strcmp (string str1, string str2)
{
var sbstr1 = new StringBuilder(str1, 4096);
var sbstr2 = new StringBuilder(str2, 4096);

return  SafeNativeMethods.mwle_fn_strcmp(sbstr1, sbstr2);
}
/// <summary>
/// Compares two strings using case-<b>insensitive</b> comparison.
///    @param str1 The first string.
///    @param str2 The second string.
///    @return 0 if both strings are equal, a value <0 if the first character different in str1 has a smaller character code 
///       value than the character at the same position in str2, and a value >0 otherwise.
///    @tsexample
///    if( stricmp( \"FOObar\", \"foobar\" ) == 0 )
///       echo( \"this is always true\" );
///    @endtsexample
///    @see strcmp
///    @see strinatcmp
///    @ingroup Strings )
/// 
/// </summary>

internal int fn_stricmp (string str1, string str2)
{
var sbstr1 = new StringBuilder(str1, 4096);
var sbstr2 = new StringBuilder(str2, 4096);

return  SafeNativeMethods.mwle_fn_stricmp(sbstr1, sbstr2);
}
/// <summary>
/// Compares two strings using \"natural order\" case-<b>sensitive</b> comparison.
///    Natural order means that rather than solely comparing single character code values, strings are ordered in a 
///    natural way.  For example, the string \"hello10\" is considered greater than the string \"hello2\" even though 
///    the first numeric character in \"hello10\" actually has a smaller character value than the corresponding character 
///    in \"hello2\".  However, since 10 is greater than 2, strnatcmp will put \"hello10\" after \"hello2\".
///    @param str1 The first string.
///    @param str2 The second string.
///    @return 0 if the strings are equal, a value >0 if @a str1 comes after @a str2 in a natural order, and a value 
///       <0 if @a str1 comes before @a str2 in a natural order.
///    @tsexample
///    // Bubble sort 10 elements of %array using natural order
///    do
///    {
///       %swapped = false;
///       for( %i = 0; %i < 10 - 1; %i ++ )
///          if( strnatcmp( %array[ %i ], %array[ %i + 1 ] ) > 0 )
///          {
///             %temp = %array[ %i ];
///             %array[ %i ] = %array[ %i + 1 ];
///             %array[ %i + 1 ] = %temp;
///             %swapped = true;
///          }
///    }
///    while( %swapped );
///    @endtsexample
///    @see strcmp
///    @see strinatcmp
///    @ingroup Strings )
/// 
/// </summary>

internal int fn_strnatcmp (string str1, string str2)
{
var sbstr1 = new StringBuilder(str1, 4096);
var sbstr2 = new StringBuilder(str2, 4096);

return  SafeNativeMethods.mwle_fn_strnatcmp(sbstr1, sbstr2);
}
/// <summary>
/// Compares two strings using \"natural order\" case-<b>insensitive</b> comparison.
///    Natural order means that rather than solely comparing single character code values, strings are ordered in a 
///    natural way.  For example, the string \"hello10\" is considered greater than the string \"hello2\" even though 
///    the first numeric character in \"hello10\" actually has a smaller character value than the corresponding character 
///    in \"hello2\".  However, since 10 is greater than 2, strnatcmp will put \"hello10\" after \"hello2\".
///    @param str1 The first string.
///    @param str2 The second string.
///    @return 0 if the strings are equal, a value >0 if @a str1 comes after @a str2 in a natural order, and a value 
///       <0 if @a str1 comes before @a str2 in a natural order.
///    @tsexample
///    // Bubble sort 10 elements of %array using natural order
///    do
///    {
///       %swapped = false;
///       for( %i = 0; %i < 10 - 1; %i ++ )
///          if( strnatcmp( %array[ %i ], %array[ %i + 1 ] ) > 0 )
///          {
///             %temp = %array[ %i ];
///             %array[ %i ] = %array[ %i + 1 ];
///             %array[ %i + 1 ] = %temp;
///             %swapped = true;
///          }
///    }
///    while( %swapped );
///    @endtsexample
///    @see stricmp
///    @see strnatcmp
///    @ingroup Strings )
/// 
/// </summary>

internal int fn_strinatcmp (string str1, string str2)
{
var sbstr1 = new StringBuilder(str1, 4096);
var sbstr2 = new StringBuilder(str2, 4096);

return  SafeNativeMethods.mwle_fn_strinatcmp(sbstr1, sbstr2);
}
/// <summary>
/// Get the length of the given string in bytes.
///    @note This does <b>not</b> return a true character count for strings with multi-byte characters!
///    @param str A string.
///    @return The length of the given string in bytes.
///    @ingroup Strings )
/// 
/// </summary>

internal int fn_strlen (string str)
{
var sbstr = new StringBuilder(str, 4096);

return  SafeNativeMethods.mwle_fn_strlen(sbstr);
}
/// <summary>
/// Find the start of @a substring in the given @a string searching from left to right.
///    @param string The string to search.
///    @param substring The string to search for.
///    @return The index into @a string at which the first occurrence of @a substring was found or -1 if @a substring could not be found.
///    @tsexample
///    strstr( \"abcd\", \"c\" ) // Returns 2.
///    @endtsexample
///    @ingroup Strings )
/// 
/// </summary>

internal int fn_strstr (string xstring, string substring)
{
var sbxstring = new StringBuilder(xstring, 4096);
var sbsubstring = new StringBuilder(substring, 4096);

return  SafeNativeMethods.mwle_fn_strstr(sbxstring, sbsubstring);
}
/// <summary>
/// Find the start of @a needle in @a haystack searching from left to right beginning at the given offset.
///    @param haystack The string to search.
///    @param needle The string to search for.
///    @return The index at which the first occurrence of @a needle was found in @a haystack or -1 if no match was found.
///    @tsexample
///    strpos( \"b ab\", \"b\", 1 ) // Returns 3.
///    @endtsexample
///    @ingroup Strings )
/// 
/// </summary>

internal int fn_strpos (string haystack, string needle, int offset)
{
var sbhaystack = new StringBuilder(haystack, 4096);
var sbneedle = new StringBuilder(needle, 4096);

return  SafeNativeMethods.mwle_fn_strpos(sbhaystack, sbneedle, offset);
}
/// <summary>
/// Remove leading whitespace from the string.
///    @param str A string.
///    @return A string that is the same as @a str but with any leading (i.e. leftmost) whitespace removed.
///    @tsexample
///    ltrim( \"   string  \" ); // Returns \"string  \".
///    @endtsexample
///    @see rtrim
///    @see trim
///    @ingroup Strings )
/// 
/// </summary>

internal string fn_ltrim (string str)
{
var returnbuff = new StringBuilder(4096);
var sbstr = new StringBuilder(str, 4096);

SafeNativeMethods.mwle_fn_ltrim(sbstr, returnbuff);
return returnbuff.ToString();

}
/// <summary>
/// Remove trailing whitespace from the string.
///    @param str A string.
///    @return A string that is the same as @a str but with any trailing (i.e. rightmost) whitespace removed.
///    @tsexample
///    rtrim( \"   string  \" ); // Returns \"   string\".
///    @endtsexample
///    @see ltrim
///    @see trim
///    @ingroup Strings )
/// 
/// </summary>

internal string fn_rtrim (string str)
{
var returnbuff = new StringBuilder(4096);
var sbstr = new StringBuilder(str, 4096);

SafeNativeMethods.mwle_fn_rtrim(sbstr, returnbuff);
return returnbuff.ToString();

}
/// <summary>
/// Remove leading and trailing whitespace from the string.
///    @param str A string.
///    @return A string that is the same as @a str but with any leading (i.e. leftmost) and trailing (i.e. rightmost) whitespace removed.
///    @tsexample
///    trim( \"   string  \" ); // Returns \"string\".
///    @endtsexample
///    @ingroup Strings )
/// 
/// </summary>

internal string fn_trim (string str)
{
var returnbuff = new StringBuilder(4096);
var sbstr = new StringBuilder(str, 4096);

SafeNativeMethods.mwle_fn_trim(sbstr, returnbuff);
return returnbuff.ToString();

}
/// <summary>
/// Remove all occurrences of characters contained in @a chars from @a str.
///    @param str The string to filter characters out from.
///    @param chars A string of characters to filter out from @a str.
///    @return A version of @a str with all occurrences of characters contained in @a chars filtered out.
///    @tsexample
///    stripChars( \"teststring\", \"se\" ); // Returns \"tttring\".
///    @endtsexample
///    @ingroup Strings )
/// 
/// </summary>

internal string fn_stripChars (string str, string chars)
{
var returnbuff = new StringBuilder(4096);
var sbstr = new StringBuilder(str, 4096);
var sbchars = new StringBuilder(chars, 4096);

SafeNativeMethods.mwle_fn_stripChars(sbstr, sbchars, returnbuff);
return returnbuff.ToString();

}
/// <summary>
/// Return an all lower-case version of the given string.
///    @param str A string.
///    @return A version of @a str with all characters converted to lower-case.
///    @tsexample
///    strlwr( \"TesT1\" ) // Returns \"test1\"
///    @endtsexample
///    @see strupr
///    @ingroup Strings )
/// 
/// </summary>

internal string fn_strlwr (string str)
{
var returnbuff = new StringBuilder(4096);
var sbstr = new StringBuilder(str, 4096);

SafeNativeMethods.mwle_fn_strlwr(sbstr, returnbuff);
return returnbuff.ToString();

}
/// <summary>
/// Return an all upper-case version of the given string.
///    @param str A string.
///    @return A version of @a str with all characters converted to upper-case.
///    @tsexample
///    strupr( \"TesT1\" ) // Returns \"TEST1\"
///    @endtsexample
///    @see strlwr
///    @ingroup Strings )
/// 
/// </summary>

internal string fn_strupr (string str)
{
var returnbuff = new StringBuilder(4096);
var sbstr = new StringBuilder(str, 4096);

SafeNativeMethods.mwle_fn_strupr(sbstr, returnbuff);
return returnbuff.ToString();

}
/// <summary>
/// Find the first occurrence of the given character in @a str.
///    @param str The string to search.
///    @param chr The character to search for.  Only the first character from the string is taken.
///    @return The remainder of the input string starting with the given character or the empty string if the character could not be found.
///    @see strrchr
///    @ingroup Strings )
/// 
/// </summary>

internal string fn_strchr (string str, string chr)
{
var returnbuff = new StringBuilder(4096);
var sbstr = new StringBuilder(str, 4096);
var sbchr = new StringBuilder(chr, 4096);

SafeNativeMethods.mwle_fn_strchr(sbstr, sbchr, returnbuff);
return returnbuff.ToString();

}
/// <summary>
/// Find the last occurrence of the given character in @a str.
///    @param str The string to search.
///    @param chr The character to search for.  Only the first character from the string is taken.
///    @return The remainder of the input string starting with the given character or the empty string if the character could not be found.
///    @see strchr
///    @ingroup Strings )
/// 
/// </summary>

internal string fn_strrchr (string str, string chr)
{
var returnbuff = new StringBuilder(4096);
var sbstr = new StringBuilder(str, 4096);
var sbchr = new StringBuilder(chr, 4096);

SafeNativeMethods.mwle_fn_strrchr(sbstr, sbchr, returnbuff);
return returnbuff.ToString();

}
/// <summary>
/// Replace all occurrences of @a from in @a source with @a to.
///    @param source The string in which to replace the occurrences of @a from.
///    @param from The string to replace in @a source.
///    @param to The string with which to replace occurrences of @from.
///    @return A string with all occurrences of @a from in @a source replaced by @a to.
///    @tsexample
///    strreplace( \"aabbccbb\", \"bb\", \"ee\" ) // Returns \"aaeeccee\".
///    @endtsexample
///    @ingroup Strings )
/// 
/// </summary>

internal string fn_strreplace (string source, string from, string to)
{
var returnbuff = new StringBuilder(4096);
var sbsource = new StringBuilder(source, 4096);
var sbfrom = new StringBuilder(from, 4096);
var sbto = new StringBuilder(to, 4096);

SafeNativeMethods.mwle_fn_strreplace(sbsource, sbfrom, sbto, returnbuff);
return returnbuff.ToString();

}
/// <summary>
///  ),
///    Return a string that repeats @a str @a numTimes number of times delimiting each occurrence with @a delimiter.
///    @param str The string to repeat multiple times.
///    @param numTimes The number of times to repeat @a str in the result string.
///    @param delimiter The string to put between each repetition of @a str.
///    @return A string containing @a str repeated @a numTimes times.
///    @tsexample
///    strrepeat( \"a\", 5, \"b\" ) // Returns \"ababababa\".
///    @endtsexample
///    @ingroup Strings )
/// 
/// </summary>

internal string fn_strrepeat (string str, int numTimes, string delimiter)
{
var returnbuff = new StringBuilder(4096);
var sbstr = new StringBuilder(str, 4096);
var sbdelimiter = new StringBuilder(delimiter, 4096);

SafeNativeMethods.mwle_fn_strrepeat(sbstr, numTimes, sbdelimiter, returnbuff);
return returnbuff.ToString();

}
/// <summary>
/// @brief Return a substring of @a str starting at @a start and continuing either through to the end of @a str 
///    (if @a numChars is -1) or for @a numChars characters (except if this would exceed the actual source 
///    string length).
///    @param str The string from which to extract a substring.
///    @param start The offset at which to start copying out characters.
///    @param numChars Optional argument to specify the number of characters to copy.  If this is -1, all characters up the end 
///       of the input string are copied.
///    @return A string that contains the given portion of the input string.
///    @tsexample
///    getSubStr( \"foobar\", 1, 2 ) // Returns \"oo\".
///    @endtsexample
///    @ingroup Strings )
/// 
/// </summary>

internal string fn_getSubStr (string str, int start, int numChars)
{
var returnbuff = new StringBuilder(4096);
var sbstr = new StringBuilder(str, 4096);

SafeNativeMethods.mwle_fn_getSubStr(sbstr, start, numChars, returnbuff);
return returnbuff.ToString();

}
/// <summary>
/// Match a pattern against a string.
///    @param pattern The wildcard pattern to match against.  The pattern can include characters, '*' to match 
///       any number of characters and '?' to match a single character.
///    @param str The string which should be matched against @a pattern.
///    @param caseSensitive If true, characters in the pattern are matched in case-sensitive fashion against 
///       this string.  If false, differences in casing are ignored.
///    @return True if @a str matches the given @a pattern.
///    @tsexample
///    strIsMatchExpr( \"f?o*R\", \"foobar\" ) // Returns true.
///    @endtsexample
///    @see strIsMatchMultipleExpr
///    @ingroup Strings )
/// 
/// </summary>

internal bool fn_strIsMatchExpr (string pattern, string str, bool caseSensitive)
{
var sbpattern = new StringBuilder(pattern, 4096);
var sbstr = new StringBuilder(str, 4096);

return  SafeNativeMethods.mwle_fn_strIsMatchExpr(sbpattern, sbstr, caseSensitive)>=1;
}
/// <summary>
/// Match a multiple patterns against a single string.
///    @param patterns A tab-separated list of patterns.  Each pattern can include charaters, '*' to match 
///       any number of characters and '?' to match a single character.  Each of the patterns is tried in turn.
///    @param str The string which should be matched against @a patterns.
///    @param caseSensitive If true, characters in the pattern are matched in case-sensitive fashion against 
///       this string.  If false, differences in casing are ignored.
///    @return True if @a str matches any of the given @a patterns.
///    @tsexample
///    strIsMatchMultipleExpr( \"*.cs *.gui *.mis\", \"mymission.mis\" ) // Returns true.
///    @endtsexample
///    @see strIsMatchExpr
///    @ingroup Strings )
/// 
/// </summary>

internal bool fn_strIsMatchMultipleExpr (string patterns, string str, bool caseSensitive)
{
var sbpatterns = new StringBuilder(patterns, 4096);
var sbstr = new StringBuilder(str, 4096);

return  SafeNativeMethods.mwle_fn_strIsMatchMultipleExpr(sbpatterns, sbstr, caseSensitive)>=1;
}
/// <summary>
/// Get the numeric suffix of the given input string.
///    @param str The string from which to read out the numeric suffix.
///    @return The numeric value of the number suffix of @a str or -1 if @a str has no such suffix.
///    @tsexample
///    getTrailingNumber( \"test123\" ) // Returns '123'.
///    @endtsexample
///    @see stripTrailingNumber
///    @ingroup Strings )
/// 
/// </summary>

internal int fn_getTrailingNumber (string str)
{
var sbstr = new StringBuilder(str, 4096);

return  SafeNativeMethods.mwle_fn_getTrailingNumber(sbstr);
}
/// <summary>
/// Strip a numeric suffix from the given string.
///    @param str The string from which to strip its numeric suffix.
///    @return The string @a str without its number suffix or the original string @a str if it has no such suffix.
///    @tsexample
///    stripTrailingNumber( \"test123\" ) // Returns \"test\".
///    @endtsexample
///    @see getTrailingNumber
///    @ingroup Strings )
/// 
/// </summary>

internal string fn_stripTrailingNumber (string str)
{
var returnbuff = new StringBuilder(1024);
var sbstr = new StringBuilder(str, 4096);

SafeNativeMethods.mwle_fn_stripTrailingNumber(sbstr, returnbuff);
return returnbuff.ToString();

}
/// <summary>
/// Test whether the character at the given position is a whitespace character.
///    Characters such as tab, space, or newline are considered whitespace.
///    @param str The string to test.
///    @param index The index of a character in @a str.
///    @return True if the character at the given index in @a str is a whitespace character; false otherwise.
///    @see isalnum
///    @ingroup Strings )
/// 
/// </summary>

internal bool fn_isspace (string str, int index)
{
var sbstr = new StringBuilder(str, 4096);

return  SafeNativeMethods.mwle_fn_isspace(sbstr, index)>=1;
}
/// <summary>
/// Test whether the character at the given position is an alpha-numeric character.
///    Alpha-numeric characters are characters that are either alphabetic (a-z, A-Z) or numbers (0-9).
///    @param str The string to test.
///    @param index The index of a character in @a str.
///    @return True if the character at the given index in @a str is an alpha-numeric character; false otherwise.
///    @see isspace
///    @ingroup Strings )
/// 
/// </summary>

internal bool fn_isalnum (string str, int index)
{
var sbstr = new StringBuilder(str, 4096);

return  SafeNativeMethods.mwle_fn_isalnum(sbstr, index)>=1;
}
/// <summary>
/// Test whether the given string begins with the given prefix.
///    @param str The string to test.
///    @param prefix The potential prefix of @a str.
///    @param caseSensitive If true, the comparison will be case-sensitive; if false, differences in casing will 
///       not be taken into account.
///    @return True if the first characters in @a str match the complete contents of @a prefix; false otherwise.
///    @tsexample
///    startsWith( \"TEST123\", \"test\" ) // Returns true.
///    @endtsexample
///    @see endsWith
///    @ingroup Strings )
/// 
/// </summary>

internal bool fn_startsWith (string str, string prefix, bool caseSensitive)
{
var sbstr = new StringBuilder(str, 4096);
var sbprefix = new StringBuilder(prefix, 4096);

return  SafeNativeMethods.mwle_fn_startsWith(sbstr, sbprefix, caseSensitive)>=1;
}
/// <summary>
/// @brief Test whether the given string ends with the given suffix.
///    @param str The string to test.
///    @param suffix The potential suffix of @a str.
///    @param caseSensitive If true, the comparison will be case-sensitive; if false, differences in casing will 
///       not be taken into account.
///    @return True if the last characters in @a str match the complete contents of @a suffix; false otherwise.
///    @tsexample
///    startsWith( \"TEST123\", \"123\" ) // Returns true.
///    @endtsexample
///    @see startsWith
///    @ingroup Strings )
/// 
/// </summary>

internal bool fn_endsWith (string str, string suffix, bool caseSensitive)
{
var sbstr = new StringBuilder(str, 4096);
var sbsuffix = new StringBuilder(suffix, 4096);

return  SafeNativeMethods.mwle_fn_endsWith(sbstr, sbsuffix, caseSensitive)>=1;
}
/// <summary>
/// Find the first occurrence of the given character in the given string.
///    @param str The string to search.
///    @param chr The character to look for.  Only the first character of this string will be searched for.
///    @param start The index into @a str at which to start searching for the given character.
///    @return The index of the first occurrence of @a chr in @a str or -1 if @a str does not contain the given character.
///    @tsexample
///    strchrpos( \"test\", \"s\" ) // Returns 2.
///    @endtsexample
///    @ingroup Strings )
/// 
/// </summary>

internal int fn_strchrpos (string str, string chr, int start)
{
var sbstr = new StringBuilder(str, 4096);
var sbchr = new StringBuilder(chr, 4096);

return  SafeNativeMethods.mwle_fn_strchrpos(sbstr, sbchr, start);
}
/// <summary>
/// Find the last occurrence of the given character in the given string.
///    @param str The string to search.
///    @param chr The character to look for.  Only the first character of this string will be searched for.
///    @param start The index into @a str at which to start searching for the given character.
///    @return The index of the last occurrence of @a chr in @a str or -1 if @a str does not contain the given character.
///    @tsexample
///    strrchrpos( \"test\", \"t\" ) // Returns 3.
///    @endtsexample
///    @ingroup Strings )
/// 
/// </summary>

internal int fn_strrchrpos (string str, string chr, int start)
{
var sbstr = new StringBuilder(str, 4096);
var sbchr = new StringBuilder(chr, 4096);

return  SafeNativeMethods.mwle_fn_strrchrpos(sbstr, sbchr, start);
}
/// <summary>
/// Extract the word at the given @a index in the whitespace-separated list in @a text.
///    Words in @a text must be separated by newlines, spaces, and/or tabs.
///    @param text A whitespace-separated list of words.
///    @param index The zero-based index of the word to extract.
///    @return The word at the given index or \"\" if the index is out of range.
///    @tsexample
///       getWord( \"a b c\", 1 ) // Returns \"b\"
///    @endtsexample
///    @see getWords
///    @see getWordCount
///    @see getField
///    @see getRecord
///    @ingroup FieldManip )
/// 
/// </summary>

internal string fn_getWord (string text, int index)
{
var returnbuff = new StringBuilder(4096);
var sbtext = new StringBuilder(text, 4096);

SafeNativeMethods.mwle_fn_getWord(sbtext, index, returnbuff);
return returnbuff.ToString();

}
/// <summary>
/// Extract a range of words from the given @a startIndex onwards thru @a endIndex.
///    Words in @a text must be separated by newlines, spaces, and/or tabs.
///    @param text A whitespace-separated list of words.
///    @param startIndex The zero-based index of the first word to extract from @a text.
///    @param endIndex The zero-based index of the last word to extract from @a text.  If this is -1, all words beginning 
///       with @a startIndex are extracted from @a text.
///    @return A string containing the specified range of words from @a text or \"\" if @a startIndex 
///       is out of range or greater than @a endIndex.
///    @tsexample
///       getWords( \"a b c d\", 1, 2, ) // Returns \"b c\"
///    @endtsexample
///    @see getWord
///    @see getWordCount
///    @see getFields
///    @see getRecords
///    @ingroup FieldManip )
/// 
/// </summary>

internal string fn_getWords (string text, int startIndex, int endIndex)
{
var returnbuff = new StringBuilder(4096);
var sbtext = new StringBuilder(text, 4096);

SafeNativeMethods.mwle_fn_getWords(sbtext, startIndex, endIndex, returnbuff);
return returnbuff.ToString();

}
/// <summary>
/// Replace the word in @a text at the given @a index with @a replacement.
///    Words in @a text must be separated by newlines, spaces, and/or tabs.
///    @param text A whitespace-separated list of words.
///    @param index The zero-based index of the word to replace.
///    @param replacement The string with which to replace the word.
///    @return A new string with the word at the given @a index replaced by @a replacement or the original 
///       string if @a index is out of range.
///    @tsexample
///       setWord( \"a b c d\", 2, \"f\" ) // Returns \"a b f d\"
///    @endtsexample
///    @see getWord
///    @see setField
///    @see setRecord
///    @ingroup FieldManip )
/// 
/// </summary>

internal string fn_setWord (string text, int index, string replacement)
{
var returnbuff = new StringBuilder(4096);
var sbtext = new StringBuilder(text, 4096);
var sbreplacement = new StringBuilder(replacement, 4096);

SafeNativeMethods.mwle_fn_setWord(sbtext, index, sbreplacement, returnbuff);
return returnbuff.ToString();

}
/// <summary>
/// Remove the word in @a text at the given @a index.
///    Words in @a text must be separated by newlines, spaces, and/or tabs.
///    @param text A whitespace-separated list of words.
///    @param index The zero-based index of the word in @a text.
///    @return A new string with the word at the given index removed or the original string if @a index is 
///       out of range.
///    @tsexample
///       removeWord( \"a b c d\", 2 ) // Returns \"a b d\"
///    @endtsexample
///    @see removeField
///    @see removeRecord
///    @ingroup FieldManip )
/// 
/// </summary>

internal string fn_removeWord (string text, int index)
{
var returnbuff = new StringBuilder(4096);
var sbtext = new StringBuilder(text, 4096);

SafeNativeMethods.mwle_fn_removeWord(sbtext, index, returnbuff);
return returnbuff.ToString();

}
/// <summary>
/// Return the number of whitespace-separated words in @a text.
///    Words in @a text must be separated by newlines, spaces, and/or tabs.
///    @param text A whitespace-separated list of words.
///    @return The number of whitespace-separated words in @a text.
///    @tsexample
///       getWordCount( \"a b c d e\" ) // Returns 5
///    @endtsexample
///    @see getFieldCount
///    @see getRecordCount
///    @ingroup FieldManip )
/// 
/// </summary>

internal int fn_getWordCount (string text)
{
var sbtext = new StringBuilder(text, 4096);

return  SafeNativeMethods.mwle_fn_getWordCount(sbtext);
}
/// <summary>
/// Extract the field at the given @a index in the newline and/or tab separated list in @a text.
///    Fields in @a text must be separated by newlines and/or tabs.
///    @param text A list of fields separated by newlines and/or tabs.
///    @param index The zero-based index of the field to extract.
///    @return The field at the given index or \"\" if the index is out of range.
///    @tsexample
///       getField( \"a b\" TAB \"c d\" TAB \"e f\", 1 ) // Returns \"c d\"
///    @endtsexample
///    @see getFields
///    @see getFieldCount
///    @see getWord
///    @see getRecord
///    @ingroup FieldManip )
/// 
/// </summary>

internal string fn_getField (string text, int index)
{
var returnbuff = new StringBuilder(4096);
var sbtext = new StringBuilder(text, 4096);

SafeNativeMethods.mwle_fn_getField(sbtext, index, returnbuff);
return returnbuff.ToString();

}
/// <summary>
/// Extract a range of fields from the given @a startIndex onwards thru @a endIndex.
///    Fields in @a text must be separated by newlines and/or tabs.
///    @param text A list of fields separated by newlines and/or tabs.
///    @param startIndex The zero-based index of the first field to extract from @a text.
///    @param endIndex The zero-based index of the last field to extract from @a text.  If this is -1, all fields beginning 
///       with @a startIndex are extracted from @a text.
///    @return A string containing the specified range of fields from @a text or \"\" if @a startIndex 
///       is out of range or greater than @a endIndex.
///    @tsexample
///       getFields( \"a b\" TAB \"c d\" TAB \"e f\", 1 ) // Returns \"c d\" TAB \"e f\"
///    @endtsexample
///    @see getField
///    @see getFieldCount
///    @see getWords
///    @see getRecords
///    @ingroup FieldManip )
/// 
/// </summary>

internal string fn_getFields (string text, int startIndex, int endIndex)
{
var returnbuff = new StringBuilder(4096);
var sbtext = new StringBuilder(text, 4096);

SafeNativeMethods.mwle_fn_getFields(sbtext, startIndex, endIndex, returnbuff);
return returnbuff.ToString();

}
/// <summary>
/// Replace the field in @a text at the given @a index with @a replacement.
///    Fields in @a text must be separated by newlines and/or tabs.
///    @param text A list of fields separated by newlines and/or tabs.
///    @param index The zero-based index of the field to replace.
///    @param replacement The string with which to replace the field.
///    @return A new string with the field at the given @a index replaced by @a replacement or the original 
///       string if @a index is out of range.
///    @tsexample
///       setField( \"a b\" TAB \"c d\" TAB \"e f\", 1, \"g h\" ) // Returns \"a b\" TAB \"g h\" TAB \"e f\"
///    @endtsexample
///    @see getField
///    @see setWord
///    @see setRecord
///    @ingroup FieldManip )
/// 
/// </summary>

internal string fn_setField (string text, int index, string replacement)
{
var returnbuff = new StringBuilder(4096);
var sbtext = new StringBuilder(text, 4096);
var sbreplacement = new StringBuilder(replacement, 4096);

SafeNativeMethods.mwle_fn_setField(sbtext, index, sbreplacement, returnbuff);
return returnbuff.ToString();

}
/// <summary>
/// Remove the field in @a text at the given @a index.
///    Fields in @a text must be separated by newlines and/or tabs.
///    @param text A list of fields separated by newlines and/or tabs.
///    @param index The zero-based index of the field in @a text.
///    @return A new string with the field at the given index removed or the original string if @a index is 
///       out of range.
///    @tsexample
///       removeField( \"a b\" TAB \"c d\" TAB \"e f\", 1 ) // Returns \"a b\" TAB \"e f\"
///    @endtsexample
///    @see removeWord
///    @see removeRecord
///    @ingroup FieldManip )
/// 
/// </summary>

internal string fn_removeField (string text, int index)
{
var returnbuff = new StringBuilder(4096);
var sbtext = new StringBuilder(text, 4096);

SafeNativeMethods.mwle_fn_removeField(sbtext, index, returnbuff);
return returnbuff.ToString();

}
/// <summary>
/// Return the number of newline and/or tab separated fields in @a text.
///    @param text A list of fields separated by newlines and/or tabs.
///    @return The number of newline and/or tab sepearated elements in @a text.
///    @tsexample
///       getFieldCount( \"a b\" TAB \"c d\" TAB \"e f\" ) // Returns 3
///    @endtsexample
///    @see getWordCount
///    @see getRecordCount
///    @ingroup FieldManip )
/// 
/// </summary>

internal int fn_getFieldCount (string text)
{
var sbtext = new StringBuilder(text, 4096);

return  SafeNativeMethods.mwle_fn_getFieldCount(sbtext);
}
/// <summary>
/// Extract the record at the given @a index in the newline-separated list in @a text.
///    Records in @a text must be separated by newlines.
///    @param text A list of records separated by newlines.
///    @param index The zero-based index of the record to extract.
///    @return The record at the given index or \"\" if @a index is out of range.
///    @tsexample
///       getRecord( \"a b\" NL \"c d\" NL \"e f\", 1 ) // Returns \"c d\"
///    @endtsexample
///    @see getRecords
///    @see getRecordCount
///    @see getWord
///    @see getField
///    @ingroup FieldManip )
/// 
/// </summary>

internal string fn_getRecord (string text, int index)
{
var returnbuff = new StringBuilder(4096);
var sbtext = new StringBuilder(text, 4096);

SafeNativeMethods.mwle_fn_getRecord(sbtext, index, returnbuff);
return returnbuff.ToString();

}
/// <summary>
/// Extract a range of records from the given @a startIndex onwards thru @a endIndex.
///    Records in @a text must be separated by newlines.
///    @param text A list of records separated by newlines.
///    @param startIndex The zero-based index of the first record to extract from @a text.
///    @param endIndex The zero-based index of the last record to extract from @a text.  If this is -1, all records beginning 
///       with @a startIndex are extracted from @a text.
///    @return A string containing the specified range of records from @a text or \"\" if @a startIndex 
///       is out of range or greater than @a endIndex.
///    @tsexample
///       getRecords( \"a b\" NL \"c d\" NL \"e f\", 1 ) // Returns \"c d\" NL \"e f\"
///    @endtsexample
///    @see getRecord
///    @see getRecordCount
///    @see getWords
///    @see getFields
///    @ingroup FieldManip )
/// 
/// </summary>

internal string fn_getRecords (string text, int startIndex, int endIndex)
{
var returnbuff = new StringBuilder(4096);
var sbtext = new StringBuilder(text, 4096);

SafeNativeMethods.mwle_fn_getRecords(sbtext, startIndex, endIndex, returnbuff);
return returnbuff.ToString();

}
/// <summary>
/// Replace the record in @a text at the given @a index with @a replacement.
///    Records in @a text must be separated by newlines.
///    @param text A list of records separated by newlines.
///    @param index The zero-based index of the record to replace.
///    @param replacement The string with which to replace the record.
///    @return A new string with the record at the given @a index replaced by @a replacement or the original 
///       string if @a index is out of range.
///    @tsexample
///       setRecord( \"a b\" NL \"c d\" NL \"e f\", 1, \"g h\" ) // Returns \"a b\" NL \"g h\" NL \"e f\"
///    @endtsexample
///    @see getRecord
///    @see setWord
///    @see setField
///    @ingroup FieldManip )
/// 
/// </summary>

internal string fn_setRecord (string text, int index, string replacement)
{
var returnbuff = new StringBuilder(4096);
var sbtext = new StringBuilder(text, 4096);
var sbreplacement = new StringBuilder(replacement, 4096);

SafeNativeMethods.mwle_fn_setRecord(sbtext, index, sbreplacement, returnbuff);
return returnbuff.ToString();

}
/// <summary>
/// Remove the record in @a text at the given @a index.
///    Records in @a text must be separated by newlines.
///    @param text A list of records separated by newlines.
///    @param index The zero-based index of the record in @a text.
///    @return A new string with the record at the given @a index removed or the original string if @a index is 
///       out of range.
///    @tsexample
///       removeRecord( \"a b\" NL \"c d\" NL \"e f\", 1 ) // Returns \"a b\" NL \"e f\"
///    @endtsexample
///    @see removeWord
///    @see removeField
///    @ingroup FieldManip )
/// 
/// </summary>

internal string fn_removeRecord (string text, int index)
{
var returnbuff = new StringBuilder(4096);
var sbtext = new StringBuilder(text, 4096);

SafeNativeMethods.mwle_fn_removeRecord(sbtext, index, returnbuff);
return returnbuff.ToString();

}
/// <summary>
/// Return the number of newline-separated records in @a text.
///    @param text A list of records separated by newlines.
///    @return The number of newline-sepearated elements in @a text.
///    @tsexample
///       getRecordCount( \"a b\" NL \"c d\" NL \"e f\" ) // Returns 3
///    @endtsexample
///    @see getWordCount
///    @see getFieldCount
///    @ingroup FieldManip )
/// 
/// </summary>

internal int fn_getRecordCount (string text)
{
var sbtext = new StringBuilder(text, 4096);

return  SafeNativeMethods.mwle_fn_getRecordCount(sbtext);
}
/// <summary>
/// Return the first word in @a text.
///    @param text A list of words separated by newlines, spaces, and/or tabs.
///    @return The word at index 0 in @a text or \"\" if @a text is empty.
///    @note This is equal to 
///    @tsexample_nopar
///       getWord( text, 0 )
///    @endtsexample
///    @see getWord
///    @ingroup FieldManip )
/// 
/// </summary>

internal string fn_firstWord (string text)
{
var returnbuff = new StringBuilder(4096);
var sbtext = new StringBuilder(text, 4096);

SafeNativeMethods.mwle_fn_firstWord(sbtext, returnbuff);
return returnbuff.ToString();

}
/// <summary>
/// Return all but the first word in @a text.
///    @param text A list of words separated by newlines, spaces, and/or tabs.
///    @return @a text with the first word removed.
///    @note This is equal to 
///    @tsexample_nopar
///       getWords( text, 1 )
///    @endtsexample
///    @see getWords
///    @ingroup FieldManip )
/// 
/// </summary>

internal string fn_restWords (string text)
{
var returnbuff = new StringBuilder(4096);
var sbtext = new StringBuilder(text, 4096);

SafeNativeMethods.mwle_fn_restWords(sbtext, returnbuff);
return returnbuff.ToString();

}
/// <summary>
/// @brief Replace all characters in @a text that need to be escaped for the string to be a valid string literal with their 
///    respective escape sequences.
///    All characters in @a text that cannot appear in a string literal will be replaced by an escape sequence (\\\, \\\\t, etc).
///    The primary use of this function is for converting strings suitable for being passed as string literals 
///    to the TorqueScript compiler.
///    @param text A string
///    @return A duplicate of the text parameter with all unescaped characters that cannot appear in string literals replaced by their respective 
///    escape sequences.
///    @tsxample
///    expandEscape( \"str\" NL \"ing\" ) // Returns \"str\ing\".
///    @endtsxample
///    @see collapseEscape
///    @ingroup Strings)
/// 
/// </summary>

internal string fn_expandEscape (string text)
{
var returnbuff = new StringBuilder(4096);
var sbtext = new StringBuilder(text, 4096);

SafeNativeMethods.mwle_fn_expandEscape(sbtext, returnbuff);
return returnbuff.ToString();

}
/// <summary>
/// Replace all escape sequences in @a text with their respective character codes.
///    This function replaces all escape sequences (\\\, \\\\t, etc) in the given string 
///    with the respective characters they represent.
///    The primary use of this function is for converting strings from their literal form into 
///    their compiled/translated form, as is normally done by the TorqueScript compiler.
///    @param text A string.
///    @return A duplicate of @a text with all escape sequences replaced by their respective character codes.
///    @tsexample
///       // Print:
///       //
///       //    str
///       //    ing
///       //
///       // to the console.  Note how the backslash in the string must be escaped here
///       // in order to prevent the TorqueScript compiler from collapsing the escape
///       // sequence in the resulting string.
///       echo( collapseEscape( \"str\ing\" ) );
///    @endtsexample
///    @see expandEscape
///    @ingroup Strings )
/// 
/// </summary>

internal string fn_collapseEscape (string text)
{
var returnbuff = new StringBuilder(4096);
var sbtext = new StringBuilder(text, 4096);

SafeNativeMethods.mwle_fn_collapseEscape(sbtext, returnbuff);
return returnbuff.ToString();

}
/// <summary>
/// Shut down the engine and exit its process.
///    This function cleanly uninitializes the engine and then exits back to the system with a process 
///    exit status indicating a clean exit.
///    @see quitWithErrorMessage
///    @ingroup Platform )
/// 
/// </summary>

internal void fn_quit ()
{

SafeNativeMethods.mwle_fn_quit();
}
/// <summary>
/// Display an error message box showing the given @a message and then shut down the engine and exit its process.
///    This function cleanly uninitialized the engine and then exits back to the system with a process 
///    exit status indicating an error.
///    @param message The message to log to the console and show in an error message box.
///    @see quit
///    @ingroup Platform )
/// 
/// </summary>

internal void fn_quitWithErrorMessage (string message)
{
var sbmessage = new StringBuilder(message, 4096);

SafeNativeMethods.mwle_fn_quitWithErrorMessage(sbmessage);
}
/// <summary>
/// , false ),
///    Write out the definitions of all global variables matching the given name @a pattern.
///    If @a fileName is not \"\", the variable definitions are written to the specified file.  Otherwise the 
///    definitions will be printed to the console.
///    The output are valid TorqueScript statements that can be executed to restore the global variable 
///    values.
///    @param pattern A global variable name pattern.  Must begin with '$'.
///    @param filename %Path of the file to which to write the definitions or \"\" to write the definitions 
///       to the console.
///    @param append If true and @a fileName is not \"\", then the definitions are appended to the specified file. 
///       Otherwise existing contents of the file (if any) will be overwritten.
///    @tsexample
///       // Write out all preference variables to a prefs.cs file.
///       export( \"$prefs::*\", \"prefs.cs\" );
///    @endtsexample
///    @ingroup Scripting )
/// 
/// </summary>

internal void fn_export (string pattern, string filename, bool append)
{
var sbpattern = new StringBuilder(pattern, 4096);
var sbfilename = new StringBuilder(filename, 4096);

SafeNativeMethods.mwle_fn_export(sbpattern, sbfilename, append);
}
/// <summary>
/// Enable or disable tracing in the script code VM.
///    When enabled, the script code runtime will trace the invocation and returns 
///    from all functions that are called and log them to the console. This is helpful in 
///    observing the flow of the script program.
///    @param enable New setting for script trace execution, on by default.
///    @ingroup Debugging )
/// 
/// </summary>

internal void fn_trace (bool enable)
{

SafeNativeMethods.mwle_fn_trace(enable);
}
/// <summary>
/// Drops the engine into the native C++ debugger.
///    This function triggers a debug break and drops the process into the IDE's debugger.  If the process is not 
///    running with a debugger attached it will generate a runtime error on most platforms.
///    @note This function is not available in shipping builds.
///    @ingroup Debugging )
/// 
/// </summary>

internal void fn_debug ()
{

SafeNativeMethods.mwle_fn_debug();
}
/// <summary>
/// @brief Returns the string from a tag string.
/// 
///    Should only be used within the context of a function that receives a tagged 
///    string, and is not meant to be used outside of this context.  Use getTaggedString() 
///    to convert a tagged string ID back into a regular string at any time.
/// 
///    @tsexample
///       // From scripts/client/message.cs
///       function clientCmdChatMessage(%sender, %voice, %pitch, %msgString, %a1, %a2, %a3, %a4, %a5, %a6, %a7, %a8, %a9, %a10)
///       {
///          onChatMessage(detag(%msgString), %voice, %pitch);
///       }
/// 	@endtsexample
/// 
///    @see \\ref syntaxDataTypes under Tagged %Strings
///    @see getTag()
///    @see getTaggedString()
/// 
///    @ingroup Networking)
/// 
/// </summary>

internal string fn_detag (string str)
{
var returnbuff = new StringBuilder(4096);
var sbstr = new StringBuilder(str, 4096);

SafeNativeMethods.mwle_fn_detag(sbstr, returnbuff);
return returnbuff.ToString();

}
/// <summary>
/// @brief Logs the value of the given variable to the console.
///    Prints a string of the form \"<variableName> = <variable value>\" to the console.
///    @param variableName Name of the local or global variable to print.
///    @tsexample
///       %var = 1;
///       debugv( \"%var\" ); // Prints \"%var = 1\"
///    @endtsexample
///    @ingroup Debugging )
/// 
/// </summary>

internal void fn_debugv (string variableName)
{
var sbvariableName = new StringBuilder(variableName, 4096);

SafeNativeMethods.mwle_fn_debugv(sbvariableName);
}
/// <summary>
/// @brief Determines how log files are written.
/// 	Sets the operational mode of the console logging system.
///    @param mode Parameter specifying the logging mode.  This can be:
///       - 1: Open and close the console log file for each seperate string of output.  This will ensure that all 
///          parts get written out to disk and that no parts remain in intermediate buffers even if the process crashes.
///       - 2: Keep the log file open and write to it continuously.  This will make the system operate faster but 
///          if the process crashes, parts of the output may not have been written to disk yet and will be missing from 
///          the log.
///          
///       Additionally, when changing the log mode and thus opening a new log file, either of the two mode values may be 
///       combined by binary OR with 0x4 to cause the logging system to flush all console log messages that had already been 
///       issued to the console system into the newly created log file.
/// 
/// 	@note Xbox 360 does not support logging to a file. Use Platform::OutputDebugStr in C++ instead.
/// 	@ingroup Logging )
/// 
/// </summary>

internal void fn_setLogMode (int mode)
{

SafeNativeMethods.mwle_fn_setLogMode(mode);
}
/// <summary>
/// Open the given URL or file in the user's web browser.
///    @param address The address to open.  If this is not prefixed by a protocol specifier (\"...://\"), then 
///       the function checks whether the address refers to a file or directory and if so, prepends \"file://\" 
///       to @a adress; if the file check fails, \"http://\" is prepended to @a address.
///    @tsexample
///       gotoWebPage( \"http://www.garagegames.com\" );
///    @endtsexample
///    @ingroup Platform )
/// 
/// </summary>

internal void fn_gotoWebPage (string address)
{
var sbaddress = new StringBuilder(address, 4096);

SafeNativeMethods.mwle_fn_gotoWebPage(sbaddress);
}
/// <summary>
/// Display a startup splash window suitable for showing while the engine still starts up.
///    @note This is currently only implemented on Windows.
///    @return True if the splash window could be successfully initialized.
///    @ingroup Platform )
/// 
/// </summary>

internal bool fn_displaySplashWindow ()
{

return  SafeNativeMethods.mwle_fn_displaySplashWindow()>=1;
}
/// <summary>
/// Test whether Torque is running in web-deployment mode.
///    In this mode, Torque will usually run within a browser and certain restrictions apply (e.g. Torque will not 
///    be able to enter fullscreen exclusive mode).
///    @return True if Torque is running in web-deployment mode.
///    @ingroup Platform )
/// 
/// </summary>

internal bool fn_getWebDeployment ()
{

return  SafeNativeMethods.mwle_fn_getWebDeployment()>=1;
}
/// <summary>
/// Count the number of bits that are set in the given 32 bit integer.
///    @param v An integer value.
///    @return The number of bits that are set in @a v.
///    @ingroup Utilities )
/// 
/// </summary>

internal int fn_countBits (int v)
{

return  SafeNativeMethods.mwle_fn_countBits(v);
}
/// <summary>
/// Compile a file to bytecode.
///    This function will read the TorqueScript code in the specified file, compile it to internal bytecode, and, 
///    if DSO generation is enabled or @a overrideNoDDSO is true, will store the compiled code in a .dso file 
///    in the current DSO path mirrorring the path of @a fileName.
///    @param fileName Path to the file to compile to bytecode.
///    @param overrideNoDSO If true, force generation of DSOs even if the engine is compiled to not 
///       generate write compiled code to DSO files.
///    @return True if the file was successfully compiled, false if not.
///    @note The definitions contained in the given file will not be made available and no code will actually 
///       be executed.  Use exec() for that.
///    @see getDSOPath
///    @see exec
///    @ingroup Scripting )
/// 
/// </summary>

internal bool fn_compile (string fileName, bool overrideNoDSO)
{
var sbfileName = new StringBuilder(fileName, 4096);

return  SafeNativeMethods.mwle_fn_compile(sbfileName, overrideNoDSO)>=1;
}
/// <summary>
/// Execute the given script file.
///    @param fileName Path to the file to execute
///    @param noCalls Deprecated
///    @param journalScript Deprecated
///    @return True if the script was successfully executed, false if not.
///    @tsexample
///       // Execute the init.cs script file found in the same directory as the current script file.
///       exec( \"./init.cs\" );
///    @endtsexample
///    @see compile
///    @see eval
///    @ingroup Scripting )
/// 
/// </summary>

internal bool fn_exec (string fileName, bool noCalls, bool journalScript)
{
var sbfileName = new StringBuilder(fileName, 4096);

return  SafeNativeMethods.mwle_fn_exec(sbfileName, noCalls, journalScript)>=1;
}
/// <summary>
/// Undefine all global variables matching the given name @a pattern.
///    @param pattern A global variable name pattern.  Must begin with '$'.
///    @tsexample
///       // Define a global variable in the \"My\" namespace.
///       $My::Variable = \"value\";
///       // Undefine all variable in the \"My\" namespace.
///       deleteVariables( \"$My::*\" );
///    @endtsexample
///    @see strIsMatchExpr
///    @ingroup Scripting )
/// 
/// </summary>

internal void fn_deleteVariables (string pattern)
{
var sbpattern = new StringBuilder(pattern, 4096);

SafeNativeMethods.mwle_fn_deleteVariables(sbpattern);
}
/// <summary>
/// Test whether the engine has been compiled with TORQUE_SHIPPING, i.e. in a form meant for final release.
///    @return True if this is a shipping build; false otherwise.
///    @ingroup Platform )
/// 
/// </summary>

internal bool fn_isShippingBuild ()
{

return  SafeNativeMethods.mwle_fn_isShippingBuild()>=1;
}
/// <summary>
/// Test whether the engine has been compiled with TORQUE_DEBUG, i.e. if it includes debugging functionality.
///    @return True if this is a debug build; false otherwise.
///    @ingroup Platform )
/// 
/// </summary>

internal bool fn_isDebugBuild ()
{

return  SafeNativeMethods.mwle_fn_isDebugBuild()>=1;
}
/// <summary>
/// Test whether the engine has been compiled with TORQUE_TOOLS, i.e. if it includes tool-related functionality.
///    @return True if this is a tool build; false otherwise.
///    @ingroup Platform )
/// 
/// </summary>

internal bool fn_isToolBuild ()
{

return  SafeNativeMethods.mwle_fn_isToolBuild()>=1;
}
/// <summary>
/// @brief Prints the scripting call stack to the console log.
///    Used to trace functions called from within functions. Can help discover what functions were called 
///    (and not yet exited) before the current point in scripts.
///    @ingroup Debugging)
/// 
/// </summary>

internal void fn_backtrace ()
{

SafeNativeMethods.mwle_fn_backtrace();
}
/// <summary>
/// @brief Returns true if the identifier is the name of a declared package.
///    @ingroup Packages)
/// 
/// </summary>

internal bool fn_isPackage (string identifier)
{
var sbidentifier = new StringBuilder(identifier, 1024);

return  SafeNativeMethods.mwle_fn_isPackage(sbidentifier)>=1;
}
/// <summary>
/// @brief Activates an existing package.
///    The activation occurs by updating the namespace linkage of existing functions and methods. 
///    If the package is already activated the function does nothing.
///    @ingroup Packages)
/// 
/// </summary>

internal void fn_activatePackage (string packageName)
{
var sbpackageName = new StringBuilder(packageName, 1024);

SafeNativeMethods.mwle_fn_activatePackage(sbpackageName);
}
/// <summary>
/// @brief Deactivates a previously activated package.
///    The package is deactivated by removing its namespace linkages to any function or method. 
///    If there are any packages above this one in the stack they are deactivated as well. 
///    If the package is not on the stack this function does nothing.
///    @ingroup Packages)
/// 
/// </summary>

internal void fn_deactivatePackage (string packageName)
{
var sbpackageName = new StringBuilder(packageName, 1024);

SafeNativeMethods.mwle_fn_deactivatePackage(sbpackageName);
}
/// <summary>
/// @brief Returns a space delimited list of the active packages in stack order.
///    @ingroup Packages)
/// 
/// </summary>

internal string fn_getPackageList ()
{
var returnbuff = new StringBuilder(4096);

SafeNativeMethods.mwle_fn_getPackageList(returnbuff);
return returnbuff.ToString();

}
/// <summary>
/// ( ConsoleLogger, attach, bool, 2, 2, () Attaches the logger to the console and begins writing to file
/// 			  @tsexample
/// 			  // Create the logger
/// 			  // Will automatically start writing to testLogging.txt with normal priority
/// 			  new ConsoleLogger(logger, \"testLogging.txt\", false);
/// 			  // Send something to the console, with the logger consumes and writes to file
/// 			  echo(\"This is logged to the file\");
/// 			  // Stop logging, but do not delete the logger
/// 			  logger.detach();
/// 			  echo(\"This is not logged to the file\");
/// 			  // Attach the logger to the console again
/// 			  logger.attach();
/// 			  // Logging has resumed
/// 			  echo(\"Logging has resumed\");
/// 			  @endtsexample)
/// 
/// </summary>

internal bool fnConsoleLogger_attach (string consolelogger)
{
var sbconsolelogger = new StringBuilder(consolelogger, 1024);

return  SafeNativeMethods.mwle_fnConsoleLogger_attach(sbconsolelogger)>=1;
}
/// <summary>
/// ( ConsoleLogger, detach, bool, 2, 2, () Detaches the logger from the console and stops writing to file
/// 			  @tsexample
/// 			  // Create the logger
/// 			  // Will automatically start writing to testLogging.txt with normal priority
/// 			  new ConsoleLogger(logger, \"testLogging.txt\", false);
/// 			  // Send something to the console, with the logger consumes and writes to file
/// 			  echo(\"This is logged to the file\");
/// 			  // Stop logging, but do not delete the logger
/// 			  logger.detach();
/// 			  echo(\"This is not logged to the file\");
/// 			  // Attach the logger to the console again
/// 			  logger.attach();
/// 			  // Logging has resumed
/// 			  echo(\"Logging has resumed\");
/// 			  @endtsexample)
/// 
/// </summary>

internal bool fnConsoleLogger_detach (string consolelogger)
{
var sbconsolelogger = new StringBuilder(consolelogger, 1024);

return  SafeNativeMethods.mwle_fnConsoleLogger_detach(sbconsolelogger)>=1;
}
/// <summary>
/// @brief Returns true if the passed identifier is the name of a declared class.
/// 				@ingroup Console)
/// 
/// </summary>

internal bool fn_isClass (string identifier)
{
var sbidentifier = new StringBuilder(identifier, 4096);

return  SafeNativeMethods.mwle_fn_isClass(sbidentifier)>=1;
}
/// <summary>
/// @brief Returns true if the class is derived from the super class.
///    If either class doesn't exist this returns false.
///    @param className The class name.
///    @param superClassName The super class to look for.
///    @ingroup Console)
/// 
/// </summary>

internal bool fn_isMemberOfClass (string className, string superClassName)
{
var sbclassName = new StringBuilder(className, 4096);
var sbsuperClassName = new StringBuilder(superClassName, 4096);

return  SafeNativeMethods.mwle_fn_isMemberOfClass(sbclassName, sbsuperClassName)>=1;
}
/// <summary>
/// @brief Returns the description string for the named class.
/// 				@param className The name of the class.
/// 				@return The class description in string format.
/// 				@ingroup Console)
/// 
/// </summary>

internal string fn_getDescriptionOfClass (string className)
{
var returnbuff = new StringBuilder(4096);
var sbclassName = new StringBuilder(className, 4096);

SafeNativeMethods.mwle_fn_getDescriptionOfClass(sbclassName, returnbuff);
return returnbuff.ToString();

}
/// <summary>
/// @brief Returns the category of the given class.
/// 				@param className The name of the class.
/// 				@ingroup Console)
/// 
/// </summary>

internal string fn_getCategoryOfClass (string className)
{
var returnbuff = new StringBuilder(4096);
var sbclassName = new StringBuilder(className, 4096);

SafeNativeMethods.mwle_fn_getCategoryOfClass(sbclassName, returnbuff);
return returnbuff.ToString();

}
/// <summary>
/// @brief Dumps network statistics for each class to the console.
/// 
///    The returned <i>avg</i>, <i>min</i> and <i>max</i> values are in bits sent per update.  
///    The <i>num</i> value is the total number of events collected.
/// 
///    @note This method only works when TORQUE_NET_STATS is defined in torqueConfig.h.
///    @ingroup Networking )
/// 
/// </summary>

internal void fn_dumpNetStats ()
{

SafeNativeMethods.mwle_fn_dumpNetStats();
}
/// <summary>
/// (FieldBrushObject, queryGroups, const char*, 3, 3, (simObject) Query available static-field groups for selected object./
///                                                                 @param simObject Object to query static-field groups on.
/// 			                                                    @return Space-seperated static-field group list.)
/// 
/// </summary>

internal string fnFieldBrushObject_queryGroups (string fieldbrushobject, string a2)
{
var returnbuff = new StringBuilder(4096);
var sbfieldbrushobject = new StringBuilder(fieldbrushobject, 1024);
var sba2 = new StringBuilder(a2, 4096);

SafeNativeMethods.mwle_fnFieldBrushObject_queryGroups(sbfieldbrushobject, sba2, returnbuff);
return returnbuff.ToString();

}
/// <summary>
/// (FieldBrushObject, queryFields, const char*, 3, 4, (simObject, [groupList]) Query available static-fields for selected object./
///                                                                 @param simObject Object to query static-fields on.
///                                                                 @param groupList groups to filter static-fields against.
/// 			                                                    @return Space-seperated static-field list.)
/// 
/// </summary>

internal string fnFieldBrushObject_queryFields (string fieldbrushobject, string a2, string a3)
{
var returnbuff = new StringBuilder(4096);
var sbfieldbrushobject = new StringBuilder(fieldbrushobject, 1024);
var sba2 = new StringBuilder(a2, 4096);
var sba3 = new StringBuilder(a3, 4096);

SafeNativeMethods.mwle_fnFieldBrushObject_queryFields(sbfieldbrushobject, sba2, sba3, returnbuff);
return returnbuff.ToString();

}
/// <summary>
/// (FieldBrushObject, copyFields, void, 3, 4, (simObject, [fieldList]) Copy selected static-fields for selected object./
///                                                         @param simObject Object to copy static-fields from.
///                                                         @param fieldList fields to filter static-fields against.
/// 			                                            @return No return value.)
/// 
/// </summary>

internal void fnFieldBrushObject_copyFields (string fieldbrushobject, string a2, string a3)
{
var sbfieldbrushobject = new StringBuilder(fieldbrushobject, 1024);
var sba2 = new StringBuilder(a2, 4096);
var sba3 = new StringBuilder(a3, 4096);

SafeNativeMethods.mwle_fnFieldBrushObject_copyFields(sbfieldbrushobject, sba2, sba3);
}
/// <summary>
/// (FieldBrushObject, pasteFields, void, 3, 3, (simObject) Paste copied static-fields to selected object./
///                                                         @param simObject Object to paste static-fields to.
/// 			                                            @return No return value.)
/// 
/// </summary>

internal void fnFieldBrushObject_pasteFields (string fieldbrushobject, string a2)
{
var sbfieldbrushobject = new StringBuilder(fieldbrushobject, 1024);
var sba2 = new StringBuilder(a2, 4096);

SafeNativeMethods.mwle_fnFieldBrushObject_pasteFields(sbfieldbrushobject, sba2);
}
/// <summary>
/// @brief Returns the first file in the directory system matching the given pattern.
/// 
///    Use the corresponding findNextFile() to step through 
///    the results.  If you're only interested in the number of files returned by the 
///    pattern match, use getFileCount().
/// 
///    This function differs from findFirstFileMultiExpr() in that it supports a single search 
///    pattern being passed in.
/// 
///    @note You cannot run multiple simultaneous file system searches with these functions.  Each 
///    call to findFirstFile() and findFirstFileMultiExpr() initiates a new search and renders 
///    a previous search invalid.
/// 
///    @param pattern The path and file name pattern to match against.
///    @param recurse If true, the search will exhaustively recurse into subdirectories of the given path and match the given filename pattern.
///    @return The path of the first file matched by the search or an empty string if no matching file could be found.
/// 
///    @tsexample
///       // Execute all .cs files in a subdirectory and its subdirectories.
///       for( %file = findFirstFile( \"subdirectory/*.cs\" ); %file !$= \"\"; %file = findNextFile() )
///          exec( %file );
///    @endtsexample
/// 
///    @see findNextFile()
///    @see getFileCount()
///    @see findFirstFileMultiExpr()
///    @ingroup FileSearches )
/// 
/// </summary>

internal string fn_findFirstFile (string pattern, bool recurse)
{
var returnbuff = new StringBuilder(1024);
var sbpattern = new StringBuilder(pattern, 4096);

SafeNativeMethods.mwle_fn_findFirstFile(sbpattern, recurse, returnbuff);
return returnbuff.ToString();

}
/// <summary>
///  ),
///    @brief Returns the next file matching a search begun in findFirstFile().
/// 
///    @param pattern The path and file name pattern to match against.  This is optional 
///    and may be left out as it is not used by the code.  It is here for legacy reasons.
///    @return The path of the next filename matched by the search or an empty string if no more files match.
/// 
///    @tsexample
///       // Execute all .cs files in a subdirectory and its subdirectories.
///       for( %file = findFirstFile( \"subdirectory/*.cs\" ); %file !$= \"\"; %file = findNextFile() )
///          exec( %file );
///    @endtsexample
/// 
///    @see findFirstFile()
///    @ingroup FileSearches )
/// 
/// </summary>

internal string fn_findNextFile (string pattern)
{
var returnbuff = new StringBuilder(1024);
var sbpattern = new StringBuilder(pattern, 4096);

SafeNativeMethods.mwle_fn_findNextFile(sbpattern, returnbuff);
return returnbuff.ToString();

}
/// <summary>
/// @brief Returns the number of files in the directory tree that match the given patterns
/// 
///    This function differs from getFileCountMultiExpr() in that it supports a single search 
///    pattern being passed in.
/// 
///    If you're interested in a list of files that match the given pattern and not just 
///    the number of files, use findFirstFile() and findNextFile().
/// 
///    @param pattern The path and file name pattern to match against.
///    @param recurse If true, the search will exhaustively recurse into subdirectories of the given path and match the given filename pattern 
///       counting files in subdirectories.
///    @return Number of files located using the pattern
/// 
///    @tsexample
///       // Count the number of .cs files in a subdirectory and its subdirectories.
///       getFileCount( \"subdirectory/*.cs\" );
///    @endtsexample
/// 
///    @see findFirstFile()
///    @see findNextFile()
///    @see getFileCountMultiExpr()
///    @ingroup FileSearches )
/// 
/// </summary>

internal int fn_getFileCount (string pattern, bool recurse)
{
var sbpattern = new StringBuilder(pattern, 4096);

return  SafeNativeMethods.mwle_fn_getFileCount(sbpattern, recurse);
}
/// <summary>
/// @brief Returns the first file in the directory system matching the given patterns.
/// 
///    Use the corresponding findNextFileMultiExpr() to step through 
///    the results.  If you're only interested in the number of files returned by the 
///    pattern match, use getFileCountMultiExpr().
/// 
///    This function differs from findFirstFile() in that it supports multiple search patterns 
///    to be passed in.
/// 
///    @note You cannot run multiple simultaneous file system searches with these functions.  Each 
///    call to findFirstFile() and findFirstFileMultiExpr() initiates a new search and renders 
///    a previous search invalid.
/// 
/// 	@param pattern The path and file name pattern to match against, such as *.cs.  Separate 
///    multiple patterns with TABs.  For example: \"*.cs\" TAB \"*.dso\"
/// 	@param recurse If true, the search will exhaustively recurse into subdirectories 
/// 	of the given path and match the given filename patterns.
///    @return String of the first matching file path, or an empty string if no matching 
///    files were found.
/// 
///    @tsexample
///       // Find all DTS or Collada models
///       %filePatterns = \"*.dts\" TAB \"*.dae\";
///       %fullPath = findFirstFileMultiExpr( %filePatterns );
///       while ( %fullPath !$= \"\" )
///       {
///          echo( %fullPath );
///          %fullPath = findNextFileMultiExpr( %filePatterns );
///       }
///    @endtsexample
/// 
///    @see findNextFileMultiExpr()
///    @see getFileCountMultiExpr()
///    @see findFirstFile()
/// 	@ingroup FileSearches)
/// 
/// </summary>

internal string fn_findFirstFileMultiExpr (string pattern, bool recurse)
{
var returnbuff = new StringBuilder(1024);
var sbpattern = new StringBuilder(pattern, 4096);

SafeNativeMethods.mwle_fn_findFirstFileMultiExpr(sbpattern, recurse, returnbuff);
return returnbuff.ToString();

}
/// <summary>
/// ),
///    @brief Returns the next file matching a search begun in findFirstFileMultiExpr().
/// 
/// 	@param pattern The path and file name pattern to match against.  This is optional 
///    and may be left out as it is not used by the code.  It is here for legacy reasons.
///    @return String of the next matching file path, or an empty string if no matching 
///    files were found.
/// 
///    @tsexample
///       // Find all DTS or Collada models
///       %filePatterns = \"*.dts\" TAB \"*.dae\";
///       %fullPath = findFirstFileMultiExpr( %filePatterns );
///       while ( %fullPath !$= \"\" )
///       {
///          echo( %fullPath );
///          %fullPath = findNextFileMultiExpr( %filePatterns );
///       }
///    @endtsexample
/// 
///    @see findFirstFileMultiExpr()
/// 	@ingroup FileSearches)
/// 
/// </summary>

internal string fn_findNextFileMultiExpr (string pattern)
{
var returnbuff = new StringBuilder(1024);
var sbpattern = new StringBuilder(pattern, 4096);

SafeNativeMethods.mwle_fn_findNextFileMultiExpr(sbpattern, returnbuff);
return returnbuff.ToString();

}
/// <summary>
/// @brief Returns the number of files in the directory tree that match the given patterns
/// 
///    If you're interested in a list of files that match the given patterns and not just 
///    the number of files, use findFirstFileMultiExpr() and findNextFileMultiExpr().
/// 
/// 	@param pattern The path and file name pattern to match against, such as *.cs.  Separate 
///    multiple patterns with TABs.  For example: \"*.cs\" TAB \"*.dso\"
/// 	@param recurse If true, the search will exhaustively recurse into subdirectories 
/// 	of the given path and match the given filename pattern.
/// 	@return Number of files located using the patterns
/// 
///    @tsexample
///       // Count all DTS or Collada models
///       %filePatterns = \"*.dts\" TAB \"*.dae\";
///       echo( \"Nunmer of shape files:\" SPC getFileCountMultiExpr( %filePatterns ) );
///    @endtsexample
/// 
///    @see findFirstFileMultiExpr()
///    @see findNextFileMultiExpr()
/// 	@ingroup FileSearches)
/// 
/// </summary>

internal int fn_getFileCountMultiExpr (string pattern, bool recurse)
{
var sbpattern = new StringBuilder(pattern, 4096);

return  SafeNativeMethods.mwle_fn_getFileCountMultiExpr(sbpattern, recurse);
}
/// <summary>
/// @brief Provides the CRC checksum of the given file.
///    
///    @param fileName The path to the file.
///    @return The calculated CRC checksum of the file, or -1 if the file 
///    could not be found.
///    
///    @ingroup FileSystem)
/// 
/// </summary>

internal int fn_getFileCRC (string fileName)
{
var sbfileName = new StringBuilder(fileName, 4096);

return  SafeNativeMethods.mwle_fn_getFileCRC(sbfileName);
}
/// <summary>
/// @brief Determines if the specified file exists or not
///    
///    @param fileName The path to the file.
///    @return Returns true if the file was found.
///    
///    @ingroup FileSystem)
/// 
/// </summary>

internal bool fn_isFile (string fileName)
{
var sbfileName = new StringBuilder(fileName, 4096);

return  SafeNativeMethods.mwle_fn_isFile(sbfileName)>=1;
}
/// <summary>
/// @brief Determines if a specified directory exists or not
/// 
/// 	@param directory String containing path in the form of \"foo/bar\"
///    @return Returns true if the directory was found.
/// 
/// 	@note Do not include a trailing slash '/'.
/// 
/// 	@ingroup FileSystem)
/// 
/// </summary>

internal bool fn_IsDirectory (string directory)
{
var sbdirectory = new StringBuilder(directory, 4096);

return  SafeNativeMethods.mwle_fn_IsDirectory(sbdirectory)>=1;
}
/// <summary>
/// @brief Determines if a file name can be written to using File I/O
/// 
/// 	@param fileName Name and path of file to check
/// 	@return Returns true if the file can be written to.
/// 
/// 	@ingroup FileSystem)
/// 
/// </summary>

internal bool fn_isWriteableFileName (string fileName)
{
var sbfileName = new StringBuilder(fileName, 4096);

return  SafeNativeMethods.mwle_fn_isWriteableFileName(sbfileName)>=1;
}
/// <summary>
/// @brief Start watching resources for file changes
///    Typically this is called during initializeCore().
///    @see stopFileChangeNotifications()
/// 	@ingroup FileSystem)
/// 
/// </summary>

internal void fn_startFileChangeNotifications ()
{

SafeNativeMethods.mwle_fn_startFileChangeNotifications();
}
/// <summary>
/// @brief Stop watching resources for file changes
///    Typically this is called during shutdownCore().
///    @see startFileChangeNotifications()
/// 	@ingroup FileSystem)
/// 
/// </summary>

internal void fn_stopFileChangeNotifications ()
{

SafeNativeMethods.mwle_fn_stopFileChangeNotifications();
}
/// <summary>
/// @brief Gathers a list of directories starting at the given path.
/// 
/// 	@param path String containing the path of the directory
/// 	@param depth Depth of search, as in how many subdirectories to parse through
/// 	@return Tab delimited string containing list of directories found during search, \"\" if no files were found
/// 
/// 	@ingroup FileSystem)
/// 
/// </summary>

internal string fn_getDirectoryList (string path, int depth)
{
var returnbuff = new StringBuilder(1024);
var sbpath = new StringBuilder(path, 4096);

SafeNativeMethods.mwle_fn_getDirectoryList(sbpath, depth, returnbuff);
return returnbuff.ToString();

}
/// <summary>
/// @brief Determines the size of a file on disk
/// 
/// 	@param fileName Name and path of the file to check
/// 	@return Returns filesize in KB, or -1 if no file
/// 
/// 	@ingroup FileSystem)
/// 
/// </summary>

internal int fn_fileSize (string fileName)
{
var sbfileName = new StringBuilder(fileName, 4096);

return  SafeNativeMethods.mwle_fn_fileSize(sbfileName);
}
/// <summary>
/// @brief Returns a platform specific formatted string with the last modified time for the file.
/// 
/// 	@param fileName Name and path of file to check
/// 	@return Formatted string (OS specific) containing modified time, \"9/3/2010 12:33:47 PM\" for example
/// 	@ingroup FileSystem)
/// 
/// </summary>

internal string fn_fileModifiedTime (string fileName)
{
var returnbuff = new StringBuilder(1024);
var sbfileName = new StringBuilder(fileName, 4096);

SafeNativeMethods.mwle_fn_fileModifiedTime(sbfileName, returnbuff);
return returnbuff.ToString();

}
/// <summary>
/// @brief Returns a platform specific formatted string with the creation time for the file.
/// 
///    @param fileName Name and path of file to check
///    @return Formatted string (OS specific) containing created time, \"9/3/2010 12:33:47 PM\" for example
///    @ingroup FileSystem)
/// 
/// </summary>

internal string fn_fileCreatedTime (string fileName)
{
var returnbuff = new StringBuilder(1024);
var sbfileName = new StringBuilder(fileName, 4096);

SafeNativeMethods.mwle_fn_fileCreatedTime(sbfileName, returnbuff);
return returnbuff.ToString();

}
/// <summary>
/// @brief Delete a file from the hard drive
/// 
/// 	@param path Name and path of the file to delete
/// 	@note THERE IS NO RECOVERY FROM THIS. Deleted file is gone for good.
/// 	@return True if file was successfully deleted
/// 	@ingroup FileSystem)
/// 
/// </summary>

internal bool fn_fileDelete (string path)
{
var sbpath = new StringBuilder(path, 4096);

return  SafeNativeMethods.mwle_fn_fileDelete(sbpath)>=1;
}
/// <summary>
/// @brief Get the extension of a file
/// 
/// 	@param fileName Name and path of file
/// 	@return String containing the extension, such as \".exe\" or \".cs\"
/// 	@ingroup FileSystem)
/// 
/// </summary>

internal string fn_fileExt (string fileName)
{
var returnbuff = new StringBuilder(1024);
var sbfileName = new StringBuilder(fileName, 4096);

SafeNativeMethods.mwle_fn_fileExt(sbfileName, returnbuff);
return returnbuff.ToString();

}
/// <summary>
/// @brief Get the base of a file name (removes extension)
/// 
///    @param fileName Name and path of file to check
///    @return String containing the file name, minus extension
///    @ingroup FileSystem)
/// 
/// </summary>

internal string fn_fileBase (string fileName)
{
var returnbuff = new StringBuilder(1024);
var sbfileName = new StringBuilder(fileName, 4096);

SafeNativeMethods.mwle_fn_fileBase(sbfileName, returnbuff);
return returnbuff.ToString();

}
/// <summary>
/// @brief Get the file name of a file (removes extension and path)
/// 
/// 	@param fileName Name and path of file to check
/// 	@return String containing the file name, minus extension and path
/// 	@ingroup FileSystem)
/// 
/// </summary>

internal string fn_fileName (string fileName)
{
var returnbuff = new StringBuilder(1024);
var sbfileName = new StringBuilder(fileName, 4096);

SafeNativeMethods.mwle_fn_fileName(sbfileName, returnbuff);
return returnbuff.ToString();

}
/// <summary>
/// @brief Get the path of a file (removes name and extension)
/// 
/// 	@param fileName Name and path of file to check
/// 	@return String containing the path, minus name and extension
/// 	@ingroup FileSystem)
/// 
/// </summary>

internal string fn_filePath (string fileName)
{
var returnbuff = new StringBuilder(1024);
var sbfileName = new StringBuilder(fileName, 4096);

SafeNativeMethods.mwle_fn_filePath(sbfileName, returnbuff);
return returnbuff.ToString();

}
/// <summary>
/// @brief Reports the current directory
/// 
/// 	@return String containing full file path of working directory
/// 	@ingroup FileSystem)
/// 
/// </summary>

internal string fn_getWorkingDirectory ()
{
var returnbuff = new StringBuilder(1024);

SafeNativeMethods.mwle_fn_getWorkingDirectory(returnbuff);
return returnbuff.ToString();

}
/// <summary>
/// ),
/// 	@brief Converts a relative file path to a full path
/// 
/// 	For example, \"./console.log\" becomes \"C:/Torque/t3d/examples/FPS Example/game/console.log\"
/// 	@param path Name of file or path to check
///    @param cwd Optional current working directory from which to build the full path.
/// 	@return String containing non-relative directory of path
/// 	@ingroup FileSystem)
/// 
/// </summary>

internal string fn_makeFullPath (string path, string cwd)
{
var returnbuff = new StringBuilder(1024);
var sbpath = new StringBuilder(path, 4096);
var sbcwd = new StringBuilder(cwd, 4096);

SafeNativeMethods.mwle_fn_makeFullPath(sbpath, sbcwd, returnbuff);
return returnbuff.ToString();

}
/// <summary>
/// ),
/// 	@brief Turns a full or local path to a relative one
/// 
///    For example, \"./game/art\" becomes \"game/art\"
///    @param path Full path (may include a file) to convert
///    @param to Optional base path used for the conversion.  If not supplied the current 
///    working directory is used.
/// 	@returns String containing relative path
/// 	@ingroup FileSystem)
/// 
/// </summary>

internal string fn_makeRelativePath (string path, string to)
{
var returnbuff = new StringBuilder(1024);
var sbpath = new StringBuilder(path, 4096);
var sbto = new StringBuilder(to, 4096);

SafeNativeMethods.mwle_fn_makeRelativePath(sbpath, sbto, returnbuff);
return returnbuff.ToString();

}
/// <summary>
/// @brief Combines two separate strings containing a file path and file name together into a single string
/// 
/// 	@param path String containing file path
/// 	@param file String containing file name
/// 	@return String containing concatenated file name and path
/// 	@ingroup FileSystem)
/// 
/// </summary>

internal string fn_pathConcat (string path, string file)
{
var returnbuff = new StringBuilder(1024);
var sbpath = new StringBuilder(path, 4096);
var sbfile = new StringBuilder(file, 4096);

SafeNativeMethods.mwle_fn_pathConcat(sbpath, sbfile, returnbuff);
return returnbuff.ToString();

}
/// <summary>
/// @brief Gets the name of the game's executable
/// 
/// 	@return String containing this game's executable name
/// 	@ingroup FileSystem)
/// 
/// </summary>

internal string fn_getExecutableName ()
{
var returnbuff = new StringBuilder(1024);

SafeNativeMethods.mwle_fn_getExecutableName(returnbuff);
return returnbuff.ToString();

}
/// <summary>
/// @brief Get the absolute path to the directory that contains the main.cs script from which the engine was started.
/// 
///    This directory will usually contain all the game assets and, in a user-side game installation, will usually be 
///    read-only.
///    @return The path to the main game assets.
///    @ingroup FileSystem)
/// 
/// </summary>

internal string fn_getMainDotCsDir ()
{
var returnbuff = new StringBuilder(1024);

SafeNativeMethods.mwle_fn_getMainDotCsDir(returnbuff);
return returnbuff.ToString();

}
/// <summary>
/// @brief Open the given folder in the system's file manager.
///    @param path full path to a directory.
///    @note Only present in a Tools build of Torque.
///    @ingroup FileSystem)
/// 
/// </summary>

internal void fn_openFolder (string path)
{
var sbpath = new StringBuilder(path, 4096);

SafeNativeMethods.mwle_fn_openFolder(sbpath);
}
/// <summary>
/// @brief Open the given @a file through the system.  This will usually open the file in its 
///    associated application.
///    @param file %Path of the file to open.
///    @note Only present in a Tools build of Torque.
///    @ingroup FileSystem)
/// 
/// </summary>

internal void fn_openFile (string file)
{
var sbfile = new StringBuilder(file, 4096);

SafeNativeMethods.mwle_fn_openFile(sbfile);
}
/// <summary>
/// @brief Copy a file to a new location.
///    @param fromFile %Path of the file to copy.
///    @param toFile %Path where to copy @a fromFile to.
///    @param noOverwrite If true, then @a fromFile will not overwrite a file that may already exist at @a toFile.
///    @return True if the file was successfully copied, false otherwise.
///    @note Only present in a Tools build of Torque.
///    @ingroup FileSystem)
/// 
/// </summary>

internal bool fn_pathCopy (string fromFile, string toFile, bool noOverwrite)
{
var sbfromFile = new StringBuilder(fromFile, 4096);
var sbtoFile = new StringBuilder(toFile, 4096);

return  SafeNativeMethods.mwle_fn_pathCopy(sbfromFile, sbtoFile, noOverwrite)>=1;
}
/// <summary>
/// @brief Return the current working directory.
///    @return The absolute path of the current working directory.
///    @note Only present in a Tools build of Torque.
///    @see getWorkingDirectory()
///    @ingroup FileSystem)
/// 
/// </summary>

internal string fn_getCurrentDirectory ()
{
var returnbuff = new StringBuilder(1024);

SafeNativeMethods.mwle_fn_getCurrentDirectory(returnbuff);
return returnbuff.ToString();

}
/// <summary>
/// @brief Set the current working directory.
///    @param path The absolute or relative (to the current working directory) path of the directory which should be made the new 
///       working directory.
///    @return True if the working directory was successfully changed to @a path, false otherwise.
///    @note Only present in a Tools build of Torque.
///    @ingroup FileSystem)
/// 
/// </summary>

internal bool fn_setCurrentDirectory (string path)
{
var sbpath = new StringBuilder(path, 4096);

return  SafeNativeMethods.mwle_fn_setCurrentDirectory(sbpath)>=1;
}
/// <summary>
/// @brief Create the given directory or the path leading to the given filename.
///    If @a path ends in a trailing slash, then all components in the given path will be created as directories (if not already in place).  If @a path, 
///    does @b not end in a trailing slash, then the last component of the path is taken to be a file name and only the directory components 
///    of the path will be created.
///    @param path The path to create.
///    @note Only present in a Tools build of Torque.
///    @ingroup FileSystem )
/// 
/// </summary>

internal bool fn_createPath (string path)
{
var sbpath = new StringBuilder(path, 4096);

return  SafeNativeMethods.mwle_fn_createPath(sbpath)>=1;
}
/// <summary>
/// ( PersistenceManager, deleteObjectsFromFile, void, 3, 3, ( fileName )
///               Delete all of the objects that are created from the given file. )
/// 
/// </summary>

internal void fnPersistenceManager_deleteObjectsFromFile (string persistencemanager, string a2)
{
var sbpersistencemanager = new StringBuilder(persistencemanager, 1024);
var sba2 = new StringBuilder(a2, 4096);

SafeNativeMethods.mwle_fnPersistenceManager_deleteObjectsFromFile(sbpersistencemanager, sba2);
}
/// <summary>
/// ( PersistenceManager, setDirty, void, 3, 4, (SimObject object, [filename])
///               Mark an existing SimObject as dirty (will be written out when saveDirty() is called).)
/// 
/// </summary>

internal void fnPersistenceManager_setDirty (string persistencemanager, string a2, string a3)
{
var sbpersistencemanager = new StringBuilder(persistencemanager, 1024);
var sba2 = new StringBuilder(a2, 4096);
var sba3 = new StringBuilder(a3, 4096);

SafeNativeMethods.mwle_fnPersistenceManager_setDirty(sbpersistencemanager, sba2, sba3);
}
/// <summary>
/// ( PersistenceManager, removeDirty, void, 3, 3, (SimObject object)
///               Remove a SimObject from the dirty list.)
/// 
/// </summary>

internal void fnPersistenceManager_removeDirty (string persistencemanager, string a2)
{
var sbpersistencemanager = new StringBuilder(persistencemanager, 1024);
var sba2 = new StringBuilder(a2, 4096);

SafeNativeMethods.mwle_fnPersistenceManager_removeDirty(sbpersistencemanager, sba2);
}
/// <summary>
/// ( PersistenceManager, isDirty, bool, 3, 3, (SimObject object)
///               Returns true if the SimObject is on the dirty list.)
/// 
/// </summary>

internal bool fnPersistenceManager_isDirty (string persistencemanager, string a2)
{
var sbpersistencemanager = new StringBuilder(persistencemanager, 1024);
var sba2 = new StringBuilder(a2, 4096);

return  SafeNativeMethods.mwle_fnPersistenceManager_isDirty(sbpersistencemanager, sba2)>=1;
}
/// <summary>
/// ( PersistenceManager, hasDirty, bool, 2, 2, ()
///               Returns true if the manager has dirty objects to save. )
/// 
/// </summary>

internal bool fnPersistenceManager_hasDirty (string persistencemanager)
{
var sbpersistencemanager = new StringBuilder(persistencemanager, 1024);

return  SafeNativeMethods.mwle_fnPersistenceManager_hasDirty(sbpersistencemanager)>=1;
}
/// <summary>
/// ( PersistenceManager, getDirtyObjectCount, S32, 2, 2, ()
///               Returns the number of dirty objects. )
/// 
/// </summary>

internal int fnPersistenceManager_getDirtyObjectCount (string persistencemanager)
{
var sbpersistencemanager = new StringBuilder(persistencemanager, 1024);

return  SafeNativeMethods.mwle_fnPersistenceManager_getDirtyObjectCount(sbpersistencemanager);
}
/// <summary>
/// ( PersistenceManager, getDirtyObject, S32, 3, 3, ( index )
///               Returns the ith dirty object. )
/// 
/// </summary>

internal int fnPersistenceManager_getDirtyObject (string persistencemanager, string a2)
{
var sbpersistencemanager = new StringBuilder(persistencemanager, 1024);
var sba2 = new StringBuilder(a2, 4096);

return  SafeNativeMethods.mwle_fnPersistenceManager_getDirtyObject(sbpersistencemanager, sba2);
}
/// <summary>
/// ( PersistenceManager, listDirty, void, 2, 2, ()
///               Prints the dirty list to the console.)
/// 
/// </summary>

internal void fnPersistenceManager_listDirty (string persistencemanager)
{
var sbpersistencemanager = new StringBuilder(persistencemanager, 1024);

SafeNativeMethods.mwle_fnPersistenceManager_listDirty(sbpersistencemanager);
}
/// <summary>
/// ( PersistenceManager, saveDirty, bool, 2, 2, ()
///               Saves all of the SimObject's on the dirty list to their respective files.)
/// 
/// </summary>

internal bool fnPersistenceManager_saveDirty (string persistencemanager)
{
var sbpersistencemanager = new StringBuilder(persistencemanager, 1024);

return  SafeNativeMethods.mwle_fnPersistenceManager_saveDirty(sbpersistencemanager)>=1;
}
/// <summary>
/// ( PersistenceManager, saveDirtyObject, bool, 3, 3, (SimObject object)
///               Save a dirty SimObject to it's file.)
/// 
/// </summary>

internal bool fnPersistenceManager_saveDirtyObject (string persistencemanager, string a2)
{
var sbpersistencemanager = new StringBuilder(persistencemanager, 1024);
var sba2 = new StringBuilder(a2, 4096);

return  SafeNativeMethods.mwle_fnPersistenceManager_saveDirtyObject(sbpersistencemanager, sba2)>=1;
}
/// <summary>
/// ( PersistenceManager, clearAll, void, 2, 2, ()
///               Clears all the tracked objects without saving them. )
/// 
/// </summary>

internal void fnPersistenceManager_clearAll (string persistencemanager)
{
var sbpersistencemanager = new StringBuilder(persistencemanager, 1024);

SafeNativeMethods.mwle_fnPersistenceManager_clearAll(sbpersistencemanager);
}
/// <summary>
/// ( PersistenceManager, removeObjectFromFile, void, 3, 4, (SimObject object, [filename])
///               Remove an existing SimObject from a file (can optionally specify a different file than \
///                the one it was created in.)
/// 
/// </summary>

internal void fnPersistenceManager_removeObjectFromFile (string persistencemanager, string a2, string a3)
{
var sbpersistencemanager = new StringBuilder(persistencemanager, 1024);
var sba2 = new StringBuilder(a2, 4096);
var sba3 = new StringBuilder(a3, 4096);

SafeNativeMethods.mwle_fnPersistenceManager_removeObjectFromFile(sbpersistencemanager, sba2, sba3);
}
/// <summary>
/// ( PersistenceManager, removeField, void, 4, 4, (SimObject object, string fieldName)
///               Remove a specific field from an object declaration.)
/// 
/// </summary>

internal void fnPersistenceManager_removeField (string persistencemanager, string a2, string a3)
{
var sbpersistencemanager = new StringBuilder(persistencemanager, 1024);
var sba2 = new StringBuilder(a2, 4096);
var sba3 = new StringBuilder(a3, 4096);

SafeNativeMethods.mwle_fnPersistenceManager_removeField(sbpersistencemanager, sba2, sba3);
}
/// <summary>
/// (expandFilename, const char*, 2, 2, (string filename)
/// 				@brief Grabs the full path of a specified file
/// 				@param filename Name of the local file to locate
/// 				@return String containing the full filepath on disk
/// 				@ingroup FileSystem)
/// 
/// </summary>

internal string fn__expandFilename (string a1)
{
var returnbuff = new StringBuilder(4096);
var sba1 = new StringBuilder(a1, 4096);

SafeNativeMethods.mwle_fn__expandFilename(sba1, returnbuff);
return returnbuff.ToString();

}
/// <summary>
/// (isObject, bool, 2, 2, isObject(object))
/// 
/// </summary>

internal bool fn__isObject (string a1)
{
var sba1 = new StringBuilder(a1, 4096);

return  SafeNativeMethods.mwle_fn__isObject(sba1)>=1;
}
/// <summary>
/// (spawnObject, S32, 3, 6, spawnObject(class [, dataBlock, name, properties, script])
/// 				@hide)
/// 
/// </summary>

internal int fn__spawnObject (string a1, string a2, string a3, string a4, string a5)
{
var sba1 = new StringBuilder(a1, 4096);
var sba2 = new StringBuilder(a2, 4096);
var sba3 = new StringBuilder(a3, 4096);
var sba4 = new StringBuilder(a4, 4096);
var sba5 = new StringBuilder(a5, 4096);

return  SafeNativeMethods.mwle_fn__spawnObject(sba1, sba2, sba3, sba4, sba5);
}
/// <summary>
/// (schedule, S32, 4, 0, schedule(time, refobject|0, command, <arg1...argN>))
/// 
/// </summary>

internal int fn__schedule (string a1, string a2, string a3, string a4, string a5, string a6, string a7, string a8, string a9, string a10, string a11, string a12, string a13, string a14, string a15, string a16, string a17, string a18, string a19)
{
var sba1 = new StringBuilder(a1, 4096);
var sba2 = new StringBuilder(a2, 4096);
var sba3 = new StringBuilder(a3, 4096);
var sba4 = new StringBuilder(a4, 4096);
var sba5 = new StringBuilder(a5, 4096);
var sba6 = new StringBuilder(a6, 4096);
var sba7 = new StringBuilder(a7, 4096);
var sba8 = new StringBuilder(a8, 4096);
var sba9 = new StringBuilder(a9, 4096);
var sba10 = new StringBuilder(a10, 4096);
var sba11 = new StringBuilder(a11, 4096);
var sba12 = new StringBuilder(a12, 4096);
var sba13 = new StringBuilder(a13, 4096);
var sba14 = new StringBuilder(a14, 4096);
var sba15 = new StringBuilder(a15, 4096);
var sba16 = new StringBuilder(a16, 4096);
var sba17 = new StringBuilder(a17, 4096);
var sba18 = new StringBuilder(a18, 4096);
var sba19 = new StringBuilder(a19, 4096);

return  SafeNativeMethods.mwle_fn__schedule(sba1, sba2, sba3, sba4, sba5, sba6, sba7, sba8, sba9, sba10, sba11, sba12, sba13, sba14, sba15, sba16, sba17, sba18, sba19);
}
/// <summary>
/// (getUniqueName, const char*, 2, 2, 
/// 	( String baseName )
/// 	@brief Returns a unique unused SimObject name based on a given base name.
/// 	@baseName Name to conver to a unique string if another instance exists
/// 	@note Currently only used by editors
/// 	@ingroup Editors
/// 	@internal)
/// 
/// </summary>

internal string fn__getUniqueName (string a1)
{
var returnbuff = new StringBuilder(4096);
var sba1 = new StringBuilder(a1, 4096);

SafeNativeMethods.mwle_fn__getUniqueName(sba1, returnbuff);
return returnbuff.ToString();

}
/// <summary>
/// (getUniqueInternalName, const char*, 4, 4,
///    ( String baseName, SimSet set, bool searchChildren )
///    @brief Returns a unique unused internal name within the SimSet/Group based on a given base name.
///    @note Currently only used by editors
///    @ingroup Editors
///    @internal)
/// 
/// </summary>

internal string fn__getUniqueInternalName (string a1, string a2, string a3)
{
var returnbuff = new StringBuilder(4096);
var sba1 = new StringBuilder(a1, 4096);
var sba2 = new StringBuilder(a2, 4096);
var sba3 = new StringBuilder(a3, 4096);

SafeNativeMethods.mwle_fn__getUniqueInternalName(sba1, sba2, sba3, returnbuff);
return returnbuff.ToString();

}
/// <summary>
/// ( isValidObjectName, bool, 2, 2, ( string name )
/// 				@brief Return true if the given name makes for a valid object name.
/// 				@param name Name of object
/// 				@return True if name is allowed, false if denied (usually because it starts with a number, _, or invalid character
/// 				@ingroup Console)
/// 
/// </summary>

internal bool fn__isValidObjectName (string a1)
{
var sba1 = new StringBuilder(a1, 4096);

return  SafeNativeMethods.mwle_fn__isValidObjectName(sba1)>=1;
}
/// <summary>
/// Reload the datablock.  This can only be used with a local client configuration. )
/// 
/// </summary>

internal void fn_SimDataBlock_reloadOnLocalClient (string simdatablock)
{
var sbsimdatablock = new StringBuilder(simdatablock, 1024);

SafeNativeMethods.mwle_fn_SimDataBlock_reloadOnLocalClient(sbsimdatablock);
}
/// <summary>
/// Preload all datablocks in client mode.
///    (Server parameter is set to false).  This will take some time to complete.)
/// 
/// </summary>

internal void fn_preloadClientDataBlocks ()
{

SafeNativeMethods.mwle_fn_preloadClientDataBlocks();
}
/// <summary>
/// Delete all the datablocks we've downloaded.
///    This is usually done in preparation of downloading a new set of datablocks, 
///    such as occurs on a mission change, but it's also good post-mission cleanup. )
/// 
/// </summary>

internal void fn_deleteDataBlocks ()
{

SafeNativeMethods.mwle_fn_deleteDataBlocks();
}
/// <summary>
/// ( SimObject, call, const char*, 3, 0, ( string method, string args... ) Dynamically call a method on an object.
///    @param method Name of method to call.
///    @param args Zero or more arguments for the method.
///    @return The result of the method call. )
/// 
/// </summary>

internal string fnSimObject_call (string simobject, string a2, string a3, string a4, string a5, string a6, string a7, string a8, string a9, string a10, string a11, string a12, string a13, string a14, string a15, string a16, string a17, string a18, string a19)
{
var returnbuff = new StringBuilder(4096);
var sbsimobject = new StringBuilder(simobject, 1024);
var sba2 = new StringBuilder(a2, 4096);
var sba3 = new StringBuilder(a3, 4096);
var sba4 = new StringBuilder(a4, 4096);
var sba5 = new StringBuilder(a5, 4096);
var sba6 = new StringBuilder(a6, 4096);
var sba7 = new StringBuilder(a7, 4096);
var sba8 = new StringBuilder(a8, 4096);
var sba9 = new StringBuilder(a9, 4096);
var sba10 = new StringBuilder(a10, 4096);
var sba11 = new StringBuilder(a11, 4096);
var sba12 = new StringBuilder(a12, 4096);
var sba13 = new StringBuilder(a13, 4096);
var sba14 = new StringBuilder(a14, 4096);
var sba15 = new StringBuilder(a15, 4096);
var sba16 = new StringBuilder(a16, 4096);
var sba17 = new StringBuilder(a17, 4096);
var sba18 = new StringBuilder(a18, 4096);
var sba19 = new StringBuilder(a19, 4096);

SafeNativeMethods.mwle_fnSimObject_call(sbsimobject, sba2, sba3, sba4, sba5, sba6, sba7, sba8, sba9, sba10, sba11, sba12, sba13, sba14, sba15, sba16, sba17, sba18, sba19, returnbuff);
return returnbuff.ToString();

}
/// <summary>
/// ( SimObject,schedule, S32, 4, 0, ( float time, string method, string args... ) Delay an invocation of a method.
///    @param time The number of milliseconds after which to invoke the method.  This is a soft limit.
///    @param method The method to call.
///    @param args The arguments with which to call the method.
///    @return The numeric ID of the created schedule.  Can be used to cancel the call. )
/// 
/// </summary>

internal int fnSimObject_schedule (string simobject, string a2, string a3, string a4, string a5, string a6, string a7, string a8, string a9, string a10, string a11, string a12, string a13, string a14, string a15, string a16, string a17, string a18, string a19)
{
var sbsimobject = new StringBuilder(simobject, 1024);
var sba2 = new StringBuilder(a2, 4096);
var sba3 = new StringBuilder(a3, 4096);
var sba4 = new StringBuilder(a4, 4096);
var sba5 = new StringBuilder(a5, 4096);
var sba6 = new StringBuilder(a6, 4096);
var sba7 = new StringBuilder(a7, 4096);
var sba8 = new StringBuilder(a8, 4096);
var sba9 = new StringBuilder(a9, 4096);
var sba10 = new StringBuilder(a10, 4096);
var sba11 = new StringBuilder(a11, 4096);
var sba12 = new StringBuilder(a12, 4096);
var sba13 = new StringBuilder(a13, 4096);
var sba14 = new StringBuilder(a14, 4096);
var sba15 = new StringBuilder(a15, 4096);
var sba16 = new StringBuilder(a16, 4096);
var sba17 = new StringBuilder(a17, 4096);
var sba18 = new StringBuilder(a18, 4096);
var sba19 = new StringBuilder(a19, 4096);

return  SafeNativeMethods.mwle_fnSimObject_schedule(sbsimobject, sba2, sba3, sba4, sba5, sba6, sba7, sba8, sba9, sba10, sba11, sba12, sba13, sba14, sba15, sba16, sba17, sba18, sba19);
}
/// <summary>
/// Test whether the given method is defined on this object.
///    @param The name of the method.
///    @return True if the object implements the given method. )
/// 
/// </summary>

internal bool fn_SimObject_isMethod (string simobject, string methodName)
{
var sbsimobject = new StringBuilder(simobject, 1024);
var sbmethodName = new StringBuilder(methodName, 4096);

return  SafeNativeMethods.mwle_fn_SimObject_isMethod(sbsimobject, sbmethodName)>=1;
}
/// <summary>
/// Get the name of the class namespace assigned to this object.
///    @return The name of the 'class' namespace. )
/// 
/// </summary>

internal string fn_SimObject_getClassNamespace (string simobject)
{
var returnbuff = new StringBuilder(4096);
var sbsimobject = new StringBuilder(simobject, 1024);

SafeNativeMethods.mwle_fn_SimObject_getClassNamespace(sbsimobject, returnbuff);
return returnbuff.ToString();

}
/// <summary>
/// Get the name of the superclass namespace assigned to this object.
///    @return The name of the 'superClass' namespace. )
/// 
/// </summary>

internal string fn_SimObject_getSuperClassNamespace (string simobject)
{
var returnbuff = new StringBuilder(4096);
var sbsimobject = new StringBuilder(simobject, 1024);

SafeNativeMethods.mwle_fn_SimObject_getSuperClassNamespace(sbsimobject, returnbuff);
return returnbuff.ToString();

}
/// <summary>
/// Assign a class namespace to this object.
///    @param name The name of the 'class' namespace for this object. )
/// 
/// </summary>

internal void fn_SimObject_setClassNamespace (string simobject, string name)
{
var sbsimobject = new StringBuilder(simobject, 1024);
var sbname = new StringBuilder(name, 4096);

SafeNativeMethods.mwle_fn_SimObject_setClassNamespace(sbsimobject, sbname);
}
/// <summary>
/// Assign a superclass namespace to this object.
///    @param name The name of the 'superClass' namespace for this object. )
/// 
/// </summary>

internal void fn_SimObject_setSuperClassNamespace (string simobject, string name)
{
var sbsimobject = new StringBuilder(simobject, 1024);
var sbname = new StringBuilder(name, 4096);

SafeNativeMethods.mwle_fn_SimObject_setSuperClassNamespace(sbsimobject, sbname);
}
/// <summary>
/// Get whether the object has been marked as expanded. (in editor)
///    @return True if the object is marked expanded. )
/// 
/// </summary>

internal bool fn_SimObject_isExpanded (string simobject)
{
var sbsimobject = new StringBuilder(simobject, 1024);

return  SafeNativeMethods.mwle_fn_SimObject_isExpanded(sbsimobject)>=1;
}
/// <summary>
/// Set whether the object has been marked as expanded. (in editor)
///    @param state True if the object is to be marked expanded; false if not. )
/// 
/// </summary>

internal void fn_SimObject_setIsExpanded (string simobject, bool state)
{
var sbsimobject = new StringBuilder(simobject, 1024);

SafeNativeMethods.mwle_fn_SimObject_setIsExpanded(sbsimobject, state);
}
/// <summary>
/// Returns the filename the object is attached to.
///    @return The name of the file the object is associated with; usually the file the object was loaded from. )
/// 
/// </summary>

internal string fn_SimObject_getFilename (string simobject)
{
var returnbuff = new StringBuilder(4096);
var sbsimobject = new StringBuilder(simobject, 1024);

SafeNativeMethods.mwle_fn_SimObject_getFilename(sbsimobject, returnbuff);
return returnbuff.ToString();

}
/// <summary>
/// Sets the object's file name and path
///    @param fileName The name of the file to associate this object with. )
/// 
/// </summary>

internal void fn_SimObject_setFilename (string simobject, string fileName)
{
var sbsimobject = new StringBuilder(simobject, 1024);
var sbfileName = new StringBuilder(fileName, 4096);

SafeNativeMethods.mwle_fn_SimObject_setFilename(sbsimobject, sbfileName);
}
/// <summary>
/// Get the line number at which the object is defined in its file.
///    @return The line number of the object's definition in script.
///    @see getFilename())
/// 
/// </summary>

internal int fn_SimObject_getDeclarationLine (string simobject)
{
var sbsimobject = new StringBuilder(simobject, 1024);

return  SafeNativeMethods.mwle_fn_SimObject_getDeclarationLine(sbsimobject);
}
/// <summary>
/// Copy fields from another object onto this one.  The objects must 
///    be of same type. Everything from the object will overwrite what's 
///    in this object; extra fields in this object will remain. This 
///    includes dynamic fields.
///    @param fromObject The object from which to copy fields. )
/// 
/// </summary>

internal void fn_SimObject_assignFieldsFrom (string simobject, string fromObject)
{
var sbsimobject = new StringBuilder(simobject, 1024);
var sbfromObject = new StringBuilder(fromObject, 1024);

SafeNativeMethods.mwle_fn_SimObject_assignFieldsFrom(sbsimobject, sbfromObject);
}
/// <summary>
/// Get whether the object will be included in saves.
///    @return True if the object will be saved; false otherwise. )
/// 
/// </summary>

internal bool fn_SimObject_getCanSave (string simobject)
{
var sbsimobject = new StringBuilder(simobject, 1024);

return  SafeNativeMethods.mwle_fn_SimObject_getCanSave(sbsimobject)>=1;
}
/// <summary>
/// Set whether the object will be included in saves.
///    @param value If true, the object will be included in saves; if false, it will be excluded. )
/// 
/// </summary>

internal void fn_SimObject_setCanSave (string simobject, bool value)
{
var sbsimobject = new StringBuilder(simobject, 1024);

SafeNativeMethods.mwle_fn_SimObject_setCanSave(sbsimobject, value);
}
/// <summary>
/// List the methods defined on this object.
///    Each description is a newline-separated vector with the following elements:
///    - Minimum number of arguments.
///    - Maximum number of arguments.
///    - Prototype string.
///    - Full script file path (if script method).
///    - Line number of method definition in script (if script method).
///    - Documentation string (not including prototype).  This takes up the remainder of the vector.
///    @return An ArrayObject populated with (name,description) pairs of all methods defined on the object. )
/// 
/// </summary>

internal string fn_SimObject_dumpMethods (string simobject)
{
var returnbuff = new StringBuilder(1024);
var sbsimobject = new StringBuilder(simobject, 1024);

SafeNativeMethods.mwle_fn_SimObject_dumpMethods(sbsimobject, returnbuff);
return returnbuff.ToString();

}
/// <summary>
///  ),
///    Save out the object to the given file.
///    @param fileName The name of the file to save to.
///    @param selectedOnly If true, only objects marked as selected will be saved out.
///    @param preAppendString Text which will be preprended directly to the object serialization.
///    @param True on success, false on failure. )
/// 
/// </summary>

internal bool fn_SimObject_save (string simobject, string fileName, bool selectedOnly, string preAppendString)
{
var sbsimobject = new StringBuilder(simobject, 1024);
var sbfileName = new StringBuilder(fileName, 4096);
var sbpreAppendString = new StringBuilder(preAppendString, 4096);

return  SafeNativeMethods.mwle_fn_SimObject_save(sbsimobject, sbfileName, selectedOnly, sbpreAppendString)>=1;
}
/// <summary>
/// Get the name of the C++ class which the object is an instance of.
///    @return The name of the C++ class of the object. )
/// 
/// </summary>

internal string fn_SimObject_getClassName (string simobject)
{
var returnbuff = new StringBuilder(4096);
var sbsimobject = new StringBuilder(simobject, 1024);

SafeNativeMethods.mwle_fn_SimObject_getClassName(sbsimobject, returnbuff);
return returnbuff.ToString();

}
/// <summary>
/// Test whether the given field is defined on this object.
///    @param fieldName The name of the field.
///    @return True if the object implements the given field. )
/// 
/// </summary>

internal bool fn_SimObject_isField (string simobject, string fieldName)
{
var sbsimobject = new StringBuilder(simobject, 1024);
var sbfieldName = new StringBuilder(fieldName, 4096);

return  SafeNativeMethods.mwle_fn_SimObject_isField(sbsimobject, sbfieldName)>=1;
}
/// <summary>
/// Return the value of the given field on this object.
///    @param fieldName The name of the field.  If it includes a field index, the index is parsed out.
///    @param index Optional parameter to specify the index of an array field separately.
///    @return The value of the given field or \"\" if undefined. )
/// 
/// </summary>

internal string fn_SimObject_getFieldValue (string simobject, string fieldName, int index)
{
var returnbuff = new StringBuilder(4096);
var sbsimobject = new StringBuilder(simobject, 1024);
var sbfieldName = new StringBuilder(fieldName, 4096);

SafeNativeMethods.mwle_fn_SimObject_getFieldValue(sbsimobject, sbfieldName, index, returnbuff);
return returnbuff.ToString();

}
/// <summary>
/// Set the value of the given field on this object.
///    @param fieldName The name of the field to assign to.  If it includes an array index, the index will be parsed out.
///    @param value The new value to assign to the field.
///    @param index Optional argument to specify an index for an array field.
///    @return True. )
/// 
/// </summary>

internal bool fn_SimObject_setFieldValue (string simobject, string fieldName, string value, int index)
{
var sbsimobject = new StringBuilder(simobject, 1024);
var sbfieldName = new StringBuilder(fieldName, 4096);
var sbvalue = new StringBuilder(value, 4096);

return  SafeNativeMethods.mwle_fn_SimObject_setFieldValue(sbsimobject, sbfieldName, sbvalue, index)>=1;
}
/// <summary>
/// Get the console type code of the given field.
///    @return The numeric type code for the underlying console type of the given field. )
/// 
/// </summary>

internal string fn_SimObject_getFieldType (string simobject, string fieldName)
{
var returnbuff = new StringBuilder(4096);
var sbsimobject = new StringBuilder(simobject, 1024);
var sbfieldName = new StringBuilder(fieldName, 4096);

SafeNativeMethods.mwle_fn_SimObject_getFieldType(sbsimobject, sbfieldName, returnbuff);
return returnbuff.ToString();

}
/// <summary>
/// Set the console type code for the given field.
///    @param fieldName The name of the dynamic field to change to type for.
///    @param type The name of the console type.
///    @note This only works for dynamic fields.  Types of static fields cannot be changed. )
/// 
/// </summary>

internal void fn_SimObject_setFieldType (string simobject, string fieldName, string type)
{
var sbsimobject = new StringBuilder(simobject, 1024);
var sbfieldName = new StringBuilder(fieldName, 4096);
var sbtype = new StringBuilder(type, 4096);

SafeNativeMethods.mwle_fn_SimObject_setFieldType(sbsimobject, sbfieldName, sbtype);
}
/// <summary>
/// Dump the native C++ class hierarchy of this object's C++ class to the console. )
/// 
/// </summary>

internal void fn_SimObject_dumpClassHierarchy (string simobject)
{
var sbsimobject = new StringBuilder(simobject, 1024);

SafeNativeMethods.mwle_fn_SimObject_dumpClassHierarchy(sbsimobject);
}
/// <summary>
/// Test whether this object is a member of the specified class.
///    @param className Name of a native C++ class.
///    @return True if this object is an instance of the given C++ class or any of its super classes. )
/// 
/// </summary>

internal bool fn_SimObject_isMemberOfClass (string simobject, string className)
{
var sbsimobject = new StringBuilder(simobject, 1024);
var sbclassName = new StringBuilder(className, 4096);

return  SafeNativeMethods.mwle_fn_SimObject_isMemberOfClass(sbsimobject, sbclassName)>=1;
}
/// <summary>
/// Test whether the namespace of this object is a direct or indirect child to the given namespace.
///    @param name The name of a namespace.
///    @return True if the given namespace name is within the namespace hierarchy of this object. )
/// 
/// </summary>

internal bool fn_SimObject_isInNamespaceHierarchy (string simobject, string name)
{
var sbsimobject = new StringBuilder(simobject, 1024);
var sbname = new StringBuilder(name, 4096);

return  SafeNativeMethods.mwle_fn_SimObject_isInNamespaceHierarchy(sbsimobject, sbname)>=1;
}
/// <summary>
/// Delete and remove the object. )
/// 
/// </summary>

internal void fn_SimObject_delete (string simobject)
{
var sbsimobject = new StringBuilder(simobject, 1024);

SafeNativeMethods.mwle_fn_SimObject_delete(sbsimobject);
}
/// <summary>
/// Get the number of dynamic fields defined on the object.
///    @return The number of dynamic fields defined on the object. )
/// 
/// </summary>

internal int fn_SimObject_getDynamicFieldCount (string simobject)
{
var sbsimobject = new StringBuilder(simobject, 1024);

return  SafeNativeMethods.mwle_fn_SimObject_getDynamicFieldCount(sbsimobject);
}
/// <summary>
/// Get a value of a dynamic field by index.
///    @param index The index of the dynamic field.
///    @return The value of the dynamic field at the given index or \"\". )
/// 
/// </summary>

internal string fn_SimObject_getDynamicField (string simobject, int index)
{
var returnbuff = new StringBuilder(4096);
var sbsimobject = new StringBuilder(simobject, 1024);

SafeNativeMethods.mwle_fn_SimObject_getDynamicField(sbsimobject, index, returnbuff);
return returnbuff.ToString();

}
/// <summary>
/// Get the number of static fields on the object.
///    @return The number of static fields defined on the object. )
/// 
/// </summary>

internal int fn_SimObject_getFieldCount (string simobject)
{
var sbsimobject = new StringBuilder(simobject, 1024);

return  SafeNativeMethods.mwle_fn_SimObject_getFieldCount(sbsimobject);
}
/// <summary>
/// Retrieve the value of a static field by index.
///    @param index The index of the static field.
///    @return The value of the static field with the given index or \"\". )
/// 
/// </summary>

internal string fn_SimObject_getField (string simobject, int index)
{
var returnbuff = new StringBuilder(4096);
var sbsimobject = new StringBuilder(simobject, 1024);

SafeNativeMethods.mwle_fn_SimObject_getField(sbsimobject, index, returnbuff);
return returnbuff.ToString();

}
/// <summary>
/// Dump the hierarchy of this object up to RootGroup to the console. )
/// 
/// </summary>

internal void fnSimObject_dumpGroupHierarchy (string simobject)
{
var sbsimobject = new StringBuilder(simobject, 1024);

SafeNativeMethods.mwle_fnSimObject_dumpGroupHierarchy(sbsimobject);
}
/// <summary>
/// Test whether the object belongs directly or indirectly to the given group.
///    @param group The SimGroup object.
///    @return True if the object is a child of the given group or a child of a group that the given group is directly or indirectly a child to. )
/// 
/// </summary>

internal bool fnSimObject_isChildOfGroup (string simobject, string group)
{
var sbsimobject = new StringBuilder(simobject, 1024);
var sbgroup = new StringBuilder(group, 1024);

return  SafeNativeMethods.mwle_fnSimObject_isChildOfGroup(sbsimobject, sbgroup)>=1;
}
/// <summary>
/// Get whether the object has been marked as selected. (in editor)
///    @return True if the object is currently selected. )
/// 
/// </summary>

internal bool fnSimObject_isSelected (string simobject)
{
var sbsimobject = new StringBuilder(simobject, 1024);

return  SafeNativeMethods.mwle_fnSimObject_isSelected(sbsimobject)>=1;
}
/// <summary>
/// Set whether the object has been marked as selected. (in editor)
///    @param state True if object is to be marked selected; false if not. )
/// 
/// </summary>

internal void fnSimObject_setIsSelected (string simobject, bool state)
{
var sbsimobject = new StringBuilder(simobject, 1024);

SafeNativeMethods.mwle_fnSimObject_setIsSelected(sbsimobject, state);
}
/// <summary>
/// Assign a persistent ID to the object if it does not already have one. )
/// 
/// </summary>

internal void fnSimObject_assignPersistentId (string simobject)
{
var sbsimobject = new StringBuilder(simobject, 1024);

SafeNativeMethods.mwle_fnSimObject_assignPersistentId(sbsimobject);
}
/// <summary>
/// Return true if the object is only used by the editor.
///    @return True if this object exists only for the sake of editing. )
/// 
/// </summary>

internal bool fnSimObject_isEditorOnly (string simobject)
{
var sbsimobject = new StringBuilder(simobject, 1024);

return  SafeNativeMethods.mwle_fnSimObject_isEditorOnly(sbsimobject)>=1;
}
/// <summary>
/// Set/clear the editor-only flag on this object.
///    @param value If true, the object is marked as existing only for the editor. )
/// 
/// </summary>

internal void fnSimObject_setEditorOnly (string simobject, bool value)
{
var sbsimobject = new StringBuilder(simobject, 1024);

SafeNativeMethods.mwle_fnSimObject_setEditorOnly(sbsimobject, value);
}
/// <summary>
/// Get whether this object may be renamed.
///    @return True if this object can be renamed; false otherwise. )
/// 
/// </summary>

internal bool fnSimObject_isNameChangeAllowed (string simobject)
{
var sbsimobject = new StringBuilder(simobject, 1024);

return  SafeNativeMethods.mwle_fnSimObject_isNameChangeAllowed(sbsimobject)>=1;
}
/// <summary>
/// Set whether this object can be renamed from its first name.
///    @param value If true, renaming is allowed for this object; if false, trying to change the name of the object will generate a console error. )
/// 
/// </summary>

internal void fnSimObject_setNameChangeAllowed (string simobject, bool value)
{
var sbsimobject = new StringBuilder(simobject, 1024);

SafeNativeMethods.mwle_fnSimObject_setNameChangeAllowed(sbsimobject, value);
}
/// <summary>
/// Create a copy of this object.
///    @return An exact duplicate of this object. )
/// 
/// </summary>

internal string fnSimObject_clone (string simobject)
{
var returnbuff = new StringBuilder(1024);
var sbsimobject = new StringBuilder(simobject, 1024);

SafeNativeMethods.mwle_fnSimObject_clone(sbsimobject, returnbuff);
return returnbuff.ToString();

}
/// <summary>
/// Create a copy of this object and all its subobjects.
///    @return An exact duplicate of this object and all objects it references. )
/// 
/// </summary>

internal string fnSimObject_deepClone (string simobject)
{
var returnbuff = new StringBuilder(1024);
var sbsimobject = new StringBuilder(simobject, 1024);

SafeNativeMethods.mwle_fnSimObject_deepClone(sbsimobject, returnbuff);
return returnbuff.ToString();

}
/// <summary>
/// Lock/unlock the object in the editor.
///    @param value If true, the object will be locked; if false, the object will be unlocked. )
/// 
/// </summary>

internal void fnSimObject_setLocked (string simobject, bool value)
{
var sbsimobject = new StringBuilder(simobject, 1024);

SafeNativeMethods.mwle_fnSimObject_setLocked(sbsimobject, value);
}
/// <summary>
/// Hide/unhide the object.
///    @param value If true, the object will be hidden; if false, the object will be unhidden. )
/// 
/// </summary>

internal void fnSimObject_setHidden (string simobject, bool value)
{
var sbsimobject = new StringBuilder(simobject, 1024);

SafeNativeMethods.mwle_fnSimObject_setHidden(sbsimobject, value);
}
/// <summary>
/// Dump a description of all fields and methods defined on this object to the console.
///    @param detailed Whether to print detailed information about members. )
/// 
/// </summary>

internal void fnSimObject_dump (string simobject, bool detailed)
{
var sbsimobject = new StringBuilder(simobject, 1024);

SafeNativeMethods.mwle_fnSimObject_dump(sbsimobject, detailed);
}
/// <summary>
/// Set the global name of the object.
///    @param newName The new global name to assign to the object.
///    @note If name changing is disallowed on the object, the method will fail with a console error. )
/// 
/// </summary>

internal void fnSimObject_setName (string simobject, string newName)
{
var sbsimobject = new StringBuilder(simobject, 1024);
var sbnewName = new StringBuilder(newName, 4096);

SafeNativeMethods.mwle_fnSimObject_setName(sbsimobject, sbnewName);
}
/// <summary>
/// Get the global name of the object.
///    @return The global name assigned to the object. )
/// 
/// </summary>

internal string fnSimObject_getName (string simobject)
{
var returnbuff = new StringBuilder(4096);
var sbsimobject = new StringBuilder(simobject, 1024);

SafeNativeMethods.mwle_fnSimObject_getName(sbsimobject, returnbuff);
return returnbuff.ToString();

}
/// <summary>
/// Set the internal name of the object.
///    @param newInternalName The new internal name for the object. )
/// 
/// </summary>

internal void fnSimObject_setInternalName (string simobject, string newInternalName)
{
var sbsimobject = new StringBuilder(simobject, 1024);
var sbnewInternalName = new StringBuilder(newInternalName, 4096);

SafeNativeMethods.mwle_fnSimObject_setInternalName(sbsimobject, sbnewInternalName);
}
/// <summary>
/// Get the internal name of the object.
///    @return The internal name of the object. )
/// 
/// </summary>

internal string fnSimObject_getInternalName (string simobject)
{
var returnbuff = new StringBuilder(4096);
var sbsimobject = new StringBuilder(simobject, 1024);

SafeNativeMethods.mwle_fnSimObject_getInternalName(sbsimobject, returnbuff);
return returnbuff.ToString();

}
/// <summary>
/// Get the underlying unique numeric ID of the object.
///    @note Object IDs are unique only during single engine runs.
///    @return The unique numeric ID of the object. )
/// 
/// </summary>

internal int fnSimObject_getId (string simobject)
{
var sbsimobject = new StringBuilder(simobject, 1024);

return  SafeNativeMethods.mwle_fnSimObject_getId(sbsimobject);
}
/// <summary>
/// Get the group that this object is contained in.
///    @note If not assigned to particular SimGroup, an object belongs to RootGroup.
///    @return The SimGroup object to which the object belongs. )
/// 
/// </summary>

internal string fnSimObject_getGroup (string simobject)
{
var returnbuff = new StringBuilder(1024);
var sbsimobject = new StringBuilder(simobject, 1024);

SafeNativeMethods.mwle_fnSimObject_getGroup(sbsimobject, returnbuff);
return returnbuff.ToString();

}
/// <summary>
/// Return some behind-the-scenes information on the object.
///    @return An ArrayObject filled with internal information about the object. )
/// 
/// </summary>

internal string fnSimObject_getDebugInfo (string simobject)
{
var returnbuff = new StringBuilder(1024);
var sbsimobject = new StringBuilder(simobject, 1024);

SafeNativeMethods.mwle_fnSimObject_getDebugInfo(sbsimobject, returnbuff);
return returnbuff.ToString();

}
/// <summary>
/// ( SimPersistSet, resolvePersistentIds, void, 2, 2, () - Try to bind unresolved persistent IDs in the set. )
/// 
/// </summary>

internal void fnSimPersistSet_resolvePersistentIds (string simpersistset)
{
var sbsimpersistset = new StringBuilder(simpersistset, 1024);

SafeNativeMethods.mwle_fnSimPersistSet_resolvePersistentIds(sbsimpersistset);
}
/// <summary>
/// @brief Serialize the object to a file.
/// 				@param object The object to serialize.
/// 				@param filename The file name and path.
/// 				@ingroup Console)
/// 
/// </summary>

internal bool fn_saveObject (string xobject, string filename)
{
var sbxobject = new StringBuilder(xobject, 1024);
var sbfilename = new StringBuilder(filename, 4096);

return  SafeNativeMethods.mwle_fn_saveObject(sbxobject, sbfilename)>=1;
}
/// <summary>
/// @brief Loads a serialized object from a file.
/// 				@param Name and path to text file containing the object
/// 				@ingroup Console)
/// 
/// </summary>

internal string fn_loadObject (string filename)
{
var returnbuff = new StringBuilder(1024);
var sbfilename = new StringBuilder(filename, 4096);

SafeNativeMethods.mwle_fn_loadObject(sbfilename, returnbuff);
return returnbuff.ToString();

}
/// <summary>
/// ( SimSet, add, void, 3, 0,
///    ( SimObject objects... ) Add the given objects to the set.
///    @param objects The objects to add to the set. )
/// 
/// </summary>

internal void fnSimSet_add (string simset, string a2, string a3, string a4, string a5, string a6, string a7, string a8, string a9, string a10, string a11, string a12, string a13, string a14, string a15, string a16, string a17, string a18, string a19)
{
var sbsimset = new StringBuilder(simset, 1024);
var sba2 = new StringBuilder(a2, 4096);
var sba3 = new StringBuilder(a3, 4096);
var sba4 = new StringBuilder(a4, 4096);
var sba5 = new StringBuilder(a5, 4096);
var sba6 = new StringBuilder(a6, 4096);
var sba7 = new StringBuilder(a7, 4096);
var sba8 = new StringBuilder(a8, 4096);
var sba9 = new StringBuilder(a9, 4096);
var sba10 = new StringBuilder(a10, 4096);
var sba11 = new StringBuilder(a11, 4096);
var sba12 = new StringBuilder(a12, 4096);
var sba13 = new StringBuilder(a13, 4096);
var sba14 = new StringBuilder(a14, 4096);
var sba15 = new StringBuilder(a15, 4096);
var sba16 = new StringBuilder(a16, 4096);
var sba17 = new StringBuilder(a17, 4096);
var sba18 = new StringBuilder(a18, 4096);
var sba19 = new StringBuilder(a19, 4096);

SafeNativeMethods.mwle_fnSimSet_add(sbsimset, sba2, sba3, sba4, sba5, sba6, sba7, sba8, sba9, sba10, sba11, sba12, sba13, sba14, sba15, sba16, sba17, sba18, sba19);
}
/// <summary>
/// ( SimSet, remove, void, 3, 0,
///    ( SimObject objects... ) Remove the given objects from the set.
///    @param objects The objects to remove from the set. )
/// 
/// </summary>

internal void fnSimSet_remove (string simset, string a2, string a3, string a4, string a5, string a6, string a7, string a8, string a9, string a10, string a11, string a12, string a13, string a14, string a15, string a16, string a17, string a18, string a19)
{
var sbsimset = new StringBuilder(simset, 1024);
var sba2 = new StringBuilder(a2, 4096);
var sba3 = new StringBuilder(a3, 4096);
var sba4 = new StringBuilder(a4, 4096);
var sba5 = new StringBuilder(a5, 4096);
var sba6 = new StringBuilder(a6, 4096);
var sba7 = new StringBuilder(a7, 4096);
var sba8 = new StringBuilder(a8, 4096);
var sba9 = new StringBuilder(a9, 4096);
var sba10 = new StringBuilder(a10, 4096);
var sba11 = new StringBuilder(a11, 4096);
var sba12 = new StringBuilder(a12, 4096);
var sba13 = new StringBuilder(a13, 4096);
var sba14 = new StringBuilder(a14, 4096);
var sba15 = new StringBuilder(a15, 4096);
var sba16 = new StringBuilder(a16, 4096);
var sba17 = new StringBuilder(a17, 4096);
var sba18 = new StringBuilder(a18, 4096);
var sba19 = new StringBuilder(a19, 4096);

SafeNativeMethods.mwle_fnSimSet_remove(sbsimset, sba2, sba3, sba4, sba5, sba6, sba7, sba8, sba9, sba10, sba11, sba12, sba13, sba14, sba15, sba16, sba17, sba18, sba19);
}
/// <summary>
/// ( SimSet, deleteAllObjects, void, 2, 2, () Delete all objects in the set. )
/// 
/// </summary>

internal void fnSimSet_deleteAllObjects (string simset)
{
var sbsimset = new StringBuilder(simset, 1024);

SafeNativeMethods.mwle_fnSimSet_deleteAllObjects(sbsimset);
}
/// <summary>
/// ( SimSet, callOnChildren, void, 3, 0,
///    ( string method, string args... ) Call a method on all objects contained in the set.
///    @param method The name of the method to call.
///    @param args The arguments to the method.
///    @note This method recurses into all SimSets that are children to the set.
///    @see callOnChildrenNoRecurse )
/// 
/// </summary>

internal void fnSimSet_callOnChildren (string simset, string a2, string a3, string a4, string a5, string a6, string a7, string a8, string a9, string a10, string a11, string a12, string a13, string a14, string a15, string a16, string a17, string a18, string a19)
{
var sbsimset = new StringBuilder(simset, 1024);
var sba2 = new StringBuilder(a2, 4096);
var sba3 = new StringBuilder(a3, 4096);
var sba4 = new StringBuilder(a4, 4096);
var sba5 = new StringBuilder(a5, 4096);
var sba6 = new StringBuilder(a6, 4096);
var sba7 = new StringBuilder(a7, 4096);
var sba8 = new StringBuilder(a8, 4096);
var sba9 = new StringBuilder(a9, 4096);
var sba10 = new StringBuilder(a10, 4096);
var sba11 = new StringBuilder(a11, 4096);
var sba12 = new StringBuilder(a12, 4096);
var sba13 = new StringBuilder(a13, 4096);
var sba14 = new StringBuilder(a14, 4096);
var sba15 = new StringBuilder(a15, 4096);
var sba16 = new StringBuilder(a16, 4096);
var sba17 = new StringBuilder(a17, 4096);
var sba18 = new StringBuilder(a18, 4096);
var sba19 = new StringBuilder(a19, 4096);

SafeNativeMethods.mwle_fnSimSet_callOnChildren(sbsimset, sba2, sba3, sba4, sba5, sba6, sba7, sba8, sba9, sba10, sba11, sba12, sba13, sba14, sba15, sba16, sba17, sba18, sba19);
}
/// <summary>
/// ( SimSet, callOnChildrenNoRecurse, void, 3, 0,
///    ( string method, string args... ) Call a method on all objects contained in the set.
///    @param method The name of the method to call.
///    @param args The arguments to the method.
///    @note This method does not recurse into child SimSets.
///    @see callOnChildren )
/// 
/// </summary>

internal void fnSimSet_callOnChildrenNoRecurse (string simset, string a2, string a3, string a4, string a5, string a6, string a7, string a8, string a9, string a10, string a11, string a12, string a13, string a14, string a15, string a16, string a17, string a18, string a19)
{
var sbsimset = new StringBuilder(simset, 1024);
var sba2 = new StringBuilder(a2, 4096);
var sba3 = new StringBuilder(a3, 4096);
var sba4 = new StringBuilder(a4, 4096);
var sba5 = new StringBuilder(a5, 4096);
var sba6 = new StringBuilder(a6, 4096);
var sba7 = new StringBuilder(a7, 4096);
var sba8 = new StringBuilder(a8, 4096);
var sba9 = new StringBuilder(a9, 4096);
var sba10 = new StringBuilder(a10, 4096);
var sba11 = new StringBuilder(a11, 4096);
var sba12 = new StringBuilder(a12, 4096);
var sba13 = new StringBuilder(a13, 4096);
var sba14 = new StringBuilder(a14, 4096);
var sba15 = new StringBuilder(a15, 4096);
var sba16 = new StringBuilder(a16, 4096);
var sba17 = new StringBuilder(a17, 4096);
var sba18 = new StringBuilder(a18, 4096);
var sba19 = new StringBuilder(a19, 4096);

SafeNativeMethods.mwle_fnSimSet_callOnChildrenNoRecurse(sbsimset, sba2, sba3, sba4, sba5, sba6, sba7, sba8, sba9, sba10, sba11, sba12, sba13, sba14, sba15, sba16, sba17, sba18, sba19);
}
/// <summary>
/// ( SimSet, getFullCount, S32, 2, 2, () Get the number of direct and indirect child objects contained in the set.
///    @return The number of objects contained in the set as well as in other sets contained directly or indirectly in the set. )
/// 
/// </summary>

internal int fnSimSet_getFullCount (string simset)
{
var sbsimset = new StringBuilder(simset, 1024);

return  SafeNativeMethods.mwle_fnSimSet_getFullCount(sbsimset);
}
/// <summary>
/// ( SimSet, sort, void, 3, 3, ( string callbackFunction ) Sort the objects in the set using the given comparison function.
///    @param callbackFunction Name of a function that takes two object arguments A and B and returns -1 if A is less, 1 if B is less, and 0 if both are equal. )
/// 
/// </summary>

internal void fnSimSet_sort (string simset, string a2)
{
var sbsimset = new StringBuilder(simset, 1024);
var sba2 = new StringBuilder(a2, 4096);

SafeNativeMethods.mwle_fnSimSet_sort(sbsimset, sba2);
}
/// <summary>
/// Dump a list of all objects contained in the set to the console. )
/// 
/// </summary>

internal void fnSimSet_listObjects (string simset)
{
var sbsimset = new StringBuilder(simset, 1024);

SafeNativeMethods.mwle_fnSimSet_listObjects(sbsimset);
}
/// <summary>
/// Remove all objects from the set. )
/// 
/// </summary>

internal void fnSimSet_clear (string simset)
{
var sbsimset = new StringBuilder(simset, 1024);

SafeNativeMethods.mwle_fnSimSet_clear(sbsimset);
}
/// <summary>
/// Return a random object from the set.
///    @return A randomly selected object from the set or -1 if the set is empty. )
/// 
/// </summary>

internal string fnSimSet_getRandom (string simset)
{
var returnbuff = new StringBuilder(1024);
var sbsimset = new StringBuilder(simset, 1024);

SafeNativeMethods.mwle_fnSimSet_getRandom(sbsimset, returnbuff);
return returnbuff.ToString();

}
/// <summary>
/// Make sure child1 is ordered right before child2 in the set.
///    @param child1 The first child.  The object must already be contained in the set.
///    @param child2 The second child.  The object must already be contained in the set. )
/// 
/// </summary>

internal void fnSimSet_reorderChild (string simset, string child1, string child2)
{
var sbsimset = new StringBuilder(simset, 1024);
var sbchild1 = new StringBuilder(child1, 1024);
var sbchild2 = new StringBuilder(child2, 1024);

SafeNativeMethods.mwle_fnSimSet_reorderChild(sbsimset, sbchild1, sbchild2);
}
/// <summary>
/// Get the number of objects contained in the set.
///    @return The number of objects contained in the set. )
/// 
/// </summary>

internal int fnSimSet_getCount (string simset)
{
var sbsimset = new StringBuilder(simset, 1024);

return  SafeNativeMethods.mwle_fnSimSet_getCount(sbsimset);
}
/// <summary>
/// Get the object at the given index.
///    @param index The object index.
///    @return The object at the given index or -1 if index is out of range. )
/// 
/// </summary>

internal string fnSimSet_getObject (string simset, uint index)
{
var returnbuff = new StringBuilder(1024);
var sbsimset = new StringBuilder(simset, 1024);

SafeNativeMethods.mwle_fnSimSet_getObject(sbsimset, index, returnbuff);
return returnbuff.ToString();

}
/// <summary>
/// Return the index of the given object in this set.
///    @param obj The object for which to return the index.  Must be contained in the set.
///    @return The index of the object or -1 if the object is not contained in the set. )
/// 
/// </summary>

internal int fnSimSet_getObjectIndex (string simset, string obj)
{
var sbsimset = new StringBuilder(simset, 1024);
var sbobj = new StringBuilder(obj, 1024);

return  SafeNativeMethods.mwle_fnSimSet_getObjectIndex(sbsimset, sbobj);
}
/// <summary>
/// Test whether the given object belongs to the set.
///    @param obj The object.
///    @return True if the object is contained in the set; false otherwise. )
/// 
/// </summary>

internal bool fnSimSet_isMember (string simset, string obj)
{
var sbsimset = new StringBuilder(simset, 1024);
var sbobj = new StringBuilder(obj, 1024);

return  SafeNativeMethods.mwle_fnSimSet_isMember(sbsimset, sbobj)>=1;
}
/// <summary>
/// Find an object in the set by its internal name.
///    @param internalName The internal name of the object to look for.
///    @param searchChildren If true, SimSets contained in the set will be recursively searched for the object.
///    @return The object with the given internal name or 0 if no match was found. )
/// 
/// </summary>

internal string fnSimSet_findObjectByInternalName (string simset, string internalName, bool searchChildren)
{
var returnbuff = new StringBuilder(1024);
var sbsimset = new StringBuilder(simset, 1024);
var sbinternalName = new StringBuilder(internalName, 4096);

SafeNativeMethods.mwle_fnSimSet_findObjectByInternalName(sbsimset, sbinternalName, searchChildren, returnbuff);
return returnbuff.ToString();

}
/// <summary>
/// Make the given object the first object in the set.
///    @param obj The object to bring to the frontmost position.  Must be contained in the set. )
/// 
/// </summary>

internal void fnSimSet_bringToFront (string simset, string obj)
{
var sbsimset = new StringBuilder(simset, 1024);
var sbobj = new StringBuilder(obj, 1024);

SafeNativeMethods.mwle_fnSimSet_bringToFront(sbsimset, sbobj);
}
/// <summary>
/// Make the given object the last object in the set.
///    @param obj The object to bring to the last position.  Must be contained in the set. )
/// 
/// </summary>

internal void fnSimSet_pushToBack (string simset, string obj)
{
var sbsimset = new StringBuilder(simset, 1024);
var sbobj = new StringBuilder(obj, 1024);

SafeNativeMethods.mwle_fnSimSet_pushToBack(sbsimset, sbobj);
}
/// <summary>
/// Test whether the given object may be added to the set.
///    @param obj The object to test for potential membership.
///    @return True if the object may be added to the set, false otherwise. )
/// 
/// </summary>

internal bool fnSimSet_acceptsAsChild (string simset, string obj)
{
var sbsimset = new StringBuilder(simset, 1024);
var sbobj = new StringBuilder(obj, 1024);

return  SafeNativeMethods.mwle_fnSimSet_acceptsAsChild(sbsimset, sbobj)>=1;
}
/// <summary>
/// ( SimXMLDocument, attributeF32, F32, 3, 3, (string attributeName)
///    @brief Get float attribute from the current Element on the stack.
///    @param attributeName Name of attribute to retrieve.
///    @return The value of the given attribute in the form of a float.
///    @deprecated Use attribute().)
/// 
/// </summary>

internal float fnSimXMLDocument_attributeF32 (string simxmldocument, string a2)
{
var sbsimxmldocument = new StringBuilder(simxmldocument, 1024);
var sba2 = new StringBuilder(a2, 4096);

return  SafeNativeMethods.mwle_fnSimXMLDocument_attributeF32(sbsimxmldocument, sba2);
}
/// <summary>
/// (SimXMLDocument, attributeS32, S32, 3, 3, (string attributeName)
///    @brief Get int attribute from the current Element on the stack.
///    @param attributeName Name of attribute to retrieve.
///    @return The value of the given attribute in the form of an integer.
///    @deprecated Use attribute().)
/// 
/// </summary>

internal int fnSimXMLDocument_attributeS32 (string simxmldocument, string a2)
{
var sbsimxmldocument = new StringBuilder(simxmldocument, 1024);
var sba2 = new StringBuilder(a2, 4096);

return  SafeNativeMethods.mwle_fnSimXMLDocument_attributeS32(sbsimxmldocument, sba2);
}
/// <summary>
/// @brief Set this document to its default state.
///    
///    Clears all Elements from the documents.  Equivalent to using clear()
///    
///    @see clear())
/// 
/// </summary>

internal void fnSimXMLDocument_reset (string simxmldocument)
{
var sbsimxmldocument = new StringBuilder(simxmldocument, 1024);

SafeNativeMethods.mwle_fnSimXMLDocument_reset(sbsimxmldocument);
}
/// <summary>
/// @brief Load in given filename and prepare it for use.
///    @note Clears the current document's contents.
///    @param fileName Name and path of XML document
///    @return True if the file was loaded successfully.)
/// 
/// </summary>

internal bool fnSimXMLDocument_loadFile (string simxmldocument, string fileName)
{
var sbsimxmldocument = new StringBuilder(simxmldocument, 1024);
var sbfileName = new StringBuilder(fileName, 4096);

return  SafeNativeMethods.mwle_fnSimXMLDocument_loadFile(sbsimxmldocument, sbfileName)>=1;
}
/// <summary>
/// @brief Save document to the given file name.
///    @param fileName Path and name of XML file to save to.
///    @return True if the file was successfully saved.)
/// 
/// </summary>

internal bool fnSimXMLDocument_saveFile (string simxmldocument, string fileName)
{
var sbsimxmldocument = new StringBuilder(simxmldocument, 1024);
var sbfileName = new StringBuilder(fileName, 4096);

return  SafeNativeMethods.mwle_fnSimXMLDocument_saveFile(sbsimxmldocument, sbfileName)>=1;
}
/// <summary>
/// @brief Create a document from a XML string.
///    @note Clears the current document's contents.
///    @param xmlString Valid XML to parse and store as a document.)
/// 
/// </summary>

internal void fnSimXMLDocument_parse (string simxmldocument, string xmlString)
{
var sbsimxmldocument = new StringBuilder(simxmldocument, 1024);
var sbxmlString = new StringBuilder(xmlString, 4096);

SafeNativeMethods.mwle_fnSimXMLDocument_parse(sbsimxmldocument, sbxmlString);
}
/// <summary>
/// @brief Set this document to its default state.
///    
///    Clears all Elements from the documents.  Equivalent to using reset()
///    
///    @see reset())
/// 
/// </summary>

internal void fnSimXMLDocument_clear (string simxmldocument)
{
var sbsimxmldocument = new StringBuilder(simxmldocument, 1024);

SafeNativeMethods.mwle_fnSimXMLDocument_clear(sbsimxmldocument);
}
/// <summary>
/// @brief Get last error description.
///    @return A string of the last error message.)
/// 
/// </summary>

internal string fnSimXMLDocument_getErrorDesc (string simxmldocument)
{
var returnbuff = new StringBuilder(4096);
var sbsimxmldocument = new StringBuilder(simxmldocument, 1024);

SafeNativeMethods.mwle_fnSimXMLDocument_getErrorDesc(sbsimxmldocument, returnbuff);
return returnbuff.ToString();

}
/// <summary>
/// @brief Clear the last error description.)
/// 
/// </summary>

internal void fnSimXMLDocument_clearError (string simxmldocument)
{
var sbsimxmldocument = new StringBuilder(simxmldocument, 1024);

SafeNativeMethods.mwle_fnSimXMLDocument_clearError(sbsimxmldocument);
}
/// <summary>
/// @brief Push the first child Element with the given name onto the stack, making it the current Element.
/// 
///    @param name String containing name of the child Element.
///    @return True if the Element was found and made the current one.
/// 
///    @tsexample
///    // Using the following test.xml file as an example:
///    // <?xml version=\"1.0\" encoding=\"utf-8\" standalone=\"yes\" ?>
///    // <NewElement>Some text</NewElement>
/// 
///    // Load in the file
///    %x = new SimXMLDocument();
///    %x.loadFile(\"test.xml\");
/// 
///    // Make the first Element the current one
///    %x.pushFirstChildElement(\"NewElement\");
/// 
///    // Store the current Element's text ('Some text' in this example)
///    // into 'result'
///    %result = %x.getText();
///    echo( %result );
///    @endtsexample)
/// 
/// </summary>

internal bool fnSimXMLDocument_pushFirstChildElement (string simxmldocument, string name)
{
var sbsimxmldocument = new StringBuilder(simxmldocument, 1024);
var sbname = new StringBuilder(name, 4096);

return  SafeNativeMethods.mwle_fnSimXMLDocument_pushFirstChildElement(sbsimxmldocument, sbname)>=1;
}
/// <summary>
/// @brief Push the child Element at the given index onto the stack, making it the current one.
///    @param index Numerical index of Element being pushed.
///    @return True if the Element was found and made the current one.)
/// 
/// </summary>

internal bool fnSimXMLDocument_pushChildElement (string simxmldocument, int index)
{
var sbsimxmldocument = new StringBuilder(simxmldocument, 1024);

return  SafeNativeMethods.mwle_fnSimXMLDocument_pushChildElement(sbsimxmldocument, index)>=1;
}
/// <summary>
/// @brief Put the next sibling Element with the given name on the stack, making it the current one.
///    @param name String containing name of the next sibling.
///    @return True if the Element was found and made the current one.)
/// 
/// </summary>

internal bool fnSimXMLDocument_nextSiblingElement (string simxmldocument, string name)
{
var sbsimxmldocument = new StringBuilder(simxmldocument, 1024);
var sbname = new StringBuilder(name, 4096);

return  SafeNativeMethods.mwle_fnSimXMLDocument_nextSiblingElement(sbsimxmldocument, sbname)>=1;
}
/// <summary>
/// @brief Get the Element's value if it exists.
///    Usually returns the text from the Element.
///    @return The value from the Element, or an empty string if none is found.)
/// 
/// </summary>

internal string fnSimXMLDocument_elementValue (string simxmldocument)
{
var returnbuff = new StringBuilder(4096);
var sbsimxmldocument = new StringBuilder(simxmldocument, 1024);

SafeNativeMethods.mwle_fnSimXMLDocument_elementValue(sbsimxmldocument, returnbuff);
return returnbuff.ToString();

}
/// <summary>
/// @brief Pop the last Element off the stack.)
/// 
/// </summary>

internal void fnSimXMLDocument_popElement (string simxmldocument)
{
var sbsimxmldocument = new StringBuilder(simxmldocument, 1024);

SafeNativeMethods.mwle_fnSimXMLDocument_popElement(sbsimxmldocument);
}
/// <summary>
/// @brief Get a string attribute from the current Element on the stack.
///    @param attributeName Name of attribute to retrieve.
///    @return The attribute string if found.  Otherwise returns an empty string.)
/// 
/// </summary>

internal string fnSimXMLDocument_attribute (string simxmldocument, string attributeName)
{
var returnbuff = new StringBuilder(4096);
var sbsimxmldocument = new StringBuilder(simxmldocument, 1024);
var sbattributeName = new StringBuilder(attributeName, 4096);

SafeNativeMethods.mwle_fnSimXMLDocument_attribute(sbsimxmldocument, sbattributeName, returnbuff);
return returnbuff.ToString();

}
/// <summary>
/// @brief Tests if the requested attribute exists.
///    @param attributeName Name of attribute being queried for.
///    @return True if the attribute exists.)
/// 
/// </summary>

internal bool fnSimXMLDocument_attributeExists (string simxmldocument, string attributeName)
{
var sbsimxmldocument = new StringBuilder(simxmldocument, 1024);
var sbattributeName = new StringBuilder(attributeName, 4096);

return  SafeNativeMethods.mwle_fnSimXMLDocument_attributeExists(sbsimxmldocument, sbattributeName)>=1;
}
/// <summary>
/// @brief Obtain the name of the current Element's first attribute.
///    @return String containing the first attribute's name, or an empty string if none is found.
///    @see nextAttribute()
///    @see lastAttribute()
///    @see prevAttribute())
/// 
/// </summary>

internal string fnSimXMLDocument_firstAttribute (string simxmldocument)
{
var returnbuff = new StringBuilder(4096);
var sbsimxmldocument = new StringBuilder(simxmldocument, 1024);

SafeNativeMethods.mwle_fnSimXMLDocument_firstAttribute(sbsimxmldocument, returnbuff);
return returnbuff.ToString();

}
/// <summary>
/// @brief Obtain the name of the current Element's last attribute.
///    @return String containing the last attribute's name, or an empty string if none is found.
///    @see prevAttribute()
///    @see firstAttribute()
///    @see lastAttribute())
/// 
/// </summary>

internal string fnSimXMLDocument_lastAttribute (string simxmldocument)
{
var returnbuff = new StringBuilder(4096);
var sbsimxmldocument = new StringBuilder(simxmldocument, 1024);

SafeNativeMethods.mwle_fnSimXMLDocument_lastAttribute(sbsimxmldocument, returnbuff);
return returnbuff.ToString();

}
/// <summary>
/// @brief Get the name of the next attribute for the current Element after a call to firstAttribute().
///    @return String containing the next attribute's name, or an empty string if none is found.
///    @see firstAttribute()
///    @see lastAttribute()
///    @see prevAttribute())
/// 
/// </summary>

internal string fnSimXMLDocument_nextAttribute (string simxmldocument)
{
var returnbuff = new StringBuilder(4096);
var sbsimxmldocument = new StringBuilder(simxmldocument, 1024);

SafeNativeMethods.mwle_fnSimXMLDocument_nextAttribute(sbsimxmldocument, returnbuff);
return returnbuff.ToString();

}
/// <summary>
/// @brief Get the name of the previous attribute for the current Element after a call to lastAttribute().
///    @return String containing the previous attribute's name, or an empty string if none is found.
///    @see lastAttribute()
///    @see firstAttribute()
///    @see nextAttribute())
/// 
/// </summary>

internal string fnSimXMLDocument_prevAttribute (string simxmldocument)
{
var returnbuff = new StringBuilder(4096);
var sbsimxmldocument = new StringBuilder(simxmldocument, 1024);

SafeNativeMethods.mwle_fnSimXMLDocument_prevAttribute(sbsimxmldocument, returnbuff);
return returnbuff.ToString();

}
/// <summary>
/// @brief Set the attribute of the current Element on the stack to the given value.
///    @param attributeName Name of attribute being changed
///    @param value New value to assign to the attribute)
/// 
/// </summary>

internal void fnSimXMLDocument_setAttribute (string simxmldocument, string attributeName, string value)
{
var sbsimxmldocument = new StringBuilder(simxmldocument, 1024);
var sbattributeName = new StringBuilder(attributeName, 4096);
var sbvalue = new StringBuilder(value, 4096);

SafeNativeMethods.mwle_fnSimXMLDocument_setAttribute(sbsimxmldocument, sbattributeName, sbvalue);
}
/// <summary>
/// @brief Add the given SimObject's fields as attributes of the current Element on the stack.
///    @param objectID ID of SimObject being copied.)
/// 
/// </summary>

internal void fnSimXMLDocument_setObjectAttributes (string simxmldocument, string objectID)
{
var sbsimxmldocument = new StringBuilder(simxmldocument, 1024);
var sbobjectID = new StringBuilder(objectID, 4096);

SafeNativeMethods.mwle_fnSimXMLDocument_setObjectAttributes(sbsimxmldocument, sbobjectID);
}
/// <summary>
/// @brief Create a new element with the given name as child of current Element 
///    and push it onto the Element stack making it the current one.
/// 
///    @note This differs from addNewElement() in that it adds the new Element as a 
///    child of the current Element (or a child of the document if no Element exists).
/// 
///    @param name XML tag for the new Element.
/// 
///    @see addNewElement())
/// 
/// </summary>

internal void fnSimXMLDocument_pushNewElement (string simxmldocument, string name)
{
var sbsimxmldocument = new StringBuilder(simxmldocument, 1024);
var sbname = new StringBuilder(name, 4096);

SafeNativeMethods.mwle_fnSimXMLDocument_pushNewElement(sbsimxmldocument, sbname);
}
/// <summary>
/// @brief Create a new element with the given name as child of current Element's 
///    parent and push it onto the Element stack making it the current one.
/// 
///    @note This differs from pushNewElement() in that it adds the new Element to the 
///    current Element's parent (or document if there is no parent Element).  This makes 
///    the new Element a sibling of the current one.
/// 
///    @param name XML tag for the new Element.
///    
///    @see pushNewElement())
/// 
/// </summary>

internal void fnSimXMLDocument_addNewElement (string simxmldocument, string name)
{
var sbsimxmldocument = new StringBuilder(simxmldocument, 1024);
var sbname = new StringBuilder(name, 4096);

SafeNativeMethods.mwle_fnSimXMLDocument_addNewElement(sbsimxmldocument, sbname);
}
/// <summary>
/// @brief Add a XML header to a document.
/// 
///    Sometimes called a declaration, you typically add a standard header to 
///    the document before adding any elements.  SimXMLDocument always produces 
///    the following header:
///    <?xml version=\"1.0\" encoding=\"utf-8\" standalone=\"yes\" ?>
///   
///    @tsexample
///    // Create a new XML document with just a header and single element.
///    %x = new SimXMLDocument();
///    %x.addHeader();
///    %x.addNewElement(\"NewElement\");
///    %x.saveFile(\"test.xml\");
///    // Produces the following file:
///    // <?xml version=\"1.0\" encoding=\"utf-8\" standalone=\"yes\" ?>
///    // <NewElement />
///    @endtsexample)
/// 
/// </summary>

internal void fnSimXMLDocument_addHeader (string simxmldocument)
{
var sbsimxmldocument = new StringBuilder(simxmldocument, 1024);

SafeNativeMethods.mwle_fnSimXMLDocument_addHeader(sbsimxmldocument);
}
/// <summary>
/// @brief Add the given comment as a child of the document.
///   @param comment String containing the comment.
/// 
///    @tsexample
///    // Create a new XML document with a header, a comment and single element.
///    %x = new SimXMLDocument();
///    %x.addHeader();
///    %x.addComment(\"This is a test comment\");
///    %x.addNewElement(\"NewElement\");
///    %x.saveFile(\"test.xml\");
///    // Produces the following file:
///    // <?xml version=\"1.0\" encoding=\"utf-8\" standalone=\"yes\" ?>
///    // <!--This is a test comment-->
///    // <NewElement />
///    @endtsexample
///    
///    @see readComment())
/// 
/// </summary>

internal void fnSimXMLDocument_addComment (string simxmldocument, string comment)
{
var sbsimxmldocument = new StringBuilder(simxmldocument, 1024);
var sbcomment = new StringBuilder(comment, 4096);

SafeNativeMethods.mwle_fnSimXMLDocument_addComment(sbsimxmldocument, sbcomment);
}
/// <summary>
/// Gives the comment at the specified index, if any.
/// 
///    Unlike addComment() that only works at the document level, readComment() may read 
///    comments from the document or any child Element.  The current Element (or document 
///    if no Elements have been pushed to the stack) is the parent for any comments, and the 
///    provided index is the number of comments in to read back.
/// 
///    @param index Comment index number to query from the current Element stack
///    @return String containing the comment, or an empty string if no comment is found.
/// 
///    @see addComment())
/// 
/// </summary>

internal string fnSimXMLDocument_readComment (string simxmldocument, int index)
{
var returnbuff = new StringBuilder(4096);
var sbsimxmldocument = new StringBuilder(simxmldocument, 1024);

SafeNativeMethods.mwle_fnSimXMLDocument_readComment(sbsimxmldocument, index, returnbuff);
return returnbuff.ToString();

}
/// <summary>
/// @brief Add the given text as a child of current Element.
/// 
///    Use getText() to retrieve any text from the current Element and removeText() 
///    to clear any text.
/// 
///    addText() and addData() may be used interchangeably.
/// 
///    @param text String containing the text.
/// 
///    @tsexample
///    // Create a new XML document with a header and single element
///    // with some added text.
///    %x = new SimXMLDocument();
///    %x.addHeader();
///    %x.addNewElement(\"NewElement\");
///    %x.addText(\"Some text\");
///    %x.saveFile(\"test.xml\");
///    // Produces the following file:
///    // <?xml version=\"1.0\" encoding=\"utf-8\" standalone=\"yes\" ?>
///    // <NewElement>Some text</NewElement>
///    @endtsexample
/// 
///    @see getText()
///    @see removeText()
///    @see addData()
///    @see getData())
/// 
/// </summary>

internal void fnSimXMLDocument_addText (string simxmldocument, string text)
{
var sbsimxmldocument = new StringBuilder(simxmldocument, 1024);
var sbtext = new StringBuilder(text, 4096);

SafeNativeMethods.mwle_fnSimXMLDocument_addText(sbsimxmldocument, sbtext);
}
/// <summary>
/// @brief Gets the text from the current Element.
/// 
///    Use addText() to add text to the current Element and removeText() 
///    to clear any text.
/// 
///    getText() and getData() may be used interchangeably.
/// 
///    @return String containing the text in the current Element.
/// 
///    @tsexample
///    // Using the following test.xml file as an example:
///    // <?xml version=\"1.0\" encoding=\"utf-8\" standalone=\"yes\" ?>
///    // <NewElement>Some text</NewElement>
/// 
///    // Load in the file
///    %x = new SimXMLDocument();
///    %x.loadFile(\"test.xml\");
/// 
///    // Make the first Element the current one
///    %x.pushFirstChildElement(\"NewElement\");
/// 
///    // Store the current Element's text ('Some text' in this example)
///    // into 'result'
///    %result = %x.getText();
///    echo( %result );
///    @endtsexample
///    
///    @see addText()
///    @see removeText()
///    @see addData()
///    @see getData())
/// 
/// </summary>

internal string fnSimXMLDocument_getText (string simxmldocument)
{
var returnbuff = new StringBuilder(4096);
var sbsimxmldocument = new StringBuilder(simxmldocument, 1024);

SafeNativeMethods.mwle_fnSimXMLDocument_getText(sbsimxmldocument, returnbuff);
return returnbuff.ToString();

}
/// <summary>
/// @brief Remove any text on the current Element.
/// 
///    Use getText() to retrieve any text from the current Element and addText() 
///    to add text to the current Element.  As getData() and addData() are equivalent 
///    to getText() and addText(), removeText() will also remove any data from the 
///    current Element.
///    
///    @see addText()
///    @see getText()
///    @see addData()
///    @see getData())
/// 
/// </summary>

internal void fnSimXMLDocument_removeText (string simxmldocument)
{
var sbsimxmldocument = new StringBuilder(simxmldocument, 1024);

SafeNativeMethods.mwle_fnSimXMLDocument_removeText(sbsimxmldocument);
}
/// <summary>
/// @brief Add the given text as a child of current Element.
/// 
///    Use getData() to retrieve any text from the current Element.
/// 
///    addData() and addText() may be used interchangeably.  As there is no 
///    difference between data and text, you may also use removeText() to clear 
///    any data from the current Element.
/// 
///    @param text String containing the text.
/// 
///    @tsexample
///    // Create a new XML document with a header and single element
///    // with some added data.
///    %x = new SimXMLDocument();
///    %x.addHeader();
///    %x.addNewElement(\"NewElement\");
///    %x.addData(\"Some text\");
///    %x.saveFile(\"test.xml\");
///    // Produces the following file:
///    // <?xml version=\"1.0\" encoding=\"utf-8\" standalone=\"yes\" ?>
///    // <NewElement>Some text</NewElement>
///    @endtsexample
/// 
///    @see getData()
///    @see addText()
///    @see getText()
///    @see removeText())
/// 
/// </summary>

internal void fnSimXMLDocument_addData (string simxmldocument, string text)
{
var sbsimxmldocument = new StringBuilder(simxmldocument, 1024);
var sbtext = new StringBuilder(text, 4096);

SafeNativeMethods.mwle_fnSimXMLDocument_addData(sbsimxmldocument, sbtext);
}
/// <summary>
/// @brief Gets the text from the current Element.
/// 
///    Use addData() to add text to the current Element.
/// 
///    getData() and getText() may be used interchangeably.  As there is no 
///    difference between data and text, you may also use removeText() to clear 
///    any data from the current Element.
/// 
///    @return String containing the text in the current Element.
/// 
///    @tsexample
///    // Using the following test.xml file as an example:
///    // <?xml version=\"1.0\" encoding=\"utf-8\" standalone=\"yes\" ?>
///    // <NewElement>Some data</NewElement>
/// 
///    // Load in the file
///    %x = new SimXMLDocument();
///    %x.loadFile(\"test.xml\");
/// 
///    // Make the first Element the current one
///    %x.pushFirstChildElement(\"NewElement\");
/// 
///    // Store the current Element's data ('Some data' in this example)
///    // into 'result'
///    %result = %x.getData();
///    echo( %result );
///    @endtsexample
///    
///    @see addData()
///    @see addText()
///    @see getText()
///    @see removeText())
/// 
/// </summary>

internal string fnSimXMLDocument_getData (string simxmldocument)
{
var returnbuff = new StringBuilder(4096);
var sbsimxmldocument = new StringBuilder(simxmldocument, 1024);

SafeNativeMethods.mwle_fnSimXMLDocument_getData(sbsimxmldocument, returnbuff);
return returnbuff.ToString();

}
/// <summary>
/// ( FileObject, writeObject, void, 3, 4, FileObject.writeObject(SimObject, object prepend) 
/// 			  @hide)
/// 
/// </summary>

internal void fnFileObject_writeObject (string fileobject, string a2, string a3)
{
var sbfileobject = new StringBuilder(fileobject, 1024);
var sba2 = new StringBuilder(a2, 4096);
var sba3 = new StringBuilder(a3, 4096);

SafeNativeMethods.mwle_fnFileObject_writeObject(sbfileobject, sba2, sba3);
}
/// <summary>
/// @brief Open a specified file for reading
///    
///    There is no limit as to what kind of file you can read. Any format and data contained within is accessible, not just text
/// 
///    @param filename Path, name, and extension of file to be read
///    
///    @tsexample
///    // Create a file object for reading
///    %fileRead = new FileObject();
///    // Open a text file, if it exists
///    %result = %fileRead.OpenForRead(\"./test.txt\");
///    @endtsexample
/// 
///    @return True if file was successfully opened, false otherwise)
/// 
/// </summary>

internal bool fnFileObject_openForRead (string fileobject, string filename)
{
var sbfileobject = new StringBuilder(fileobject, 1024);
var sbfilename = new StringBuilder(filename, 4096);

return  SafeNativeMethods.mwle_fnFileObject_openForRead(sbfileobject, sbfilename)>=1;
}
/// <summary>
/// @brief Open a specified file for writing
///    
///    There is no limit as to what kind of file you can write. Any format and data is allowable, not just text
/// 
///    @param filename Path, name, and extension of file to write to
///    
///    @tsexample
///    // Create a file object for writing
///    %fileWrite = new FileObject();
///    // Open a file to write to, if it does not exist it will be created
///    %result = %fileWrite.OpenForWrite(\"./test.txt\");
///    @endtsexample
/// 
///    @return True if file was successfully opened, false otherwise)
/// 
/// </summary>

internal bool fnFileObject_openForWrite (string fileobject, string filename)
{
var sbfileobject = new StringBuilder(fileobject, 1024);
var sbfilename = new StringBuilder(filename, 4096);

return  SafeNativeMethods.mwle_fnFileObject_openForWrite(sbfileobject, sbfilename)>=1;
}
/// <summary>
/// @brief Open a specified file for writing, adding data to the end of the file
///    
///    There is no limit as to what kind of file you can write. Any format and data is allowable, not just text. Unlike openForWrite(), 
///    which will erase an existing file if it is opened, openForAppend() preserves data in an existing file and adds to it.
/// 
///    @param filename Path, name, and extension of file to append to
///    
///    @tsexample
///    // Create a file object for writing
///    %fileWrite = new FileObject();
///    // Open a file to write to, if it does not exist it will be created
///    // If it does exist, whatever we write will be added to the end
///    %result = %fileWrite.OpenForAppend(\"./test.txt\");
///    @endtsexample
/// 
///    @return True if file was successfully opened, false otherwise)
/// 
/// </summary>

internal bool fnFileObject_openForAppend (string fileobject, string filename)
{
var sbfileobject = new StringBuilder(fileobject, 1024);
var sbfilename = new StringBuilder(filename, 4096);

return  SafeNativeMethods.mwle_fnFileObject_openForAppend(sbfileobject, sbfilename)>=1;
}
/// <summary>
/// @brief Determines if the parser for this FileObject has reached the end of the file
///    
///    @tsexample
///    // Create a file object for reading
///    %fileRead = new FileObject();
///    // Open a text file, if it exists
///    %fileRead.OpenForRead(\"./test.txt\");
///    // Keep reading until we reach the end of the file
///    while( !%fileRead.isEOF() )
///    {
///       %line = %fileRead.readline();
///       echo(%line);
///    }
///    // Made it to the end
///    echo(\"Finished reading file\");
///    @endtsexample
/// 
///    @return True if the parser has reached the end of the file, false otherwise)
/// 
/// </summary>

internal bool fnFileObject_isEOF (string fileobject)
{
var sbfileobject = new StringBuilder(fileobject, 1024);

return  SafeNativeMethods.mwle_fnFileObject_isEOF(sbfileobject)>=1;
}
/// <summary>
/// @brief Read a line from file.
///    
///    Emphasis on *line*, as in you cannot parse individual characters or chunks of data.  
///    There is no limitation as to what kind of data you can read.
///    
///    @tsexample
///    // Create a file object for reading
///    %fileRead = new FileObject();
///    // Open a text file, if it exists
///    %fileRead.OpenForRead(\"./test.txt\");
///    // Read in the first line
///    %line = %fileRead.readline();
///    // Print the line we just read
///    echo(%line);
///    @endtsexample
/// 
///    @return String containing the line of data that was just read)
/// 
/// </summary>

internal string fnFileObject_readLine (string fileobject)
{
var returnbuff = new StringBuilder(4096);
var sbfileobject = new StringBuilder(fileobject, 1024);

SafeNativeMethods.mwle_fnFileObject_readLine(sbfileobject, returnbuff);
return returnbuff.ToString();

}
/// <summary>
/// @brief Read a line from the file without moving the stream position.
///    
///    Emphasis on *line*, as in you cannot parse individual characters or chunks of data.  
///    There is no limitation as to what kind of data you can read. Unlike readLine, the parser does not move forward after reading.
/// 
///    @param filename Path, name, and extension of file to be read
///    
///    @tsexample
///    // Create a file object for reading
///    %fileRead = new FileObject();
///    // Open a text file, if it exists
///    %fileRead.OpenForRead(\"./test.txt\");
///    // Peek the first line
///    %line = %fileRead.peekLine();
///    // Print the line we just peeked
///    echo(%line);
///    // If we peek again...
///    %line = %fileRead.peekLine();
///    // We will get the same output as the first time
///    // since the stream did not move forward
///    echo(%line);
///    @endtsexample
/// 
///    @return String containing the line of data that was just peeked)
/// 
/// </summary>

internal string fnFileObject_peekLine (string fileobject)
{
var returnbuff = new StringBuilder(4096);
var sbfileobject = new StringBuilder(fileobject, 1024);

SafeNativeMethods.mwle_fnFileObject_peekLine(sbfileobject, returnbuff);
return returnbuff.ToString();

}
/// <summary>
/// @brief Write a line to the file, if it was opened for writing.
///    
///    There is no limit as to what kind of text you can write. Any format and data is allowable, not just text. 
///    Be careful of what you write, as whitespace, current values, and literals will be preserved.
/// 
///    @param text The data we are writing out to file.
///    
///    @tsexample
///    // Create a file object for writing
///    %fileWrite = new FileObject();
///    // Open a file to write to, if it does not exist it will be created
///    %fileWrite.OpenForWrite(\"./test.txt\");
///    // Write a line to the text files
///    %fileWrite.writeLine(\"READ. READ CODE. CODE\");
///    @endtsexample
/// 
///    @return True if file was successfully opened, false otherwise)
/// 
/// </summary>

internal void fnFileObject_writeLine (string fileobject, string text)
{
var sbfileobject = new StringBuilder(fileobject, 1024);
var sbtext = new StringBuilder(text, 4096);

SafeNativeMethods.mwle_fnFileObject_writeLine(sbfileobject, sbtext);
}
/// <summary>
/// @brief Close the file.
///    
///    It is EXTREMELY important that you call this function when you are finished reading or writing to a file. 
///    Failing to do so is not only a bad programming practice, but could result in bad data or corrupt files. 
///    Remember: Open, Read/Write, Close, Delete...in that order!
///    
///    @tsexample
///    // Create a file object for reading
///    %fileRead = new FileObject();
///    // Open a text file, if it exists
///    %fileRead.OpenForRead(\"./test.txt\");
///    // Peek the first line
///    %line = %fileRead.peekLine();
///    // Print the line we just peeked
///    echo(%line);
///    // If we peek again...
///    %line = %fileRead.peekLine();
///    // We will get the same output as the first time
///    // since the stream did not move forward
///    echo(%line);
///    // Close the file when finished
///    %fileWrite.close();
///    // Cleanup the file object
///    %fileWrite.delete();
///    @endtsexample)
/// 
/// </summary>

internal void fnFileObject_close (string fileobject)
{
var sbfileobject = new StringBuilder(fileobject, 1024);

SafeNativeMethods.mwle_fnFileObject_close(sbfileobject);
}
/// <summary>
/// Force the resource at specified input path to be reloaded
///    @param path Path to the resource to be reloaded
///    @tsexample
///    reloadResource( \"art/shapes/box.dts\" );
///    @endtsexample
///    @note Currently used by editors only
///    @ingroup Editors
///    @internal)
/// 
/// </summary>

internal void fn_reloadResource (string path)
{
var sbpath = new StringBuilder(path, 4096);

SafeNativeMethods.mwle_fn_reloadResource(sbpath);
}
/// <summary>
/// @brief Open a file for reading, writing, reading and writing, or appending
///    
///    Using \"Read\" for the open mode allows you to parse the contents of file, but not making modifications. \"Write\" will create a new 
///    file if it does not exist, or erase the contents of an existing file when opened. Write also allows you to modify the contents of the file.
/// 
///    \"ReadWrite\" will provide the ability to parse data (read it in) and manipulate data (write it out) interchangeably. Keep in mind the stream can 
///    move during each operation. Finally, \"WriteAppend\" will open a file if it exists, but will not clear the contents. You can write new data starting 
///     at the end of the files existing contents.
/// 
///    @param filename Name of file to open
///    @param openMode One of \"Read\", \"Write\", \"ReadWrite\" or \"WriteAppend\"
/// 
///    @tsexample
///    // Create a file stream object for reading
///    %fsObject = new FileStreamObject();
///    // Open a file for reading
///    %fsObject.open(\"./test.txt\", \"read\");
///    // Get the status and print it
///    %status = %fsObject.getStatus();
///    echo(%status);
///    // Always remember to close a file stream when finished
///    %fsObject.close();
///    @endtsexample
/// 
///    @return True if the file was successfully opened, false if something went wrong
///    
///    @see close())
/// 
/// </summary>

internal bool fnFileStreamObject_open (string filestreamobject, string filename, string openMode)
{
var sbfilestreamobject = new StringBuilder(filestreamobject, 1024);
var sbfilename = new StringBuilder(filename, 4096);
var sbopenMode = new StringBuilder(openMode, 4096);

return  SafeNativeMethods.mwle_fnFileStreamObject_open(sbfilestreamobject, sbfilename, sbopenMode)>=1;
}
/// <summary>
/// @brief Close the file. You can no longer read or write to it unless you open it again.
///    
///    @tsexample
///    // Create a file stream object for reading
///    %fsObject = new FileStreamObject();
///    // Open a file for reading
///    %fsObject.open(\"./test.txt\", \"read\");
///    // Always remember to close a file stream when finished
///    %fsObject.close();
///    @endtsexample
///    
///    @see open())
/// 
/// </summary>

internal void fnFileStreamObject_close (string filestreamobject)
{
var sbfilestreamobject = new StringBuilder(filestreamobject, 1024);

SafeNativeMethods.mwle_fnFileStreamObject_close(sbfilestreamobject);
}
/// <summary>
/// @brief Gets a printable string form of the stream's status
///    
///    @tsexample
///    // Create a file stream object for reading
///    %fsObject = new FileStreamObject();
///    // Open a file for reading
///    %fsObject.open(\"./test.txt\", \"read\");
///    // Get the status and print it
///    %status = %fsObject.getStatus();
///    echo(%status);
///    // Always remember to close a file stream when finished
///    %fsObject.close();
///    @endtsexample
/// 
///    @return String containing status constant, one of the following:
/// 
///    	OK - Stream is active and no file errors
/// 
///    	IOError - Something went wrong during read or writing the stream
/// 
///    	EOS - End of Stream reached (mostly for reads)
/// 
///    	IllegalCall - An unsupported operation used.  Always w/ accompanied by AssertWarn
/// 
///      Closed - Tried to operate on a closed stream (or detached filter)
/// 
///    	UnknownError - Catch all for an error of some kind
/// 
///    	Invalid - Entire stream is invalid)
/// 
/// </summary>

internal string fnStreamObject_getStatus (string streamobject)
{
var returnbuff = new StringBuilder(4096);
var sbstreamobject = new StringBuilder(streamobject, 1024);

SafeNativeMethods.mwle_fnStreamObject_getStatus(sbstreamobject, returnbuff);
return returnbuff.ToString();

}
/// <summary>
/// @brief Tests if the stream has reached the end of the file
///    
///    This is an alternative name for isEOF. Both functions are interchangeable. This simply exists 
///    for those familiar with some C++ file I/O standards.
/// 
///    @tsexample
///    // Create a file stream object for reading
///    %fsObject = new FileStreamObject();
///    // Open a file for reading
///    %fsObject.open(\"./test.txt\", \"read\");
///    // Keep reading until we reach the end of the file
///    while( !%fsObject.isEOS() )
///    {
///       %line = %fsObject.readLine();
///       echo(%line);
///    }
///    // Made it to the end
///    echo(\"Finished reading file\");
///    // Always remember to close a file stream when finished
///    %fsObject.close();
///    @endtsexample
/// 
///    @return True if the parser has reached the end of the file, false otherwise
/// 
///    @see isEOF())
/// 
/// </summary>

internal bool fnStreamObject_isEOS (string streamobject)
{
var sbstreamobject = new StringBuilder(streamobject, 1024);

return  SafeNativeMethods.mwle_fnStreamObject_isEOS(sbstreamobject)>=1;
}
/// <summary>
/// @brief Tests if the stream has reached the end of the file
///    
///    This is an alternative name for isEOS. Both functions are interchangeable. This simply exists 
///    for those familiar with some C++ file I/O standards.
///    
///    @tsexample
///    // Create a file stream object for reading
///    %fsObject = new FileStreamObject();
///    // Open a file for reading
///    %fsObject.open(\"./test.txt\", \"read\");
///    // Keep reading until we reach the end of the file
///    while( !%fsObject.isEOF() )
///    {
///       %line = %fsObject.readLine();
///       echo(%line);
///    }
///    // Made it to the end
///    echo(\"Finished reading file\");
///    // Always remember to close a file stream when finished
///    %fsObject.close();
///    @endtsexample
/// 
///    @return True if the parser has reached the end of the file, false otherwise
///    
///    @see isEOS())
/// 
/// </summary>

internal bool fnStreamObject_isEOF (string streamobject)
{
var sbstreamobject = new StringBuilder(streamobject, 1024);

return  SafeNativeMethods.mwle_fnStreamObject_isEOF(sbstreamobject)>=1;
}
/// <summary>
/// @brief Gets the position in the stream
///    
///    The easiest way to visualize this is to think of a cursor in a text file. If you have moved the cursor by 
///    five characters, the current position is 5. If you move ahead 10 more characters, the position is now 15. 
///    For StreamObject, when you read in the line the position is increased by the number of characters parsed, 
///    the null terminator, and a newline.
///    
///    @tsexample
///    // Create a file stream object for reading
///    %fsObject = new FileStreamObject();
///    // Open a file for reading
///    // This file contains two lines of text repeated:
///    // Hello World
///    // Hello World
///    %fsObject.open(\"./test.txt\", \"read\");
///    // Read in the first line
///    %line = %fsObject.readLine();
///    // Get the position of the stream
///    %position = %fsObject.getPosition();
///    // Print the current position
///    // Should be 13, 10 for the words, 1 for the space, 1 for the null terminator, and 1 for the newline
///    echo(%position);
///    // Always remember to close a file stream when finished
///    %fsObject.close();
///    @endtsexample
/// 
///    @return Number of bytes which stream has parsed so far, null terminators and newlines are included
///    
///    @see setPosition())
/// 
/// </summary>

internal int fnStreamObject_getPosition (string streamobject)
{
var sbstreamobject = new StringBuilder(streamobject, 1024);

return  SafeNativeMethods.mwle_fnStreamObject_getPosition(sbstreamobject);
}
/// <summary>
/// @brief Gets the position in the stream
///    
///    The easiest way to visualize this is to think of a cursor in a text file. If you have moved the cursor by 
///    five characters, the current position is 5. If you move ahead 10 more characters, the position is now 15. 
///    For StreamObject, when you read in the line the position is increased by the number of characters parsed, 
///    the null terminator, and a newline. Using setPosition allows you to skip to specific points of the file.
///    
///    @tsexample
///    // Create a file stream object for reading
///    %fsObject = new FileStreamObject();
///    // Open a file for reading
///    // This file contains the following two lines:
///    // 11111111111
///    // Hello World
///    %fsObject.open(\"./test.txt\", \"read\");
///    // Skip ahead by 12, which will bypass the first line entirely
///    %fsObject.setPosition(12);
///    // Read in the next line
///    %line = %fsObject.readLine();
///    // Print the line just read in, should be \"Hello World\"
///    echo(%line);
///    // Always remember to close a file stream when finished
///    %fsObject.close();
///    @endtsexample
/// 
///    @return Number of bytes which stream has parsed so far, null terminators and newlines are included
///    
///    @see getPosition())
/// 
/// </summary>

internal bool fnStreamObject_setPosition (string streamobject, int newPosition)
{
var sbstreamobject = new StringBuilder(streamobject, 1024);

return  SafeNativeMethods.mwle_fnStreamObject_setPosition(sbstreamobject, newPosition)>=1;
}
/// <summary>
/// @brief Gets the size of the stream
///    
///    The size is dependent on the type of stream being used. If it is a file stream, returned value will 
///    be the size of the file. If it is a memory stream, it will be the size of the allocated buffer.
///       
///    @tsexample
///    // Create a file stream object for reading
///    %fsObject = new FileStreamObject();
///    // Open a file for reading
///    // This file contains the following two lines:
///    // HelloWorld
///    // HelloWorld
///    %fsObject.open(\"./test.txt\", \"read\");
///    // Found out how large the file stream is
///    // Then print it to the console
///    // Should be 22
///    %streamSize = %fsObject.getStreamSize();
///    echo(%streamSize);
///    // Always remember to close a file stream when finished
///    %fsObject.close();
///    @endtsexample
/// 
///    @return Size of stream, in bytes)
/// 
/// </summary>

internal int fnStreamObject_getStreamSize (string streamobject)
{
var sbstreamobject = new StringBuilder(streamobject, 1024);

return  SafeNativeMethods.mwle_fnStreamObject_getStreamSize(sbstreamobject);
}
/// <summary>
/// @brief Read a line from the stream.
///    
///    Emphasis on *line*, as in you cannot parse individual characters or chunks of data. 
///    There is no limitation as to what kind of data you can read.
///    
///    @tsexample
///    // Create a file stream object for reading
///    // This file contains the following two lines:
///    // HelloWorld
///    // HelloWorld
///    %fsObject = new FileStreamObject();
///    %fsObject.open(\"./test.txt\", \"read\");
///    // Read in the first line
///    %line = %fsObject.readLine();
///    // Print the line we just read
///    echo(%line);
///    // Always remember to close a file stream when finished
///    %fsObject.close();
///    @endtsexample
/// 
///    @return String containing the line of data that was just read
///    
///    @see writeLine())
/// 
/// </summary>

internal string fnStreamObject_readLine (string streamobject)
{
var returnbuff = new StringBuilder(4096);
var sbstreamobject = new StringBuilder(streamobject, 1024);

SafeNativeMethods.mwle_fnStreamObject_readLine(sbstreamobject, returnbuff);
return returnbuff.ToString();

}
/// <summary>
/// @brief Write a line to the stream, if it was opened for writing.
///    
///    There is no limit as to what kind of data you can write. Any format and data is allowable, not just text. 
///    Be careful of what you write, as whitespace, current values, and literals will be preserved.
/// 
///    @param line The data we are writing out to file.
///    
///    @tsexample
///    // Create a file stream
///    %fsObject = new FileStreamObject();
///    // Open the file for writing
///    // If it does not exist, it is created. If it does exist, the file is cleared
///    %fsObject.open(\"./test.txt\", \"write\");
///    // Write a line to the file
///    %fsObject.writeLine(\"Hello World\");
///    // Write another line to the file
///    %fsObject.writeLine(\"Documentation Rocks!\");
///    // Always remember to close a file stream when finished
///    %fsObject.close();
///    @endtsexample
///    
///    @see readLine())
/// 
/// </summary>

internal void fnStreamObject_writeLine (string streamobject, string line)
{
var sbstreamobject = new StringBuilder(streamobject, 1024);
var sbline = new StringBuilder(line, 4096);

SafeNativeMethods.mwle_fnStreamObject_writeLine(sbstreamobject, sbline);
}
/// <summary>
/// @brief Read in a string and place it on the string table.
///    @param caseSensitive If false then case will not be taken into account when attempting 
///    to match the read in string with what is already in the string table.
///    @return The string that was read from the stream.
///    @see writeString()
///    
///    @note When working with these particular string reading and writing methods, the stream 
///    begins with the length of the string followed by the string itself, and does not include 
///    a NULL terminator.)
/// 
/// </summary>

internal string fnStreamObject_readSTString (string streamobject, bool caseSensitive)
{
var returnbuff = new StringBuilder(1024);
var sbstreamobject = new StringBuilder(streamobject, 1024);

SafeNativeMethods.mwle_fnStreamObject_readSTString(sbstreamobject, caseSensitive, returnbuff);
return returnbuff.ToString();

}
/// <summary>
/// @brief Read a string up to a maximum of 256 characters
///    @return The string that was read from the stream.
///    @see writeString()
///    
///    @note When working with these particular string reading and writing methods, the stream 
///    begins with the length of the string followed by the string itself, and does not include 
///    a NULL terminator.)
/// 
/// </summary>

internal string fnStreamObject_readString (string streamobject)
{
var returnbuff = new StringBuilder(1024);
var sbstreamobject = new StringBuilder(streamobject, 1024);

SafeNativeMethods.mwle_fnStreamObject_readString(sbstreamobject, returnbuff);
return returnbuff.ToString();

}
/// <summary>
/// @brief Read in a string up to the given maximum number of characters.
///    @param maxLength The maximum number of characters to read in.
///    @return The string that was read from the stream.
///    @see writeLongString()
///    
///    @note When working with these particular string reading and writing methods, the stream 
///    begins with the length of the string followed by the string itself, and does not include 
///    a NULL terminator.)
/// 
/// </summary>

internal string fnStreamObject_readLongString (string streamobject, int maxLength)
{
var returnbuff = new StringBuilder(1024);
var sbstreamobject = new StringBuilder(streamobject, 1024);

SafeNativeMethods.mwle_fnStreamObject_readLongString(sbstreamobject, maxLength, returnbuff);
return returnbuff.ToString();

}
/// <summary>
/// @brief Write out a string up to the maximum number of characters.
///    @param maxLength The maximum number of characters that will be written.
///    @param string The string to write out to the stream.
///    @see readLongString()
///    
///    @note When working with these particular string reading and writing methods, the stream 
///    begins with the length of the string followed by the string itself, and does not include 
///    a NULL terminator.)
/// 
/// </summary>

internal void fnStreamObject_writeLongString (string streamobject, int maxLength, string xstring)
{
var sbstreamobject = new StringBuilder(streamobject, 1024);
var sbxstring = new StringBuilder(xstring, 4096);

SafeNativeMethods.mwle_fnStreamObject_writeLongString(sbstreamobject, maxLength, sbxstring);
}
/// <summary>
/// @brief Write out a string with a default maximum length of 256 characters.
///    @param string The string to write out to the stream
///    @param maxLength The maximum string length to write out with a default of 256 characters.  This 
///    value should not be larger than 256 as it is written to the stream as a single byte.
///    @see readString()
///    
///    @note When working with these particular string reading and writing methods, the stream 
///    begins with the length of the string followed by the string itself, and does not include 
///    a NULL terminator.)
/// 
/// </summary>

internal void fnStreamObject_writeString (string streamobject, string xstring, int maxLength)
{
var sbstreamobject = new StringBuilder(streamobject, 1024);
var sbxstring = new StringBuilder(xstring, 4096);

SafeNativeMethods.mwle_fnStreamObject_writeString(sbstreamobject, sbxstring, maxLength);
}
/// <summary>
/// @brief Copy from another StreamObject into this StreamObject
///    @param other The StreamObject to copy from.
///    @return True if the copy was successful.)
/// 
/// </summary>

internal bool fnStreamObject_copyFrom (string streamobject, string other)
{
var sbstreamobject = new StringBuilder(streamobject, 1024);
var sbother = new StringBuilder(other, 1024);

return  SafeNativeMethods.mwle_fnStreamObject_copyFrom(sbstreamobject, sbother)>=1;
}
/// <summary>
/// read ),
///    @brief Open a zip archive for manipulation.
/// 
///    Once a zip archive is opened use the various ZipObject methods for 
///    working with the files within the archive.  Be sure to close the archive when 
///    you are done with it.
/// 
///    @param filename The path and file name of the zip archive to open.
///    @param accessMode One of read, write or readwrite
/// 
///    @return True is the archive was successfully opened.
///    
///    @note If you wish to make any changes to the archive, be sure to open it 
///    with a write or readwrite access mode.
/// 
///    @see closeArchive())
/// 
/// </summary>

internal bool fnZipObject_openArchive (string zipobject, string filename, string accessMode)
{
var sbzipobject = new StringBuilder(zipobject, 1024);
var sbfilename = new StringBuilder(filename, 4096);
var sbaccessMode = new StringBuilder(accessMode, 4096);

return  SafeNativeMethods.mwle_fnZipObject_openArchive(sbzipobject, sbfilename, sbaccessMode)>=1;
}
/// <summary>
/// @brief Close an already opened zip archive.
///    @see openArchive())
/// 
/// </summary>

internal void fnZipObject_closeArchive (string zipobject)
{
var sbzipobject = new StringBuilder(zipobject, 1024);

SafeNativeMethods.mwle_fnZipObject_closeArchive(sbzipobject);
}
/// <summary>
/// @brief Open a file within the zip archive for reading.
/// 
///    Be sure to close the file when you are done with it.
/// 
///    @param filename The path and name of the file to open within the zip archive.
/// 
///    @return A standard StreamObject is returned for working with the file.
///    @note You must first open the zip archive before working with files within it.
/// 
///    @see closeFile()
///    @see openArchive())
/// 
/// </summary>

internal string fnZipObject_openFileForRead (string zipobject, string filename)
{
var returnbuff = new StringBuilder(1024);
var sbzipobject = new StringBuilder(zipobject, 1024);
var sbfilename = new StringBuilder(filename, 4096);

SafeNativeMethods.mwle_fnZipObject_openFileForRead(sbzipobject, sbfilename, returnbuff);
return returnbuff.ToString();

}
/// <summary>
/// @brief Open a file within the zip archive for writing to.
///    
///    Be sure to close the file when you are done with it.
/// 
///    @param filename The path and name of the file to open within the zip archive.
/// 
///    @return A standard StreamObject is returned for working with the file.
///    @note You must first open the zip archive before working with files within it.
/// 
///    @see closeFile()
///    @see openArchive())
/// 
/// </summary>

internal string fnZipObject_openFileForWrite (string zipobject, string filename)
{
var returnbuff = new StringBuilder(1024);
var sbzipobject = new StringBuilder(zipobject, 1024);
var sbfilename = new StringBuilder(filename, 4096);

SafeNativeMethods.mwle_fnZipObject_openFileForWrite(sbzipobject, sbfilename, returnbuff);
return returnbuff.ToString();

}
/// <summary>
/// @brief Close a previously opened file within the zip archive.
///    @param stream The StreamObject of a previously opened file within the zip archive.
///    @see openFileForRead()
///    @see openFileForWrite())
/// 
/// </summary>

internal void fnZipObject_closeFile (string zipobject, string stream)
{
var sbzipobject = new StringBuilder(zipobject, 1024);
var sbstream = new StringBuilder(stream, 1024);

SafeNativeMethods.mwle_fnZipObject_closeFile(sbzipobject, sbstream);
}
/// <summary>
/// @brief Add a file to the zip archive
///    
///    @param filename The path and name of the file to add to the zip archive.
///    @param pathInZip The path and name to be given to the file within the zip archive.
///    @param replace If a file already exists within the zip archive at the same location as this 
///    new file, this parameter indicates if it should be replaced.  By default, it will be replaced.
///    @return True if the file was successfully added to the zip archive.)
/// 
/// </summary>

internal bool fnZipObject_addFile (string zipobject, string filename, string pathInZip, bool replace)
{
var sbzipobject = new StringBuilder(zipobject, 1024);
var sbfilename = new StringBuilder(filename, 4096);
var sbpathInZip = new StringBuilder(pathInZip, 4096);

return  SafeNativeMethods.mwle_fnZipObject_addFile(sbzipobject, sbfilename, sbpathInZip, replace)>=1;
}
/// <summary>
/// @brief Extact a file from the zip archive and save it to the requested location.
///    @param pathInZip The path and name of the file to be extracted within the zip archive.
///    @param filename The path and name to give the extracted file.
///    @return True if the file was successfully extracted.)
/// 
/// </summary>

internal bool fnZipObject_extractFile (string zipobject, string pathInZip, string filename)
{
var sbzipobject = new StringBuilder(zipobject, 1024);
var sbpathInZip = new StringBuilder(pathInZip, 4096);
var sbfilename = new StringBuilder(filename, 4096);

return  SafeNativeMethods.mwle_fnZipObject_extractFile(sbzipobject, sbpathInZip, sbfilename)>=1;
}
/// <summary>
/// @brief Deleted the given file from the zip archive
///    @param pathInZip The path and name of the file to be deleted from the zip archive.
///    @return True of the file was successfully deleted.
/// 
///    @note Files that have been deleted from the archive will still show up with a 
///    getFileEntryCount() until you close the archive.  If you need to have the file 
///    count up to date with only valid files within the archive, you could close and then 
///    open the archive again.
/// 
///    @see getFileEntryCount()
///    @see closeArchive()
///    @see openArchive())
/// 
/// </summary>

internal bool fnZipObject_deleteFile (string zipobject, string pathInZip)
{
var sbzipobject = new StringBuilder(zipobject, 1024);
var sbpathInZip = new StringBuilder(pathInZip, 4096);

return  SafeNativeMethods.mwle_fnZipObject_deleteFile(sbzipobject, sbpathInZip)>=1;
}
/// <summary>
/// @brief Get the number of files within the zip archive.
/// 
///    Use getFileEntry() to retrive information on each file within the archive.
/// 
///    @return The number of files within the zip archive.
/// 
///    @note The returned count will include any files that have been deleted from 
///    the archive using deleteFile().  To clear out all deleted files, you could 
///    close and then open the archive again.
/// 
///    @see getFileEntry()
///    @see closeArchive()
///    @see openArchive())
/// 
/// </summary>

internal int fnZipObject_getFileEntryCount (string zipobject)
{
var sbzipobject = new StringBuilder(zipobject, 1024);

return  SafeNativeMethods.mwle_fnZipObject_getFileEntryCount(sbzipobject);
}
/// <summary>
/// @brief Get information on the requested file within the zip archive.
/// 
///    This methods provides five different pieces of information for the requested file:
///    <ul><li>filename - The path and name of the file within the zip archive</li>
///    <li>uncompressed size</li>
///    <li>compressed size</li>
///    <li>compression method</li>
///    <li>CRC32</li></ul>
/// 
///    Use getFileEntryCount() to obtain the total number of files within the archive.
/// 
///    @param index The index of the file within the zip archive.  Use getFileEntryCount() to determine the number of files.
///    @return A tab delimited list of information on the requested file, or an empty string if the file could not be found.
/// 
///    @see getFileEntryCount())
/// 
/// </summary>

internal string fnZipObject_getFileEntry (string zipobject, int index)
{
var returnbuff = new StringBuilder(1024);
var sbzipobject = new StringBuilder(zipobject, 1024);

SafeNativeMethods.mwle_fnZipObject_getFileEntry(sbzipobject, index, returnbuff);
return returnbuff.ToString();

}
/// <summary>
/// Intended as a helper to developers and editor scripts.
///                    Force DecalRoad to update it's spline and reclip geometry.
///                   )
/// 
/// </summary>

internal void fnDecalRoad_regenerate (string decalroad)
{
var sbdecalroad = new StringBuilder(decalroad, 1024);

SafeNativeMethods.mwle_fnDecalRoad_regenerate(sbdecalroad);
}
/// <summary>
/// Intended as a helper to developers and editor scripts.
///                    Force trigger an inspectPostApply. This will transmit 
///                    the material and other fields ( not including nodes ) 
///                    to client objects.
///                   )
/// 
/// </summary>

internal void fnDecalRoad_postApply (string decalroad)
{
var sbdecalroad = new StringBuilder(decalroad, 1024);

SafeNativeMethods.mwle_fnDecalRoad_postApply(sbdecalroad);
}
/// <summary>
/// Intended as a helper to developers and editor scripts.
///                    Sets the depth in meters of a particular node.
///                    )
/// 
/// </summary>

internal void fnMeshRoad_setNodeDepth (string meshroad, int idx, float meters)
{
var sbmeshroad = new StringBuilder(meshroad, 1024);

SafeNativeMethods.mwle_fnMeshRoad_setNodeDepth(sbmeshroad, idx, meters);
}
/// <summary>
/// Intended as a helper to developers and editor scripts.
///                    Force MeshRoad to recreate its geometry.
///                    )
/// 
/// </summary>

internal void fnMeshRoad_regenerate (string meshroad)
{
var sbmeshroad = new StringBuilder(meshroad, 1024);

SafeNativeMethods.mwle_fnMeshRoad_regenerate(sbmeshroad);
}
/// <summary>
/// Intended as a helper to developers and editor scripts.
///                    Force trigger an inspectPostApply. This will transmit 
///                    material and other fields ( not including nodes ) to client objects.
///                    )
/// 
/// </summary>

internal void fnMeshRoad_postApply (string meshroad)
{
var sbmeshroad = new StringBuilder(meshroad, 1024);

SafeNativeMethods.mwle_fnMeshRoad_postApply(sbmeshroad);
}
/// <summary>
/// Intended as a helper to developers and editor scripts.
///                    Force River to recreate its geometry.
///                    )
/// 
/// </summary>

internal void fnRiver_regenerate (string river)
{
var sbriver = new StringBuilder(river, 1024);

SafeNativeMethods.mwle_fnRiver_regenerate(sbriver);
}
/// <summary>
/// Intended as a helper to developers and editor scripts.
///                    @see SegmentLength field.
///                    )
/// 
/// </summary>

internal void fnRiver_setMetersPerSegment (string river, float meters)
{
var sbriver = new StringBuilder(river, 1024);

SafeNativeMethods.mwle_fnRiver_setMetersPerSegment(sbriver, meters);
}
/// <summary>
/// Intended as a helper to developers and editor scripts.
///                    BatchSize is not currently used.
///                    )
/// 
/// </summary>

internal void fnRiver_setBatchSize (string river, float meters)
{
var sbriver = new StringBuilder(river, 1024);

SafeNativeMethods.mwle_fnRiver_setBatchSize(sbriver, meters);
}
/// <summary>
/// Intended as a helper to developers and editor scripts.
///                    Sets the depth in meters of a particular node.
///                    )
/// 
/// </summary>

internal void fnRiver_setNodeDepth (string river, int idx, float meters)
{
var sbriver = new StringBuilder(river, 1024);

SafeNativeMethods.mwle_fnRiver_setNodeDepth(sbriver, idx, meters);
}
/// <summary>
/// Intended as a helper to developers and editor scripts.
///                    @see SubdivideLength field.
///                    )
/// 
/// </summary>

internal void fnRiver_setMaxDivisionSize (string river, float meters)
{
var sbriver = new StringBuilder(river, 1024);

SafeNativeMethods.mwle_fnRiver_setMaxDivisionSize(sbriver, meters);
}
/// <summary>
/// Apply a full network update of all fields to all clients.                   
///                   )
/// 
/// </summary>

internal void fnScatterSky_applyChanges (string scattersky)
{
var sbscattersky = new StringBuilder(scattersky, 1024);

SafeNativeMethods.mwle_fnScatterSky_applyChanges(sbscattersky);
}
/// <summary>
/// ( SkyBox, postApply, void, 2, 2, )
/// 
/// </summary>

internal void fnSkyBox_postApply (string skybox)
{
var sbskybox = new StringBuilder(skybox, 1024);

SafeNativeMethods.mwle_fnSkyBox_postApply(sbskybox);
}
/// <summary>
/// (Sun, apply, void, 2, 2, )
/// 
/// </summary>

internal void fnSun_apply (string sun)
{
var sbsun = new StringBuilder(sun, 1024);

SafeNativeMethods.mwle_fnSun_apply(sbsun);
}
/// <summary>
/// (Sun, animate, void, 7, 7, animate( F32 duration, F32 startAzimuth, F32 endAzimuth, F32 startElevation, F32 endElevation ))
/// 
/// </summary>

internal void fnSun_animate (string sun, string a2, string a3, string a4, string a5, string a6)
{
var sbsun = new StringBuilder(sun, 1024);
var sba2 = new StringBuilder(a2, 4096);
var sba3 = new StringBuilder(a3, 4096);
var sba4 = new StringBuilder(a4, 4096);
var sba5 = new StringBuilder(a5, 4096);
var sba6 = new StringBuilder(a6, 4096);

SafeNativeMethods.mwle_fnSun_animate(sbsun, sba2, sba3, sba4, sba5, sba6);
}
/// <summary>
/// ( GuiRoadEditorCtrl, deleteNode, void, 2, 2, deleteNode() )
/// 
/// </summary>

internal void fnGuiRoadEditorCtrl_deleteNode (string guiroadeditorctrl)
{
var sbguiroadeditorctrl = new StringBuilder(guiroadeditorctrl, 1024);

SafeNativeMethods.mwle_fnGuiRoadEditorCtrl_deleteNode(sbguiroadeditorctrl);
}
/// <summary>
/// ( GuiRoadEditorCtrl, getMode, const char*, 2, 2,  )
/// 
/// </summary>

internal string fnGuiRoadEditorCtrl_getMode (string guiroadeditorctrl)
{
var returnbuff = new StringBuilder(4096);
var sbguiroadeditorctrl = new StringBuilder(guiroadeditorctrl, 1024);

SafeNativeMethods.mwle_fnGuiRoadEditorCtrl_getMode(sbguiroadeditorctrl, returnbuff);
return returnbuff.ToString();

}
/// <summary>
/// ( GuiRoadEditorCtrl, getNodeWidth, F32, 2, 2,  )
/// 
/// </summary>

internal float fnGuiRoadEditorCtrl_getNodeWidth (string guiroadeditorctrl)
{
var sbguiroadeditorctrl = new StringBuilder(guiroadeditorctrl, 1024);

return  SafeNativeMethods.mwle_fnGuiRoadEditorCtrl_getNodeWidth(sbguiroadeditorctrl);
}
/// <summary>
/// ( GuiRoadEditorCtrl, setNodeWidth, void, 3, 3,  )
/// 
/// </summary>

internal void fnGuiRoadEditorCtrl_setNodeWidth (string guiroadeditorctrl, string a2)
{
var sbguiroadeditorctrl = new StringBuilder(guiroadeditorctrl, 1024);
var sba2 = new StringBuilder(a2, 4096);

SafeNativeMethods.mwle_fnGuiRoadEditorCtrl_setNodeWidth(sbguiroadeditorctrl, sba2);
}
/// <summary>
/// ( GuiRoadEditorCtrl, getNodePosition, const char*, 2, 2,  )
/// 
/// </summary>

internal string fnGuiRoadEditorCtrl_getNodePosition (string guiroadeditorctrl)
{
var returnbuff = new StringBuilder(4096);
var sbguiroadeditorctrl = new StringBuilder(guiroadeditorctrl, 1024);

SafeNativeMethods.mwle_fnGuiRoadEditorCtrl_getNodePosition(sbguiroadeditorctrl, returnbuff);
return returnbuff.ToString();

}
/// <summary>
/// ( GuiRoadEditorCtrl, setNodePosition, void, 3, 3,  )
/// 
/// </summary>

internal void fnGuiRoadEditorCtrl_setNodePosition (string guiroadeditorctrl, string a2)
{
var sbguiroadeditorctrl = new StringBuilder(guiroadeditorctrl, 1024);
var sba2 = new StringBuilder(a2, 4096);

SafeNativeMethods.mwle_fnGuiRoadEditorCtrl_setNodePosition(sbguiroadeditorctrl, sba2);
}
/// <summary>
/// ( GuiRoadEditorCtrl, setSelectedRoad, void, 2, 3,  )
/// 
/// </summary>

internal void fnGuiRoadEditorCtrl_setSelectedRoad (string guiroadeditorctrl, string a2)
{
var sbguiroadeditorctrl = new StringBuilder(guiroadeditorctrl, 1024);
var sba2 = new StringBuilder(a2, 4096);

SafeNativeMethods.mwle_fnGuiRoadEditorCtrl_setSelectedRoad(sbguiroadeditorctrl, sba2);
}
/// <summary>
/// ( GuiRoadEditorCtrl, getSelectedRoad, const char*, 2, 2,  )
/// 
/// </summary>

internal string fnGuiRoadEditorCtrl_getSelectedRoad (string guiroadeditorctrl)
{
var returnbuff = new StringBuilder(4096);
var sbguiroadeditorctrl = new StringBuilder(guiroadeditorctrl, 1024);

SafeNativeMethods.mwle_fnGuiRoadEditorCtrl_getSelectedRoad(sbguiroadeditorctrl, returnbuff);
return returnbuff.ToString();

}
/// <summary>
/// ( GuiRoadEditorCtrl, getSelectedNode, S32, 2, 2,  )
/// 
/// </summary>

internal int fnGuiRoadEditorCtrl_getSelectedNode (string guiroadeditorctrl)
{
var sbguiroadeditorctrl = new StringBuilder(guiroadeditorctrl, 1024);

return  SafeNativeMethods.mwle_fnGuiRoadEditorCtrl_getSelectedNode(sbguiroadeditorctrl);
}
/// <summary>
/// ( GuiRoadEditorCtrl, deleteRoad, void, 2, 2,  )
/// 
/// </summary>

internal void fnGuiRoadEditorCtrl_deleteRoad (string guiroadeditorctrl)
{
var sbguiroadeditorctrl = new StringBuilder(guiroadeditorctrl, 1024);

SafeNativeMethods.mwle_fnGuiRoadEditorCtrl_deleteRoad(sbguiroadeditorctrl);
}
/// <summary>
/// ( Forest, saveDataFile, bool, 2, 3, saveDataFile( [path] ) )
/// 
/// </summary>

internal bool fnForest_saveDataFile (string forest, string a2)
{
var sbforest = new StringBuilder(forest, 1024);
var sba2 = new StringBuilder(a2, 4096);

return  SafeNativeMethods.mwle_fnForest_saveDataFile(sbforest, sba2)>=1;
}
/// <summary>
/// (Forest, isDirty, bool, 2, 2, ())
/// 
/// </summary>

internal bool fnForest_isDirty (string forest)
{
var sbforest = new StringBuilder(forest, 1024);

return  SafeNativeMethods.mwle_fnForest_isDirty(sbforest)>=1;
}
/// <summary>
/// (Forest, regenCells, void, 2, 2, ())
/// 
/// </summary>

internal void fnForest_regenCells (string forest)
{
var sbforest = new StringBuilder(forest, 1024);

SafeNativeMethods.mwle_fnForest_regenCells(sbforest);
}
/// <summary>
/// (Forest, clear, void, 2, 2, () )
/// 
/// </summary>

internal void fnForest_clear (string forest)
{
var sbforest = new StringBuilder(forest, 1024);

SafeNativeMethods.mwle_fnForest_clear(sbforest);
}
/// <summary>
/// @brief Mounts the wind emitter to another scene object
/// 
///    @param objectID Unique ID of the object wind emitter should attach to
///    
///    @tsexample
///    // Wind emitter previously created and named %windEmitter
///    // Going to attach it to the player, making him a walking wind storm
///    %windEmitter.attachToObject(%player);
///    @endtsexample)
/// 
/// </summary>

internal void fnForestWindEmitter_attachToObject (string forestwindemitter, uint objectID)
{
var sbforestwindemitter = new StringBuilder(forestwindemitter, 1024);

SafeNativeMethods.mwle_fnForestWindEmitter_attachToObject(sbforestwindemitter, objectID);
}
/// <summary>
/// ( ForestBrush, containsItemData, bool, 3, 3, ( ForestItemData obj ) )
/// 
/// </summary>

internal bool fnForestBrush_containsItemData (string forestbrush, string a2)
{
var sbforestbrush = new StringBuilder(forestbrush, 1024);
var sba2 = new StringBuilder(a2, 4096);

return  SafeNativeMethods.mwle_fnForestBrush_containsItemData(sbforestbrush, sba2)>=1;
}
/// <summary>
/// ( ForestBrushTool, collectElements, void, 2, 2,  )
/// 
/// </summary>

internal void fnForestBrushTool_collectElements (string forestbrushtool)
{
var sbforestbrushtool = new StringBuilder(forestbrushtool, 1024);

SafeNativeMethods.mwle_fnForestBrushTool_collectElements(sbforestbrushtool);
}
/// <summary>
/// ( ForestEditorCtrl, updateActiveForest, void, 2, 2, () )
/// 
/// </summary>

internal void fnForestEditorCtrl_updateActiveForest (string foresteditorctrl)
{
var sbforesteditorctrl = new StringBuilder(foresteditorctrl, 1024);

SafeNativeMethods.mwle_fnForestEditorCtrl_updateActiveForest(sbforesteditorctrl);
}
/// <summary>
/// ( ForestEditorCtrl, setActiveTool, void, 3, 3, ( ForestTool tool ) )
/// 
/// </summary>

internal void fnForestEditorCtrl_setActiveTool (string foresteditorctrl, string a2)
{
var sbforesteditorctrl = new StringBuilder(foresteditorctrl, 1024);
var sba2 = new StringBuilder(a2, 4096);

SafeNativeMethods.mwle_fnForestEditorCtrl_setActiveTool(sbforesteditorctrl, sba2);
}
/// <summary>
/// ( ForestEditorCtrl, getActiveTool, S32, 2, 2, () )
/// 
/// </summary>

internal int fnForestEditorCtrl_getActiveTool (string foresteditorctrl)
{
var sbforesteditorctrl = new StringBuilder(foresteditorctrl, 1024);

return  SafeNativeMethods.mwle_fnForestEditorCtrl_getActiveTool(sbforesteditorctrl);
}
/// <summary>
/// ( ForestEditorCtrl, deleteMeshSafe, void, 3, 3, ( ForestItemData obj ) )
/// 
/// </summary>

internal void fnForestEditorCtrl_deleteMeshSafe (string foresteditorctrl, string a2)
{
var sbforesteditorctrl = new StringBuilder(foresteditorctrl, 1024);
var sba2 = new StringBuilder(a2, 4096);

SafeNativeMethods.mwle_fnForestEditorCtrl_deleteMeshSafe(sbforesteditorctrl, sba2);
}
/// <summary>
/// ( ForestEditorCtrl, isDirty, bool, 2, 2,  )
/// 
/// </summary>

internal bool fnForestEditorCtrl_isDirty (string foresteditorctrl)
{
var sbforesteditorctrl = new StringBuilder(foresteditorctrl, 1024);

return  SafeNativeMethods.mwle_fnForestEditorCtrl_isDirty(sbforesteditorctrl)>=1;
}
/// <summary>
/// ( ForestSelectionTool, getSelectionCount, S32, 2, 2,  )
/// 
/// </summary>

internal int fnForestSelectionTool_getSelectionCount (string forestselectiontool)
{
var sbforestselectiontool = new StringBuilder(forestselectiontool, 1024);

return  SafeNativeMethods.mwle_fnForestSelectionTool_getSelectionCount(sbforestselectiontool);
}
/// <summary>
/// ( ForestSelectionTool, deleteSelection, void, 2, 2,  )
/// 
/// </summary>

internal void fnForestSelectionTool_deleteSelection (string forestselectiontool)
{
var sbforestselectiontool = new StringBuilder(forestselectiontool, 1024);

SafeNativeMethods.mwle_fnForestSelectionTool_deleteSelection(sbforestselectiontool);
}
/// <summary>
/// ( ForestSelectionTool, clearSelection, void, 2, 2,  )
/// 
/// </summary>

internal void fnForestSelectionTool_clearSelection (string forestselectiontool)
{
var sbforestselectiontool = new StringBuilder(forestselectiontool, 1024);

SafeNativeMethods.mwle_fnForestSelectionTool_clearSelection(sbforestselectiontool);
}
/// <summary>
/// ( ForestSelectionTool, cutSelection, void, 2, 2,  )
/// 
/// </summary>

internal void fnForestSelectionTool_cutSelection (string forestselectiontool)
{
var sbforestselectiontool = new StringBuilder(forestselectiontool, 1024);

SafeNativeMethods.mwle_fnForestSelectionTool_cutSelection(sbforestselectiontool);
}
/// <summary>
/// ( ForestSelectionTool, copySelection, void, 2, 2,  )
/// 
/// </summary>

internal void fnForestSelectionTool_copySelection (string forestselectiontool)
{
var sbforestselectiontool = new StringBuilder(forestselectiontool, 1024);

SafeNativeMethods.mwle_fnForestSelectionTool_copySelection(sbforestselectiontool);
}
/// <summary>
/// ( ForestSelectionTool, pasteSelection, void, 2, 2,  )
/// 
/// </summary>

internal void fnForestSelectionTool_pasteSelection (string forestselectiontool)
{
var sbforestselectiontool = new StringBuilder(forestselectiontool, 1024);

SafeNativeMethods.mwle_fnForestSelectionTool_pasteSelection(sbforestselectiontool);
}
/// <summary>
/// Populate the font cache for the specified font with characters from the specified string.
///     @param faceName The name of the font face.
///     @param fontSize The size of the font in pixels.
///     @param string The string to populate.
///     @ingroup Font )
/// 
/// </summary>

internal void fn_populateFontCacheString (string faceName, int fontSize, string xstring)
{
var sbfaceName = new StringBuilder(faceName, 4096);
var sbxstring = new StringBuilder(xstring, 4096);

SafeNativeMethods.mwle_fn_populateFontCacheString(sbfaceName, fontSize, sbxstring);
}
/// <summary>
/// Populate the font cache for the specified font with Unicode code points in the specified range.
///    @param faceName The name of the font face.
///    @param fontSize The size of the font in pixels.
///    @param rangeStart The start Unicode point.
///    @param rangeEnd The end Unicode point.
///    @note We only support BMP-0, so code points range from 0 to 65535.
///    @ingroup Font )
/// 
/// </summary>

internal void fn_populateFontCacheRange (string faceName, int fontSize, uint rangeStart, uint rangeEnd)
{
var sbfaceName = new StringBuilder(faceName, 4096);

SafeNativeMethods.mwle_fn_populateFontCacheRange(sbfaceName, fontSize, rangeStart, rangeEnd);
}
/// <summary>
/// Dumps to the console a full description of all cached fonts, along with 
///    info on the codepoints each contains.
///    @ingroup Font )
/// 
/// </summary>

internal void fn_dumpFontCacheStatus ()
{

SafeNativeMethods.mwle_fn_dumpFontCacheStatus();
}
/// <summary>
/// Force all cached fonts to serialize themselves to the cache.
///    @ingroup Font )
/// 
/// </summary>

internal void fn_writeFontCache ()
{

SafeNativeMethods.mwle_fn_writeFontCache();
}
/// <summary>
/// Populate the font cache for all fonts with characters from the specified string.
///    @ingroup Font )
/// 
/// </summary>

internal void fn_populateAllFontCacheString (string xstring)
{
var sbxstring = new StringBuilder(xstring, 4096);

SafeNativeMethods.mwle_fn_populateAllFontCacheString(sbxstring);
}
/// <summary>
/// Populate the font cache for all fonts with Unicode code points in the specified range.
///    @param rangeStart The start Unicode point.
///    @param rangeEnd The end Unicode point.
///    @note We only support BMP-0, so code points range from 0 to 65535.
///    @ingroup Font )
/// 
/// </summary>

internal void fn_populateAllFontCacheRange (uint rangeStart, uint rangeEnd)
{

SafeNativeMethods.mwle_fn_populateAllFontCacheRange(rangeStart, rangeEnd);
}
/// <summary>
/// Export specified font to the specified filename as a PNG. The 
///    image can then be processed in Photoshop or another tool and 
///    reimported using importCachedFont. Characters in the font are 
///    exported as one long strip.
///    @param faceName The name of the font face.
///    @param fontSize The size of the font in pixels.
///    @param fileName The file name and path for the output PNG.
///    @param padding The padding between characters.   
///    @param kerning The kerning between characters.   
///    @ingroup Font )
/// 
/// </summary>

internal void fn_exportCachedFont (string faceName, int fontSize, string fileName, int padding, int kerning)
{
var sbfaceName = new StringBuilder(faceName, 4096);
var sbfileName = new StringBuilder(fileName, 4096);

SafeNativeMethods.mwle_fn_exportCachedFont(sbfaceName, fontSize, sbfileName, padding, kerning);
}
/// <summary>
/// Import an image strip from exportCachedFont. Call with the 
///    same parameters you called exportCachedFont.
///    @param faceName The name of the font face.
///    @param fontSize The size of the font in pixels.
///    @param fileName The file name and path for the input PNG.
///    @param padding The padding between characters.   
///    @param kerning The kerning between characters.   
///    @ingroup Font )
/// 
/// </summary>

internal void fn_importCachedFont (string faceName, int fontSize, string fileName, int padding, int kerning)
{
var sbfaceName = new StringBuilder(faceName, 4096);
var sbfileName = new StringBuilder(fileName, 4096);

SafeNativeMethods.mwle_fn_importCachedFont(sbfaceName, fontSize, sbfileName, padding, kerning);
}
/// <summary>
/// Copy the specified old font to a new name. The new copy will not have a 
///    platform font backing it, and so will never have characters added to it. 
///    But this is useful for making copies of fonts to add postprocessing effects 
///    to via exportCachedFont.
///    @param oldFontName The name of the font face to copy.
///    @param oldFontSize The size of the font to copy.
///    @param newFontName The name of the new font face.
///    @ingroup Font )
/// 
/// </summary>

internal void fn_duplicateCachedFont (string oldFontName, int oldFontSize, string newFontName)
{
var sboldFontName = new StringBuilder(oldFontName, 4096);
var sbnewFontName = new StringBuilder(newFontName, 4096);

SafeNativeMethods.mwle_fn_duplicateCachedFont(sboldFontName, oldFontSize, sbnewFontName);
}
/// <summary>
/// Returns a tab-seperated string of the detected devices across all adapters.
///    @ingroup GFX )
/// 
/// </summary>

internal string fn_getDisplayDeviceList ()
{
var returnbuff = new StringBuilder(1024);

SafeNativeMethods.mwle_fn_getDisplayDeviceList(returnbuff);
return returnbuff.ToString();

}
/// <summary>
/// Returns a list of the unflagged GFX resources. See flagCurrentGFXResources for usage details.
///    @ingroup GFX
///    @see flagCurrentGFXResources, clearGFXResourceFlags, describeGFXResources )
/// 
/// </summary>

internal void fn_listGFXResources (bool unflaggedOnly)
{

SafeNativeMethods.mwle_fn_listGFXResources(unflaggedOnly);
}
/// <summary>
/// @brief Flags all currently allocated GFX resources.
///    Used for resource allocation and leak tracking by flagging 
///    current resources then dumping a list of unflagged resources 
///    at some later point in execution.
///    @ingroup GFX
///    @see listGFXResources, clearGFXResourceFlags, describeGFXResources )
/// 
/// </summary>

internal void fn_flagCurrentGFXResources ()
{

SafeNativeMethods.mwle_fn_flagCurrentGFXResources();
}
/// <summary>
/// Clears the flagged state on all allocated GFX resources. 
///    See flagCurrentGFXResources for usage details.
///    @ingroup GFX
///    @see flagCurrentGFXResources, listGFXResources, describeGFXResources )
/// 
/// </summary>

internal void fn_clearGFXResourceFlags ()
{

SafeNativeMethods.mwle_fn_clearGFXResourceFlags();
}
/// <summary>
/// @brief Dumps a description of GFX resources to a file or the console.
///    @param resourceTypes A space seperated list of resource types or an empty string for all resources.
///    @param filePath A file to dump the list to or an empty string to write to the console.
///    @param unflaggedOnly If true only unflagged resources are dumped. See flagCurrentGFXResources.
///    @note The resource types can be one or more of the following:
///      - texture
///      - texture target
///      - window target
///      - vertex buffers
///      - primitive buffers
///      - fences
///      - cubemaps
///      - shaders
///      - stateblocks
///    @ingroup GFX )
/// 
/// </summary>

internal void fn_describeGFXResources (string resourceTypes, string filePath, bool unflaggedOnly)
{
var sbresourceTypes = new StringBuilder(resourceTypes, 4096);
var sbfilePath = new StringBuilder(filePath, 4096);

SafeNativeMethods.mwle_fn_describeGFXResources(sbresourceTypes, sbfilePath, unflaggedOnly);
}
/// <summary>
/// Dumps a description of all state blocks.     
///    @param filePath A file to dump the state blocks to or an empty string to write to the console.
///    @ingroup GFX )
/// 
/// </summary>

internal void fn_describeGFXStateBlocks (string filePath)
{
var sbfilePath = new StringBuilder(filePath, 4096);

SafeNativeMethods.mwle_fn_describeGFXStateBlocks(sbfilePath);
}
/// <summary>
/// Returns the pixel shader version for the active device.
///    @ingroup GFX )
/// 
/// </summary>

internal float fn_getPixelShaderVersion ()
{

return  SafeNativeMethods.mwle_fn_getPixelShaderVersion();
}
/// <summary>
/// @brief Sets the pixel shader version for the active device.
///    This can be used to force a lower pixel shader version than is supported by 
///    the device for testing or performance optimization.
///    @param version The floating point shader version number.
///    @note This will only affect shaders/materials created after the call 
///    and should be used before the game begins.
///    @see $pref::Video::forcedPixVersion
///    @ingroup GFX )
/// 
/// </summary>

internal void fn_setPixelShaderVersion (float version)
{

SafeNativeMethods.mwle_fn_setPixelShaderVersion(version);
}
/// <summary>
/// Get the string describing the active GFX device.
///    @ingroup GFX )
/// 
/// </summary>

internal string fn_getDisplayDeviceInformation ()
{
var returnbuff = new StringBuilder(4096);

SafeNativeMethods.mwle_fn_getDisplayDeviceInformation(returnbuff);
return returnbuff.ToString();

}
/// <summary>
/// Returns the best texture format for storage of HDR data for the active device.
///    @ingroup GFX )
/// 
/// </summary>

internal int fn_getBestHDRFormat ()
{

return  SafeNativeMethods.mwle_fn_getBestHDRFormat();
}
/// <summary>
/// Returns the width, height, and bitdepth of the screen/desktop.@ingroup GFX )
/// 
/// </summary>

internal string fn_getDesktopResolution ()
{
var returnbuff = new StringBuilder(1024);

SafeNativeMethods.mwle_fn_getDesktopResolution(returnbuff);
return returnbuff.ToString();

}
/// <summary>
/// Adds a global shader macro which will be merged with the script defined 
///    macros on every shader.  The macro will replace the value of an existing 
///    macro of the same name.  For the new macro to take effect all the shaders 
///    in the system need to be reloaded.
///    @see resetLightManager, removeGlobalShaderMacro
///    @ingroup Rendering )
/// 
/// </summary>

internal void fn_addGlobalShaderMacro (string name, string value)
{
var sbname = new StringBuilder(name, 4096);
var sbvalue = new StringBuilder(value, 4096);

SafeNativeMethods.mwle_fn_addGlobalShaderMacro(sbname, sbvalue);
}
/// <summary>
/// Removes an existing global macro by name.
///    @see addGlobalShaderMacro
///    @ingroup Rendering )
/// 
/// </summary>

internal void fn_removeGlobalShaderMacro (string name)
{
var sbname = new StringBuilder(name, 4096);

SafeNativeMethods.mwle_fn_removeGlobalShaderMacro(sbname);
}
/// <summary>
/// Releases all textures and resurrects the texture manager.
///    @ingroup GFX )
/// 
/// </summary>

internal void fn_flushTextureCache ()
{

SafeNativeMethods.mwle_fn_flushTextureCache();
}
/// <summary>
/// Release the unused pooled textures in texture manager freeing up video memory.
///    @ingroup GFX )
/// 
/// </summary>

internal void fn_cleanupTexturePool ()
{

SafeNativeMethods.mwle_fn_cleanupTexturePool();
}
/// <summary>
/// Reload all the textures from disk.
///    @ingroup GFX )
/// 
/// </summary>

internal void fn_reloadTextures ()
{

SafeNativeMethods.mwle_fn_reloadTextures();
}
/// <summary>
/// Returns a list of texture profiles in the format: ProfileName TextureCount TextureMB
///    @ingroup GFX )
/// 
/// </summary>

internal string fn_getTextureProfileStats ()
{
var returnbuff = new StringBuilder(1024);

SafeNativeMethods.mwle_fn_getTextureProfileStats(returnbuff);
return returnbuff.ToString();

}
/// <summary>
/// Takes a screenshot with optional tiling to produce huge screenshots.
///    @param file The output image file path.
///    @param format Either JPEG or PNG.
///    @param tileCount If greater than 1 will tile the current screen size to take a large format screenshot.
///    @param tileOverlap The amount of horizontal and vertical overlap between the tiles used to remove tile edge artifacts from post effects.
///    @ingroup GFX )
/// 
/// </summary>

internal void fn_screenShot (string file, string format, uint tileCount, float tileOverlap)
{
var sbfile = new StringBuilder(file, 4096);
var sbformat = new StringBuilder(format, 4096);

SafeNativeMethods.mwle_fn_screenShot(sbfile, sbformat, tileCount, tileOverlap);
}
/// <summary>
/// Returns the count of active DDSs files in memory.
///    @ingroup Rendering )
/// 
/// </summary>

internal int fn_getActiveDDSFiles ()
{

return  SafeNativeMethods.mwle_fn_getActiveDDSFiles();
}
/// <summary>
/// Returns image info in the following format: width TAB height TAB bytesPerPixel. 
///    It will return an empty string if the file is not found.
///    @ingroup Rendering )
/// 
/// </summary>

internal string fn_getBitmapInfo (string filename)
{
var returnbuff = new StringBuilder(1024);
var sbfilename = new StringBuilder(filename, 4096);

SafeNativeMethods.mwle_fn_getBitmapInfo(sbfilename, returnbuff);
return returnbuff.ToString();

}
/// <summary>
/// Update the assigned cubemaps faces. )
/// 
/// </summary>

internal void fnCubemapData_updateFaces (string cubemapdata)
{
var sbcubemapdata = new StringBuilder(cubemapdata, 1024);

SafeNativeMethods.mwle_fnCubemapData_updateFaces(sbcubemapdata);
}
/// <summary>
/// Returns the script filename of where the CubemapData object was 
///    defined.  This is used by the material editor. )
/// 
/// </summary>

internal string fnCubemapData_getFilename (string cubemapdata)
{
var returnbuff = new StringBuilder(4096);
var sbcubemapdata = new StringBuilder(cubemapdata, 1024);

SafeNativeMethods.mwle_fnCubemapData_getFilename(sbcubemapdata, returnbuff);
return returnbuff.ToString();

}
/// <summary>
/// Draws a line primitive between two 3d points. )
/// 
/// </summary>

internal void fnDebugDrawer_drawLine (string debugdrawer, string a, string b, string color)
{
var sbdebugdrawer = new StringBuilder(debugdrawer, 1024);
var sba = new StringBuilder(a, 1024);
var sbb = new StringBuilder(b, 1024);
var sbcolor = new StringBuilder(color, 1024);

SafeNativeMethods.mwle_fnDebugDrawer_drawLine(sbdebugdrawer, sba, sbb, sbcolor);
}
/// <summary>
/// Draws an axis aligned box primitive within the two 3d points. )
/// 
/// </summary>

internal void fnDebugDrawer_drawBox (string debugdrawer, string a, string b, string color)
{
var sbdebugdrawer = new StringBuilder(debugdrawer, 1024);
var sba = new StringBuilder(a, 1024);
var sbb = new StringBuilder(b, 1024);
var sbcolor = new StringBuilder(color, 1024);

SafeNativeMethods.mwle_fnDebugDrawer_drawBox(sbdebugdrawer, sba, sbb, sbcolor);
}
/// <summary>
/// Sets the \"time to live\" (TTL) for the last rendered primitive. )
/// 
/// </summary>

internal void fnDebugDrawer_setLastTTL (string debugdrawer, uint ms)
{
var sbdebugdrawer = new StringBuilder(debugdrawer, 1024);

SafeNativeMethods.mwle_fnDebugDrawer_setLastTTL(sbdebugdrawer, ms);
}
/// <summary>
/// Sets the z buffer reading state for the last rendered primitive. )
/// 
/// </summary>

internal void fnDebugDrawer_setLastZTest (string debugdrawer, bool enabled)
{
var sbdebugdrawer = new StringBuilder(debugdrawer, 1024);

SafeNativeMethods.mwle_fnDebugDrawer_setLastZTest(sbdebugdrawer, enabled);
}
/// <summary>
/// Toggles freeze mode which keeps the currently rendered primitives from expiring. )
/// 
/// </summary>

internal void fnDebugDrawer_toggleFreeze (string debugdrawer)
{
var sbdebugdrawer = new StringBuilder(debugdrawer, 1024);

SafeNativeMethods.mwle_fnDebugDrawer_toggleFreeze(sbdebugdrawer);
}
/// <summary>
/// Toggles the rendering of DebugDrawer primitives. )
/// 
/// </summary>

internal void fnDebugDrawer_toggleDrawing (string debugdrawer)
{
var sbdebugdrawer = new StringBuilder(debugdrawer, 1024);

SafeNativeMethods.mwle_fnDebugDrawer_toggleDrawing(sbdebugdrawer);
}
/// <summary>
/// THEORA, 30.0f, Point2I( 0, 0 ) ),
///    Begins a video capture session.
///    @see stopVideoCapture
///    @ingroup Rendering )
/// 
/// </summary>

internal void fn_startVideoCapture (string canvas, string filename, string encoder, float framerate, string resolution)
{
var sbcanvas = new StringBuilder(canvas, 1024);
var sbfilename = new StringBuilder(filename, 4096);
var sbencoder = new StringBuilder(encoder, 4096);
var sbresolution = new StringBuilder(resolution, 1024);

SafeNativeMethods.mwle_fn_startVideoCapture(sbcanvas, sbfilename, sbencoder, framerate, sbresolution);
}
/// <summary>
/// Stops the video capture session.
///    @see startVideoCapture   
///    @ingroup Rendering )
/// 
/// </summary>

internal void fn_stopVideoCapture ()
{

SafeNativeMethods.mwle_fn_stopVideoCapture();
}
/// <summary>
/// THEORA, 30.0f, Point2I( 0, 0 ) ),
///    Load a journal file and capture it video.
///    @ingroup Rendering )
/// 
/// </summary>

internal void fn_playJournalToVideo (string journalFile, string videoFile, string encoder, float framerate, string resolution)
{
var sbjournalFile = new StringBuilder(journalFile, 4096);
var sbvideoFile = new StringBuilder(videoFile, 4096);
var sbencoder = new StringBuilder(encoder, 4096);
var sbresolution = new StringBuilder(resolution, 1024);

SafeNativeMethods.mwle_fn_playJournalToVideo(sbjournalFile, sbvideoFile, sbencoder, framerate, sbresolution);
}
/// <summary>
/// Transform 3D screen-space coordinates (x, y, depth) to world space.
///    This method can be, for example, used to find the world-space position relating to the current mouse cursor position.
///    @param screenPosition The x/y position on the screen plus the depth from the screen-plane outwards.
///    @return The world-space position corresponding to the given screen-space coordinates. )
/// 
/// </summary>

internal string fnGuiTSCtrl_unproject (string guitsctrl, string screenPosition)
{
var returnbuff = new StringBuilder(1024);
var sbguitsctrl = new StringBuilder(guitsctrl, 1024);
var sbscreenPosition = new StringBuilder(screenPosition, 1024);

SafeNativeMethods.mwle_fnGuiTSCtrl_unproject(sbguitsctrl, sbscreenPosition, returnbuff);
return returnbuff.ToString();

}
/// <summary>
/// Transform world-space coordinates to screen-space (x, y, depth) coordinates.
///    @param worldPosition The world-space position to transform to screen-space.
///    @return The  )
/// 
/// </summary>

internal string fnGuiTSCtrl_project (string guitsctrl, string worldPosition)
{
var returnbuff = new StringBuilder(1024);
var sbguitsctrl = new StringBuilder(guitsctrl, 1024);
var sbworldPosition = new StringBuilder(worldPosition, 1024);

SafeNativeMethods.mwle_fnGuiTSCtrl_project(sbguitsctrl, sbworldPosition, returnbuff);
return returnbuff.ToString();

}
/// <summary>
/// Get the ratio between world-space units and pixels.
///    @return The amount of world-space units covered by the extent of a single pixel. )
/// 
/// </summary>

internal string fnGuiTSCtrl_getWorldToScreenScale (string guitsctrl)
{
var returnbuff = new StringBuilder(1024);
var sbguitsctrl = new StringBuilder(guitsctrl, 1024);

SafeNativeMethods.mwle_fnGuiTSCtrl_getWorldToScreenScale(sbguitsctrl, returnbuff);
return returnbuff.ToString();

}
/// <summary>
/// Given the camera's current FOV, get the distance from the camera's viewpoint at which the given radius will fit in the render area.
///    @param radius Radius in world-space units which should fit in the view.
///    @return The distance from the viewpoint at which the given radius would be fully visible. )
/// 
/// </summary>

internal float fnGuiTSCtrl_calculateViewDistance (string guitsctrl, float radius)
{
var sbguitsctrl = new StringBuilder(guitsctrl, 1024);

return  SafeNativeMethods.mwle_fnGuiTSCtrl_calculateViewDistance(sbguitsctrl, radius);
}
/// <summary>
/// Set the bitmap to show on the button.
///    @param path Path to the texture file in any of the supported formats. )
/// 
/// </summary>

internal void fnGuiBitmapButtonCtrl_setBitmap (string guibitmapbuttonctrl, string path)
{
var sbguibitmapbuttonctrl = new StringBuilder(guibitmapbuttonctrl, 1024);
var sbpath = new StringBuilder(path, 4096);

SafeNativeMethods.mwle_fnGuiBitmapButtonCtrl_setBitmap(sbguibitmapbuttonctrl, sbpath);
}
/// <summary>
/// Simulate a click on the button.
///    This method will trigger the button's action just as if the button had been pressed by the 
///    user. )
/// 
/// </summary>

internal void fnGuiButtonBaseCtrl_performClick (string guibuttonbasectrl)
{
var sbguibuttonbasectrl = new StringBuilder(guibuttonbasectrl, 1024);

SafeNativeMethods.mwle_fnGuiButtonBaseCtrl_performClick(sbguibuttonbasectrl);
}
/// <summary>
/// Set the text displayed on the button's label.
///    @param text The text to display as the button's text label.
///    @note Not all buttons render text labels.
///    @see getText
///    @see setTextID )
/// 
/// </summary>

internal void fnGuiButtonBaseCtrl_setText (string guibuttonbasectrl, string text)
{
var sbguibuttonbasectrl = new StringBuilder(guibuttonbasectrl, 1024);
var sbtext = new StringBuilder(text, 4096);

SafeNativeMethods.mwle_fnGuiButtonBaseCtrl_setText(sbguibuttonbasectrl, sbtext);
}
/// <summary>
/// Set the text displayed on the button's label using a string from the string table 
///    assigned to the control.
///    @param id Name of the variable that contains the integer string ID.  Used to look up 
///       string in table.
///    @note Not all buttons render text labels.
///    @see setText
///    @see getText
///    @see GuiControl::langTableMod
///    @see LangTable
///    @ref Gui_i18n )
/// 
/// </summary>

internal void fnGuiButtonBaseCtrl_setTextID (string guibuttonbasectrl, string id)
{
var sbguibuttonbasectrl = new StringBuilder(guibuttonbasectrl, 1024);
var sbid = new StringBuilder(id, 4096);

SafeNativeMethods.mwle_fnGuiButtonBaseCtrl_setTextID(sbguibuttonbasectrl, sbid);
}
/// <summary>
/// Get the text display on the button's label (if any).
///    @return The button's label. )
/// 
/// </summary>

internal string fnGuiButtonBaseCtrl_getText (string guibuttonbasectrl)
{
var returnbuff = new StringBuilder(4096);
var sbguibuttonbasectrl = new StringBuilder(guibuttonbasectrl, 1024);

SafeNativeMethods.mwle_fnGuiButtonBaseCtrl_getText(sbguibuttonbasectrl, returnbuff);
return returnbuff.ToString();

}
/// <summary>
/// For toggle or radio buttons, set whether the button is currently activated or not.  For radio buttons, 
///    toggling a button on will toggle all other radio buttons in its group to off.
///    @param isOn If true, the button will be toggled on (if not already); if false, it will be toggled off.
///    @note Toggling the state of a button with this method will <em>not</em> not trigger the action associated with the 
///       button.  To do that, use performClick(). )
/// 
/// </summary>

internal void fnGuiButtonBaseCtrl_setStateOn (string guibuttonbasectrl, bool isOn)
{
var sbguibuttonbasectrl = new StringBuilder(guibuttonbasectrl, 1024);

SafeNativeMethods.mwle_fnGuiButtonBaseCtrl_setStateOn(sbguibuttonbasectrl, isOn);
}
/// <summary>
/// Reset the mousing state of the button.
///    This method should not generally be called. )
/// 
/// </summary>

internal void fnGuiButtonBaseCtrl_resetState (string guibuttonbasectrl)
{
var sbguibuttonbasectrl = new StringBuilder(guibuttonbasectrl, 1024);

SafeNativeMethods.mwle_fnGuiButtonBaseCtrl_resetState(sbguibuttonbasectrl);
}
/// <summary>
/// Set whether the checkbox is ticked or not.
///    @param newState If true the box will be checked, if false, it will be unchecked.
///    @note This method will @b not trigger the command associated with the control.  To toggle the 
///       checkbox state as if the user had clicked the control, use performClick(). )
/// 
/// </summary>

internal void fnGuiCheckBoxCtrl_setStateOn (string guicheckboxctrl, bool newState)
{
var sbguicheckboxctrl = new StringBuilder(guicheckboxctrl, 1024);

SafeNativeMethods.mwle_fnGuiCheckBoxCtrl_setStateOn(sbguicheckboxctrl, newState);
}
/// <summary>
/// Test whether the checkbox is currently checked.
///    @return True if the checkbox is currently ticked, false otherwise. )
/// 
/// </summary>

internal bool fnGuiCheckBoxCtrl_isStateOn (string guicheckboxctrl)
{
var sbguicheckboxctrl = new StringBuilder(guicheckboxctrl, 1024);

return  SafeNativeMethods.mwle_fnGuiCheckBoxCtrl_isStateOn(sbguicheckboxctrl)>=1;
}
/// <summary>
/// @brief Set the bitmap to use for the button portion of this control.
///    @param buttonFilename Filename for the image
///    @tsexample
///    // Define the button filename
///    %buttonFilename = \"pearlButton\";
///    // Inform the GuiIconButtonCtrl control to update its main button graphic to the defined bitmap
///    %thisGuiIconButtonCtrl.setBitmap(%buttonFilename);
///    @endtsexample
///    @see GuiControl
///    @see GuiButtonCtrl)
/// 
/// </summary>

internal void fnGuiIconButtonCtrl_setBitmap (string guiiconbuttonctrl, string buttonFilename)
{
var sbguiiconbuttonctrl = new StringBuilder(guiiconbuttonctrl, 1024);
var sbbuttonFilename = new StringBuilder(buttonFilename, 4096);

SafeNativeMethods.mwle_fnGuiIconButtonCtrl_setBitmap(sbguiiconbuttonctrl, sbbuttonFilename);
}
/// <summary>
/// Set the color of the swatch control.
///    @param newColor The new color string given to the swatch control in float format \"r g b a\".
///    @note It's also important to note that when setColor is called causes
///    the control's altCommand field to be executed. )
/// 
/// </summary>

internal void fnGuiSwatchButtonCtrl_setColor (string guiswatchbuttonctrl, string newColor)
{
var sbguiswatchbuttonctrl = new StringBuilder(guiswatchbuttonctrl, 1024);
var sbnewColor = new StringBuilder(newColor, 4096);

SafeNativeMethods.mwle_fnGuiSwatchButtonCtrl_setColor(sbguiswatchbuttonctrl, sbnewColor);
}
/// <summary>
/// ( GuiToolboxButtonCtrl, setNormalBitmap, void, 3, 3, ( filepath name ) sets the bitmap that shows when the button is active)
/// 
/// </summary>

internal void fnGuiToolboxButtonCtrl_setNormalBitmap (string guitoolboxbuttonctrl, string a2)
{
var sbguitoolboxbuttonctrl = new StringBuilder(guitoolboxbuttonctrl, 1024);
var sba2 = new StringBuilder(a2, 4096);

SafeNativeMethods.mwle_fnGuiToolboxButtonCtrl_setNormalBitmap(sbguitoolboxbuttonctrl, sba2);
}
/// <summary>
/// ( GuiToolboxButtonCtrl, setLoweredBitmap, void, 3, 3, ( filepath name ) sets the bitmap that shows when the button is disabled)
/// 
/// </summary>

internal void fnGuiToolboxButtonCtrl_setLoweredBitmap (string guitoolboxbuttonctrl, string a2)
{
var sbguitoolboxbuttonctrl = new StringBuilder(guitoolboxbuttonctrl, 1024);
var sba2 = new StringBuilder(a2, 4096);

SafeNativeMethods.mwle_fnGuiToolboxButtonCtrl_setLoweredBitmap(sbguitoolboxbuttonctrl, sba2);
}
/// <summary>
/// ( GuiToolboxButtonCtrl, setHoverBitmap, void, 3, 3, ( filepath name ) sets the bitmap that shows when the button is disabled)
/// 
/// </summary>

internal void fnGuiToolboxButtonCtrl_setHoverBitmap (string guitoolboxbuttonctrl, string a2)
{
var sbguitoolboxbuttonctrl = new StringBuilder(guitoolboxbuttonctrl, 1024);
var sba2 = new StringBuilder(a2, 4096);

SafeNativeMethods.mwle_fnGuiToolboxButtonCtrl_setHoverBitmap(sbguitoolboxbuttonctrl, sba2);
}
/// <summary>
/// Reset scrolling. )
/// 
/// </summary>

internal void fnGuiAutoScrollCtrl_reset (string guiautoscrollctrl)
{
var sbguiautoscrollctrl = new StringBuilder(guiautoscrollctrl, 1024);

SafeNativeMethods.mwle_fnGuiAutoScrollCtrl_reset(sbguiautoscrollctrl);
}
/// <summary>
/// Recalculates the position and size of this control and all its children. )
/// 
/// </summary>

internal void fnGuiDynamicCtrlArrayControl_refresh (string guidynamicctrlarraycontrol)
{
var sbguidynamicctrlarraycontrol = new StringBuilder(guidynamicctrlarraycontrol, 1024);

SafeNativeMethods.mwle_fnGuiDynamicCtrlArrayControl_refresh(sbguidynamicctrlarraycontrol);
}
/// <summary>
/// Sets the title of the form.
///    @param caption Form caption )
/// 
/// </summary>

internal void fnGuiFormCtrl_setCaption (string guiformctrl, string caption)
{
var sbguiformctrl = new StringBuilder(guiformctrl, 1024);
var sbcaption = new StringBuilder(caption, 4096);

SafeNativeMethods.mwle_fnGuiFormCtrl_setCaption(sbguiformctrl, sbcaption);
}
/// <summary>
/// dynamic ),
///    Override the <i>borderEnable</i> setting for this frame.
///    @param index  Index of the frame to modify
///    @param state  New borderEnable state: \"on\", \"off\" or \"dynamic\" )
/// 
/// </summary>

internal void fnGuiFrameSetCtrl_frameBorder (string guiframesetctrl, int index, string state)
{
var sbguiframesetctrl = new StringBuilder(guiframesetctrl, 1024);
var sbstate = new StringBuilder(state, 4096);

SafeNativeMethods.mwle_fnGuiFrameSetCtrl_frameBorder(sbguiframesetctrl, index, sbstate);
}
/// <summary>
/// dynamic ),
///    Override the <i>borderMovable</i> setting for this frame.
///    @param index  Index of the frame to modify
///    @param state  New borderEnable state: \"on\", \"off\" or \"dynamic\" )
/// 
/// </summary>

internal void fnGuiFrameSetCtrl_frameMovable (string guiframesetctrl, int index, string state)
{
var sbguiframesetctrl = new StringBuilder(guiframesetctrl, 1024);
var sbstate = new StringBuilder(state, 4096);

SafeNativeMethods.mwle_fnGuiFrameSetCtrl_frameMovable(sbguiframesetctrl, index, sbstate);
}
/// <summary>
/// Set the minimum width and height for the frame. It will not be possible 
///    for the user to resize the frame smaller than this.
///    @param index  Index of the frame to modify
///    @param width  Minimum width in pixels
///    @param height Minimum height in pixels )
/// 
/// </summary>

internal void fnGuiFrameSetCtrl_frameMinExtent (string guiframesetctrl, int index, int width, int height)
{
var sbguiframesetctrl = new StringBuilder(guiframesetctrl, 1024);

SafeNativeMethods.mwle_fnGuiFrameSetCtrl_frameMinExtent(sbguiframesetctrl, index, width, height);
}
/// <summary>
/// Set the padding for this frame. Padding introduces blank space on the inside 
///    edge of the frame.
///    @param index     Index of the frame to modify
///    @param padding   Frame top, bottom, left, and right padding )
/// 
/// </summary>

internal void fnGuiFrameSetCtrl_framePadding (string guiframesetctrl, int index, string padding)
{
var sbguiframesetctrl = new StringBuilder(guiframesetctrl, 1024);
var sbpadding = new StringBuilder(padding, 1024);

SafeNativeMethods.mwle_fnGuiFrameSetCtrl_framePadding(sbguiframesetctrl, index, sbpadding);
}
/// <summary>
/// Get the padding for this frame.
///    @param index     Index of the frame to query )
/// 
/// </summary>

internal string fnGuiFrameSetCtrl_getFramePadding (string guiframesetctrl, int index)
{
var returnbuff = new StringBuilder(1024);
var sbguiframesetctrl = new StringBuilder(guiframesetctrl, 1024);

SafeNativeMethods.mwle_fnGuiFrameSetCtrl_getFramePadding(sbguiframesetctrl, index, returnbuff);
return returnbuff.ToString();

}
/// <summary>
/// Add a new column. )
/// 
/// </summary>

internal void fnGuiFrameSetCtrl_addColumn (string guiframesetctrl)
{
var sbguiframesetctrl = new StringBuilder(guiframesetctrl, 1024);

SafeNativeMethods.mwle_fnGuiFrameSetCtrl_addColumn(sbguiframesetctrl);
}
/// <summary>
/// Add a new row. )
/// 
/// </summary>

internal void fnGuiFrameSetCtrl_addRow (string guiframesetctrl)
{
var sbguiframesetctrl = new StringBuilder(guiframesetctrl, 1024);

SafeNativeMethods.mwle_fnGuiFrameSetCtrl_addRow(sbguiframesetctrl);
}
/// <summary>
/// Remove the last (rightmost) column. )
/// 
/// </summary>

internal void fnGuiFrameSetCtrl_removeColumn (string guiframesetctrl)
{
var sbguiframesetctrl = new StringBuilder(guiframesetctrl, 1024);

SafeNativeMethods.mwle_fnGuiFrameSetCtrl_removeColumn(sbguiframesetctrl);
}
/// <summary>
/// Remove the last (bottom) row. )
/// 
/// </summary>

internal void fnGuiFrameSetCtrl_removeRow (string guiframesetctrl)
{
var sbguiframesetctrl = new StringBuilder(guiframesetctrl, 1024);

SafeNativeMethods.mwle_fnGuiFrameSetCtrl_removeRow(sbguiframesetctrl);
}
/// <summary>
/// Get the number of columns.
///    @return The number of columns )
/// 
/// </summary>

internal int fnGuiFrameSetCtrl_getColumnCount (string guiframesetctrl)
{
var sbguiframesetctrl = new StringBuilder(guiframesetctrl, 1024);

return  SafeNativeMethods.mwle_fnGuiFrameSetCtrl_getColumnCount(sbguiframesetctrl);
}
/// <summary>
/// Get the number of rows.
///    @return The number of rows )
/// 
/// </summary>

internal int fnGuiFrameSetCtrl_getRowCount (string guiframesetctrl)
{
var sbguiframesetctrl = new StringBuilder(guiframesetctrl, 1024);

return  SafeNativeMethods.mwle_fnGuiFrameSetCtrl_getRowCount(sbguiframesetctrl);
}
/// <summary>
/// Get the horizontal offset of a column.
///    @param index Index of the column to query
///    @return Column offset in pixels )
/// 
/// </summary>

internal int fnGuiFrameSetCtrl_getColumnOffset (string guiframesetctrl, int index)
{
var sbguiframesetctrl = new StringBuilder(guiframesetctrl, 1024);

return  SafeNativeMethods.mwle_fnGuiFrameSetCtrl_getColumnOffset(sbguiframesetctrl, index);
}
/// <summary>
/// Get the vertical offset of a row.
///    @param index Index of the row to query
///    @return Row offset in pixels )
/// 
/// </summary>

internal int fnGuiFrameSetCtrl_getRowOffset (string guiframesetctrl, int index)
{
var sbguiframesetctrl = new StringBuilder(guiframesetctrl, 1024);

return  SafeNativeMethods.mwle_fnGuiFrameSetCtrl_getRowOffset(sbguiframesetctrl, index);
}
/// <summary>
/// Set the horizontal offset of a column.
///    Note that column offsets must always be in increasing order, and therefore 
///    this offset must be between the offsets of the colunns either side.
///    @param index  Index of the column to modify
///    @param offset New column offset )
/// 
/// </summary>

internal void fnGuiFrameSetCtrl_setColumnOffset (string guiframesetctrl, int index, int offset)
{
var sbguiframesetctrl = new StringBuilder(guiframesetctrl, 1024);

SafeNativeMethods.mwle_fnGuiFrameSetCtrl_setColumnOffset(sbguiframesetctrl, index, offset);
}
/// <summary>
/// Set the vertical offset of a row.
///    Note that row offsets must always be in increasing order, and therefore 
///    this offset must be between the offsets of the rows either side.
///    @param index  Index of the row to modify
///    @param offset New row offset )
/// 
/// </summary>

internal void fnGuiFrameSetCtrl_setRowOffset (string guiframesetctrl, int index, int offset)
{
var sbguiframesetctrl = new StringBuilder(guiframesetctrl, 1024);

SafeNativeMethods.mwle_fnGuiFrameSetCtrl_setRowOffset(sbguiframesetctrl, index, offset);
}
/// <summary>
/// Recalculates child control sizes. )
/// 
/// </summary>

internal void fnGuiFrameSetCtrl_updateSizes (string guiframesetctrl)
{
var sbguiframesetctrl = new StringBuilder(guiframesetctrl, 1024);

SafeNativeMethods.mwle_fnGuiFrameSetCtrl_updateSizes(sbguiframesetctrl);
}
/// <summary>
/// Collapse or un-collapse the control.
///    @param collapse True to collapse the control, false to un-collapse it )
/// 
/// </summary>

internal void fnGuiPaneControl_setCollapsed (string guipanecontrol, bool collapse)
{
var sbguipanecontrol = new StringBuilder(guipanecontrol, 1024);

SafeNativeMethods.mwle_fnGuiPaneControl_setCollapsed(sbguipanecontrol, collapse);
}
/// <summary>
/// Determine whether the rollout is currently expanded, i.e. whether the child control is visible.
///    @return True if the rollout is expanded, false if not. )
/// 
/// </summary>

internal bool fnGuiRolloutCtrl_isExpanded (string guirolloutctrl)
{
var sbguirolloutctrl = new StringBuilder(guirolloutctrl, 1024);

return  SafeNativeMethods.mwle_fnGuiRolloutCtrl_isExpanded(sbguirolloutctrl)>=1;
}
/// <summary>
/// Collapse the rollout if it is currently expanded.  This will make the rollout's child control invisible.
///    @note The rollout will animate to collapsed state.  To instantly collapse without animation, use instantCollapse(). )
/// 
/// </summary>

internal void fnGuiRolloutCtrl_collapse (string guirolloutctrl)
{
var sbguirolloutctrl = new StringBuilder(guirolloutctrl, 1024);

SafeNativeMethods.mwle_fnGuiRolloutCtrl_collapse(sbguirolloutctrl);
}
/// <summary>
/// Expand the rollout if it is currently collapsed.  This will make the rollout's child control visible.
///    @note The rollout will animate to expanded state.  To instantly expand without animation, use instantExpand(). )
/// 
/// </summary>

internal void fnGuiRolloutCtrl_expand (string guirolloutctrl)
{
var sbguirolloutctrl = new StringBuilder(guirolloutctrl, 1024);

SafeNativeMethods.mwle_fnGuiRolloutCtrl_expand(sbguirolloutctrl);
}
/// <summary>
/// Toggle the current collapse state of the rollout.  If it is currently expanded, then collapse it.  If it 
///    is currently collapsed, then expand it. )
/// 
/// </summary>

internal void fnGuiRolloutCtrl_toggleCollapse (string guirolloutctrl)
{
var sbguirolloutctrl = new StringBuilder(guirolloutctrl, 1024);

SafeNativeMethods.mwle_fnGuiRolloutCtrl_toggleCollapse(sbguirolloutctrl);
}
/// <summary>
/// Toggle the current expansion state of the rollout  If it is currently expanded, then collapse it.  If it 
///    is currently collapsed, then expand it.
///    @param instant If true, the rollout will toggle its state without animation.  Otherwise, the rollout will 
///       smoothly slide into the opposite state. )
/// 
/// </summary>

internal void fnGuiRolloutCtrl_toggleExpanded (string guirolloutctrl, bool instantly)
{
var sbguirolloutctrl = new StringBuilder(guirolloutctrl, 1024);

SafeNativeMethods.mwle_fnGuiRolloutCtrl_toggleExpanded(sbguirolloutctrl, instantly);
}
/// <summary>
/// Instantly collapse the rollout without animation.  To smoothly slide the rollout to collapsed state, use collapse(). )
/// 
/// </summary>

internal void fnGuiRolloutCtrl_instantCollapse (string guirolloutctrl)
{
var sbguirolloutctrl = new StringBuilder(guirolloutctrl, 1024);

SafeNativeMethods.mwle_fnGuiRolloutCtrl_instantCollapse(sbguirolloutctrl);
}
/// <summary>
/// Instantly expand the rollout without animation.  To smoothly slide the rollout to expanded state, use expand(). )
/// 
/// </summary>

internal void fnGuiRolloutCtrl_instantExpand (string guirolloutctrl)
{
var sbguirolloutctrl = new StringBuilder(guirolloutctrl, 1024);

SafeNativeMethods.mwle_fnGuiRolloutCtrl_instantExpand(sbguirolloutctrl);
}
/// <summary>
/// Resize the rollout to exactly fit around its child control.  This can be used to manually trigger a recomputation of 
///    the rollout size. )
/// 
/// </summary>

internal void fnGuiRolloutCtrl_sizeToContents (string guirolloutctrl)
{
var sbguirolloutctrl = new StringBuilder(guirolloutctrl, 1024);

SafeNativeMethods.mwle_fnGuiRolloutCtrl_sizeToContents(sbguirolloutctrl);
}
/// <summary>
/// Scroll all the way to the top of the vertical and left of the horizontal scrollbar. )
/// 
/// </summary>

internal void fnGuiScrollCtrl_scrollToTop (string guiscrollctrl)
{
var sbguiscrollctrl = new StringBuilder(guiscrollctrl, 1024);

SafeNativeMethods.mwle_fnGuiScrollCtrl_scrollToTop(sbguiscrollctrl);
}
/// <summary>
/// Scroll all the way to the bottom of the vertical scrollbar and the left of the horizontal bar. )
/// 
/// </summary>

internal void fnGuiScrollCtrl_scrollToBottom (string guiscrollctrl)
{
var sbguiscrollctrl = new StringBuilder(guiscrollctrl, 1024);

SafeNativeMethods.mwle_fnGuiScrollCtrl_scrollToBottom(sbguiscrollctrl);
}
/// <summary>
/// Set the position of the scrolled content.
///    @param x Position on X axis.
///    @param y Position on y axis. )
/// 
/// </summary>

internal void fnGuiScrollCtrl_setScrollPosition (string guiscrollctrl, int x, int y)
{
var sbguiscrollctrl = new StringBuilder(guiscrollctrl, 1024);

SafeNativeMethods.mwle_fnGuiScrollCtrl_setScrollPosition(sbguiscrollctrl, x, y);
}
/// <summary>
/// Scroll the control so that the given child @a control is visible.
///    @param control A child control. )
/// 
/// </summary>

internal void fnGuiScrollCtrl_scrollToObject (string guiscrollctrl, string control)
{
var sbguiscrollctrl = new StringBuilder(guiscrollctrl, 1024);
var sbcontrol = new StringBuilder(control, 1024);

SafeNativeMethods.mwle_fnGuiScrollCtrl_scrollToObject(sbguiscrollctrl, sbcontrol);
}
/// <summary>
/// Get the current coordinates of the scrolled content.
///    @return The current position of the scrolled content. )
/// 
/// </summary>

internal string fnGuiScrollCtrl_getScrollPosition (string guiscrollctrl)
{
var returnbuff = new StringBuilder(1024);
var sbguiscrollctrl = new StringBuilder(guiscrollctrl, 1024);

SafeNativeMethods.mwle_fnGuiScrollCtrl_getScrollPosition(sbguiscrollctrl, returnbuff);
return returnbuff.ToString();

}
/// <summary>
/// Get the current X coordinate of the scrolled content.
///    @return The current X coordinate of the scrolled content. )
/// 
/// </summary>

internal int fnGuiScrollCtrl_getScrollPositionX (string guiscrollctrl)
{
var sbguiscrollctrl = new StringBuilder(guiscrollctrl, 1024);

return  SafeNativeMethods.mwle_fnGuiScrollCtrl_getScrollPositionX(sbguiscrollctrl);
}
/// <summary>
/// Get the current Y coordinate of the scrolled content.
///    @return The current Y coordinate of the scrolled content. )
/// 
/// </summary>

internal int fnGuiScrollCtrl_getScrollPositionY (string guiscrollctrl)
{
var sbguiscrollctrl = new StringBuilder(guiscrollctrl, 1024);

return  SafeNativeMethods.mwle_fnGuiScrollCtrl_getScrollPositionY(sbguiscrollctrl);
}
/// <summary>
/// Refresh sizing and positioning of child controls. )
/// 
/// </summary>

internal void fnGuiScrollCtrl_computeSizes (string guiscrollctrl)
{
var sbguiscrollctrl = new StringBuilder(guiscrollctrl, 1024);

SafeNativeMethods.mwle_fnGuiScrollCtrl_computeSizes(sbguiscrollctrl);
}
/// <summary>
/// Return whether or not this control is frozen )
/// 
/// </summary>

internal bool fnGuiStackControl_isFrozen (string guistackcontrol)
{
var sbguistackcontrol = new StringBuilder(guistackcontrol, 1024);

return  SafeNativeMethods.mwle_fnGuiStackControl_isFrozen(sbguistackcontrol)>=1;
}
/// <summary>
/// Prevents control from restacking - useful when adding or removing child controls
///    @param freeze True to freeze the control, false to unfreeze it
///    @tsexample
///    %stackCtrl.freeze(true);
///    // add controls to stack
///    %stackCtrl.freeze(false);
///    @endtsexample )
/// 
/// </summary>

internal void fnGuiStackControl_freeze (string guistackcontrol, bool freeze)
{
var sbguistackcontrol = new StringBuilder(guistackcontrol, 1024);

SafeNativeMethods.mwle_fnGuiStackControl_freeze(sbguistackcontrol, freeze);
}
/// <summary>
/// Restack the child controls. )
/// 
/// </summary>

internal void fnGuiStackControl_updateStack (string guistackcontrol)
{
var sbguistackcontrol = new StringBuilder(guistackcontrol, 1024);

SafeNativeMethods.mwle_fnGuiStackControl_updateStack(sbguistackcontrol);
}
/// <summary>
///  ),
///    Add a new tab page to the control.
///    @param title Title text for the tab page header. )
/// 
/// </summary>

internal void fnGuiTabBookCtrl_addPage (string guitabbookctrl, string title)
{
var sbguitabbookctrl = new StringBuilder(guitabbookctrl, 1024);
var sbtitle = new StringBuilder(title, 4096);

SafeNativeMethods.mwle_fnGuiTabBookCtrl_addPage(sbguitabbookctrl, sbtitle);
}
/// <summary>
/// Set the selected tab page.
///    @param index Index of the tab page. )
/// 
/// </summary>

internal void fnGuiTabBookCtrl_selectPage (string guitabbookctrl, int index)
{
var sbguitabbookctrl = new StringBuilder(guitabbookctrl, 1024);

SafeNativeMethods.mwle_fnGuiTabBookCtrl_selectPage(sbguitabbookctrl, index);
}
/// <summary>
/// Get the index of the currently selected tab page.
///    @return Index of the selected tab page or -1 if no tab page is selected. )
/// 
/// </summary>

internal int fnGuiTabBookCtrl_getSelectedPage (string guitabbookctrl)
{
var sbguitabbookctrl = new StringBuilder(guitabbookctrl, 1024);

return  SafeNativeMethods.mwle_fnGuiTabBookCtrl_getSelectedPage(sbguitabbookctrl);
}
/// <summary>
/// ( GuiBitmapCtrl, setBitmap, void, 3, 4,
///    ( String filename | String filename, bool resize ) Assign an image to the control.
///    @hide )
/// 
/// </summary>

internal void fnGuiBitmapCtrl_setBitmap (string guibitmapctrl, string a2, string a3)
{
var sbguibitmapctrl = new StringBuilder(guibitmapctrl, 1024);
var sba2 = new StringBuilder(a2, 4096);
var sba3 = new StringBuilder(a3, 4096);

SafeNativeMethods.mwle_fnGuiBitmapCtrl_setBitmap(sbguibitmapctrl, sba2, sba3);
}
/// <summary>
/// Set the offset of the bitmap within the control.
///    @param x The x-axis offset of the image.
///    @param y The y-axis offset of the image.)
/// 
/// </summary>

internal void fnGuiBitmapCtrl_setValue (string guibitmapctrl, int x, int y)
{
var sbguibitmapctrl = new StringBuilder(guibitmapctrl, 1024);

SafeNativeMethods.mwle_fnGuiBitmapCtrl_setValue(sbguibitmapctrl, x, y);
}
/// <summary>
/// (GuiColorPickerCtrl, getSelectorPos, const char*, 2, 2, Gets the current position of the selector)
/// 
/// </summary>

internal string fnGuiColorPickerCtrl_getSelectorPos (string guicolorpickerctrl)
{
var returnbuff = new StringBuilder(4096);
var sbguicolorpickerctrl = new StringBuilder(guicolorpickerctrl, 1024);

SafeNativeMethods.mwle_fnGuiColorPickerCtrl_getSelectorPos(sbguicolorpickerctrl, returnbuff);
return returnbuff.ToString();

}
/// <summary>
/// (GuiColorPickerCtrl, setSelectorPos, void, 3, 3, Sets the current position of the selector)
/// 
/// </summary>

internal void fnGuiColorPickerCtrl_setSelectorPos (string guicolorpickerctrl, string a2)
{
var sbguicolorpickerctrl = new StringBuilder(guicolorpickerctrl, 1024);
var sba2 = new StringBuilder(a2, 4096);

SafeNativeMethods.mwle_fnGuiColorPickerCtrl_setSelectorPos(sbguicolorpickerctrl, sba2);
}
/// <summary>
/// (GuiColorPickerCtrl, updateColor, void, 2, 2, Forces update of pick color)
/// 
/// </summary>

internal void fnGuiColorPickerCtrl_updateColor (string guicolorpickerctrl)
{
var sbguicolorpickerctrl = new StringBuilder(guicolorpickerctrl, 1024);

SafeNativeMethods.mwle_fnGuiColorPickerCtrl_updateColor(sbguicolorpickerctrl);
}
/// <summary>
/// Set the file filter.
///    @param filter Tab-delimited list of file name patterns. Only matched files will be displayed. )
/// 
/// </summary>

internal void fnGuiDirectoryFileListCtrl_setFilter (string guidirectoryfilelistctrl, string filter)
{
var sbguidirectoryfilelistctrl = new StringBuilder(guidirectoryfilelistctrl, 1024);
var sbfilter = new StringBuilder(filter, 4096);

SafeNativeMethods.mwle_fnGuiDirectoryFileListCtrl_setFilter(sbguidirectoryfilelistctrl, sbfilter);
}
/// <summary>
/// Update the file list. )
/// 
/// </summary>

internal void fnGuiDirectoryFileListCtrl_reload (string guidirectoryfilelistctrl)
{
var sbguidirectoryfilelistctrl = new StringBuilder(guidirectoryfilelistctrl, 1024);

SafeNativeMethods.mwle_fnGuiDirectoryFileListCtrl_reload(sbguidirectoryfilelistctrl);
}
/// <summary>
/// Set the search path and file filter.
///    @param path   Path in game directory from which to list files.
///    @param filter Tab-delimited list of file name patterns. Only matched files will be displayed. )
/// 
/// </summary>

internal bool fnGuiDirectoryFileListCtrl_setPath (string guidirectoryfilelistctrl, string path, string filter)
{
var sbguidirectoryfilelistctrl = new StringBuilder(guidirectoryfilelistctrl, 1024);
var sbpath = new StringBuilder(path, 4096);
var sbfilter = new StringBuilder(filter, 4096);

return  SafeNativeMethods.mwle_fnGuiDirectoryFileListCtrl_setPath(sbguidirectoryfilelistctrl, sbpath, sbfilter)>=1;
}
/// <summary>
/// Get the list of selected files.
///    @return A space separated list of selected files )
/// 
/// </summary>

internal string fnGuiDirectoryFileListCtrl_getSelectedFiles (string guidirectoryfilelistctrl)
{
var returnbuff = new StringBuilder(4096);
var sbguidirectoryfilelistctrl = new StringBuilder(guidirectoryfilelistctrl, 1024);

SafeNativeMethods.mwle_fnGuiDirectoryFileListCtrl_getSelectedFiles(sbguidirectoryfilelistctrl, returnbuff);
return returnbuff.ToString();

}
/// <summary>
/// Get the currently selected filename.
///    @return The filename of the currently selected file )
/// 
/// </summary>

internal string fnGuiDirectoryFileListCtrl_getSelectedFile (string guidirectoryfilelistctrl)
{
var returnbuff = new StringBuilder(4096);
var sbguidirectoryfilelistctrl = new StringBuilder(guidirectoryfilelistctrl, 1024);

SafeNativeMethods.mwle_fnGuiDirectoryFileListCtrl_getSelectedFile(sbguidirectoryfilelistctrl, returnbuff);
return returnbuff.ToString();

}
/// <summary>
/// ( GuiFileTreeCtrl, getSelectedPath, const char*, 2, 2, getSelectedPath() - returns the currently selected path in the tree)
/// 
/// </summary>

internal string fnGuiFileTreeCtrl_getSelectedPath (string guifiletreectrl)
{
var returnbuff = new StringBuilder(4096);
var sbguifiletreectrl = new StringBuilder(guifiletreectrl, 1024);

SafeNativeMethods.mwle_fnGuiFileTreeCtrl_getSelectedPath(sbguifiletreectrl, returnbuff);
return returnbuff.ToString();

}
/// <summary>
/// ( GuiFileTreeCtrl, setSelectedPath, bool, 3, 3, setSelectedPath(path) - expands the tree to the specified path)
/// 
/// </summary>

internal bool fnGuiFileTreeCtrl_setSelectedPath (string guifiletreectrl, string a2)
{
var sbguifiletreectrl = new StringBuilder(guifiletreectrl, 1024);
var sba2 = new StringBuilder(a2, 4096);

return  SafeNativeMethods.mwle_fnGuiFileTreeCtrl_setSelectedPath(sbguifiletreectrl, sba2)>=1;
}
/// <summary>
/// ( GuiFileTreeCtrl, reload, void, 2, 2, () - Reread the directory tree hierarchy. )
/// 
/// </summary>

internal void fnGuiFileTreeCtrl_reload (string guifiletreectrl)
{
var sbguifiletreectrl = new StringBuilder(guifiletreectrl, 1024);

SafeNativeMethods.mwle_fnGuiFileTreeCtrl_reload(sbguifiletreectrl);
}
/// <summary>
/// Add a row to the list control.
///    @param label The text to display on the row as a label.
///    @param callback Name of a script function to use as a callback when this row is activated.
///    @param icon [optional] Index of the icon to use as a marker.
///    @param yPad [optional] An extra amount of height padding before the row. Does nothing on the first row.
///    @param useHighlightIcon [optional] Does this row use the highlight icon?.
///    @param enabled [optional] If this row is initially enabled. )
/// 
/// </summary>

internal void fnGuiGameListMenuCtrl_addRow (string guigamelistmenuctrl, string label, string callback, int icon, int yPad, bool useHighlightIcon, bool enabled)
{
var sbguigamelistmenuctrl = new StringBuilder(guigamelistmenuctrl, 1024);
var sblabel = new StringBuilder(label, 4096);
var sbcallback = new StringBuilder(callback, 4096);

SafeNativeMethods.mwle_fnGuiGameListMenuCtrl_addRow(sbguigamelistmenuctrl, sblabel, sbcallback, icon, yPad, useHighlightIcon, enabled);
}
/// <summary>
/// Determines if the specified row is enabled or disabled.
///    @param row The row to set the enabled status of.
///    @return True if the specified row is enabled. False if the row is not enabled or the given index was not valid. )
/// 
/// </summary>

internal bool fnGuiGameListMenuCtrl_isRowEnabled (string guigamelistmenuctrl, int row)
{
var sbguigamelistmenuctrl = new StringBuilder(guigamelistmenuctrl, 1024);

return  SafeNativeMethods.mwle_fnGuiGameListMenuCtrl_isRowEnabled(sbguigamelistmenuctrl, row)>=1;
}
/// <summary>
/// Sets a row's enabled status according to the given parameters.
///    @param row The index to check for validity.
///    @param enabled Indicate true to enable the row or false to disable it. )
/// 
/// </summary>

internal void fnGuiGameListMenuCtrl_setRowEnabled (string guigamelistmenuctrl, int row, bool enabled)
{
var sbguigamelistmenuctrl = new StringBuilder(guigamelistmenuctrl, 1024);

SafeNativeMethods.mwle_fnGuiGameListMenuCtrl_setRowEnabled(sbguigamelistmenuctrl, row, enabled);
}
/// <summary>
/// Activates the current row. The script callback of  the current row will be called (if it has one). )
/// 
/// </summary>

internal void fnGuiGameListMenuCtrl_activateRow (string guigamelistmenuctrl)
{
var sbguigamelistmenuctrl = new StringBuilder(guigamelistmenuctrl, 1024);

SafeNativeMethods.mwle_fnGuiGameListMenuCtrl_activateRow(sbguigamelistmenuctrl);
}
/// <summary>
/// Gets the number of rows on the control.
///    @return (int) The number of rows on the control. )
/// 
/// </summary>

internal int fnGuiGameListMenuCtrl_getRowCount (string guigamelistmenuctrl)
{
var sbguigamelistmenuctrl = new StringBuilder(guigamelistmenuctrl, 1024);

return  SafeNativeMethods.mwle_fnGuiGameListMenuCtrl_getRowCount(sbguigamelistmenuctrl);
}
/// <summary>
/// Gets the label displayed on the specified row.
///    @param row Index of the row to get the label of.
///    @return The label for the row. )
/// 
/// </summary>

internal string fnGuiGameListMenuCtrl_getRowLabel (string guigamelistmenuctrl, int row)
{
var returnbuff = new StringBuilder(4096);
var sbguigamelistmenuctrl = new StringBuilder(guigamelistmenuctrl, 1024);

SafeNativeMethods.mwle_fnGuiGameListMenuCtrl_getRowLabel(sbguigamelistmenuctrl, row, returnbuff);
return returnbuff.ToString();

}
/// <summary>
/// Sets the label on the given row.
///    @param row Index of the row to set the label on.
///    @param label Text to set as the label of the row. )
/// 
/// </summary>

internal void fnGuiGameListMenuCtrl_setRowLabel (string guigamelistmenuctrl, int row, string label)
{
var sbguigamelistmenuctrl = new StringBuilder(guigamelistmenuctrl, 1024);
var sblabel = new StringBuilder(label, 4096);

SafeNativeMethods.mwle_fnGuiGameListMenuCtrl_setRowLabel(sbguigamelistmenuctrl, row, sblabel);
}
/// <summary>
/// Sets the selected row. Only rows that are enabled can be selected.
///    @param row Index of the row to set as selected. )
/// 
/// </summary>

internal void fnGuiGameListMenuCtrl_setSelected (string guigamelistmenuctrl, int row)
{
var sbguigamelistmenuctrl = new StringBuilder(guigamelistmenuctrl, 1024);

SafeNativeMethods.mwle_fnGuiGameListMenuCtrl_setSelected(sbguigamelistmenuctrl, row);
}
/// <summary>
/// Gets the index of the currently selected row.
///    @return Index of the selected row. )
/// 
/// </summary>

internal int fnGuiGameListMenuCtrl_getSelectedRow (string guigamelistmenuctrl)
{
var sbguigamelistmenuctrl = new StringBuilder(guigamelistmenuctrl, 1024);

return  SafeNativeMethods.mwle_fnGuiGameListMenuCtrl_getSelectedRow(sbguigamelistmenuctrl);
}
/// <summary>
/// Add a row to the list control.
///    @param label The text to display on the row as a label.
///    @param options A tab separated list of options.
///    @param wrapOptions Specify true to allow options to wrap at each end or false to prevent wrapping.
///    @param callback Name of a script function to use as a callback when this row is activated.
///    @param icon [optional] Index of the icon to use as a marker.
///    @param yPad [optional] An extra amount of height padding before the row. Does nothing on the first row.
///    @param enabled [optional] If this row is initially enabled. )
/// 
/// </summary>

internal void fnGuiGameListOptionsCtrl_addRow (string guigamelistoptionsctrl, string label, string options, bool wrapOptions, string callback, int icon, int yPad, bool enabled)
{
var sbguigamelistoptionsctrl = new StringBuilder(guigamelistoptionsctrl, 1024);
var sblabel = new StringBuilder(label, 4096);
var sboptions = new StringBuilder(options, 4096);
var sbcallback = new StringBuilder(callback, 4096);

SafeNativeMethods.mwle_fnGuiGameListOptionsCtrl_addRow(sbguigamelistoptionsctrl, sblabel, sboptions, wrapOptions, sbcallback, icon, yPad, enabled);
}
/// <summary>
/// Gets the text for the currently selected option of the given row.
///    @param row Index of the row to get the option from.
///    @return A string representing the text currently displayed as the selected option on the given row. If there is no such displayed text then the empty string is returned. )
/// 
/// </summary>

internal string fnGuiGameListOptionsCtrl_getCurrentOption (string guigamelistoptionsctrl, int row)
{
var returnbuff = new StringBuilder(4096);
var sbguigamelistoptionsctrl = new StringBuilder(guigamelistoptionsctrl, 1024);

SafeNativeMethods.mwle_fnGuiGameListOptionsCtrl_getCurrentOption(sbguigamelistoptionsctrl, row, returnbuff);
return returnbuff.ToString();

}
/// <summary>
/// Set the row's current option to the one specified
///    @param row Index of the row to set an option on.
///    @param option The option to be made active.
///    @return True if the row contained the option and was set, false otherwise. )
/// 
/// </summary>

internal bool fnGuiGameListOptionsCtrl_selectOption (string guigamelistoptionsctrl, int row, string option)
{
var sbguigamelistoptionsctrl = new StringBuilder(guigamelistoptionsctrl, 1024);
var sboption = new StringBuilder(option, 4096);

return  SafeNativeMethods.mwle_fnGuiGameListOptionsCtrl_selectOption(sbguigamelistoptionsctrl, row, sboption)>=1;
}
/// <summary>
/// Sets the list of options on the given row.
///    @param row Index of the row to set options on.
///    @param optionsList A tab separated list of options for the control. )
/// 
/// </summary>

internal void fnGuiGameListOptionsCtrl_setOptions (string guigamelistoptionsctrl, int row, string optionsList)
{
var sbguigamelistoptionsctrl = new StringBuilder(guigamelistoptionsctrl, 1024);
var sboptionsList = new StringBuilder(optionsList, 4096);

SafeNativeMethods.mwle_fnGuiGameListOptionsCtrl_setOptions(sbguigamelistoptionsctrl, row, sboptionsList);
}
/// <summary>
/// (GuiGradientCtrl, getColorCount, S32, 2, 2, Get color count)
/// 
/// </summary>

internal int fnGuiGradientCtrl_getColorCount (string guigradientctrl)
{
var sbguigradientctrl = new StringBuilder(guigradientctrl, 1024);

return  SafeNativeMethods.mwle_fnGuiGradientCtrl_getColorCount(sbguigradientctrl);
}
/// <summary>
/// (GuiGradientCtrl, getColor, const char*, 3, 3, Get color value)
/// 
/// </summary>

internal string fnGuiGradientCtrl_getColor (string guigradientctrl, string a2)
{
var returnbuff = new StringBuilder(4096);
var sbguigradientctrl = new StringBuilder(guigradientctrl, 1024);
var sba2 = new StringBuilder(a2, 4096);

SafeNativeMethods.mwle_fnGuiGradientCtrl_getColor(sbguigradientctrl, sba2, returnbuff);
return returnbuff.ToString();

}
/// <summary>
/// @brief Enable or disable multiple selections for this GuiListBoxCtrl object.
///    @param allowMultSelections Boolean variable to set the use of multiple selections or not.
///    @tsexample
///    // Define the multiple selection use state.
///    %allowMultSelections = \"true\";
///    // Set the allow  multiple selection state on the GuiListBoxCtrl object.
///    %thisGuiListBoxCtrl.setMultipleSelection(%allowMultSelections);
///    @endtsexample
///    @see GuiControl)
/// 
/// </summary>

internal void fnGuiListBoxCtrl_setMultipleSelection (string guilistboxctrl, bool allowMultSelections)
{
var sbguilistboxctrl = new StringBuilder(guilistboxctrl, 1024);

SafeNativeMethods.mwle_fnGuiListBoxCtrl_setMultipleSelection(sbguilistboxctrl, allowMultSelections);
}
/// <summary>
/// @brief Clears all the items in the listbox.
///    @tsexample
///    // Inform the GuiListBoxCtrl object to clear all items from its list.
///    %thisGuiListBoxCtrl.clearItems();
///    @endtsexample
///    @see GuiControl)
/// 
/// </summary>

internal void fnGuiListBoxCtrl_clearItems (string guilistboxctrl)
{
var sbguilistboxctrl = new StringBuilder(guilistboxctrl, 1024);

SafeNativeMethods.mwle_fnGuiListBoxCtrl_clearItems(sbguilistboxctrl);
}
/// <summary>
/// @brief Sets all currently selected items to unselected.
///    Detailed description
///    @tsexample
///    // Inform the GuiListBoxCtrl object to set all of its items to unselected./n
///    %thisGuiListBoxCtrl.clearSelection();
///    @endtsexample
///    @see GuiControl)
/// 
/// </summary>

internal void fnGuiListBoxCtrl_clearSelection (string guilistboxctrl)
{
var sbguilistboxctrl = new StringBuilder(guilistboxctrl, 1024);

SafeNativeMethods.mwle_fnGuiListBoxCtrl_clearSelection(sbguilistboxctrl);
}
/// <summary>
/// @brief Sets the item at the index specified to selected or not.
///    Detailed description
///    @param index Item index to set selected or unselected.
///    @param setSelected Boolean selection state to set the requested item index.
///    @tsexample
///    // Define the index
///    %index = \"5\";
///    // Define the selection state
///    %selected = \"true\"
///    // Inform the GuiListBoxCtrl object of the new selection state for the requested index entry.
///    %thisGuiListBoxCtrl.setSelected(%index,%selected);
///    @endtsexample
///    @see GuiControl)
/// 
/// </summary>

internal void fnGuiListBoxCtrl_setSelected (string guilistboxctrl, int index, bool setSelected)
{
var sbguilistboxctrl = new StringBuilder(guilistboxctrl, 1024);

SafeNativeMethods.mwle_fnGuiListBoxCtrl_setSelected(sbguilistboxctrl, index, setSelected);
}
/// <summary>
/// @brief Returns the number of items in the list.
///    @tsexample
///    // Request the number of items in the list of the GuiListBoxCtrl object.
///    %listItemCount = %thisGuiListBoxCtrl.getItemCount();
///    @endtsexample
///    @return The number of items in the list.
///    @see GuiControl)
/// 
/// </summary>

internal int fnGuiListBoxCtrl_getItemCount (string guilistboxctrl)
{
var sbguilistboxctrl = new StringBuilder(guilistboxctrl, 1024);

return  SafeNativeMethods.mwle_fnGuiListBoxCtrl_getItemCount(sbguilistboxctrl);
}
/// <summary>
/// @brief Returns the number of items currently selected.
///    @tsexample
///    // Request the number of currently selected items
///    %selectedItemCount = %thisGuiListBoxCtrl.getSelCount();
///    @endtsexample
///    @return Number of currently selected items.
///    @see GuiControl)
/// 
/// </summary>

internal int fnGuiListBoxCtrl_getSelCount (string guilistboxctrl)
{
var sbguilistboxctrl = new StringBuilder(guilistboxctrl, 1024);

return  SafeNativeMethods.mwle_fnGuiListBoxCtrl_getSelCount(sbguilistboxctrl);
}
/// <summary>
/// @brief Returns the selected items index or -1 if none selected. If multiple selections exist it returns the first selected item. 
///    @tsexample
///    // Request the index id of the currently selected item
///    %selectedItemId = %thisGuiListBoxCtrl.getSelectedItem();
///    @endtsexample
///    @return The selected items index or -1 if none selected.
///    @see GuiControl)
/// 
/// </summary>

internal int fnGuiListBoxCtrl_getSelectedItem (string guilistboxctrl)
{
var sbguilistboxctrl = new StringBuilder(guilistboxctrl, 1024);

return  SafeNativeMethods.mwle_fnGuiListBoxCtrl_getSelectedItem(sbguilistboxctrl);
}
/// <summary>
/// @brief Returns a space delimited list of the selected items indexes in the list.
///    @tsexample
///    // Request a space delimited list of the items in the GuiListBoxCtrl object.
///    %selectionList = %thisGuiListBoxCtrl.getSelectedItems();
///    @endtsexample
///    @return Space delimited list of the selected items indexes in the list
///    @see GuiControl)
/// 
/// </summary>

internal string fnGuiListBoxCtrl_getSelectedItems (string guilistboxctrl)
{
var returnbuff = new StringBuilder(4096);
var sbguilistboxctrl = new StringBuilder(guilistboxctrl, 1024);

SafeNativeMethods.mwle_fnGuiListBoxCtrl_getSelectedItems(sbguilistboxctrl, returnbuff);
return returnbuff.ToString();

}
/// <summary>
/// @brief Returns index of item with matching text or -1 if none found.
///    @param findText Text in the list to find.
///    @param isCaseSensitive If true, the search will be case sensitive.
///    @tsexample
///    // Define the text we wish to find in the list.
///    %findText = \"Hickory Smoked Gideon\"/n/n
///    // Define if this is a case sensitive search or not.
///    %isCaseSensitive = \"false\";
///    // Ask the GuiListBoxCtrl object what item id in the list matches the requested text.
///    %matchingId = %thisGuiListBoxCtrl.findItemText(%findText,%isCaseSensitive);
///    @endtsexample
///    @return Index id of item with matching text or -1 if none found.
///    @see GuiControl)
/// 
/// </summary>

internal int fnGuiListBoxCtrl_findItemText (string guilistboxctrl, string findText, bool bCaseSensitive)
{
var sbguilistboxctrl = new StringBuilder(guilistboxctrl, 1024);
var sbfindText = new StringBuilder(findText, 4096);

return  SafeNativeMethods.mwle_fnGuiListBoxCtrl_findItemText(sbguilistboxctrl, sbfindText, bCaseSensitive);
}
/// <summary>
/// @brief Sets the currently selected item at the specified index.
///    @param indexId Index Id to set selected.
///    @tsexample
///    // Define the index id that we wish to select.
///    %selectId = \"4\";
///    // Inform the GuiListBoxCtrl object to set the requested index as selected.
///    %thisGuiListBoxCtrl.setCurSel(%selectId);
///    @endtsexample
///    @see GuiControl)
/// 
/// </summary>

internal void fnGuiListBoxCtrl_setCurSel (string guilistboxctrl, int indexId)
{
var sbguilistboxctrl = new StringBuilder(guilistboxctrl, 1024);

SafeNativeMethods.mwle_fnGuiListBoxCtrl_setCurSel(sbguilistboxctrl, indexId);
}
/// <summary>
/// @brief Sets the current selection range from index start to stop. If no stop is specified it sets from start index to the end of the list
///    @param indexStart Index Id to start selection.
///    @param indexStop Index Id to end selection.
///    @tsexample
///    // Set start id
///    %indexStart = \"3\";
///    // Set end id
///    %indexEnd = \"6\";
///    // Request the GuiListBoxCtrl object to select the defined range.
///    %thisGuiListBoxCtrl.setCurSelRange(%indexStart,%indexEnd);
///    @endtsexample
///    @see GuiControl)
/// 
/// </summary>

internal void fnGuiListBoxCtrl_setCurSelRange (string guilistboxctrl, int indexStart, int indexStop)
{
var sbguilistboxctrl = new StringBuilder(guilistboxctrl, 1024);

SafeNativeMethods.mwle_fnGuiListBoxCtrl_setCurSelRange(sbguilistboxctrl, indexStart, indexStop);
}
/// <summary>
///  ),
///    @brief Adds an item to the end of the list with an optional color.
///    @param newItem New item to add to the list.
///    @param color Optional color parameter to add to the new item.
///    @tsexample
///    // Define the item to add to the list.
///    %newItem = \"Gideon's Blue Coat\";
///    // Define the optional color for the new list item.
///    %color = \"0.0 0.0 1.0\";
///    // Inform the GuiListBoxCtrl object to add the item to the end of the list with the defined color.
///    %thisGuiListBoxCtrl.addItem(%newItem,%color);
///    @endtsexample
///    @return If not void, return value and description
///    @see GuiControl
///    @hide)
/// 
/// </summary>

internal int fnGuiListBoxCtrl_addItem (string guilistboxctrl, string newItem, string color)
{
var sbguilistboxctrl = new StringBuilder(guilistboxctrl, 1024);
var sbnewItem = new StringBuilder(newItem, 4096);
var sbcolor = new StringBuilder(color, 4096);

return  SafeNativeMethods.mwle_fnGuiListBoxCtrl_addItem(sbguilistboxctrl, sbnewItem, sbcolor);
}
/// <summary>
/// @brief Sets the color of a single list entry at the specified index id.
///    @param index Index id to modify the color of in the list.
///    @param color Color value to set the list entry to.
///    @tsexample
///    // Define the index id value
///    %index = \"5\";
///    // Define the color value
///    %color = \"1.0 0.0 0.0\";
///    // Inform the GuiListBoxCtrl object to change the color of the requested index
///    %thisGuiListBoxCtrl.setItemColor(%index,%color);
///    @endtsexample
///    @see GuiControl)
/// 
/// </summary>

internal void fnGuiListBoxCtrl_setItemColor (string guilistboxctrl, int index, string color)
{
var sbguilistboxctrl = new StringBuilder(guilistboxctrl, 1024);
var sbcolor = new StringBuilder(color, 1024);

SafeNativeMethods.mwle_fnGuiListBoxCtrl_setItemColor(sbguilistboxctrl, index, sbcolor);
}
/// <summary>
/// @brief Removes any custom coloring from an item at the defined index id in the list.
///    @param index Index id for the item to clear any custom color from.
///    @tsexample
///    // Define the index id
///    %index = \"4\";
///    // Request the GuiListBoxCtrl object to remove any custom coloring from the defined index entry
///    %thisGuiListBoxCtrl.clearItemColor(%index);
///    @endtsexample
///    @see GuiControl)
/// 
/// </summary>

internal void fnGuiListBoxCtrl_clearItemColor (string guilistboxctrl, int index)
{
var sbguilistboxctrl = new StringBuilder(guilistboxctrl, 1024);

SafeNativeMethods.mwle_fnGuiListBoxCtrl_clearItemColor(sbguilistboxctrl, index);
}
/// <summary>
/// @brief Inserts an item into the list at the specified index and returns the index assigned or -1 on error.
///    @param text Text item to add.
///    @param index Index id to insert the list item text at.
///    @tsexample
///    // Define the text to insert
///    %text = \"Secret Agent Gideon\";
///    // Define the index entry to insert the text at
///    %index = \"14\";
///    // In form the GuiListBoxCtrl object to insert the text at the defined index.
///    %assignedId = %thisGuiListBoxCtrl.insertItem(%text,%index);
///    @endtsexample
///    @return If successful will return the index id assigned. If unsuccessful, will return -1.
///    @see GuiControl)
/// 
/// </summary>

internal void fnGuiListBoxCtrl_insertItem (string guilistboxctrl, string text, int index)
{
var sbguilistboxctrl = new StringBuilder(guilistboxctrl, 1024);
var sbtext = new StringBuilder(text, 4096);

SafeNativeMethods.mwle_fnGuiListBoxCtrl_insertItem(sbguilistboxctrl, sbtext, index);
}
/// <summary>
/// @brief Removes the list entry at the requested index id from the control and clears the memory associated with it.
///    @param itemIndex Index id location to remove the item from.
///    @tsexample
///    // Define the index id we want to remove from the list
///    %itemIndex = \"8\";
///    // Inform the GuiListBoxCtrl object to remove the item at the defined index id.
///    %thisGuiListBoxCtrl.deleteItem(%itemIndex);
///    @endtsexample
///    @see References)
/// 
/// </summary>

internal void fnGuiListBoxCtrl_deleteItem (string guilistboxctrl, int itemIndex)
{
var sbguilistboxctrl = new StringBuilder(guilistboxctrl, 1024);

SafeNativeMethods.mwle_fnGuiListBoxCtrl_deleteItem(sbguilistboxctrl, itemIndex);
}
/// <summary>
/// @brief Returns the text of the item at the specified index.
///    @param index Index id to return the item text from.
///    @tsexample
///    // Define the index id entry to request the text from
///    %index = \"12\";
///    // Request the item id text from the GuiListBoxCtrl object.
///    %text = %thisGuiListBoxCtrl.getItemText(%index);
///    @endtsexample
///    @return The text of the requested index id.
///    @see GuiControl)
/// 
/// </summary>

internal string fnGuiListBoxCtrl_getItemText (string guilistboxctrl, int index)
{
var returnbuff = new StringBuilder(4096);
var sbguilistboxctrl = new StringBuilder(guilistboxctrl, 1024);

SafeNativeMethods.mwle_fnGuiListBoxCtrl_getItemText(sbguilistboxctrl, index, returnbuff);
return returnbuff.ToString();

}
/// <summary>
/// @brief Returns the object associated with an item. This only makes sense if you are mirroring a simset.
///    @param index Index id to request the associated item from.
///    @tsexample
///    // Define the index id
///    %index = \"12\";
///    // Request the item from the GuiListBoxCtrl object
///    %object = %thisGuiListBoxCtrl.getItemObject(%index);
///    @endtsexample
///    @return The object associated with the item in the list.
///    @see References)
/// 
/// </summary>

internal string fnGuiListBoxCtrl_getItemObject (string guilistboxctrl, int index)
{
var returnbuff = new StringBuilder(4096);
var sbguilistboxctrl = new StringBuilder(guilistboxctrl, 1024);

SafeNativeMethods.mwle_fnGuiListBoxCtrl_getItemObject(sbguilistboxctrl, index, returnbuff);
return returnbuff.ToString();

}
/// <summary>
/// @brief Sets the items text at the specified index.
///    @param index Index id to set the item text at.
///    @param newtext Text to change the list item at index id to.
///    @tsexample
///    // Define the index id/n
///    %index = \"12\";
///    // Define the text to set the list item to
///    %newtext = \"Gideon's Fancy Goggles\";
///    // Inform the GuiListBoxCtrl object to change the text at the requested index
///    %thisGuiListBoxCtrl.setItemText(%index,%newText);
///    @endtsexample
///    @see GuiControl)
/// 
/// </summary>

internal void fnGuiListBoxCtrl_setItemText (string guilistboxctrl, int index, string newtext)
{
var sbguilistboxctrl = new StringBuilder(guilistboxctrl, 1024);
var sbnewtext = new StringBuilder(newtext, 4096);

SafeNativeMethods.mwle_fnGuiListBoxCtrl_setItemText(sbguilistboxctrl, index, sbnewtext);
}
/// <summary>
/// @brief Set the tooltip text to display for the given list item.
///    @param index Index id to change the tooltip text
///    @param text Text for the tooltip.
///    @tsexample
///    // Define the index id
///    %index = \"12\";
///    // Define the tooltip text
///    %tooltip = \"Gideon's goggles can see through space and time.\"
///    // Inform the GuiListBoxCtrl object to set the tooltop for the item at the defined index id
///    %thisGuiListBoxCtrl.setItemToolTip(%index,%tooltip);
///    @endtsexample
///    @see GuiControl)
/// 
/// </summary>

internal void fnGuiListBoxCtrl_setItemTooltip (string guilistboxctrl, int index, string text)
{
var sbguilistboxctrl = new StringBuilder(guilistboxctrl, 1024);
var sbtext = new StringBuilder(text, 4096);

SafeNativeMethods.mwle_fnGuiListBoxCtrl_setItemTooltip(sbguilistboxctrl, index, sbtext);
}
/// <summary>
/// @brief Request the item index for the item that was last clicked.
///    @tsexample
///    // Request the item index for the last clicked item in the list
///    %lastClickedIndex = %thisGuiListBoxCtrl.getLastClickItem();
///    @endtsexample
///    @return Index id for the last clicked item in the list.
///    @see GuiControl)
/// 
/// </summary>

internal int fnGuiListBoxCtrl_getLastClickItem (string guilistboxctrl)
{
var sbguilistboxctrl = new StringBuilder(guilistboxctrl, 1024);

return  SafeNativeMethods.mwle_fnGuiListBoxCtrl_getLastClickItem(sbguilistboxctrl);
}
/// <summary>
/// @brief Informs the GuiListBoxCtrl object to mirror the contents of the GuiListBoxCtrl stored in the mirrorSet field.
///    @tsexample
///    \\ Inform the object to mirror the object located at %thisGuiListBox.mirrorSet
///    %thisGuiListBox.doMirror();
///    @endtsexample
///    @see GuiCore)
/// 
/// </summary>

internal void fnGuiListBoxCtrl_doMirror (string guilistboxctrl)
{
var sbguilistboxctrl = new StringBuilder(guilistboxctrl, 1024);

SafeNativeMethods.mwle_fnGuiListBoxCtrl_doMirror(sbguilistboxctrl);
}
/// <summary>
/// @brief Checks if there is an item with the exact text of what is passed in, and if so
///    the item is removed from the list and adds that item's data to the filtered list.
///    @param itemName Name of the item that we wish to add to the filtered item list of the GuiListBoxCtrl.
///    @tsexample
///    // Define the itemName that we wish to add to the filtered item list.
///    %itemName = \"This Item Name\";
///    // Add the item name to the filtered item list.
///    %thisGuiListBoxCtrl.addFilteredItem(%filteredItemName);
///    @endtsexample
///    @see GuiControl)
/// 
/// </summary>

internal void fnGuiListBoxCtrl_addFilteredItem (string guilistboxctrl, string newItem)
{
var sbguilistboxctrl = new StringBuilder(guilistboxctrl, 1024);
var sbnewItem = new StringBuilder(newItem, 4096);

SafeNativeMethods.mwle_fnGuiListBoxCtrl_addFilteredItem(sbguilistboxctrl, sbnewItem);
}
/// <summary>
/// @brief Removes an item of the entered name from the filtered items list.
///    @param itemName Name of the item to remove from the filtered list.
///    @tsexample
///    // Define the itemName that you wish to remove.
///    %itemName = \"This Item Name\";
///    // Remove the itemName from the GuiListBoxCtrl
///    %thisGuiListBoxCtrl.removeFilteredItem(%itemName);
///    @endtsexample
///    @see GuiControl)
/// 
/// </summary>

internal void fnGuiListBoxCtrl_removeFilteredItem (string guilistboxctrl, string itemName)
{
var sbguilistboxctrl = new StringBuilder(guilistboxctrl, 1024);
var sbitemName = new StringBuilder(itemName, 4096);

SafeNativeMethods.mwle_fnGuiListBoxCtrl_removeFilteredItem(sbguilistboxctrl, sbitemName);
}
/// <summary>
/// ( GuiMaterialCtrl, setMaterial, bool, 3, 3, ( string materialName )
///                Set the material to be displayed in the control. )
/// 
/// </summary>

internal bool fnGuiMaterialCtrl_setMaterial (string guimaterialctrl, string a2)
{
var sbguimaterialctrl = new StringBuilder(guimaterialctrl, 1024);
var sba2 = new StringBuilder(a2, 4096);

return  SafeNativeMethods.mwle_fnGuiMaterialCtrl_setMaterial(sbguimaterialctrl, sba2)>=1;
}
/// <summary>
/// @brief Strip TorqueML control characters from the specified string, returning a 'clean' version.
/// 					 @param inString String to strip TorqueML control characters from.
/// 					 @tsexample
/// 					 // Define the string to strip TorqueML control characters from
/// 					 %string = \"<font:Arial:24>How Now <color:c43c12>Brown <color:000000>Cow\";
/// 					 // Request the stripped version of the string
/// 					 %strippedString = StripMLControlChars(%string);
/// 					 @endtsexample
/// 					 @return Version of the inputted string with all TorqueML characters removed.
/// 					 @see References
/// 					 @ingroup GuiCore)
/// 
/// </summary>

internal string fn_StripMLControlChars (string inString)
{
var returnbuff = new StringBuilder(4096);
var sbinString = new StringBuilder(inString, 4096);

SafeNativeMethods.mwle_fn_StripMLControlChars(sbinString, returnbuff);
return returnbuff.ToString();

}
/// <summary>
/// @brief Set the text contained in the control.
///    @param text The text to display in the control.
///    @tsexample
///    // Define the text to display
///    %text = \"Nifty Control Text\";
///    // Set the text displayed within the control
///    %thisGuiMLTextCtrl.setText(%text);
///    @endtsexample
///    @see GuiControl)
/// 
/// </summary>

internal void fnGuiMLTextCtrl_setText (string guimltextctrl, string text)
{
var sbguimltextctrl = new StringBuilder(guimltextctrl, 1024);
var sbtext = new StringBuilder(text, 4096);

SafeNativeMethods.mwle_fnGuiMLTextCtrl_setText(sbguimltextctrl, sbtext);
}
/// <summary>
/// @brief Returns the text from the control, including TorqueML characters.
///    @tsexample
///    // Get the text displayed in the control
///    %controlText = %thisGuiMLTextCtrl.getText();
///    @endtsexample
///    @return Text string displayed in the control, including any TorqueML characters.
///    @see GuiControl)
/// 
/// </summary>

internal string fnGuiMLTextCtrl_getText (string guimltextctrl)
{
var returnbuff = new StringBuilder(4096);
var sbguimltextctrl = new StringBuilder(guimltextctrl, 1024);

SafeNativeMethods.mwle_fnGuiMLTextCtrl_getText(sbguimltextctrl, returnbuff);
return returnbuff.ToString();

}
/// <summary>
/// @brief Appends the text in the control with additional text. Also .
///    @param text New text to append to the existing text.
///    @param reformat If true, the control will also be visually reset.
///    @tsexample
///    // Define new text to add
///    %text = \"New Text to Add\";
///    // Set reformat boolean
///    %reformat = \"true\";
///    // Inform the control to add the new text
///    %thisGuiMLTextCtrl.addText(%text,%reformat);
///    @endtsexample
///    @see GuiControl)
/// 
/// </summary>

internal void fnGuiMLTextCtrl_addText (string guimltextctrl, string text, bool reformat)
{
var sbguimltextctrl = new StringBuilder(guimltextctrl, 1024);
var sbtext = new StringBuilder(text, 4096);

SafeNativeMethods.mwle_fnGuiMLTextCtrl_addText(sbguimltextctrl, sbtext, reformat);
}
/// <summary>
/// @brief Change the text cursor's position to a new defined offset within the text in the control.
///    @param newPos Offset to place cursor.
///    @tsexample
///    // Define cursor offset position
///    %position = \"23\";
///    // Inform the GuiMLTextCtrl object to move the cursor to the new position.
///    %thisGuiMLTextCtrl.setCursorPosition(%position);
///    @endtsexample
///    @return Returns true if the cursor position moved, or false if the position was not changed.
///    @see GuiControl)
/// 
/// </summary>

internal bool fnGuiMLTextCtrl_setCursorPosition (string guimltextctrl, int newPos)
{
var sbguimltextctrl = new StringBuilder(guimltextctrl, 1024);

return  SafeNativeMethods.mwle_fnGuiMLTextCtrl_setCursorPosition(sbguimltextctrl, newPos)>=1;
}
/// <summary>
/// @brief Scroll down to a specified tag.
///    Detailed description
///    @param tagID TagID to scroll the control to
///    @tsexample
///    // Define the TagID we want to scroll the control to
///    %tagId = \"4\";
///    // Inform the GuiMLTextCtrl to scroll to the defined TagID
///    %thisGuiMLTextCtrl.scrollToTag(%tagId);
///    @endtsexample
///    @see GuiControl)
/// 
/// </summary>

internal void fnGuiMLTextCtrl_scrollToTag (string guimltextctrl, int tagID)
{
var sbguimltextctrl = new StringBuilder(guimltextctrl, 1024);

SafeNativeMethods.mwle_fnGuiMLTextCtrl_scrollToTag(sbguimltextctrl, tagID);
}
/// <summary>
/// @brief Scroll to the top of the text.
///    @tsexample
///    // Inform GuiMLTextCtrl object to scroll to its top
///    %thisGuiMLTextCtrl.scrollToTop();
///    @endtsexample
///    @see GuiControl)
/// 
/// </summary>

internal void fnGuiMLTextCtrl_scrollToTop (string guimltextctrl, int param1, int param2)
{
var sbguimltextctrl = new StringBuilder(guimltextctrl, 1024);

SafeNativeMethods.mwle_fnGuiMLTextCtrl_scrollToTop(sbguimltextctrl, param1, param2);
}
/// <summary>
/// @brief Scroll to the bottom of the text.
///    @tsexample
///    // Inform GuiMLTextCtrl object to scroll to its bottom
///    %thisGuiMLTextCtrl.scrollToBottom();
///    @endtsexample
///    @see GuiControl)
/// 
/// </summary>

internal void fnGuiMLTextCtrl_scrollToBottom (string guimltextctrl)
{
var sbguimltextctrl = new StringBuilder(guimltextctrl, 1024);

SafeNativeMethods.mwle_fnGuiMLTextCtrl_scrollToBottom(sbguimltextctrl);
}
/// <summary>
/// @brief Forces the text control to reflow the text after new text is added, possibly resizing the control.
///    @tsexample
///    // Define new text to add
///    %newText = \"BACON!\";
///    // Add the new text to the control
///    %thisGuiMLTextCtrl.addText(%newText);
///    // Inform the GuiMLTextCtrl object to force a reflow to ensure the added text fits properly.
///    %thisGuiMLTextCtrl.forceReflow();
///    @endtsexample
///    @see GuiControl)
/// 
/// </summary>

internal void fnGuiMLTextCtrl_forceReflow (string guimltextctrl)
{
var sbguimltextctrl = new StringBuilder(guimltextctrl, 1024);

SafeNativeMethods.mwle_fnGuiMLTextCtrl_forceReflow(sbguimltextctrl);
}
/// <summary>
/// @brief Sets the alpha value of the control.
///    @param alphaVal n - 1.0 floating value for the alpha
///    @tsexample
///    // Define the alphe value
///    %alphaVal = \"0.5\";
///    // Inform the control to update its alpha value.
///    %thisGuiMLTextCtrl.setAlpha(%alphaVal);
///    @endtsexample
///    @see GuiControl)
/// 
/// </summary>

internal void fnGuiMLTextCtrl_setAlpha (string guimltextctrl, float alphaVal)
{
var sbguimltextctrl = new StringBuilder(guimltextctrl, 1024);

SafeNativeMethods.mwle_fnGuiMLTextCtrl_setAlpha(sbguimltextctrl, alphaVal);
}
/// <summary>
/// ( GuiPopUpMenuCtrl, add, void, 3, 5, (string name, int idNum, int scheme=0))
/// 
/// </summary>

internal void fnGuiPopUpMenuCtrl_add (string guipopupmenuctrl, string a2, string a3, string a4)
{
var sbguipopupmenuctrl = new StringBuilder(guipopupmenuctrl, 1024);
var sba2 = new StringBuilder(a2, 4096);
var sba3 = new StringBuilder(a3, 4096);
var sba4 = new StringBuilder(a4, 4096);

SafeNativeMethods.mwle_fnGuiPopUpMenuCtrl_add(sbguipopupmenuctrl, sba2, sba3, sba4);
}
/// <summary>
/// ( GuiPopUpMenuCtrl, addScheme, void, 6, 6, (int id, ColorI fontColor, ColorI fontColorHL, ColorI fontColorSEL))
/// 
/// </summary>

internal void fnGuiPopUpMenuCtrl_addScheme (string guipopupmenuctrl, string a2, string a3, string a4, string a5)
{
var sbguipopupmenuctrl = new StringBuilder(guipopupmenuctrl, 1024);
var sba2 = new StringBuilder(a2, 4096);
var sba3 = new StringBuilder(a3, 4096);
var sba4 = new StringBuilder(a4, 4096);
var sba5 = new StringBuilder(a5, 4096);

SafeNativeMethods.mwle_fnGuiPopUpMenuCtrl_addScheme(sbguipopupmenuctrl, sba2, sba3, sba4, sba5);
}
/// <summary>
/// ( GuiPopUpMenuCtrl, getText, const char*, 2, 2, )
/// 
/// </summary>

internal string fnGuiPopUpMenuCtrl_getText (string guipopupmenuctrl)
{
var returnbuff = new StringBuilder(4096);
var sbguipopupmenuctrl = new StringBuilder(guipopupmenuctrl, 1024);

SafeNativeMethods.mwle_fnGuiPopUpMenuCtrl_getText(sbguipopupmenuctrl, returnbuff);
return returnbuff.ToString();

}
/// <summary>
/// ( GuiPopUpMenuCtrl, clear, void, 2, 2, Clear the popup list.)
/// 
/// </summary>

internal void fnGuiPopUpMenuCtrl_clear (string guipopupmenuctrl)
{
var sbguipopupmenuctrl = new StringBuilder(guipopupmenuctrl, 1024);

SafeNativeMethods.mwle_fnGuiPopUpMenuCtrl_clear(sbguipopupmenuctrl);
}
/// <summary>
/// (GuiPopUpMenuCtrl, sort, void, 2, 2, Sort the list alphabetically.)
/// 
/// </summary>

internal void fnGuiPopUpMenuCtrl_sort (string guipopupmenuctrl)
{
var sbguipopupmenuctrl = new StringBuilder(guipopupmenuctrl, 1024);

SafeNativeMethods.mwle_fnGuiPopUpMenuCtrl_sort(sbguipopupmenuctrl);
}
/// <summary>
/// (GuiPopUpMenuCtrl, sortID, void, 2, 2, Sort the list by ID.)
/// 
/// </summary>

internal void fnGuiPopUpMenuCtrl_sortID (string guipopupmenuctrl)
{
var sbguipopupmenuctrl = new StringBuilder(guipopupmenuctrl, 1024);

SafeNativeMethods.mwle_fnGuiPopUpMenuCtrl_sortID(sbguipopupmenuctrl);
}
/// <summary>
/// ( GuiPopUpMenuCtrl, forceOnAction, void, 2, 2, )
/// 
/// </summary>

internal void fnGuiPopUpMenuCtrl_forceOnAction (string guipopupmenuctrl)
{
var sbguipopupmenuctrl = new StringBuilder(guipopupmenuctrl, 1024);

SafeNativeMethods.mwle_fnGuiPopUpMenuCtrl_forceOnAction(sbguipopupmenuctrl);
}
/// <summary>
/// ( GuiPopUpMenuCtrl, forceClose, void, 2, 2, )
/// 
/// </summary>

internal void fnGuiPopUpMenuCtrl_forceClose (string guipopupmenuctrl)
{
var sbguipopupmenuctrl = new StringBuilder(guipopupmenuctrl, 1024);

SafeNativeMethods.mwle_fnGuiPopUpMenuCtrl_forceClose(sbguipopupmenuctrl);
}
/// <summary>
/// ( GuiPopUpMenuCtrl, getSelected, S32, 2, 2, )
/// 
/// </summary>

internal int fnGuiPopUpMenuCtrl_getSelected (string guipopupmenuctrl)
{
var sbguipopupmenuctrl = new StringBuilder(guipopupmenuctrl, 1024);

return  SafeNativeMethods.mwle_fnGuiPopUpMenuCtrl_getSelected(sbguipopupmenuctrl);
}
/// <summary>
/// ( GuiPopUpMenuCtrl, setSelected, void, 3, 4, (int id, [scriptCallback=true]))
/// 
/// </summary>

internal void fnGuiPopUpMenuCtrl_setSelected (string guipopupmenuctrl, string a2, string a3)
{
var sbguipopupmenuctrl = new StringBuilder(guipopupmenuctrl, 1024);
var sba2 = new StringBuilder(a2, 4096);
var sba3 = new StringBuilder(a3, 4096);

SafeNativeMethods.mwle_fnGuiPopUpMenuCtrl_setSelected(sbguipopupmenuctrl, sba2, sba3);
}
/// <summary>
/// ( GuiPopUpMenuCtrl, setFirstSelected, void, 2, 3, ([scriptCallback=true]))
/// 
/// </summary>

internal void fnGuiPopUpMenuCtrl_setFirstSelected (string guipopupmenuctrl, string a2)
{
var sbguipopupmenuctrl = new StringBuilder(guipopupmenuctrl, 1024);
var sba2 = new StringBuilder(a2, 4096);

SafeNativeMethods.mwle_fnGuiPopUpMenuCtrl_setFirstSelected(sbguipopupmenuctrl, sba2);
}
/// <summary>
/// ( GuiPopUpMenuCtrl, setNoneSelected, void, 2, 2, )
/// 
/// </summary>

internal void fnGuiPopUpMenuCtrl_setNoneSelected (string guipopupmenuctrl)
{
var sbguipopupmenuctrl = new StringBuilder(guipopupmenuctrl, 1024);

SafeNativeMethods.mwle_fnGuiPopUpMenuCtrl_setNoneSelected(sbguipopupmenuctrl);
}
/// <summary>
/// ( GuiPopUpMenuCtrl, getTextById, const char*, 3, 3,  (int id))
/// 
/// </summary>

internal string fnGuiPopUpMenuCtrl_getTextById (string guipopupmenuctrl, string a2)
{
var returnbuff = new StringBuilder(4096);
var sbguipopupmenuctrl = new StringBuilder(guipopupmenuctrl, 1024);
var sba2 = new StringBuilder(a2, 4096);

SafeNativeMethods.mwle_fnGuiPopUpMenuCtrl_getTextById(sbguipopupmenuctrl, sba2, returnbuff);
return returnbuff.ToString();

}
/// <summary>
/// ( GuiPopUpMenuCtrl, changeTextById, void, 4, 4, ( int id, string text ) )
/// 
/// </summary>

internal void fnGuiPopUpMenuCtrl_changeTextById (string guipopupmenuctrl, string a2, string a3)
{
var sbguipopupmenuctrl = new StringBuilder(guipopupmenuctrl, 1024);
var sba2 = new StringBuilder(a2, 4096);
var sba3 = new StringBuilder(a3, 4096);

SafeNativeMethods.mwle_fnGuiPopUpMenuCtrl_changeTextById(sbguipopupmenuctrl, sba2, sba3);
}
/// <summary>
/// ( GuiPopUpMenuCtrl, setEnumContent, void, 4, 4, (string class, string enum)
///               This fills the popup with a classrep's field enumeration type info.
///               More of a helper function than anything.   If console access to the field list is added, 
///               at least for the enumerated types, then this should go away..)
/// 
/// </summary>

internal void fnGuiPopUpMenuCtrl_setEnumContent (string guipopupmenuctrl, string a2, string a3)
{
var sbguipopupmenuctrl = new StringBuilder(guipopupmenuctrl, 1024);
var sba2 = new StringBuilder(a2, 4096);
var sba3 = new StringBuilder(a3, 4096);

SafeNativeMethods.mwle_fnGuiPopUpMenuCtrl_setEnumContent(sbguipopupmenuctrl, sba2, sba3);
}
/// <summary>
/// ( GuiPopUpMenuCtrl, findText, S32, 3, 3, (string text)
///               Returns the position of the first entry containing the specified text.)
/// 
/// </summary>

internal int fnGuiPopUpMenuCtrl_findText (string guipopupmenuctrl, string a2)
{
var sbguipopupmenuctrl = new StringBuilder(guipopupmenuctrl, 1024);
var sba2 = new StringBuilder(a2, 4096);

return  SafeNativeMethods.mwle_fnGuiPopUpMenuCtrl_findText(sbguipopupmenuctrl, sba2);
}
/// <summary>
/// ( GuiPopUpMenuCtrl, size, S32, 2, 2, Get the size of the menu - the number of entries in it.)
/// 
/// </summary>

internal int fnGuiPopUpMenuCtrl_size (string guipopupmenuctrl)
{
var sbguipopupmenuctrl = new StringBuilder(guipopupmenuctrl, 1024);

return  SafeNativeMethods.mwle_fnGuiPopUpMenuCtrl_size(sbguipopupmenuctrl);
}
/// <summary>
/// ( GuiPopUpMenuCtrl, replaceText, void, 3, 3, (bool doReplaceText))
/// 
/// </summary>

internal void fnGuiPopUpMenuCtrl_replaceText (string guipopupmenuctrl, string a2)
{
var sbguipopupmenuctrl = new StringBuilder(guipopupmenuctrl, 1024);
var sba2 = new StringBuilder(a2, 4096);

SafeNativeMethods.mwle_fnGuiPopUpMenuCtrl_replaceText(sbguipopupmenuctrl, sba2);
}
/// <summary>
/// ( GuiPopUpMenuCtrl, clearEntry, void, 3, 3, (S32 entry))
/// 
/// </summary>

internal void fnGuiPopUpMenuCtrl_clearEntry (string guipopupmenuctrl, string a2)
{
var sbguipopupmenuctrl = new StringBuilder(guipopupmenuctrl, 1024);
var sba2 = new StringBuilder(a2, 4096);

SafeNativeMethods.mwle_fnGuiPopUpMenuCtrl_clearEntry(sbguipopupmenuctrl, sba2);
}
/// <summary>
/// ( GuiPopUpMenuCtrlEx, add, void, 3, 5, (string name, int idNum, int scheme=0))
/// 
/// </summary>

internal void fnGuiPopUpMenuCtrlEx_add (string guipopupmenuctrlex, string a2, string a3, string a4)
{
var sbguipopupmenuctrlex = new StringBuilder(guipopupmenuctrlex, 1024);
var sba2 = new StringBuilder(a2, 4096);
var sba3 = new StringBuilder(a3, 4096);
var sba4 = new StringBuilder(a4, 4096);

SafeNativeMethods.mwle_fnGuiPopUpMenuCtrlEx_add(sbguipopupmenuctrlex, sba2, sba3, sba4);
}
/// <summary>
/// ( GuiPopUpMenuCtrlEx, setSelected, void, 3, 4, (int id, [scriptCallback=true])
/// 			  @hide)
/// 
/// </summary>

internal void fnGuiPopUpMenuCtrlEx_setSelected (string guipopupmenuctrlex, string a2, string a3)
{
var sbguipopupmenuctrlex = new StringBuilder(guipopupmenuctrlex, 1024);
var sba2 = new StringBuilder(a2, 4096);
var sba3 = new StringBuilder(a3, 4096);

SafeNativeMethods.mwle_fnGuiPopUpMenuCtrlEx_setSelected(sbguipopupmenuctrlex, sba2, sba3);
}
/// <summary>
/// ( GuiPopUpMenuCtrlEx, setFirstSelected, void, 2, 3, ([scriptCallback=true])
/// 			  @hide)
/// 
/// </summary>

internal void fnGuiPopUpMenuCtrlEx_setFirstSelected (string guipopupmenuctrlex, string a2)
{
var sbguipopupmenuctrlex = new StringBuilder(guipopupmenuctrlex, 1024);
var sba2 = new StringBuilder(a2, 4096);

SafeNativeMethods.mwle_fnGuiPopUpMenuCtrlEx_setFirstSelected(sbguipopupmenuctrlex, sba2);
}
/// <summary>
/// ( GuiPopUpMenuCtrlEx, getColorById, const char*, 3, 3,  
/// 			  @brief Get color of an entry's box
/// 			  @param id ID number of entry to query
/// 			  @return ColorI in the format of \"Red Green Blue Alpha\", each of with is a value between 0 - 255)
/// 
/// </summary>

internal string fnGuiPopUpMenuCtrlEx_getColorById (string guipopupmenuctrlex, string a2)
{
var returnbuff = new StringBuilder(4096);
var sbguipopupmenuctrlex = new StringBuilder(guipopupmenuctrlex, 1024);
var sba2 = new StringBuilder(a2, 4096);

SafeNativeMethods.mwle_fnGuiPopUpMenuCtrlEx_getColorById(sbguipopupmenuctrlex, sba2, returnbuff);
return returnbuff.ToString();

}
/// <summary>
/// ( GuiPopUpMenuCtrlEx, setEnumContent, void, 4, 4,
/// 			  @brief This fills the popup with a classrep's field enumeration type info.
///               More of a helper function than anything.   If console access to the field list is added, 
///               at least for the enumerated types, then this should go away.
/// 			  @param class Name of the class containing the enum
/// 			  @param enum Name of the enum value to acces)
/// 
/// </summary>

internal void fnGuiPopUpMenuCtrlEx_setEnumContent (string guipopupmenuctrlex, string a2, string a3)
{
var sbguipopupmenuctrlex = new StringBuilder(guipopupmenuctrlex, 1024);
var sba2 = new StringBuilder(a2, 4096);
var sba3 = new StringBuilder(a3, 4096);

SafeNativeMethods.mwle_fnGuiPopUpMenuCtrlEx_setEnumContent(sbguipopupmenuctrlex, sba2, sba3);
}
/// <summary>
/// ( GuiPopUpMenuCtrlEx, findText, S32, 3, 3, (string text)
///               Returns the id of the first entry containing the specified text or -1 if not found.
/// 			  @param text String value used for the query
/// 			  @return Numerical ID of entry containing the text.)
/// 
/// </summary>

internal int fnGuiPopUpMenuCtrlEx_findText (string guipopupmenuctrlex, string a2)
{
var sbguipopupmenuctrlex = new StringBuilder(guipopupmenuctrlex, 1024);
var sba2 = new StringBuilder(a2, 4096);

return  SafeNativeMethods.mwle_fnGuiPopUpMenuCtrlEx_findText(sbguipopupmenuctrlex, sba2);
}
/// <summary>
/// ( GuiPopUpMenuCtrlEx, size, S32, 2, 2, 
/// 			  @brief Get the size of the menu
/// 			  @return Number of entries in the menu)
/// 
/// </summary>

internal int fnGuiPopUpMenuCtrlEx_size (string guipopupmenuctrlex)
{
var sbguipopupmenuctrlex = new StringBuilder(guipopupmenuctrlex, 1024);

return  SafeNativeMethods.mwle_fnGuiPopUpMenuCtrlEx_size(sbguipopupmenuctrlex);
}
/// <summary>
/// ( GuiPopUpMenuCtrlEx, replaceText, void, 3, 3, 
/// 			  @brief Flag that causes each new text addition to replace the current entry
/// 			  @param True to turn on replacing, false to disable it)
/// 
/// </summary>

internal void fnGuiPopUpMenuCtrlEx_replaceText (string guipopupmenuctrlex, string a2)
{
var sbguipopupmenuctrlex = new StringBuilder(guipopupmenuctrlex, 1024);
var sba2 = new StringBuilder(a2, 4096);

SafeNativeMethods.mwle_fnGuiPopUpMenuCtrlEx_replaceText(sbguipopupmenuctrlex, sba2);
}
/// <summary>
/// ( GuiPopUpMenuCtrlEx, clearEntry, void, 3, 3, (S32 entry))
/// 
/// </summary>

internal void fnGuiPopUpMenuCtrlEx_clearEntry (string guipopupmenuctrlex, string a2)
{
var sbguipopupmenuctrlex = new StringBuilder(guipopupmenuctrlex, 1024);
var sba2 = new StringBuilder(a2, 4096);

SafeNativeMethods.mwle_fnGuiPopUpMenuCtrlEx_clearEntry(sbguipopupmenuctrlex, sba2);
}
/// <summary>
/// @brief Add a category to the list.
/// 
/// 				   Acts as a separator between entries, allowing for sub-lists
/// 
/// 				   @param text Name of the new category)
/// 
/// </summary>

internal void fnGuiPopUpMenuCtrlEx_addCategory (string guipopupmenuctrlex, string text)
{
var sbguipopupmenuctrlex = new StringBuilder(guipopupmenuctrlex, 1024);
var sbtext = new StringBuilder(text, 4096);

SafeNativeMethods.mwle_fnGuiPopUpMenuCtrlEx_addCategory(sbguipopupmenuctrlex, sbtext);
}
/// <summary>
/// @brief Create a new scheme and add it to the list of choices for when a new text entry is added.
/// 				   @param id Numerical id associated with this scheme
/// 				   @param fontColor The base text font color. Formatted as \"Red Green Blue\", each a numerical between 0 and 255.
/// 				   @param fontColorHL Color of text when being highlighted. Formatted as \"Red Green Blue\", each a numerical between 0 and 255.
/// 				   @param fontColorSel Color of text when being selected. Formatted as \"Red Green Blue\", each a numerical between 0 and 255.)
/// 
/// </summary>

internal void fnGuiPopUpMenuCtrlEx_addScheme (string guipopupmenuctrlex, int id, string fontColor, string fontColorHL, string fontColorSEL)
{
var sbguipopupmenuctrlex = new StringBuilder(guipopupmenuctrlex, 1024);
var sbfontColor = new StringBuilder(fontColor, 1024);
var sbfontColorHL = new StringBuilder(fontColorHL, 1024);
var sbfontColorSEL = new StringBuilder(fontColorSEL, 1024);

SafeNativeMethods.mwle_fnGuiPopUpMenuCtrlEx_addScheme(sbguipopupmenuctrlex, id, sbfontColor, sbfontColorHL, sbfontColorSEL);
}
/// <summary>
/// @brief Set the current text to a specified value.
/// 				   @param text String containing new text to set)
/// 
/// </summary>

internal void fnGuiPopUpMenuCtrlEx_setText (string guipopupmenuctrlex, string text)
{
var sbguipopupmenuctrlex = new StringBuilder(guipopupmenuctrlex, 1024);
var sbtext = new StringBuilder(text, 4096);

SafeNativeMethods.mwle_fnGuiPopUpMenuCtrlEx_setText(sbguipopupmenuctrlex, sbtext);
}
/// <summary>
/// @brief Get the.
/// 
/// 				   Detailed description
/// 
/// 				   @param param Description
/// 
/// 				   @tsexample
/// 				   // Comment
/// 				   code();
/// 				   @endtsexample
/// 
/// 				   @return Returns current text in string format)
/// 
/// </summary>

internal string fnGuiPopUpMenuCtrlEx_getText (string guipopupmenuctrlex)
{
var returnbuff = new StringBuilder(4096);
var sbguipopupmenuctrlex = new StringBuilder(guipopupmenuctrlex, 1024);

SafeNativeMethods.mwle_fnGuiPopUpMenuCtrlEx_getText(sbguipopupmenuctrlex, returnbuff);
return returnbuff.ToString();

}
/// <summary>
/// @brief Clear the popup list.)
/// 
/// </summary>

internal void fnGuiPopUpMenuCtrlEx_clear (string guipopupmenuctrlex)
{
var sbguipopupmenuctrlex = new StringBuilder(guipopupmenuctrlex, 1024);

SafeNativeMethods.mwle_fnGuiPopUpMenuCtrlEx_clear(sbguipopupmenuctrlex);
}
/// <summary>
/// @brief Sort the list alphabetically.)
/// 
/// </summary>

internal void fnGuiPopUpMenuCtrlEx_sort (string guipopupmenuctrlex)
{
var sbguipopupmenuctrlex = new StringBuilder(guipopupmenuctrlex, 1024);

SafeNativeMethods.mwle_fnGuiPopUpMenuCtrlEx_sort(sbguipopupmenuctrlex);
}
/// <summary>
/// @brief Sort the list by ID.)
/// 
/// </summary>

internal void fnGuiPopUpMenuCtrlEx_sortID (string guipopupmenuctrlex)
{
var sbguipopupmenuctrlex = new StringBuilder(guipopupmenuctrlex, 1024);

SafeNativeMethods.mwle_fnGuiPopUpMenuCtrlEx_sortID(sbguipopupmenuctrlex);
}
/// <summary>
/// @brief Manually for the onAction function, which updates everything in this control.)
/// 
/// </summary>

internal void fnGuiPopUpMenuCtrlEx_forceOnAction (string guipopupmenuctrlex)
{
var sbguipopupmenuctrlex = new StringBuilder(guipopupmenuctrlex, 1024);

SafeNativeMethods.mwle_fnGuiPopUpMenuCtrlEx_forceOnAction(sbguipopupmenuctrlex);
}
/// <summary>
/// @brief Manually force this control to collapse and close.)
/// 
/// </summary>

internal void fnGuiPopUpMenuCtrlEx_forceClose (string guipopupmenuctrlex)
{
var sbguipopupmenuctrlex = new StringBuilder(guipopupmenuctrlex, 1024);

SafeNativeMethods.mwle_fnGuiPopUpMenuCtrlEx_forceClose(sbguipopupmenuctrlex);
}
/// <summary>
/// @brief Get the current selection of the menu.
/// 				   @return Returns the ID of the currently selected entry)
/// 
/// </summary>

internal int fnGuiPopUpMenuCtrlEx_getSelected (string guipopupmenuctrlex)
{
var sbguipopupmenuctrlex = new StringBuilder(guipopupmenuctrlex, 1024);

return  SafeNativeMethods.mwle_fnGuiPopUpMenuCtrlEx_getSelected(sbguipopupmenuctrlex);
}
/// <summary>
/// @brief Clears selection in the menu.)
/// 
/// </summary>

internal void fnGuiPopUpMenuCtrlEx_setNoneSelected (string guipopupmenuctrlex, int param)
{
var sbguipopupmenuctrlex = new StringBuilder(guipopupmenuctrlex, 1024);

SafeNativeMethods.mwle_fnGuiPopUpMenuCtrlEx_setNoneSelected(sbguipopupmenuctrlex, param);
}
/// <summary>
/// @brief Get the text of an entry based on an ID.
/// 				   @param id The ID assigned to the entry being queried
/// 				   @return String contained by the specified entry, NULL if empty or bad ID)
/// 
/// </summary>

internal string fnGuiPopUpMenuCtrlEx_getTextById (string guipopupmenuctrlex, int id)
{
var returnbuff = new StringBuilder(4096);
var sbguipopupmenuctrlex = new StringBuilder(guipopupmenuctrlex, 1024);

SafeNativeMethods.mwle_fnGuiPopUpMenuCtrlEx_getTextById(sbguipopupmenuctrlex, id, returnbuff);
return returnbuff.ToString();

}
/// <summary>
/// Get the current value of the slider based on the position of the thumb.
///    @return Slider position (from range.x to range.y). )
/// 
/// </summary>

internal float fnGuiSliderCtrl_getValue (string guisliderctrl)
{
var sbguisliderctrl = new StringBuilder(guisliderctrl, 1024);

return  SafeNativeMethods.mwle_fnGuiSliderCtrl_getValue(sbguisliderctrl);
}
/// <summary>
/// Set position of the thumb on the slider.
///    @param pos New slider position (from range.x to range.y)
///    @param doCallback If true, the altCommand callback will be invoked )
/// 
/// </summary>

internal void fnGuiSliderCtrl_setValue (string guisliderctrl, float pos, bool doCallback)
{
var sbguisliderctrl = new StringBuilder(guisliderctrl, 1024);

SafeNativeMethods.mwle_fnGuiSliderCtrl_setValue(sbguisliderctrl, pos, doCallback);
}
/// <summary>
/// Returns true if the thumb is currently being dragged by the user.  This method is mainly useful 
///    for scrubbing type sliders where the slider position is sync'd to a changing value.  When the 
///    user is dragging the thumb, however, the sync'ing should pause and not get in the way of the user. )
/// 
/// </summary>

internal bool fnGuiSliderCtrl_isThumbBeingDragged (string guisliderctrl)
{
var sbguisliderctrl = new StringBuilder(guisliderctrl, 1024);

return  SafeNativeMethods.mwle_fnGuiSliderCtrl_isThumbBeingDragged(sbguisliderctrl)>=1;
}
/// <summary>
/// Select this page in its tab book. )
/// 
/// </summary>

internal void fnGuiTabPageCtrl_select (string guitabpagectrl)
{
var sbguitabpagectrl = new StringBuilder(guitabpagectrl, 1024);

SafeNativeMethods.mwle_fnGuiTabPageCtrl_select(sbguitabpagectrl);
}
/// <summary>
/// @brief Sets the text in the control.
///    @param text Text to display in the control.
///    @tsexample
///    // Set the text to show in the control
///    %text = \"Gideon - Destroyer of World\";
///    // Inform the GuiTextCtrl control to change its text to the defined value
///    %thisGuiTextCtrl.setText(%text);
///    @endtsexample
///    @see GuiControl)
/// 
/// </summary>

internal void fnGuiTextCtrl_setText (string guitextctrl, string text)
{
var sbguitextctrl = new StringBuilder(guitextctrl, 1024);
var sbtext = new StringBuilder(text, 4096);

SafeNativeMethods.mwle_fnGuiTextCtrl_setText(sbguitextctrl, sbtext);
}
/// <summary>
/// @brief Maps the text ctrl to a variable used in localization, rather than raw text.
///    @param textID Name of variable text should be mapped to
///    @tsexample
///    // Inform the GuiTextCtrl control of the textID to use
///    %thisGuiTextCtrl.setTextID(\"STR_QUIT\");
///    @endtsexample
///    @see GuiControl
///    @see Localization)
/// 
/// </summary>

internal void fnGuiTextCtrl_setTextID (string guitextctrl, string textID)
{
var sbguitextctrl = new StringBuilder(guitextctrl, 1024);
var sbtextID = new StringBuilder(textID, 4096);

SafeNativeMethods.mwle_fnGuiTextCtrl_setTextID(sbguitextctrl, sbtextID);
}
/// <summary>
/// @brief Acquires the current text displayed in this control.
///    @tsexample
///    // Acquire the value of the text control.
///    %text = %thisGuiTextEditCtrl.getText();
///    @endtsexample
///    @return The current text within the control.
///    @see GuiControl)
/// 
/// </summary>

internal string fnGuiTextEditCtrl_getText (string guitexteditctrl)
{
var returnbuff = new StringBuilder(4096);
var sbguitexteditctrl = new StringBuilder(guitexteditctrl, 1024);

SafeNativeMethods.mwle_fnGuiTextEditCtrl_getText(sbguitexteditctrl, returnbuff);
return returnbuff.ToString();

}
/// <summary>
/// @brief Sets the text in the control.
///    @param text Text to place in the control.
///    @tsexample
///    // Define the text to display
///    %text = \"Text!\"
///    // Inform the GuiTextEditCtrl to display the defined text
///    %thisGuiTextEditCtrl.setText(%text);
///    @endtsexample
///    @see GuiControl)
/// 
/// </summary>

internal void fnGuiTextEditCtrl_setText (string guitexteditctrl, string text)
{
var sbguitexteditctrl = new StringBuilder(guitexteditctrl, 1024);
var sbtext = new StringBuilder(text, 4096);

SafeNativeMethods.mwle_fnGuiTextEditCtrl_setText(sbguitexteditctrl, sbtext);
}
/// <summary>
/// @brief Returns the current position of the text cursor in the control.
///    @tsexample
///    // Acquire the cursor position in the control
///    %position = %thisGuiTextEditCtrl.getCursorPost();
///    @endtsexample
///    @return Text cursor position within the control.
///    @see GuiControl)
/// 
/// </summary>

internal int fnGuiTextEditCtrl_getCursorPos (string guitexteditctrl)
{
var sbguitexteditctrl = new StringBuilder(guitexteditctrl, 1024);

return  SafeNativeMethods.mwle_fnGuiTextEditCtrl_getCursorPos(sbguitexteditctrl);
}
/// <summary>
/// @brief Sets the text cursor at the defined position within the control.
///    @param position Text position to set the text cursor.
///    @tsexample
///    // Define the cursor position
///    %position = \"12\";
///    // Inform the GuiTextEditCtrl control to place the text cursor at the defined position
///    %thisGuiTextEditCtrl.setCursorPos(%position);
///    @endtsexample
///    @see GuiControl)
/// 
/// </summary>

internal void fnGuiTextEditCtrl_setCursorPos (string guitexteditctrl, int position)
{
var sbguitexteditctrl = new StringBuilder(guitexteditctrl, 1024);

SafeNativeMethods.mwle_fnGuiTextEditCtrl_setCursorPos(sbguitexteditctrl, position);
}
/// <summary>
/// @brief Checks to see if all text in the control has been selected.
///    @tsexample
///    // Check to see if all text has been selected or not.
///    %allSelected = %thisGuiTextEditCtrl.isAllTextSelected();
///    @endtsexample
///    @return True if all text in the control is selected, otherwise false.
///    @see GuiControl)
/// 
/// </summary>

internal bool fnGuiTextEditCtrl_isAllTextSelected (string guitexteditctrl)
{
var sbguitexteditctrl = new StringBuilder(guitexteditctrl, 1024);

return  SafeNativeMethods.mwle_fnGuiTextEditCtrl_isAllTextSelected(sbguitexteditctrl)>=1;
}
/// <summary>
/// @brief Selects all text within the control.
///    @tsexample
///    // Inform the control to select all of its text.
///    %thisGuiTextEditCtrl.selectAllText();
///    @endtsexample
///    @see GuiControl)
/// 
/// </summary>

internal void fnGuiTextEditCtrl_selectAllText (string guitexteditctrl)
{
var sbguitexteditctrl = new StringBuilder(guitexteditctrl, 1024);

SafeNativeMethods.mwle_fnGuiTextEditCtrl_selectAllText(sbguitexteditctrl);
}
/// <summary>
/// @brief Unselects all selected text in the control.
///    @tsexample
///    // Inform the control to unselect all of its selected text
///    %thisGuiTextEditCtrl.clearSelectedText();
///    @endtsexample
///    @see GuiControl)
/// 
/// </summary>

internal void fnGuiTextEditCtrl_clearSelectedText (string guitexteditctrl)
{
var sbguitexteditctrl = new StringBuilder(guitexteditctrl, 1024);

SafeNativeMethods.mwle_fnGuiTextEditCtrl_clearSelectedText(sbguitexteditctrl);
}
/// <summary>
/// @brief Force a validation to occur.
///    @tsexample
///    // Inform the control to force a validation of its text.
///    %thisGuiTextEditCtrl.forceValidateText();
///    @endtsexample
///    @see GuiControl)
/// 
/// </summary>

internal void fnGuiTextEditCtrl_forceValidateText (string guitexteditctrl)
{
var sbguitexteditctrl = new StringBuilder(guitexteditctrl, 1024);

SafeNativeMethods.mwle_fnGuiTextEditCtrl_forceValidateText(sbguitexteditctrl);
}
/// <summary>
/// @brief Get the ID of the currently selected item.
///    @tsexample
///    // Acquire the ID of the selected item in the list.
///    %id = %thisGuiTextListCtrl.getSelectedId();
///    @endtsexample
///    @return The id of the selected item in the list.
///    @see GuiControl)
/// 
/// </summary>

internal int fnGuiTextListCtrl_getSelectedId (string guitextlistctrl)
{
var sbguitextlistctrl = new StringBuilder(guitextlistctrl, 1024);

return  SafeNativeMethods.mwle_fnGuiTextListCtrl_getSelectedId(sbguitextlistctrl);
}
/// <summary>
/// @brief Finds the specified entry by id, then marks its row as selected.
///    @param id Entry within the text list to make selected.
///    @tsexample
///    // Define the id
///    %id = \"5\";
///    // Inform the GuiTextListCtrl control to set the defined id entry as selected
///    %thisGuiTextListCtrl.setSelectedById(%id);
///    @endtsexample
///    @see GuiControl)
/// 
/// </summary>

internal void fnGuiTextListCtrl_setSelectedById (string guitextlistctrl, int id)
{
var sbguitextlistctrl = new StringBuilder(guitextlistctrl, 1024);

SafeNativeMethods.mwle_fnGuiTextListCtrl_setSelectedById(sbguitextlistctrl, id);
}
/// <summary>
/// @briefSelects the specified row.
///    @param rowNum Row number to set selected.
///    @tsexample
///    // Define the row number to set selected
///    %rowNum = \"4\";
///    %guiTextListCtrl.setSelectedRow(%rowNum);
///    @endtsexample
///    @see GuiControl)
/// 
/// </summary>

internal void fnGuiTextListCtrl_setSelectedRow (string guitextlistctrl, int rowNum)
{
var sbguitextlistctrl = new StringBuilder(guitextlistctrl, 1024);

SafeNativeMethods.mwle_fnGuiTextListCtrl_setSelectedRow(sbguitextlistctrl, rowNum);
}
/// <summary>
/// @brief Returns the selected row index (not the row ID).
///    @tsexample
///    // Acquire the selected row index
///    %rowIndex = %thisGuiTextListCtrl.getSelectedRow();
///    @endtsexample
///    @return Index of the selected row
///    @see GuiControl)
/// 
/// </summary>

internal int fnGuiTextListCtrl_getSelectedRow (string guitextlistctrl)
{
var sbguitextlistctrl = new StringBuilder(guitextlistctrl, 1024);

return  SafeNativeMethods.mwle_fnGuiTextListCtrl_getSelectedRow(sbguitextlistctrl);
}
/// <summary>
/// @brief Set the selection to nothing.
///    @tsexample
///    // Deselect anything that is currently selected
///    %thisGuiTextListCtrl.clearSelection();
///    @endtsexample
///    @see GuiControl)
/// 
/// </summary>

internal void fnGuiTextListCtrl_clearSelection (string guitextlistctrl)
{
var sbguitextlistctrl = new StringBuilder(guitextlistctrl, 1024);

SafeNativeMethods.mwle_fnGuiTextListCtrl_clearSelection(sbguitextlistctrl);
}
/// <summary>
/// ,-1),
///    @brief Adds a new row at end of the list with the defined id and text.
///    If index is used, then the new row is inserted at the row location of 'index'.
///    @param id Id of the new row.
///    @param text Text to display at the new row.
///    @param index Index to insert the new row at. If not used, new row will be placed at the end of the list.
///    @tsexample
///    // Define the id
///    %id = \"4\";
///    // Define the text to display
///    %text = \"Display Text\"
///    // Define the index (optional)
///    %index = \"2\"
///    // Inform the GuiTextListCtrl control to add the new row with the defined information.
///    %rowIndex = %thisGuiTextListCtrl.addRow(%id,%text,%index);
///    @endtsexample
///    @return Returns the row index of the new row. If 'index' was defined, then this just returns the number of rows in the list.
///    @see References)
/// 
/// </summary>

internal int fnGuiTextListCtrl_addRow (string guitextlistctrl, int id, string text, int index)
{
var sbguitextlistctrl = new StringBuilder(guitextlistctrl, 1024);
var sbtext = new StringBuilder(text, 4096);

return  SafeNativeMethods.mwle_fnGuiTextListCtrl_addRow(sbguitextlistctrl, id, sbtext, index);
}
/// <summary>
/// @brief Sets the text at the defined id.
///    @param id Id to change.
///    @param text Text to use at the Id.
///    @tsexample
///    // Define the id
///    %id = \"4\";
///    // Define the text
///    %text = \"Text To Display\";
///    // Inform the GuiTextListCtrl control to display the defined text at the defined id
///    %thisGuiTextListCtrl.setRowById(%id,%text);
///    @endtsexample
///    @see GuiControl)
/// 
/// </summary>

internal void fnGuiTextListCtrl_setRowById (string guitextlistctrl, int id, string text)
{
var sbguitextlistctrl = new StringBuilder(guitextlistctrl, 1024);
var sbtext = new StringBuilder(text, 4096);

SafeNativeMethods.mwle_fnGuiTextListCtrl_setRowById(sbguitextlistctrl, id, sbtext);
}
/// <summary>
/// @brief Performs a standard (alphabetical) sort on the values in the specified column.
///    @param columnId Column ID to perform the sort on.
///    @param increasing If false, sort will be performed in reverse.
///    @tsexample
///    // Define the columnId
///    %id = \"1\";
///    // Define if we are increasing or not
///    %increasing = \"false\";
///    // Inform the GuiTextListCtrl to perform the sort operation
///    %thisGuiTextListCtrl.sort(%id,%increasing);
///    @endtsexample
///    @see GuiControl)
/// 
/// </summary>

internal void fnGuiTextListCtrl_sort (string guitextlistctrl, int columnId, bool increasing)
{
var sbguitextlistctrl = new StringBuilder(guitextlistctrl, 1024);

SafeNativeMethods.mwle_fnGuiTextListCtrl_sort(sbguitextlistctrl, columnId, increasing);
}
/// <summary>
/// @brief Perform a numerical sort on the values in the specified column.
///    Detailed description
///    @param columnId Column ID to perform the sort on.
///    @param increasing If false, sort will be performed in reverse.
///    @tsexample
///    // Define the columnId
///    %id = \"1\";
///    // Define if we are increasing or not
///    %increasing = \"false\";
///    // Inform the GuiTextListCtrl to perform the sort operation
///    %thisGuiTextListCtrl.sortNumerical(%id,%increasing);
///    @endtsexample
///    @see GuiControl)
/// 
/// </summary>

internal void fnGuiTextListCtrl_sortNumerical (string guitextlistctrl, int columnID, bool increasing)
{
var sbguitextlistctrl = new StringBuilder(guitextlistctrl, 1024);

SafeNativeMethods.mwle_fnGuiTextListCtrl_sortNumerical(sbguitextlistctrl, columnID, increasing);
}
/// <summary>
/// @brief Clear the list.
///    @tsexample
///    // Inform the GuiTextListCtrl control to clear its contents
///    %thisGuiTextListCtrl.clear();
///    @endtsexample
///    @see GuiControl)
/// 
/// </summary>

internal void fnGuiTextListCtrl_clear (string guitextlistctrl)
{
var sbguitextlistctrl = new StringBuilder(guitextlistctrl, 1024);

SafeNativeMethods.mwle_fnGuiTextListCtrl_clear(sbguitextlistctrl);
}
/// <summary>
/// @brief Get the number of rows.
///    @tsexample
///    // Get the number of rows in the list
///    %rowCount = %thisGuiTextListCtrl.rowCount();
///    @endtsexample
///    @return Number of rows in the list.
///    @see GuiControl)
/// 
/// </summary>

internal int fnGuiTextListCtrl_rowCount (string guitextlistctrl)
{
var sbguitextlistctrl = new StringBuilder(guitextlistctrl, 1024);

return  SafeNativeMethods.mwle_fnGuiTextListCtrl_rowCount(sbguitextlistctrl);
}
/// <summary>
/// @brief Get the row ID for an index.
///    @param index Index to get the RowID at
///    @tsexample
///    // Define the index
///    %index = \"3\";
///    // Request the row ID at the defined index
///    %rowId = %thisGuiTextListCtrl.getRowId(%index);
///    @endtsexample
///    @return RowId at the defined index.
///    @see GuiControl)
/// 
/// </summary>

internal int fnGuiTextListCtrl_getRowId (string guitextlistctrl, int index)
{
var sbguitextlistctrl = new StringBuilder(guitextlistctrl, 1024);

return  SafeNativeMethods.mwle_fnGuiTextListCtrl_getRowId(sbguitextlistctrl, index);
}
/// <summary>
/// @brief Get the text of a row with the specified id.
///    @tsexample
///    // Define the id
///    %id = \"4\";
///    // Inform the GuiTextListCtrl control to return the text at the defined row id
///    %rowText = %thisGuiTextListCtrl.getRowTextById(%id);
///    @endtsexample
///    @return Row text at the requested row id.
///    @see GuiControl)
/// 
/// </summary>

internal string fnGuiTextListCtrl_getRowTextById (string guitextlistctrl, int id)
{
var returnbuff = new StringBuilder(4096);
var sbguitextlistctrl = new StringBuilder(guitextlistctrl, 1024);

SafeNativeMethods.mwle_fnGuiTextListCtrl_getRowTextById(sbguitextlistctrl, id, returnbuff);
return returnbuff.ToString();

}
/// <summary>
/// @brief Get the row number for a specified id.
///    @param id Id to get the row number at
///    @tsexample
///    // Define the id
///    %id = \"4\";
///    // Request the row number from the GuiTextListCtrl control at the defined id.
///    %rowNumber = %thisGuiTextListCtrl.getRowNumById(%id);
///    @endtsexample
///    @see GuiControl)
/// 
/// </summary>

internal int fnGuiTextListCtrl_getRowNumById (string guitextlistctrl, int id)
{
var sbguitextlistctrl = new StringBuilder(guitextlistctrl, 1024);

return  SafeNativeMethods.mwle_fnGuiTextListCtrl_getRowNumById(sbguitextlistctrl, id);
}
/// <summary>
/// @brief Get the text of the row with the specified index.
///    @param index Row index to acquire the text at.
///    @tsexample
///    // Define the row index
///    %index = \"5\";
///    // Request the text from the row at the defined index
///    %rowText = %thisGuiTextListCtrl.getRowText(%index);
///    @endtsexample
///    @return Text at the defined row index.
///    @see GuiControl)
/// 
/// </summary>

internal string fnGuiTextListCtrl_getRowText (string guitextlistctrl, int index)
{
var returnbuff = new StringBuilder(4096);
var sbguitextlistctrl = new StringBuilder(guitextlistctrl, 1024);

SafeNativeMethods.mwle_fnGuiTextListCtrl_getRowText(sbguitextlistctrl, index, returnbuff);
return returnbuff.ToString();

}
/// <summary>
/// @brief Remove row with the specified id.
///    @param id Id to remove the row entry at
///    @tsexample
///    // Define the id
///    %id = \"4\";
///    // Inform the GuiTextListCtrl control to remove the row at the defined id
///    %thisGuiTextListCtrl.removeRowById(%id);
///    @endtsexample
///    @see GuiControl)
/// 
/// </summary>

internal void fnGuiTextListCtrl_removeRowById (string guitextlistctrl, int id)
{
var sbguitextlistctrl = new StringBuilder(guitextlistctrl, 1024);

SafeNativeMethods.mwle_fnGuiTextListCtrl_removeRowById(sbguitextlistctrl, id);
}
/// <summary>
/// @brief Remove a row from the table, based on its index.
///    @param index Row index to remove from the list.
///    @tsexample
///    // Define the row index
///    %index = \"4\";
///    // Inform the GuiTextListCtrl control to remove the row at the defined row index
///    %thisGuiTextListCtrl.removeRow(%index);
///    @endtsexample
///    @see GuiControl)
/// 
/// </summary>

internal void fnGuiTextListCtrl_removeRow (string guitextlistctrl, int index)
{
var sbguitextlistctrl = new StringBuilder(guitextlistctrl, 1024);

SafeNativeMethods.mwle_fnGuiTextListCtrl_removeRow(sbguitextlistctrl, index);
}
/// <summary>
/// @brief Scroll so the specified row is visible
///    @param rowNum Row number to make visible
///    @tsexample
///    // Define the row number to make visible
///    %rowNum = \"4\";
///    // Inform the GuiTextListCtrl control to scroll the list so the defined rowNum is visible.
///    %thisGuiTextListCtrl.scrollVisible(%rowNum);
///    @endtsexample
///    @see GuiControl)
/// 
/// </summary>

internal void fnGuiTextListCtrl_scrollVisible (string guitextlistctrl, int rowNum)
{
var sbguitextlistctrl = new StringBuilder(guitextlistctrl, 1024);

SafeNativeMethods.mwle_fnGuiTextListCtrl_scrollVisible(sbguitextlistctrl, rowNum);
}
/// <summary>
/// @brief Find needle in the list, and return the row number it was found in.
///    @param needle Text to find in the list.
///    @tsexample
///    // Define the text to find in the list
///    %needle = \"Text To Find\";
///    // Request the row number that contains the defined text to find
///    %rowNumber = %thisGuiTextListCtrl.findTextIndex(%needle);
///    @endtsexample
///    @return Row number that the defined text was found in,
///    @see GuiControl)
/// 
/// </summary>

internal int fnGuiTextListCtrl_findTextIndex (string guitextlistctrl, string needle)
{
var sbguitextlistctrl = new StringBuilder(guitextlistctrl, 1024);
var sbneedle = new StringBuilder(needle, 4096);

return  SafeNativeMethods.mwle_fnGuiTextListCtrl_findTextIndex(sbguitextlistctrl, sbneedle);
}
/// <summary>
/// @brief Mark a specified row as active/not.
///    @param rowNum Row number to change the active state.
///    @param active Boolean active state to set the row number.
///    @tsexample
///    // Define the row number
///    %rowNum = \"4\";
///    // Define the boolean active state
///    %active = \"true\";
///    // Informthe GuiTextListCtrl control to set the defined active state at the defined row number.
///    %thisGuiTextListCtrl.setRowActive(%rowNum,%active);
///    @endtsexample
///    @see GuiControl)
/// 
/// </summary>

internal void fnGuiTextListCtrl_setRowActive (string guitextlistctrl, int rowNum, bool active)
{
var sbguitextlistctrl = new StringBuilder(guitextlistctrl, 1024);

SafeNativeMethods.mwle_fnGuiTextListCtrl_setRowActive(sbguitextlistctrl, rowNum, active);
}
/// <summary>
/// @brief Check if the specified row is currently active or not.
///    @param rowNum Row number to check the active state.
///    @tsexample
///    // Define the row number
///    %rowNum = \"5\";
///    // Request the active state of the defined row number from the GuiTextListCtrl control.
///    %rowActiveState = %thisGuiTextListCtrl.isRowActive(%rowNum);
///    @endtsexample
///    @return Active state of the defined row number.
///    @see GuiControl)
/// 
/// </summary>

internal bool fnGuiTextListCtrl_isRowActive (string guitextlistctrl, int rowNum)
{
var sbguitextlistctrl = new StringBuilder(guitextlistctrl, 1024);

return  SafeNativeMethods.mwle_fnGuiTextListCtrl_isRowActive(sbguitextlistctrl, rowNum)>=1;
}
/// <summary>
/// (GuiTreeViewCtrl, addChildSelectionByValue, void, 4, 4, addChildSelectionByValue(TreeItemId parent, value))
/// 
/// </summary>

internal void fnGuiTreeViewCtrl_addChildSelectionByValue (string guitreeviewctrl, string a2, string a3)
{
var sbguitreeviewctrl = new StringBuilder(guitreeviewctrl, 1024);
var sba2 = new StringBuilder(a2, 4096);
var sba3 = new StringBuilder(a3, 4096);

SafeNativeMethods.mwle_fnGuiTreeViewCtrl_addChildSelectionByValue(sbguitreeviewctrl, sba2, sba3);
}
/// <summary>
/// (GuiTreeViewCtrl, removeSelection, void, 3, 3, (deselects an item))
/// 
/// </summary>

internal void fnGuiTreeViewCtrl_removeSelection (string guitreeviewctrl, string a2)
{
var sbguitreeviewctrl = new StringBuilder(guitreeviewctrl, 1024);
var sba2 = new StringBuilder(a2, 4096);

SafeNativeMethods.mwle_fnGuiTreeViewCtrl_removeSelection(sbguitreeviewctrl, sba2);
}
/// <summary>
/// (GuiTreeViewCtrl, removeChildSelectionByValue, void, 4, 4, removeChildSelectionByValue(TreeItemId parent, value))
/// 
/// </summary>

internal void fnGuiTreeViewCtrl_removeChildSelectionByValue (string guitreeviewctrl, string a2, string a3)
{
var sbguitreeviewctrl = new StringBuilder(guitreeviewctrl, 1024);
var sba2 = new StringBuilder(a2, 4096);
var sba3 = new StringBuilder(a3, 4096);

SafeNativeMethods.mwle_fnGuiTreeViewCtrl_removeChildSelectionByValue(sbguitreeviewctrl, sba2, sba3);
}
/// <summary>
/// (GuiTreeViewCtrl, selectItem, bool, 3, 4, (TreeItemId item, bool select=true))
/// 
/// </summary>

internal bool fnGuiTreeViewCtrl_selectItem (string guitreeviewctrl, string a2, string a3)
{
var sbguitreeviewctrl = new StringBuilder(guitreeviewctrl, 1024);
var sba2 = new StringBuilder(a2, 4096);
var sba3 = new StringBuilder(a3, 4096);

return  SafeNativeMethods.mwle_fnGuiTreeViewCtrl_selectItem(sbguitreeviewctrl, sba2, sba3)>=1;
}
/// <summary>
/// (GuiTreeViewCtrl, expandItem, bool, 3, 4, (TreeItemId item, bool expand=true))
/// 
/// </summary>

internal bool fnGuiTreeViewCtrl_expandItem (string guitreeviewctrl, string a2, string a3)
{
var sbguitreeviewctrl = new StringBuilder(guitreeviewctrl, 1024);
var sba2 = new StringBuilder(a2, 4096);
var sba3 = new StringBuilder(a3, 4096);

return  SafeNativeMethods.mwle_fnGuiTreeViewCtrl_expandItem(sbguitreeviewctrl, sba2, sba3)>=1;
}
/// <summary>
/// (GuiTreeViewCtrl, markItem, bool, 3, 4, (TreeItemId item, bool mark=true))
/// 
/// </summary>

internal bool fnGuiTreeViewCtrl_markItem (string guitreeviewctrl, string a2, string a3)
{
var sbguitreeviewctrl = new StringBuilder(guitreeviewctrl, 1024);
var sba2 = new StringBuilder(a2, 4096);
var sba3 = new StringBuilder(a3, 4096);

return  SafeNativeMethods.mwle_fnGuiTreeViewCtrl_markItem(sbguitreeviewctrl, sba2, sba3)>=1;
}
/// <summary>
/// (GuiTreeViewCtrl, scrollVisible, void, 3, 3, (TreeItemId item))
/// 
/// </summary>

internal void fnGuiTreeViewCtrl_scrollVisible (string guitreeviewctrl, string a2)
{
var sbguitreeviewctrl = new StringBuilder(guitreeviewctrl, 1024);
var sba2 = new StringBuilder(a2, 4096);

SafeNativeMethods.mwle_fnGuiTreeViewCtrl_scrollVisible(sbguitreeviewctrl, sba2);
}
/// <summary>
/// (GuiTreeViewCtrl, buildIconTable, bool, 3,3, (builds an icon table))
/// 
/// </summary>

internal bool fnGuiTreeViewCtrl_buildIconTable (string guitreeviewctrl, string a2)
{
var sbguitreeviewctrl = new StringBuilder(guitreeviewctrl, 1024);
var sba2 = new StringBuilder(a2, 4096);

return  SafeNativeMethods.mwle_fnGuiTreeViewCtrl_buildIconTable(sbguitreeviewctrl, sba2)>=1;
}
/// <summary>
/// ( GuiTreeViewCtrl, open, void, 3, 4, (SimSet obj, bool okToEdit=true) Set the root of the tree view to the specified object, or to the root set.)
/// 
/// </summary>

internal void fnGuiTreeViewCtrl_open (string guitreeviewctrl, string a2, string a3)
{
var sbguitreeviewctrl = new StringBuilder(guitreeviewctrl, 1024);
var sba2 = new StringBuilder(a2, 4096);
var sba3 = new StringBuilder(a3, 4096);

SafeNativeMethods.mwle_fnGuiTreeViewCtrl_open(sbguitreeviewctrl, sba2, sba3);
}
/// <summary>
/// ( GuiTreeViewCtrl, setItemTooltip, void, 4, 4, ( int id, string text ) - Set the tooltip to show for the given item. )
/// 
/// </summary>

internal void fnGuiTreeViewCtrl_setItemTooltip (string guitreeviewctrl, string a2, string a3)
{
var sbguitreeviewctrl = new StringBuilder(guitreeviewctrl, 1024);
var sba2 = new StringBuilder(a2, 4096);
var sba3 = new StringBuilder(a3, 4096);

SafeNativeMethods.mwle_fnGuiTreeViewCtrl_setItemTooltip(sbguitreeviewctrl, sba2, sba3);
}
/// <summary>
/// ( GuiTreeViewCtrl, setItemImages, void, 5, 5, ( int id, int normalImage, int expandedImage ) - Sets the normal and expanded images to show for the given item. )
/// 
/// </summary>

internal void fnGuiTreeViewCtrl_setItemImages (string guitreeviewctrl, string a2, string a3, string a4)
{
var sbguitreeviewctrl = new StringBuilder(guitreeviewctrl, 1024);
var sba2 = new StringBuilder(a2, 4096);
var sba3 = new StringBuilder(a3, 4096);
var sba4 = new StringBuilder(a4, 4096);

SafeNativeMethods.mwle_fnGuiTreeViewCtrl_setItemImages(sbguitreeviewctrl, sba2, sba3, sba4);
}
/// <summary>
/// ( GuiTreeViewCtrl, isParentItem, bool, 3, 3, ( int id ) - Returns true if the given item contains child items. )
/// 
/// </summary>

internal bool fnGuiTreeViewCtrl_isParentItem (string guitreeviewctrl, string a2)
{
var sbguitreeviewctrl = new StringBuilder(guitreeviewctrl, 1024);
var sba2 = new StringBuilder(a2, 4096);

return  SafeNativeMethods.mwle_fnGuiTreeViewCtrl_isParentItem(sbguitreeviewctrl, sba2)>=1;
}
/// <summary>
/// (GuiTreeViewCtrl, getItemText, const char *, 3, 3, (TreeItemId item))
/// 
/// </summary>

internal string fnGuiTreeViewCtrl_getItemText (string guitreeviewctrl, string a2)
{
var returnbuff = new StringBuilder(4096);
var sbguitreeviewctrl = new StringBuilder(guitreeviewctrl, 1024);
var sba2 = new StringBuilder(a2, 4096);

SafeNativeMethods.mwle_fnGuiTreeViewCtrl_getItemText(sbguitreeviewctrl, sba2, returnbuff);
return returnbuff.ToString();

}
/// <summary>
/// (GuiTreeViewCtrl, getItemValue, const char *, 3, 3, (TreeItemId item))
/// 
/// </summary>

internal string fnGuiTreeViewCtrl_getItemValue (string guitreeviewctrl, string a2)
{
var returnbuff = new StringBuilder(4096);
var sbguitreeviewctrl = new StringBuilder(guitreeviewctrl, 1024);
var sba2 = new StringBuilder(a2, 4096);

SafeNativeMethods.mwle_fnGuiTreeViewCtrl_getItemValue(sbguitreeviewctrl, sba2, returnbuff);
return returnbuff.ToString();

}
/// <summary>
/// (GuiTreeViewCtrl, editItem, bool, 5, 5, (TreeItemId item, string newText, string newValue))
/// 
/// </summary>

internal bool fnGuiTreeViewCtrl_editItem (string guitreeviewctrl, string a2, string a3, string a4)
{
var sbguitreeviewctrl = new StringBuilder(guitreeviewctrl, 1024);
var sba2 = new StringBuilder(a2, 4096);
var sba3 = new StringBuilder(a3, 4096);
var sba4 = new StringBuilder(a4, 4096);

return  SafeNativeMethods.mwle_fnGuiTreeViewCtrl_editItem(sbguitreeviewctrl, sba2, sba3, sba4)>=1;
}
/// <summary>
/// (GuiTreeViewCtrl, removeItem, bool, 3, 3, (TreeItemId item))
/// 
/// </summary>

internal bool fnGuiTreeViewCtrl_removeItem (string guitreeviewctrl, string a2)
{
var sbguitreeviewctrl = new StringBuilder(guitreeviewctrl, 1024);
var sba2 = new StringBuilder(a2, 4096);

return  SafeNativeMethods.mwle_fnGuiTreeViewCtrl_removeItem(sbguitreeviewctrl, sba2)>=1;
}
/// <summary>
/// (GuiTreeViewCtrl, removeAllChildren, void, 3, 3, removeAllChildren(TreeItemId parent))
/// 
/// </summary>

internal void fnGuiTreeViewCtrl_removeAllChildren (string guitreeviewctrl, string a2)
{
var sbguitreeviewctrl = new StringBuilder(guitreeviewctrl, 1024);
var sba2 = new StringBuilder(a2, 4096);

SafeNativeMethods.mwle_fnGuiTreeViewCtrl_removeAllChildren(sbguitreeviewctrl, sba2);
}
/// <summary>
/// (GuiTreeViewCtrl, clear, void, 2, 2, () - empty tree)
/// 
/// </summary>

internal void fnGuiTreeViewCtrl_clear (string guitreeviewctrl)
{
var sbguitreeviewctrl = new StringBuilder(guitreeviewctrl, 1024);

SafeNativeMethods.mwle_fnGuiTreeViewCtrl_clear(sbguitreeviewctrl);
}
/// <summary>
/// (GuiTreeViewCtrl, getFirstRootItem, S32, 2, 2, Get id for root item.)
/// 
/// </summary>

internal int fnGuiTreeViewCtrl_getFirstRootItem (string guitreeviewctrl)
{
var sbguitreeviewctrl = new StringBuilder(guitreeviewctrl, 1024);

return  SafeNativeMethods.mwle_fnGuiTreeViewCtrl_getFirstRootItem(sbguitreeviewctrl);
}
/// <summary>
/// (GuiTreeViewCtrl, getChild, S32, 3, 3, (TreeItemId item))
/// 
/// </summary>

internal int fnGuiTreeViewCtrl_getChild (string guitreeviewctrl, string a2)
{
var sbguitreeviewctrl = new StringBuilder(guitreeviewctrl, 1024);
var sba2 = new StringBuilder(a2, 4096);

return  SafeNativeMethods.mwle_fnGuiTreeViewCtrl_getChild(sbguitreeviewctrl, sba2);
}
/// <summary>
/// (GuiTreeViewCtrl, buildVisibleTree, void, 2, 3, Build the visible tree)
/// 
/// </summary>

internal void fnGuiTreeViewCtrl_buildVisibleTree (string guitreeviewctrl, string a2)
{
var sbguitreeviewctrl = new StringBuilder(guitreeviewctrl, 1024);
var sba2 = new StringBuilder(a2, 4096);

SafeNativeMethods.mwle_fnGuiTreeViewCtrl_buildVisibleTree(sbguitreeviewctrl, sba2);
}
/// <summary>
/// (GuiTreeViewCtrl, getParent, S32, 3, 3, (TreeItemId item))
/// 
/// </summary>

internal int fnGuiTreeViewCtrl_getParent (string guitreeviewctrl, string a2)
{
var sbguitreeviewctrl = new StringBuilder(guitreeviewctrl, 1024);
var sba2 = new StringBuilder(a2, 4096);

return  SafeNativeMethods.mwle_fnGuiTreeViewCtrl_getParent(sbguitreeviewctrl, sba2);
}
/// <summary>
/// (GuiTreeViewCtrl, getNextSibling, S32, 3, 3, (TreeItemId item))
/// 
/// </summary>

internal int fnGuiTreeViewCtrl_getNextSibling (string guitreeviewctrl, string a2)
{
var sbguitreeviewctrl = new StringBuilder(guitreeviewctrl, 1024);
var sba2 = new StringBuilder(a2, 4096);

return  SafeNativeMethods.mwle_fnGuiTreeViewCtrl_getNextSibling(sbguitreeviewctrl, sba2);
}
/// <summary>
/// (GuiTreeViewCtrl, getPrevSibling, S32, 3, 3, (TreeItemId item))
/// 
/// </summary>

internal int fnGuiTreeViewCtrl_getPrevSibling (string guitreeviewctrl, string a2)
{
var sbguitreeviewctrl = new StringBuilder(guitreeviewctrl, 1024);
var sba2 = new StringBuilder(a2, 4096);

return  SafeNativeMethods.mwle_fnGuiTreeViewCtrl_getPrevSibling(sbguitreeviewctrl, sba2);
}
/// <summary>
/// (GuiTreeViewCtrl, getItemCount, S32, 2, 2, )
/// 
/// </summary>

internal int fnGuiTreeViewCtrl_getItemCount (string guitreeviewctrl)
{
var sbguitreeviewctrl = new StringBuilder(guitreeviewctrl, 1024);

return  SafeNativeMethods.mwle_fnGuiTreeViewCtrl_getItemCount(sbguitreeviewctrl);
}
/// <summary>
/// (GuiTreeViewCtrl, getSelectedItem, S32, 2, 3, ( int index=0 ) - Return the selected item at the given index.)
/// 
/// </summary>

internal int fnGuiTreeViewCtrl_getSelectedItem (string guitreeviewctrl, string a2)
{
var sbguitreeviewctrl = new StringBuilder(guitreeviewctrl, 1024);
var sba2 = new StringBuilder(a2, 4096);

return  SafeNativeMethods.mwle_fnGuiTreeViewCtrl_getSelectedItem(sbguitreeviewctrl, sba2);
}
/// <summary>
/// (GuiTreeViewCtrl, getSelectedObject, S32, 2, 3, ( int index=0 ) - Return the currently selected SimObject at the given index in inspector mode or -1)
/// 
/// </summary>

internal int fnGuiTreeViewCtrl_getSelectedObject (string guitreeviewctrl, string a2)
{
var sbguitreeviewctrl = new StringBuilder(guitreeviewctrl, 1024);
var sba2 = new StringBuilder(a2, 4096);

return  SafeNativeMethods.mwle_fnGuiTreeViewCtrl_getSelectedObject(sbguitreeviewctrl, sba2);
}
/// <summary>
/// (GuiTreeViewCtrl, getSelectedObjectList, const char*, 2, 2, 
///               Returns a space sperated list of all selected object ids.)
/// 
/// </summary>

internal string fnGuiTreeViewCtrl_getSelectedObjectList (string guitreeviewctrl)
{
var returnbuff = new StringBuilder(4096);
var sbguitreeviewctrl = new StringBuilder(guitreeviewctrl, 1024);

SafeNativeMethods.mwle_fnGuiTreeViewCtrl_getSelectedObjectList(sbguitreeviewctrl, returnbuff);
return returnbuff.ToString();

}
/// <summary>
/// (GuiTreeViewCtrl, moveItemUp, void, 3, 3, (TreeItemId item))
/// 
/// </summary>

internal void fnGuiTreeViewCtrl_moveItemUp (string guitreeviewctrl, string a2)
{
var sbguitreeviewctrl = new StringBuilder(guitreeviewctrl, 1024);
var sba2 = new StringBuilder(a2, 4096);

SafeNativeMethods.mwle_fnGuiTreeViewCtrl_moveItemUp(sbguitreeviewctrl, sba2);
}
/// <summary>
/// (GuiTreeViewCtrl, getSelectedItemsCount, S32, 2, 2, )
/// 
/// </summary>

internal int fnGuiTreeViewCtrl_getSelectedItemsCount (string guitreeviewctrl)
{
var sbguitreeviewctrl = new StringBuilder(guitreeviewctrl, 1024);

return  SafeNativeMethods.mwle_fnGuiTreeViewCtrl_getSelectedItemsCount(sbguitreeviewctrl);
}
/// <summary>
/// (GuiTreeViewCtrl, moveItemDown, void, 3, 3, (TreeItemId item))
/// 
/// </summary>

internal void fnGuiTreeViewCtrl_moveItemDown (string guitreeviewctrl, string a2)
{
var sbguitreeviewctrl = new StringBuilder(guitreeviewctrl, 1024);
var sba2 = new StringBuilder(a2, 4096);

SafeNativeMethods.mwle_fnGuiTreeViewCtrl_moveItemDown(sbguitreeviewctrl, sba2);
}
/// <summary>
/// (GuiTreeViewCtrl, getTextToRoot, const char*,4,4,(TreeItemId item,Delimiter=none) gets the text from the current node to the root, concatenating at each branch upward, with a specified delimiter optionally)
/// 
/// </summary>

internal string fnGuiTreeViewCtrl_getTextToRoot (string guitreeviewctrl, string a2, string a3)
{
var returnbuff = new StringBuilder(4096);
var sbguitreeviewctrl = new StringBuilder(guitreeviewctrl, 1024);
var sba2 = new StringBuilder(a2, 4096);
var sba3 = new StringBuilder(a3, 4096);

SafeNativeMethods.mwle_fnGuiTreeViewCtrl_getTextToRoot(sbguitreeviewctrl, sba2, sba3, returnbuff);
return returnbuff.ToString();

}
/// <summary>
/// (GuiTreeViewCtrl, getSelectedItemList,const char*, 2,2,returns a space seperated list of mulitple item ids)
/// 
/// </summary>

internal string fnGuiTreeViewCtrl_getSelectedItemList (string guitreeviewctrl)
{
var returnbuff = new StringBuilder(4096);
var sbguitreeviewctrl = new StringBuilder(guitreeviewctrl, 1024);

SafeNativeMethods.mwle_fnGuiTreeViewCtrl_getSelectedItemList(sbguitreeviewctrl, returnbuff);
return returnbuff.ToString();

}
/// <summary>
/// (GuiTreeViewCtrl, findItemByObjectId, S32, 3, 3, (find item by object id and returns the mId))
/// 
/// </summary>

internal int fnGuiTreeViewCtrl_findItemByObjectId (string guitreeviewctrl, string a2)
{
var sbguitreeviewctrl = new StringBuilder(guitreeviewctrl, 1024);
var sba2 = new StringBuilder(a2, 4096);

return  SafeNativeMethods.mwle_fnGuiTreeViewCtrl_findItemByObjectId(sbguitreeviewctrl, sba2);
}
/// <summary>
/// (GuiTreeViewCtrl, scrollVisibleByObjectId, S32, 3, 3, (show item by object id. returns true if sucessful.))
/// 
/// </summary>

internal int fnGuiTreeViewCtrl_scrollVisibleByObjectId (string guitreeviewctrl, string a2)
{
var sbguitreeviewctrl = new StringBuilder(guitreeviewctrl, 1024);
var sba2 = new StringBuilder(a2, 4096);

return  SafeNativeMethods.mwle_fnGuiTreeViewCtrl_scrollVisibleByObjectId(sbguitreeviewctrl, sba2);
}
/// <summary>
/// ( GuiTreeViewCtrl, sort, void, 2, 6, ( int parent, bool traverseHierarchy=false, bool parentsFirst=false, bool caseSensitive=true ) - Sorts all items of the given parent (or root).  With 'hierarchy', traverses hierarchy. )
/// 
/// </summary>

internal void fnGuiTreeViewCtrl_sort (string guitreeviewctrl, string a2, string a3, string a4, string a5)
{
var sbguitreeviewctrl = new StringBuilder(guitreeviewctrl, 1024);
var sba2 = new StringBuilder(a2, 4096);
var sba3 = new StringBuilder(a3, 4096);
var sba4 = new StringBuilder(a4, 4096);
var sba5 = new StringBuilder(a5, 4096);

SafeNativeMethods.mwle_fnGuiTreeViewCtrl_sort(sbguitreeviewctrl, sba2, sba3, sba4, sba5);
}
/// <summary>
/// ( GuiTreeViewCtrl, cancelRename, void, 2, 2, For internal use. )
/// 
/// </summary>

internal void fnGuiTreeViewCtrl_cancelRename (string guitreeviewctrl)
{
var sbguitreeviewctrl = new StringBuilder(guitreeviewctrl, 1024);

SafeNativeMethods.mwle_fnGuiTreeViewCtrl_cancelRename(sbguitreeviewctrl);
}
/// <summary>
/// ( GuiTreeViewCtrl, onRenameValidate, void, 2, 2, For internal use. )
/// 
/// </summary>

internal void fnGuiTreeViewCtrl_onRenameValidate (string guitreeviewctrl)
{
var sbguitreeviewctrl = new StringBuilder(guitreeviewctrl, 1024);

SafeNativeMethods.mwle_fnGuiTreeViewCtrl_onRenameValidate(sbguitreeviewctrl);
}
/// <summary>
/// ( GuiTreeViewCtrl, showItemRenameCtrl, void, 3, 3, ( TreeItemId id ) - Show the rename text field for the given item (only one at a time). )
/// 
/// </summary>

internal void fnGuiTreeViewCtrl_showItemRenameCtrl (string guitreeviewctrl, string a2)
{
var sbguitreeviewctrl = new StringBuilder(guitreeviewctrl, 1024);
var sba2 = new StringBuilder(a2, 4096);

SafeNativeMethods.mwle_fnGuiTreeViewCtrl_showItemRenameCtrl(sbguitreeviewctrl, sba2);
}
/// <summary>
/// ( GuiTreeViewCtrl, setDebug, void, 2, 3, ( bool value=true ) - Enable/disable debug output. )
/// 
/// </summary>

internal void fnGuiTreeViewCtrl_setDebug (string guitreeviewctrl, string a2)
{
var sbguitreeviewctrl = new StringBuilder(guitreeviewctrl, 1024);
var sba2 = new StringBuilder(a2, 4096);

SafeNativeMethods.mwle_fnGuiTreeViewCtrl_setDebug(sbguitreeviewctrl, sba2);
}
/// <summary>
/// Get the ID of the item whose text matches the given @a text.
///    @param text Item text to match.
///    @return ID of the item or -1 if no item matches the given text. )
/// 
/// </summary>

internal int fnGuiTreeViewCtrl_findItemByName (string guitreeviewctrl, string text)
{
var sbguitreeviewctrl = new StringBuilder(guitreeviewctrl, 1024);
var sbtext = new StringBuilder(text, 4096);

return  SafeNativeMethods.mwle_fnGuiTreeViewCtrl_findItemByName(sbguitreeviewctrl, sbtext);
}
/// <summary>
/// Get the ID of the item whose value matches @a value.
///    @param value Value text to match.
///    @return ID of the item or -1 if no item has the given value. )
/// 
/// </summary>

internal int fnGuiTreeViewCtrl_findItemByValue (string guitreeviewctrl, string value)
{
var sbguitreeviewctrl = new StringBuilder(guitreeviewctrl, 1024);
var sbvalue = new StringBuilder(value, 4096);

return  SafeNativeMethods.mwle_fnGuiTreeViewCtrl_findItemByValue(sbguitreeviewctrl, sbvalue);
}
/// <summary>
/// Get the child item of the given parent item whose text matches @a childName.
///    @param parentId Item ID of the parent in which to look for the child.
///    @param childName Text of the child item to find.
///    @return ID of the child item or -1 if no child in @a parentId has the given text @a childName.
///    @note This method does not recurse, i.e. it only looks for direct children. )
/// 
/// </summary>

internal int fnGuiTreeViewCtrl_findChildItemByName (string guitreeviewctrl, int parentId, string childName)
{
var sbguitreeviewctrl = new StringBuilder(guitreeviewctrl, 1024);
var sbchildName = new StringBuilder(childName, 4096);

return  SafeNativeMethods.mwle_fnGuiTreeViewCtrl_findChildItemByName(sbguitreeviewctrl, parentId, sbchildName);
}
/// <summary>
/// , , 0, 0 ),
///    Add a new item to the tree.
///    @param parentId Item ID of parent to which to add the item as a child.  0 is root item.
///    @param text Text to display on the item in the tree.
///    @param value Behind-the-scenes value of the item.
///    @param icon
///    @param normalImage
///    @param expandedImage
///    @return The ID of the newly added item. )
/// 
/// </summary>

internal int fnGuiTreeViewCtrl_insertItem (string guitreeviewctrl, int parentId, string text, string value, string icon, int normalImage, int expandedImage)
{
var sbguitreeviewctrl = new StringBuilder(guitreeviewctrl, 1024);
var sbtext = new StringBuilder(text, 4096);
var sbvalue = new StringBuilder(value, 4096);
var sbicon = new StringBuilder(icon, 4096);

return  SafeNativeMethods.mwle_fnGuiTreeViewCtrl_insertItem(sbguitreeviewctrl, parentId, sbtext, sbvalue, sbicon, normalImage, expandedImage);
}
/// <summary>
/// Set whether the current selection can be changed by the user or not.
///    @param lock If true, the current selection is frozen and cannot be changed.  If false, 
///       the selection may be modified. )
/// 
/// </summary>

internal void fnGuiTreeViewCtrl_lockSelection (string guitreeviewctrl, bool xlock)
{
var sbguitreeviewctrl = new StringBuilder(guitreeviewctrl, 1024);

SafeNativeMethods.mwle_fnGuiTreeViewCtrl_lockSelection(sbguitreeviewctrl, xlock);
}
/// <summary>
/// Call SimObject::setHidden( @a state ) on all objects in the current selection.
///    @param state Visibility state to set objects in selection to. )
/// 
/// </summary>

internal void fnGuiTreeViewCtrl_hideSelection (string guitreeviewctrl, bool state)
{
var sbguitreeviewctrl = new StringBuilder(guitreeviewctrl, 1024);

SafeNativeMethods.mwle_fnGuiTreeViewCtrl_hideSelection(sbguitreeviewctrl, state);
}
/// <summary>
/// Toggle the locked state of all objects in the current selection. )
/// 
/// </summary>

internal void fnGuiTreeViewCtrl_toggleLockSelection (string guitreeviewctrl)
{
var sbguitreeviewctrl = new StringBuilder(guitreeviewctrl, 1024);

SafeNativeMethods.mwle_fnGuiTreeViewCtrl_toggleLockSelection(sbguitreeviewctrl);
}
/// <summary>
/// Toggle the hidden state of all objects in the current selection. )
/// 
/// </summary>

internal void fnGuiTreeViewCtrl_toggleHideSelection (string guitreeviewctrl)
{
var sbguitreeviewctrl = new StringBuilder(guitreeviewctrl, 1024);

SafeNativeMethods.mwle_fnGuiTreeViewCtrl_toggleHideSelection(sbguitreeviewctrl);
}
/// <summary>
/// Unselect all currently selected items. )
/// 
/// </summary>

internal void fnGuiTreeViewCtrl_clearSelection (string guitreeviewctrl)
{
var sbguitreeviewctrl = new StringBuilder(guitreeviewctrl, 1024);

SafeNativeMethods.mwle_fnGuiTreeViewCtrl_clearSelection(sbguitreeviewctrl);
}
/// <summary>
/// Delete all items/objects in the current selection. )
/// 
/// </summary>

internal void fnGuiTreeViewCtrl_deleteSelection (string guitreeviewctrl)
{
var sbguitreeviewctrl = new StringBuilder(guitreeviewctrl, 1024);

SafeNativeMethods.mwle_fnGuiTreeViewCtrl_deleteSelection(sbguitreeviewctrl);
}
/// <summary>
/// Add an item/object to the current selection.
///    @param id ID of item/object to add to the selection.
///    @param isLastSelection Whether there are more pending items/objects to be added to the selection.  If false, 
///       the control will defer refreshing the tree and wait until addSelection() is called with this parameter set 
///       to true. )
/// 
/// </summary>

internal void fnGuiTreeViewCtrl_addSelection (string guitreeviewctrl, int id, bool isLastSelection)
{
var sbguitreeviewctrl = new StringBuilder(guitreeviewctrl, 1024);

SafeNativeMethods.mwle_fnGuiTreeViewCtrl_addSelection(sbguitreeviewctrl, id, isLastSelection);
}
/// <summary>
/// Check whether the given item is currently selected in the tree.
///    @param id Item/object ID.
///    @return True if the given item/object is currently selected in the tree. )
/// 
/// </summary>

internal bool fnGuiTreeViewCtrl_isItemSelected (string guitreeviewctrl, int id)
{
var sbguitreeviewctrl = new StringBuilder(guitreeviewctrl, 1024);

return  SafeNativeMethods.mwle_fnGuiTreeViewCtrl_isItemSelected(sbguitreeviewctrl, id)>=1;
}
/// <summary>
/// Get the current filter expression.  Only tree items whose text matches this expression 
///    are displayed.  By default, the expression is empty and all items are shown.
///    @return The current filter pattern or an empty string if no filter pattern is currently active.
///    @see setFilterText
///    @see clearFilterText )
/// 
/// </summary>

internal string fnGuiTreeViewCtrl_getFilterText (string guitreeviewctrl)
{
var returnbuff = new StringBuilder(4096);
var sbguitreeviewctrl = new StringBuilder(guitreeviewctrl, 1024);

SafeNativeMethods.mwle_fnGuiTreeViewCtrl_getFilterText(sbguitreeviewctrl, returnbuff);
return returnbuff.ToString();

}
/// <summary>
/// Set the pattern by which to filter items in the tree.  Only items in the tree whose text 
///    matches this pattern are displayed.
///    @param pattern New pattern based on which visible items in the tree should be filtered.  If empty, all items become visible.
///    @see getFilterText
///    @see clearFilterText )
/// 
/// </summary>

internal void fnGuiTreeViewCtrl_setFilterText (string guitreeviewctrl, string pattern)
{
var sbguitreeviewctrl = new StringBuilder(guitreeviewctrl, 1024);
var sbpattern = new StringBuilder(pattern, 4096);

SafeNativeMethods.mwle_fnGuiTreeViewCtrl_setFilterText(sbguitreeviewctrl, sbpattern);
}
/// <summary>
/// Clear the current item filtering pattern.
///    @see setFilterText
///    @see getFilterText )
/// 
/// </summary>

internal void fnGuiTreeViewCtrl_clearFilterText (string guitreeviewctrl)
{
var sbguitreeviewctrl = new StringBuilder(guitreeviewctrl, 1024);

SafeNativeMethods.mwle_fnGuiTreeViewCtrl_clearFilterText(sbguitreeviewctrl);
}
/// <summary>
/// ( GuiCanvas, pushDialog, void, 3, 5, (GuiControl ctrl, int layer=0, bool center=false)
/// 			  @hide)
/// 
/// </summary>

internal void fnGuiCanvas_pushDialog (string guicanvas, string a2, string a3, string a4)
{
var sbguicanvas = new StringBuilder(guicanvas, 1024);
var sba2 = new StringBuilder(a2, 4096);
var sba3 = new StringBuilder(a3, 4096);
var sba4 = new StringBuilder(a4, 4096);

SafeNativeMethods.mwle_fnGuiCanvas_pushDialog(sbguicanvas, sba2, sba3, sba4);
}
/// <summary>
/// ( GuiCanvas, popDialog, void, 2, 3, (GuiControl ctrl=NULL)
/// 			  @hide)
/// 
/// </summary>

internal void fnGuiCanvas_popDialog (string guicanvas, string a2)
{
var sbguicanvas = new StringBuilder(guicanvas, 1024);
var sba2 = new StringBuilder(a2, 4096);

SafeNativeMethods.mwle_fnGuiCanvas_popDialog(sbguicanvas, sba2);
}
/// <summary>
/// ( GuiCanvas, popLayer, void, 2, 3, (int layer) 
/// 			  @hide)
/// 
/// </summary>

internal void fnGuiCanvas_popLayer (string guicanvas, string a2)
{
var sbguicanvas = new StringBuilder(guicanvas, 1024);
var sba2 = new StringBuilder(a2, 4096);

SafeNativeMethods.mwle_fnGuiCanvas_popLayer(sbguicanvas, sba2);
}
/// <summary>
/// ( GuiCanvas, setCursorPos, void, 3, 4, (Point2I pos)
/// 			  @hide)
/// 
/// </summary>

internal void fnGuiCanvas_setCursorPos (string guicanvas, string a2, string a3)
{
var sbguicanvas = new StringBuilder(guicanvas, 1024);
var sba2 = new StringBuilder(a2, 4096);
var sba3 = new StringBuilder(a3, 4096);

SafeNativeMethods.mwle_fnGuiCanvas_setCursorPos(sbguicanvas, sba2, sba3);
}
/// <summary>
/// ( GuiCanvas, isFullscreen, bool, 2, 2, () - Is this canvas currently fullscreen? )
/// 
/// </summary>

internal bool fnGuiCanvas_isFullscreen (string guicanvas)
{
var sbguicanvas = new StringBuilder(guicanvas, 1024);

return  SafeNativeMethods.mwle_fnGuiCanvas_isFullscreen(sbguicanvas)>=1;
}
/// <summary>
/// ( GuiCanvas, minimizeWindow, void, 2, 2, () - minimize this canvas' window. )
/// 
/// </summary>

internal void fnGuiCanvas_minimizeWindow (string guicanvas)
{
var sbguicanvas = new StringBuilder(guicanvas, 1024);

SafeNativeMethods.mwle_fnGuiCanvas_minimizeWindow(sbguicanvas);
}
/// <summary>
/// ( GuiCanvas, isMinimized, bool, 2, 2, () )
/// 
/// </summary>

internal bool fnGuiCanvas_isMinimized (string guicanvas)
{
var sbguicanvas = new StringBuilder(guicanvas, 1024);

return  SafeNativeMethods.mwle_fnGuiCanvas_isMinimized(sbguicanvas)>=1;
}
/// <summary>
/// ( GuiCanvas, isMaximized, bool, 2, 2, () )
/// 
/// </summary>

internal bool fnGuiCanvas_isMaximized (string guicanvas)
{
var sbguicanvas = new StringBuilder(guicanvas, 1024);

return  SafeNativeMethods.mwle_fnGuiCanvas_isMaximized(sbguicanvas)>=1;
}
/// <summary>
/// ( GuiCanvas, maximizeWindow, void, 2, 2, () - maximize this canvas' window. )
/// 
/// </summary>

internal void fnGuiCanvas_maximizeWindow (string guicanvas)
{
var sbguicanvas = new StringBuilder(guicanvas, 1024);

SafeNativeMethods.mwle_fnGuiCanvas_maximizeWindow(sbguicanvas);
}
/// <summary>
/// ( GuiCanvas, restoreWindow, void, 2, 2, () - restore this canvas' window. )
/// 
/// </summary>

internal void fnGuiCanvas_restoreWindow (string guicanvas)
{
var sbguicanvas = new StringBuilder(guicanvas, 1024);

SafeNativeMethods.mwle_fnGuiCanvas_restoreWindow(sbguicanvas);
}
/// <summary>
/// ( GuiCanvas, setFocus, void, 2,2, () - Claim OS input focus for this canvas' window.)
/// 
/// </summary>

internal void fnGuiCanvas_setFocus (string guicanvas)
{
var sbguicanvas = new StringBuilder(guicanvas, 1024);

SafeNativeMethods.mwle_fnGuiCanvas_setFocus(sbguicanvas);
}
/// <summary>
/// ( GuiCanvas, setVideoMode, void, 5, 8,
///                (int width, int height, bool fullscreen, [int bitDepth], [int refreshRate], [int antialiasLevel] )
///                Change the video mode of this canvas. This method has the side effect of setting the $pref::Video::mode to the new values.
///                \\param width The screen width to set.
///                \\param height The screen height to set.
///                \\param fullscreen Specify true to run fullscreen or false to run in a window
///                \\param bitDepth [optional] The desired bit-depth. Defaults to the current setting. This parameter is ignored if you are running in a window.
///                \\param refreshRate [optional] The desired refresh rate. Defaults to the current setting. This parameter is ignored if you are running in a window
/// 					\\param antialiasLevel [optional] The level of anti-aliasing to apply 0 = none )
/// 
/// </summary>

internal void fnGuiCanvas_setVideoMode (string guicanvas, string a2, string a3, string a4, string a5, string a6, string a7)
{
var sbguicanvas = new StringBuilder(guicanvas, 1024);
var sba2 = new StringBuilder(a2, 4096);
var sba3 = new StringBuilder(a3, 4096);
var sba4 = new StringBuilder(a4, 4096);
var sba5 = new StringBuilder(a5, 4096);
var sba6 = new StringBuilder(a6, 4096);
var sba7 = new StringBuilder(a7, 4096);

SafeNativeMethods.mwle_fnGuiCanvas_setVideoMode(sbguicanvas, sba2, sba3, sba4, sba5, sba6, sba7);
}
/// <summary>
/// @brief Used to exclude/prevent all other instances using the same identifier specified
/// 
/// 					 @note Not used on OSX, Xbox, or in Win debug builds
/// 
/// 					 @param appIdentifier Name of the app set up for exclusive use.
/// 
/// 					 @return False if another app is running that specified the same appIdentifier
/// 
/// 					 @ingroup Platform
/// 					 @ingroup GuiCore)
/// 
/// </summary>

internal bool fn_excludeOtherInstance (string appIdentifer)
{
var sbappIdentifer = new StringBuilder(appIdentifer, 4096);

return  SafeNativeMethods.mwle_fn_excludeOtherInstance(sbappIdentifer)>=1;
}
/// <summary>
/// @brief Get the GuiControl which is being used as the content.
/// 
/// 				   @tsexample
/// 				   Canvas.getContent();
/// 				   @endtsexample
/// 
/// 				   @return ID of current content control)
/// 
/// </summary>

internal int fnGuiCanvas_getContent (string guicanvas)
{
var sbguicanvas = new StringBuilder(guicanvas, 1024);

return  SafeNativeMethods.mwle_fnGuiCanvas_getContent(sbguicanvas);
}
/// <summary>
/// @brief Set the content of the canvas to a specified control.
/// 
/// 				   @param ctrl ID or name of GuiControl to set content to
/// 
/// 				   @tsexample
/// 				   Canvas.setContent(PlayGui);
/// 				   @endtsexample)
/// 
/// </summary>

internal void fnGuiCanvas_setContent (string guicanvas, string ctrl)
{
var sbguicanvas = new StringBuilder(guicanvas, 1024);
var sbctrl = new StringBuilder(ctrl, 1024);

SafeNativeMethods.mwle_fnGuiCanvas_setContent(sbguicanvas, sbctrl);
}
/// <summary>
/// @brief Turns on the mouse cursor.
/// 				   @tsexample
/// 				   Canvas.cursorOn();
/// 				   @endtsexample)
/// 
/// </summary>

internal void fnGuiCanvas_cursorOn (string guicanvas)
{
var sbguicanvas = new StringBuilder(guicanvas, 1024);

SafeNativeMethods.mwle_fnGuiCanvas_cursorOn(sbguicanvas);
}
/// <summary>
/// @brief Turns on the mouse off.
/// 				   @tsexample
/// 				   Canvas.cursorOff();
/// 				   @endtsexample)
/// 
/// </summary>

internal void fnGuiCanvas_cursorOff (string guicanvas)
{
var sbguicanvas = new StringBuilder(guicanvas, 1024);

SafeNativeMethods.mwle_fnGuiCanvas_cursorOff(sbguicanvas);
}
/// <summary>
/// @brief Sets the cursor for the canvas.
/// 
/// 				   @param cursor Name of the GuiCursor to use
/// 
/// 				   @tsexample
/// 				   Canvas.setCursor(\"DefaultCursor\");
/// 				   @endtsexample)
/// 
/// </summary>

internal void fnGuiCanvas_setCursor (string guicanvas, string cursor)
{
var sbguicanvas = new StringBuilder(guicanvas, 1024);
var sbcursor = new StringBuilder(cursor, 1024);

SafeNativeMethods.mwle_fnGuiCanvas_setCursor(sbguicanvas, sbcursor);
}
/// <summary>
/// @brief This turns on/off front-buffer rendering.
/// 
/// 				   @param enable True if all rendering should be done to the front buffer
/// 
/// 				   @tsexample
/// 				   Canvas.renderFront(false);
/// 				   @endtsexample)
/// 
/// </summary>

internal void fnGuiCanvas_renderFront (string guicanvas, bool enable)
{
var sbguicanvas = new StringBuilder(guicanvas, 1024);

SafeNativeMethods.mwle_fnGuiCanvas_renderFront(sbguicanvas, enable);
}
/// <summary>
/// @brief Enable rendering of the cursor.
/// 
/// 				   @tsexample
/// 				   Canvas.showCursor();
/// 				   @endtsexample)
/// 
/// </summary>

internal void fnGuiCanvas_showCursor (string guicanvas)
{
var sbguicanvas = new StringBuilder(guicanvas, 1024);

SafeNativeMethods.mwle_fnGuiCanvas_showCursor(sbguicanvas);
}
/// <summary>
/// @brief Disable rendering of the cursor.
/// 
/// 				   @tsexample
/// 				   Canvas.hideCursor();
/// 				   @endtsexample)
/// 
/// </summary>

internal void fnGuiCanvas_hideCursor (string guicanvas)
{
var sbguicanvas = new StringBuilder(guicanvas, 1024);

SafeNativeMethods.mwle_fnGuiCanvas_hideCursor(sbguicanvas);
}
/// <summary>
/// @brief Determines if mouse cursor is enabled.
/// 
/// 				   @tsexample
/// 				   // Is cursor on?
/// 				   if(Canvas.isCursorOn())
/// 				   	echo(\"Canvas cursor is on\");
/// 				   @endtsexample
/// 				   @return Returns true if the cursor is on.)
/// 
/// </summary>

internal bool fnGuiCanvas_isCursorOn (string guicanvas)
{
var sbguicanvas = new StringBuilder(guicanvas, 1024);

return  SafeNativeMethods.mwle_fnGuiCanvas_isCursorOn(sbguicanvas)>=1;
}
/// <summary>
/// @brief Determines if mouse cursor is rendering.
/// 
/// 				   @tsexample
/// 				   // Is cursor rendering?
/// 				   if(Canvas.isCursorShown())
/// 				   	echo(\"Canvas cursor is rendering\");
/// 				   @endtsexample
/// 				   @return Returns true if the cursor is rendering.)
/// 
/// </summary>

internal bool fnGuiCanvas_isCursorShown (string guicanvas)
{
var sbguicanvas = new StringBuilder(guicanvas, 1024);

return  SafeNativeMethods.mwle_fnGuiCanvas_isCursorShown(sbguicanvas)>=1;
}
/// <summary>
/// @brief Force canvas to redraw.
///                If the elapsed time is greater than the time since the last paint 
///                then the repaint will be skipped.
///                @param elapsedMS The optional elapsed time in milliseconds.
/// 
/// 				   @tsexample
/// 				   Canvas.repaint();
/// 				   @endtsexample)
/// 
/// </summary>

internal void fnGuiCanvas_repaint (string guicanvas, int elapsedMS)
{
var sbguicanvas = new StringBuilder(guicanvas, 1024);

SafeNativeMethods.mwle_fnGuiCanvas_repaint(sbguicanvas, elapsedMS);
}
/// <summary>
/// @brief Reset the update regions for the canvas.
/// 
/// 				   @tsexample
/// 				   Canvas.reset();
/// 				   @endtsexample)
/// 
/// </summary>

internal void fnGuiCanvas_reset (string guicanvas)
{
var sbguicanvas = new StringBuilder(guicanvas, 1024);

SafeNativeMethods.mwle_fnGuiCanvas_reset(sbguicanvas);
}
/// <summary>
/// @brief Get the current position of the cursor.
/// 				   @param param Description
/// 				   @tsexample
/// 				   %cursorPos = Canvas.getCursorPos();
/// 				   @endtsexample
/// 				   @return Screen coordinates of mouse cursor, in format \"X Y\")
/// 
/// </summary>

internal string fnGuiCanvas_getCursorPos (string guicanvas)
{
var returnbuff = new StringBuilder(1024);
var sbguicanvas = new StringBuilder(guicanvas, 1024);

SafeNativeMethods.mwle_fnGuiCanvas_getCursorPos(sbguicanvas, returnbuff);
return returnbuff.ToString();

}
/// <summary>
/// @brief Gets the gui control under the mouse.
/// 				   @tsexample
/// 				   %underMouse = Canvas.getMouseControl();
/// 				   @endtsexample
/// 
/// 				   @return ID of the gui control, if one was found. NULL otherwise)
/// 
/// </summary>

internal int fnGuiCanvas_getMouseControl (string guicanvas)
{
var sbguicanvas = new StringBuilder(guicanvas, 1024);

return  SafeNativeMethods.mwle_fnGuiCanvas_getMouseControl(sbguicanvas);
}
/// <summary>
/// @brief Returns the dimensions of the canvas
/// 
/// 				   @tsexample
/// 				   %extent = Canvas.getExtent();
/// 				   @endtsexample
/// 
/// 				   @return Width and height of canvas. Formatted as numerical values in a single string \"# #\")
/// 
/// </summary>

internal string fnGuiCanvas_getExtent (string guicanvas)
{
var returnbuff = new StringBuilder(1024);
var sbguicanvas = new StringBuilder(guicanvas, 1024);

SafeNativeMethods.mwle_fnGuiCanvas_getExtent(sbguicanvas, returnbuff);
return returnbuff.ToString();

}
/// <summary>
/// @brief Change the title of the OS window.
/// 
/// 				   @param newTitle String containing the new name
/// 
/// 				   @tsexample
/// 				   Canvas.setWindowTitle(\"Documentation Rocks!\");
/// 				   @endtsexample)
/// 
/// </summary>

internal void fnGuiCanvas_setWindowTitle (string guicanvas, string newTitle)
{
var sbguicanvas = new StringBuilder(guicanvas, 1024);
var sbnewTitle = new StringBuilder(newTitle, 4096);

SafeNativeMethods.mwle_fnGuiCanvas_setWindowTitle(sbguicanvas, sbnewTitle);
}
/// <summary>
/// @brief Gets the current screen mode as a string.
/// 
/// 				   The return string will contain 5 values (width, height, fullscreen, bitdepth, refreshRate). 
/// 				   You will need to parse out each one for individual use.
/// 
/// 				   @tsexample
/// 				   %screenWidth = getWord(Canvas.getVideoMode(), 0);
/// 				   %screenHeight = getWord(Canvas.getVideoMode(), 1);
/// 				   %isFullscreen = getWord(Canvas.getVideoMode(), 2);
/// 				   %bitdepth = getWord(Canvas.getVideoMode(), 3);
/// 				   %refreshRate = getWord(Canvas.getVideoMode(), 4);
/// 				   @endtsexample
/// 
/// 				   @return String formatted with screen width, screen height, screen mode, bit depth, and refresh rate.)
/// 
/// </summary>

internal string fnGuiCanvas_getVideoMode (string guicanvas)
{
var returnbuff = new StringBuilder(4096);
var sbguicanvas = new StringBuilder(guicanvas, 1024);

SafeNativeMethods.mwle_fnGuiCanvas_getVideoMode(sbguicanvas, returnbuff);
return returnbuff.ToString();

}
/// <summary>
/// @brief Gets the number of modes available on this device.
/// 
/// 				   @param param Description
/// 
/// 				   @tsexample
/// 				   %modeCount = Canvas.getModeCount()
/// 				   @endtsexample
/// 
/// 				   @return The number of video modes supported by the device)
/// 
/// </summary>

internal int fnGuiCanvas_getModeCount (string guicanvas)
{
var sbguicanvas = new StringBuilder(guicanvas, 1024);

return  SafeNativeMethods.mwle_fnGuiCanvas_getModeCount(sbguicanvas);
}
/// <summary>
/// @brief Gets information on the specified mode of this device.
/// 				   @param modeId Index of the mode to get data from.
/// 				   @return A video mode string given an adapter and mode index.
/// 				   @see GuiCanvas::getVideoMode())
/// 
/// </summary>

internal string fnGuiCanvas_getMode (string guicanvas, int modeId)
{
var returnbuff = new StringBuilder(4096);
var sbguicanvas = new StringBuilder(guicanvas, 1024);

SafeNativeMethods.mwle_fnGuiCanvas_getMode(sbguicanvas, modeId, returnbuff);
return returnbuff.ToString();

}
/// <summary>
/// @brief toggle canvas from fullscreen to windowed mode or back.
/// 
/// 				   @tsexample
/// 				   // If we are in windowed mode, the following will put is in fullscreen
/// 				   Canvas.toggleFullscreen();
/// 				   @endtsexample)
/// 
/// </summary>

internal void fnGuiCanvas_toggleFullscreen (string guicanvas)
{
var sbguicanvas = new StringBuilder(guicanvas, 1024);

SafeNativeMethods.mwle_fnGuiCanvas_toggleFullscreen(sbguicanvas);
}
/// <summary>
/// Translate a coordinate from canvas window-space to screen-space.
///    @param coordinate The coordinate in window-space.
///    @return The given coordinate translated to screen-space. )
/// 
/// </summary>

internal string fnGuiCanvas_clientToScreen (string guicanvas, string coordinate)
{
var returnbuff = new StringBuilder(1024);
var sbguicanvas = new StringBuilder(guicanvas, 1024);
var sbcoordinate = new StringBuilder(coordinate, 1024);

SafeNativeMethods.mwle_fnGuiCanvas_clientToScreen(sbguicanvas, sbcoordinate, returnbuff);
return returnbuff.ToString();

}
/// <summary>
/// Translate a coordinate from screen-space to canvas window-space.
///    @param coordinate The coordinate in screen-space.
///    @return The given coordinate translated to window-space. )
/// 
/// </summary>

internal string fnGuiCanvas_screenToClient (string guicanvas, string coordinate)
{
var returnbuff = new StringBuilder(1024);
var sbguicanvas = new StringBuilder(guicanvas, 1024);
var sbcoordinate = new StringBuilder(coordinate, 1024);

SafeNativeMethods.mwle_fnGuiCanvas_screenToClient(sbguicanvas, sbcoordinate, returnbuff);
return returnbuff.ToString();

}
/// <summary>
/// Get the current position of the platform window associated with the canvas.
///    @return The window position of the canvas in screen-space. )
/// 
/// </summary>

internal string fnGuiCanvas_getWindowPosition (string guicanvas)
{
var returnbuff = new StringBuilder(1024);
var sbguicanvas = new StringBuilder(guicanvas, 1024);

SafeNativeMethods.mwle_fnGuiCanvas_getWindowPosition(sbguicanvas, returnbuff);
return returnbuff.ToString();

}
/// <summary>
/// Set the position of the platform window associated with the canvas.
///    @param position The new position of the window in screen-space. )
/// 
/// </summary>

internal void fnGuiCanvas_setWindowPosition (string guicanvas, string position)
{
var sbguicanvas = new StringBuilder(guicanvas, 1024);
var sbposition = new StringBuilder(position, 1024);

SafeNativeMethods.mwle_fnGuiCanvas_setWindowPosition(sbguicanvas, sbposition);
}
/// <summary>
/// ( GuiControl, getValue, const char*, 2, 2, )
/// 
/// </summary>

internal string fnGuiControl_getValue (string guicontrol)
{
var returnbuff = new StringBuilder(4096);
var sbguicontrol = new StringBuilder(guicontrol, 1024);

SafeNativeMethods.mwle_fnGuiControl_getValue(sbguicontrol, returnbuff);
return returnbuff.ToString();

}
/// <summary>
/// ( GuiControl, makeFirstResponder, void, 3, 3, (bool isFirst))
/// 
/// </summary>

internal void fnGuiControl_makeFirstResponder (string guicontrol, string a2)
{
var sbguicontrol = new StringBuilder(guicontrol, 1024);
var sba2 = new StringBuilder(a2, 4096);

SafeNativeMethods.mwle_fnGuiControl_makeFirstResponder(sbguicontrol, sba2);
}
/// <summary>
/// ( GuiControl, isActive, bool, 2, 2, )
/// 
/// </summary>

internal bool fnGuiControl_isActive (string guicontrol)
{
var sbguicontrol = new StringBuilder(guicontrol, 1024);

return  SafeNativeMethods.mwle_fnGuiControl_isActive(sbguicontrol)>=1;
}
/// <summary>
/// ( GuiControl, setExtent, void, 3, 4,
///    ( Point2I p | int x, int y ) Set the width and height of the control.
///    @hide )
/// 
/// </summary>

internal void fnGuiControl_setExtent (string guicontrol, string a2, string a3)
{
var sbguicontrol = new StringBuilder(guicontrol, 1024);
var sba2 = new StringBuilder(a2, 4096);
var sba3 = new StringBuilder(a3, 4096);

SafeNativeMethods.mwle_fnGuiControl_setExtent(sbguicontrol, sba2, sba3);
}
/// <summary>
/// Find the topmost child control located at the given coordinates.
///    @note Only children that are both visible and have the 'modal' flag set in their profile will be considered in the search.
///    @param x The X coordinate in the control's own coordinate space.
///    @param y The Y coordinate in the control's own coordinate space.
///    @return The topmost child control at the given coordintes or the control on which the method was called if no matching child could be found.
///    @see GuiControlProfile::modal
///    @see findHitControls )
/// 
/// </summary>

internal string fnGuiControl_findHitControl (string guicontrol, int x, int y)
{
var returnbuff = new StringBuilder(1024);
var sbguicontrol = new StringBuilder(guicontrol, 1024);

SafeNativeMethods.mwle_fnGuiControl_findHitControl(sbguicontrol, x, y, returnbuff);
return returnbuff.ToString();

}
/// <summary>
/// Find all visible child controls that intersect with the given rectangle.
///    @note Invisible child controls will not be included in the search.
///    @param x The X coordinate of the rectangle's upper left corner in the control's own coordinate space.
///    @param y The Y coordinate of the rectangle's upper left corner in the control's own coordinate space.
///    @param width The width of the search rectangle in pixels.
///    @param height The height of the search rectangle in pixels.
///    @return A space-separated list of the IDs of all visible control objects intersecting the given rectangle.
///    @tsexample
///    // Lock all controls in the rectangle at x=10 and y=10 and the extent width=100 and height=100.
///    foreach$( %ctrl in %this.findHitControls( 10, 10, 100, 100 ) )
///       %ctrl.setLocked( true );
///    @endtsexample
///    @see findHitControl )
/// 
/// </summary>

internal string fnGuiControl_findHitControls (string guicontrol, int x, int y, int width, int height)
{
var returnbuff = new StringBuilder(4096);
var sbguicontrol = new StringBuilder(guicontrol, 1024);

SafeNativeMethods.mwle_fnGuiControl_findHitControls(sbguicontrol, x, y, width, height, returnbuff);
return returnbuff.ToString();

}
/// <summary>
/// Test whether the given control is a direct or indirect child to this control.
///    @param control The potential child control.
///    @return True if the given control is a direct or indirect child to this control. )
/// 
/// </summary>

internal bool fnGuiControl_controlIsChild (string guicontrol, string control)
{
var sbguicontrol = new StringBuilder(guicontrol, 1024);
var sbcontrol = new StringBuilder(control, 1024);

return  SafeNativeMethods.mwle_fnGuiControl_controlIsChild(sbguicontrol, sbcontrol)>=1;
}
/// <summary>
/// Test whether the control is the current first responder.
///    @return True if the control is the current first responder.
///    @see makeFirstResponder
///    @see setFirstResponder
///    @ref GuiControl_FirstResponders )
/// 
/// </summary>

internal bool fnGuiControl_isFirstResponder (string guicontrol)
{
var sbguicontrol = new StringBuilder(guicontrol, 1024);

return  SafeNativeMethods.mwle_fnGuiControl_isFirstResponder(sbguicontrol)>=1;
}
/// <summary>
/// Make this control the current first responder.
///    @note Only controls with a profile that has canKeyFocus enabled are able to become first responders.
///    @see GuiControlProfile::canKeyFocus
///    @see isFirstResponder
///    @ref GuiControl_FirstResponders )
/// 
/// </summary>

internal void fnGuiControl_setFirstResponder (string guicontrol)
{
var sbguicontrol = new StringBuilder(guicontrol, 1024);

SafeNativeMethods.mwle_fnGuiControl_setFirstResponder(sbguicontrol);
}
/// <summary>
/// Get the first responder set on this GuiControl tree.
///    @return The first responder set on the control's subtree.
///    @see isFirstResponder
///    @see makeFirstResponder
///    @see setFirstResponder
///    @ref GuiControl_FirstResponders )
/// 
/// </summary>

internal string fnGuiControl_getFirstResponder (string guicontrol)
{
var returnbuff = new StringBuilder(1024);
var sbguicontrol = new StringBuilder(guicontrol, 1024);

SafeNativeMethods.mwle_fnGuiControl_getFirstResponder(sbguicontrol, returnbuff);
return returnbuff.ToString();

}
/// <summary>
/// Clear this control from being the first responder in its hierarchy chain.
///    @param ignored Ignored.  Supported for backwards-compatibility. )
/// 
/// </summary>

internal void fnGuiControl_clearFirstResponder (string guicontrol, bool ignored)
{
var sbguicontrol = new StringBuilder(guicontrol, 1024);

SafeNativeMethods.mwle_fnGuiControl_clearFirstResponder(sbguicontrol, ignored);
}
/// <summary>
/// Test whether the given point lies within the rectangle of the control.
///    @param x X coordinate of the point in parent-relative coordinates.
///    @param y Y coordinate of the point in parent-relative coordinates.
///    @return True if the point is within the control, false if not.
///    @see getExtent
///    @see getPosition )
/// 
/// </summary>

internal bool fnGuiControl_pointInControl (string guicontrol, int x, int y)
{
var sbguicontrol = new StringBuilder(guicontrol, 1024);

return  SafeNativeMethods.mwle_fnGuiControl_pointInControl(sbguicontrol, x, y)>=1;
}
/// <summary>
/// Add the given control as a child to this control.
///    This is synonymous to calling SimGroup::addObject.
///    @param control The control to add as a child.
///    @note The control will retain its current position and size.
///    @see SimGroup::addObject
///    @ref GuiControl_Hierarchy )
/// 
/// </summary>

internal void fnGuiControl_addGuiControl (string guicontrol, string control)
{
var sbguicontrol = new StringBuilder(guicontrol, 1024);
var sbcontrol = new StringBuilder(control, 1024);

SafeNativeMethods.mwle_fnGuiControl_addGuiControl(sbguicontrol, sbcontrol);
}
/// <summary>
/// Get the canvas on which the control is placed.
///    @return The canvas on which the control's hierarchy is currently placed or 0 if the control is not currently placed on a GuiCanvas.
///    @see GuiControl_Hierarchy )
/// 
/// </summary>

internal string fnGuiControl_getRoot (string guicontrol)
{
var returnbuff = new StringBuilder(1024);
var sbguicontrol = new StringBuilder(guicontrol, 1024);

SafeNativeMethods.mwle_fnGuiControl_getRoot(sbguicontrol, returnbuff);
return returnbuff.ToString();

}
/// <summary>
/// Get the immediate parent control of the control.
///    @return The immediate parent GuiControl or 0 if the control is not parented to a GuiControl. )
/// 
/// </summary>

internal string fnGuiControl_getParent (string guicontrol)
{
var returnbuff = new StringBuilder(1024);
var sbguicontrol = new StringBuilder(guicontrol, 1024);

SafeNativeMethods.mwle_fnGuiControl_getParent(sbguicontrol, returnbuff);
return returnbuff.ToString();

}
/// <summary>
/// Indicates if the mouse is locked in this control.
///    @return True if the mouse is currently locked. )
/// 
/// </summary>

internal bool fnGuiControl_isMouseLocked (string guicontrol)
{
var sbguicontrol = new StringBuilder(guicontrol, 1024);

return  SafeNativeMethods.mwle_fnGuiControl_isMouseLocked(sbguicontrol)>=1;
}
/// <summary>
/// Set the value associated with the control.
///    @param value The new value for the control. )
/// 
/// </summary>

internal void fnGuiControl_setValue (string guicontrol, string value)
{
var sbguicontrol = new StringBuilder(guicontrol, 1024);
var sbvalue = new StringBuilder(value, 4096);

SafeNativeMethods.mwle_fnGuiControl_setValue(sbguicontrol, sbvalue);
}
/// <summary>
///  )
/// 
/// </summary>

internal void fnGuiControl_setActive (string guicontrol, bool state)
{
var sbguicontrol = new StringBuilder(guicontrol, 1024);

SafeNativeMethods.mwle_fnGuiControl_setActive(sbguicontrol, state);
}
/// <summary>
/// Test whether the control is currently set to be visible.
///    @return True if the control is currently set to be visible.
///    @note This method does not tell anything about whether the control is actually visible to 
///       the user at the moment.
///    @ref GuiControl_VisibleActive )
/// 
/// </summary>

internal bool fnGuiControl_isVisible (string guicontrol)
{
var sbguicontrol = new StringBuilder(guicontrol, 1024);

return  SafeNativeMethods.mwle_fnGuiControl_isVisible(sbguicontrol)>=1;
}
/// <summary>
/// Set whether the control is visible or not.
///    @param state The new visiblity flag state for the control.
///    @ref GuiControl_VisibleActive )
/// 
/// </summary>

internal void fnGuiControl_setVisible (string guicontrol, bool state)
{
var sbguicontrol = new StringBuilder(guicontrol, 1024);

SafeNativeMethods.mwle_fnGuiControl_setVisible(sbguicontrol, state);
}
/// <summary>
/// Test whether the control is currently awake.
///    If a control is awake it means that it is part of the GuiControl hierarchy of a GuiCanvas.
///    @return True if the control is awake.
///    @ref GuiControl_Waking )
/// 
/// </summary>

internal bool fnGuiControl_isAwake (string guicontrol)
{
var sbguicontrol = new StringBuilder(guicontrol, 1024);

return  SafeNativeMethods.mwle_fnGuiControl_isAwake(sbguicontrol)>=1;
}
/// <summary>
/// Set the control profile for the control to use.
///    The profile used by a control determines a great part of its behavior and appearance.
///    @param profile The new profile the control should use.
///    @ref GuiControl_Profiles )
/// 
/// </summary>

internal void fnGuiControl_setProfile (string guicontrol, string profile)
{
var sbguicontrol = new StringBuilder(guicontrol, 1024);
var sbprofile = new StringBuilder(profile, 1024);

SafeNativeMethods.mwle_fnGuiControl_setProfile(sbguicontrol, sbprofile);
}
/// <summary>
/// Resize and reposition the control using the give coordinates and dimensions.  Child controls 
///    will resize according to their layout behaviors.
///    @param x The new X coordinate of the control in its parent's coordinate space.
///    @param y The new Y coordinate of the control in its parent's coordinate space.
///    @param width The new width to which the control should be resized.
///    @param height The new height to which the control should be resized. )
/// 
/// </summary>

internal void fnGuiControl_resize (string guicontrol, int x, int y, int width, int height)
{
var sbguicontrol = new StringBuilder(guicontrol, 1024);

SafeNativeMethods.mwle_fnGuiControl_resize(sbguicontrol, x, y, width, height);
}
/// <summary>
/// Get the control's current position relative to its parent.
///    @return The coordinate of the control in its parent's coordinate space. )
/// 
/// </summary>

internal string fnGuiControl_getPosition (string guicontrol)
{
var returnbuff = new StringBuilder(1024);
var sbguicontrol = new StringBuilder(guicontrol, 1024);

SafeNativeMethods.mwle_fnGuiControl_getPosition(sbguicontrol, returnbuff);
return returnbuff.ToString();

}
/// <summary>
/// Get the coordinate of the control's center point relative to its parent.
///    @return The coordinate of the control's center point in parent-relative coordinates. )
/// 
/// </summary>

internal string fnGuiControl_getCenter (string guicontrol)
{
var returnbuff = new StringBuilder(1024);
var sbguicontrol = new StringBuilder(guicontrol, 1024);

SafeNativeMethods.mwle_fnGuiControl_getCenter(sbguicontrol, returnbuff);
return returnbuff.ToString();

}
/// <summary>
/// Set the control's position by its center point.
///    @param x The X coordinate of the new center point of the control relative to the control's parent.
///    @param y The Y coordinate of the new center point of the control relative to the control's parent. )
/// 
/// </summary>

internal void fnGuiControl_setCenter (string guicontrol, int x, int y)
{
var sbguicontrol = new StringBuilder(guicontrol, 1024);

SafeNativeMethods.mwle_fnGuiControl_setCenter(sbguicontrol, x, y);
}
/// <summary>
/// Get the coordinate of the control's center point in coordinates relative to the root control in its control hierarchy.
///    @Return the center coordinate of the control in root-relative coordinates. )
/// 
/// </summary>

internal string fnGuiControl_getGlobalCenter (string guicontrol)
{
var returnbuff = new StringBuilder(1024);
var sbguicontrol = new StringBuilder(guicontrol, 1024);

SafeNativeMethods.mwle_fnGuiControl_getGlobalCenter(sbguicontrol, returnbuff);
return returnbuff.ToString();

}
/// <summary>
/// Get the position of the control relative to the root of the GuiControl hierarchy it is contained in.
///    @return The control's current position in root-relative coordinates. )
/// 
/// </summary>

internal string fnGuiControl_getGlobalPosition (string guicontrol)
{
var returnbuff = new StringBuilder(1024);
var sbguicontrol = new StringBuilder(guicontrol, 1024);

SafeNativeMethods.mwle_fnGuiControl_getGlobalPosition(sbguicontrol, returnbuff);
return returnbuff.ToString();

}
/// <summary>
/// Set position of the control relative to the root of the GuiControl hierarchy it is contained in.
///    @param x The new X coordinate of the control relative to the root's upper left corner.
///    @param y The new Y coordinate of the control relative to the root's upper left corner. )
/// 
/// </summary>

internal void fnGuiControl_setPositionGlobal (string guicontrol, int x, int y)
{
var sbguicontrol = new StringBuilder(guicontrol, 1024);

SafeNativeMethods.mwle_fnGuiControl_setPositionGlobal(sbguicontrol, x, y);
}
/// <summary>
/// Position the control in the local space of the parent control.
///    @param x The new X coordinate of the control relative to its parent's upper left corner.
///    @param y The new Y coordinate of the control relative to its parent's upper left corner. )
/// 
/// </summary>

internal void fnGuiControl_setPosition (string guicontrol, int x, int y)
{
var sbguicontrol = new StringBuilder(guicontrol, 1024);

SafeNativeMethods.mwle_fnGuiControl_setPosition(sbguicontrol, x, y);
}
/// <summary>
/// Get the width and height of the control.
///    @return A point structure containing the width of the control in x and the height in y. )
/// 
/// </summary>

internal string fnGuiControl_getExtent (string guicontrol)
{
var returnbuff = new StringBuilder(1024);
var sbguicontrol = new StringBuilder(guicontrol, 1024);

SafeNativeMethods.mwle_fnGuiControl_getExtent(sbguicontrol, returnbuff);
return returnbuff.ToString();

}
/// <summary>
/// Get the minimum allowed size of the control.
///    @return The minimum size to which the control can be shrunk.
///    @see minExtent )
/// 
/// </summary>

internal string fnGuiControl_getMinExtent (string guicontrol)
{
var returnbuff = new StringBuilder(1024);
var sbguicontrol = new StringBuilder(guicontrol, 1024);

SafeNativeMethods.mwle_fnGuiControl_getMinExtent(sbguicontrol, returnbuff);
return returnbuff.ToString();

}
/// <summary>
/// Get the aspect ratio of the control's extents.
///    @return The width of the control divided by its height.
///    @see getExtent )
/// 
/// </summary>

internal float fnGuiControl_getAspect (string guicontrol)
{
var sbguicontrol = new StringBuilder(guicontrol, 1024);

return  SafeNativeMethods.mwle_fnGuiControl_getAspect(sbguicontrol);
}
/// <summary>
/// ( GuiControlProfile, getStringWidth, S32, 3, 3, ( pString ) )
/// 
/// </summary>

internal int fnGuiControlProfile_getStringWidth (string guicontrolprofile, string a2)
{
var sbguicontrolprofile = new StringBuilder(guicontrolprofile, 1024);
var sba2 = new StringBuilder(a2, 4096);

return  SafeNativeMethods.mwle_fnGuiControlProfile_getStringWidth(sbguicontrolprofile, sba2);
}
/// <summary>
/// (DbgFileView, setCurrentLine, void, 4, 4, (int line, bool selected)
///               Set the current highlighted line.)
/// 
/// </summary>

internal void fnDbgFileView_setCurrentLine (string dbgfileview, string a2, string a3)
{
var sbdbgfileview = new StringBuilder(dbgfileview, 1024);
var sba2 = new StringBuilder(a2, 4096);
var sba3 = new StringBuilder(a3, 4096);

SafeNativeMethods.mwle_fnDbgFileView_setCurrentLine(sbdbgfileview, sba2, sba3);
}
/// <summary>
/// (DbgFileView, getCurrentLine, const char *, 2, 2, ()
///               Get the currently executing file and line, if any.
///               @returns A string containing the file, a tab, and then the line number.
///                Use getField() with this.)
/// 
/// </summary>

internal string fnDbgFileView_getCurrentLine (string dbgfileview)
{
var returnbuff = new StringBuilder(4096);
var sbdbgfileview = new StringBuilder(dbgfileview, 1024);

SafeNativeMethods.mwle_fnDbgFileView_getCurrentLine(sbdbgfileview, returnbuff);
return returnbuff.ToString();

}
/// <summary>
/// (DbgFileView, open, bool, 3, 3, (string filename)
///               Open a file for viewing.
///               @note This loads the file from the local system.)
/// 
/// </summary>

internal bool fnDbgFileView_open (string dbgfileview, string a2)
{
var sbdbgfileview = new StringBuilder(dbgfileview, 1024);
var sba2 = new StringBuilder(a2, 4096);

return  SafeNativeMethods.mwle_fnDbgFileView_open(sbdbgfileview, sba2)>=1;
}
/// <summary>
/// (DbgFileView, clearBreakPositions, void, 2, 2, ()
///               Clear all break points in the current file.)
/// 
/// </summary>

internal void fnDbgFileView_clearBreakPositions (string dbgfileview)
{
var sbdbgfileview = new StringBuilder(dbgfileview, 1024);

SafeNativeMethods.mwle_fnDbgFileView_clearBreakPositions(sbdbgfileview);
}
/// <summary>
/// (DbgFileView, setBreakPosition, void, 3, 3, (int line)
///               Set a breakpoint at the specified line.)
/// 
/// </summary>

internal void fnDbgFileView_setBreakPosition (string dbgfileview, string a2)
{
var sbdbgfileview = new StringBuilder(dbgfileview, 1024);
var sba2 = new StringBuilder(a2, 4096);

SafeNativeMethods.mwle_fnDbgFileView_setBreakPosition(sbdbgfileview, sba2);
}
/// <summary>
/// (DbgFileView, setBreak, void, 3, 3, (int line)
///               Set a breakpoint at the specified line.)
/// 
/// </summary>

internal void fnDbgFileView_setBreak (string dbgfileview, string a2)
{
var sbdbgfileview = new StringBuilder(dbgfileview, 1024);
var sba2 = new StringBuilder(a2, 4096);

SafeNativeMethods.mwle_fnDbgFileView_setBreak(sbdbgfileview, sba2);
}
/// <summary>
/// (DbgFileView, removeBreak, void, 3, 3, (int line)
///               Remove a breakpoint from the specified line.)
/// 
/// </summary>

internal void fnDbgFileView_removeBreak (string dbgfileview, string a2)
{
var sbdbgfileview = new StringBuilder(dbgfileview, 1024);
var sba2 = new StringBuilder(a2, 4096);

SafeNativeMethods.mwle_fnDbgFileView_removeBreak(sbdbgfileview, sba2);
}
/// <summary>
/// (DbgFileView, findString, bool, 3, 3, (string findThis)
///               Find the specified string in the currently viewed file and 
///               scroll it into view.)
/// 
/// </summary>

internal bool fnDbgFileView_findString (string dbgfileview, string a2)
{
var sbdbgfileview = new StringBuilder(dbgfileview, 1024);
var sba2 = new StringBuilder(a2, 4096);

return  SafeNativeMethods.mwle_fnDbgFileView_findString(sbdbgfileview, sba2)>=1;
}
/// <summary>
/// ( GuiEditCtrl, getContentControl, S32, 2, 2, () - Return the toplevel control edited inside the GUI editor. )
/// 
/// </summary>

internal int fnGuiEditCtrl_getContentControl (string guieditctrl)
{
var sbguieditctrl = new StringBuilder(guieditctrl, 1024);

return  SafeNativeMethods.mwle_fnGuiEditCtrl_getContentControl(sbguieditctrl);
}
/// <summary>
/// ( GuiEditCtrl, setContentControl, void, 3, 3, ( GuiControl ctrl ) - Set the toplevel control to edit in the GUI editor. )
/// 
/// </summary>

internal void fnGuiEditCtrl_setContentControl (string guieditctrl, string a2)
{
var sbguieditctrl = new StringBuilder(guieditctrl, 1024);
var sba2 = new StringBuilder(a2, 4096);

SafeNativeMethods.mwle_fnGuiEditCtrl_setContentControl(sbguieditctrl, sba2);
}
/// <summary>
/// ( GuiEditCtrl, addNewCtrl, void, 3, 3, (GuiControl ctrl))
/// 
/// </summary>

internal void fnGuiEditCtrl_addNewCtrl (string guieditctrl, string a2)
{
var sbguieditctrl = new StringBuilder(guieditctrl, 1024);
var sba2 = new StringBuilder(a2, 4096);

SafeNativeMethods.mwle_fnGuiEditCtrl_addNewCtrl(sbguieditctrl, sba2);
}
/// <summary>
/// ( GuiEditCtrl, addSelection, void, 3, 3, selects a control.)
/// 
/// </summary>

internal void fnGuiEditCtrl_addSelection (string guieditctrl, string a2)
{
var sbguieditctrl = new StringBuilder(guieditctrl, 1024);
var sba2 = new StringBuilder(a2, 4096);

SafeNativeMethods.mwle_fnGuiEditCtrl_addSelection(sbguieditctrl, sba2);
}
/// <summary>
/// ( GuiEditCtrl, removeSelection, void, 3, 3, deselects a control.)
/// 
/// </summary>

internal void fnGuiEditCtrl_removeSelection (string guieditctrl, string a2)
{
var sbguieditctrl = new StringBuilder(guieditctrl, 1024);
var sba2 = new StringBuilder(a2, 4096);

SafeNativeMethods.mwle_fnGuiEditCtrl_removeSelection(sbguieditctrl, sba2);
}
/// <summary>
/// ( GuiEditCtrl, clearSelection, void, 2, 2, Clear selected controls list.)
/// 
/// </summary>

internal void fnGuiEditCtrl_clearSelection (string guieditctrl)
{
var sbguieditctrl = new StringBuilder(guieditctrl, 1024);

SafeNativeMethods.mwle_fnGuiEditCtrl_clearSelection(sbguieditctrl);
}
/// <summary>
/// ( GuiEditCtrl, select, void, 3, 3, (GuiControl ctrl))
/// 
/// </summary>

internal void fnGuiEditCtrl_select (string guieditctrl, string a2)
{
var sbguieditctrl = new StringBuilder(guieditctrl, 1024);
var sba2 = new StringBuilder(a2, 4096);

SafeNativeMethods.mwle_fnGuiEditCtrl_select(sbguieditctrl, sba2);
}
/// <summary>
/// ( GuiEditCtrl, setCurrentAddSet, void, 3, 3, (GuiControl ctrl))
/// 
/// </summary>

internal void fnGuiEditCtrl_setCurrentAddSet (string guieditctrl, string a2)
{
var sbguieditctrl = new StringBuilder(guieditctrl, 1024);
var sba2 = new StringBuilder(a2, 4096);

SafeNativeMethods.mwle_fnGuiEditCtrl_setCurrentAddSet(sbguieditctrl, sba2);
}
/// <summary>
/// ( GuiEditCtrl, getCurrentAddSet, S32, 2, 2, Returns the set to which new controls will be added)
/// 
/// </summary>

internal int fnGuiEditCtrl_getCurrentAddSet (string guieditctrl)
{
var sbguieditctrl = new StringBuilder(guieditctrl, 1024);

return  SafeNativeMethods.mwle_fnGuiEditCtrl_getCurrentAddSet(sbguieditctrl);
}
/// <summary>
/// ( GuiEditCtrl, toggle, void, 2, 2, Toggle activation.)
/// 
/// </summary>

internal void fnGuiEditCtrl_toggle (string guieditctrl)
{
var sbguieditctrl = new StringBuilder(guieditctrl, 1024);

SafeNativeMethods.mwle_fnGuiEditCtrl_toggle(sbguieditctrl);
}
/// <summary>
/// ( GuiEditCtrl, justify, void, 3, 3, (int mode) )
/// 
/// </summary>

internal void fnGuiEditCtrl_justify (string guieditctrl, string a2)
{
var sbguieditctrl = new StringBuilder(guieditctrl, 1024);
var sba2 = new StringBuilder(a2, 4096);

SafeNativeMethods.mwle_fnGuiEditCtrl_justify(sbguieditctrl, sba2);
}
/// <summary>
/// ( GuiEditCtrl, bringToFront, void, 2, 2, )
/// 
/// </summary>

internal void fnGuiEditCtrl_bringToFront (string guieditctrl)
{
var sbguieditctrl = new StringBuilder(guieditctrl, 1024);

SafeNativeMethods.mwle_fnGuiEditCtrl_bringToFront(sbguieditctrl);
}
/// <summary>
/// ( GuiEditCtrl, pushToBack, void, 2, 2, )
/// 
/// </summary>

internal void fnGuiEditCtrl_pushToBack (string guieditctrl)
{
var sbguieditctrl = new StringBuilder(guieditctrl, 1024);

SafeNativeMethods.mwle_fnGuiEditCtrl_pushToBack(sbguieditctrl);
}
/// <summary>
/// ( GuiEditCtrl, deleteSelection, void, 2, 2, () - Delete the selected controls.)
/// 
/// </summary>

internal void fnGuiEditCtrl_deleteSelection (string guieditctrl)
{
var sbguieditctrl = new StringBuilder(guieditctrl, 1024);

SafeNativeMethods.mwle_fnGuiEditCtrl_deleteSelection(sbguieditctrl);
}
/// <summary>
/// ( GuiEditCtrl, moveSelection, void, 4, 4, (int dx, int dy) - Move all controls in the selection by (dx,dy) pixels.)
/// 
/// </summary>

internal void fnGuiEditCtrl_moveSelection (string guieditctrl, string a2, string a3)
{
var sbguieditctrl = new StringBuilder(guieditctrl, 1024);
var sba2 = new StringBuilder(a2, 4096);
var sba3 = new StringBuilder(a3, 4096);

SafeNativeMethods.mwle_fnGuiEditCtrl_moveSelection(sbguieditctrl, sba2, sba3);
}
/// <summary>
/// ( GuiEditCtrl, saveSelection, void, 2, 3, ( string fileName=null ) - Save selection to file or clipboard.)
/// 
/// </summary>

internal void fnGuiEditCtrl_saveSelection (string guieditctrl, string a2)
{
var sbguieditctrl = new StringBuilder(guieditctrl, 1024);
var sba2 = new StringBuilder(a2, 4096);

SafeNativeMethods.mwle_fnGuiEditCtrl_saveSelection(sbguieditctrl, sba2);
}
/// <summary>
/// ( GuiEditCtrl, loadSelection, void, 2, 3, ( string fileName=null ) - Load selection from file or clipboard.)
/// 
/// </summary>

internal void fnGuiEditCtrl_loadSelection (string guieditctrl, string a2)
{
var sbguieditctrl = new StringBuilder(guieditctrl, 1024);
var sba2 = new StringBuilder(a2, 4096);

SafeNativeMethods.mwle_fnGuiEditCtrl_loadSelection(sbguieditctrl, sba2);
}
/// <summary>
/// ( GuiEditCtrl, selectAll, void, 2, 2, ())
/// 
/// </summary>

internal void fnGuiEditCtrl_selectAll (string guieditctrl)
{
var sbguieditctrl = new StringBuilder(guieditctrl, 1024);

SafeNativeMethods.mwle_fnGuiEditCtrl_selectAll(sbguieditctrl);
}
/// <summary>
/// ( GuiEditCtrl, getNumSelected, S32, 2, 2, () - Return the number of controls currently selected. )
/// 
/// </summary>

internal int fnGuiEditCtrl_getNumSelected (string guieditctrl)
{
var sbguieditctrl = new StringBuilder(guieditctrl, 1024);

return  SafeNativeMethods.mwle_fnGuiEditCtrl_getNumSelected(sbguieditctrl);
}
/// <summary>
/// ( GuiEditCtrl, getSelectionGlobalBounds, const char*, 2, 2, () - Returns global bounds of current selection as vector 'x y width height'. )
/// 
/// </summary>

internal string fnGuiEditCtrl_getSelectionGlobalBounds (string guieditctrl)
{
var returnbuff = new StringBuilder(4096);
var sbguieditctrl = new StringBuilder(guieditctrl, 1024);

SafeNativeMethods.mwle_fnGuiEditCtrl_getSelectionGlobalBounds(sbguieditctrl, returnbuff);
return returnbuff.ToString();

}
/// <summary>
/// ( GuiEditCtrl, selectParents, void, 2, 3, ( bool addToSelection=false ) - Select parents of currently selected controls. )
/// 
/// </summary>

internal void fnGuiEditCtrl_selectParents (string guieditctrl, string a2)
{
var sbguieditctrl = new StringBuilder(guieditctrl, 1024);
var sba2 = new StringBuilder(a2, 4096);

SafeNativeMethods.mwle_fnGuiEditCtrl_selectParents(sbguieditctrl, sba2);
}
/// <summary>
/// ( GuiEditCtrl, selectChildren, void, 2, 3, ( bool addToSelection=false ) - Select children of currently selected controls. )
/// 
/// </summary>

internal void fnGuiEditCtrl_selectChildren (string guieditctrl, string a2)
{
var sbguieditctrl = new StringBuilder(guieditctrl, 1024);
var sba2 = new StringBuilder(a2, 4096);

SafeNativeMethods.mwle_fnGuiEditCtrl_selectChildren(sbguieditctrl, sba2);
}
/// <summary>
/// (GuiEditCtrl, setSnapToGrid, void, 3, 3, GuiEditCtrl.setSnapToGrid(gridsize))
/// 
/// </summary>

internal void fnGuiEditCtrl_setSnapToGrid (string guieditctrl, string a2)
{
var sbguieditctrl = new StringBuilder(guieditctrl, 1024);
var sba2 = new StringBuilder(a2, 4096);

SafeNativeMethods.mwle_fnGuiEditCtrl_setSnapToGrid(sbguieditctrl, sba2);
}
/// <summary>
/// ( GuiEditCtrl, readGuides, void, 3, 4, ( GuiControl ctrl [, int axis ] ) - Read the guides from the given control. )
/// 
/// </summary>

internal void fnGuiEditCtrl_readGuides (string guieditctrl, string a2, string a3)
{
var sbguieditctrl = new StringBuilder(guieditctrl, 1024);
var sba2 = new StringBuilder(a2, 4096);
var sba3 = new StringBuilder(a3, 4096);

SafeNativeMethods.mwle_fnGuiEditCtrl_readGuides(sbguieditctrl, sba2, sba3);
}
/// <summary>
/// ( GuiEditCtrl, writeGuides, void, 3, 4, ( GuiControl ctrl [, int axis ] ) - Write the guides to the given control. )
/// 
/// </summary>

internal void fnGuiEditCtrl_writeGuides (string guieditctrl, string a2, string a3)
{
var sbguieditctrl = new StringBuilder(guieditctrl, 1024);
var sba2 = new StringBuilder(a2, 4096);
var sba3 = new StringBuilder(a3, 4096);

SafeNativeMethods.mwle_fnGuiEditCtrl_writeGuides(sbguieditctrl, sba2, sba3);
}
/// <summary>
/// ( GuiEditCtrl, clearGuides, void, 2, 3, ( [ int axis ] ) - Clear all currently set guide lines. )
/// 
/// </summary>

internal void fnGuiEditCtrl_clearGuides (string guieditctrl, string a2)
{
var sbguieditctrl = new StringBuilder(guieditctrl, 1024);
var sba2 = new StringBuilder(a2, 4096);

SafeNativeMethods.mwle_fnGuiEditCtrl_clearGuides(sbguieditctrl, sba2);
}
/// <summary>
/// ( GuiEditCtrl, fitIntoParents, void, 2, 4, ( bool width=true, bool height=true ) - Fit selected controls into their parents. )
/// 
/// </summary>

internal void fnGuiEditCtrl_fitIntoParents (string guieditctrl, string a2, string a3)
{
var sbguieditctrl = new StringBuilder(guieditctrl, 1024);
var sba2 = new StringBuilder(a2, 4096);
var sba3 = new StringBuilder(a3, 4096);

SafeNativeMethods.mwle_fnGuiEditCtrl_fitIntoParents(sbguieditctrl, sba2, sba3);
}
/// <summary>
/// ( GuiEditCtrl, getMouseMode, const char*, 2, 2, () - Return the current mouse mode. )
/// 
/// </summary>

internal string fnGuiEditCtrl_getMouseMode (string guieditctrl)
{
var returnbuff = new StringBuilder(4096);
var sbguieditctrl = new StringBuilder(guieditctrl, 1024);

SafeNativeMethods.mwle_fnGuiEditCtrl_getMouseMode(sbguieditctrl, returnbuff);
return returnbuff.ToString();

}
/// <summary>
/// Gets the set of GUI controls currently selected in the editor. )
/// 
/// </summary>

internal string fnGuiEditCtrl_getSelection (string guieditctrl)
{
var returnbuff = new StringBuilder(1024);
var sbguieditctrl = new StringBuilder(guieditctrl, 1024);

SafeNativeMethods.mwle_fnGuiEditCtrl_getSelection(sbguieditctrl, returnbuff);
return returnbuff.ToString();

}
/// <summary>
/// Gets the GUI controls(s) that are currently in the trash.)
/// 
/// </summary>

internal string fnGuiEditCtrl_getTrash (string guieditctrl)
{
var returnbuff = new StringBuilder(1024);
var sbguieditctrl = new StringBuilder(guieditctrl, 1024);

SafeNativeMethods.mwle_fnGuiEditCtrl_getTrash(sbguieditctrl, returnbuff);
return returnbuff.ToString();

}
/// <summary>
/// ( GuiFilterCtrl, getValue, const char*, 2, 2, Return a tuple containing all the values in the filter.
/// 			  @internal)
/// 
/// </summary>

internal string fnGuiFilterCtrl_getValue (string guifilterctrl)
{
var returnbuff = new StringBuilder(4096);
var sbguifilterctrl = new StringBuilder(guifilterctrl, 1024);

SafeNativeMethods.mwle_fnGuiFilterCtrl_getValue(sbguifilterctrl, returnbuff);
return returnbuff.ToString();

}
/// <summary>
/// ( GuiFilterCtrl, setValue, void, 3, 20, (f1, f2, ...)
///               Reset the filter to use the specified points, spread equidistantly across the domain.
/// 			  @internal)
/// 
/// </summary>

internal void fnGuiFilterCtrl_setValue (string guifilterctrl, string a2, string a3, string a4, string a5, string a6, string a7, string a8, string a9, string a10, string a11, string a12, string a13, string a14, string a15, string a16, string a17, string a18, string a19)
{
var sbguifilterctrl = new StringBuilder(guifilterctrl, 1024);
var sba2 = new StringBuilder(a2, 4096);
var sba3 = new StringBuilder(a3, 4096);
var sba4 = new StringBuilder(a4, 4096);
var sba5 = new StringBuilder(a5, 4096);
var sba6 = new StringBuilder(a6, 4096);
var sba7 = new StringBuilder(a7, 4096);
var sba8 = new StringBuilder(a8, 4096);
var sba9 = new StringBuilder(a9, 4096);
var sba10 = new StringBuilder(a10, 4096);
var sba11 = new StringBuilder(a11, 4096);
var sba12 = new StringBuilder(a12, 4096);
var sba13 = new StringBuilder(a13, 4096);
var sba14 = new StringBuilder(a14, 4096);
var sba15 = new StringBuilder(a15, 4096);
var sba16 = new StringBuilder(a16, 4096);
var sba17 = new StringBuilder(a17, 4096);
var sba18 = new StringBuilder(a18, 4096);
var sba19 = new StringBuilder(a19, 4096);

SafeNativeMethods.mwle_fnGuiFilterCtrl_setValue(sbguifilterctrl, sba2, sba3, sba4, sba5, sba6, sba7, sba8, sba9, sba10, sba11, sba12, sba13, sba14, sba15, sba16, sba17, sba18, sba19);
}
/// <summary>
/// ( GuiFilterCtrl, identity, void, 2, 2, Reset the filtering.
/// 			  @internal)
/// 
/// </summary>

internal void fnGuiFilterCtrl_identity (string guifilterctrl)
{
var sbguifilterctrl = new StringBuilder(guifilterctrl, 1024);

SafeNativeMethods.mwle_fnGuiFilterCtrl_identity(sbguifilterctrl);
}
/// <summary>
/// Add a data point to the plot's curve.
///    @param plotId Index of the plotting curve to which to add the data point.  Must be 0<=plotId<6.
///    @param value Value of the data point to add to the curve.
///    @note Data values are added to the @b left end of the plotting curve.
///    @note A maximum number of 200 data points can be added to any single plotting curve at any one time.  If 
///       this limit is exceeded, data points on the right end of the curve are culled. )
/// 
/// </summary>

internal void fnGuiGraphCtrl_addDatum (string guigraphctrl, int plotId, float value)
{
var sbguigraphctrl = new StringBuilder(guigraphctrl, 1024);

SafeNativeMethods.mwle_fnGuiGraphCtrl_addDatum(sbguigraphctrl, plotId, value);
}
/// <summary>
/// Get a data point on the given plotting curve.
///    @param plotId Index of the plotting curve from which to fetch the data point.  Must be 0<=plotId<6.
///    @param index Index of the data point on the curve.
///    @return The value of the data point or -1 if @a plotId or @a index are out of range. )
/// 
/// </summary>

internal float fnGuiGraphCtrl_getDatum (string guigraphctrl, int plotId, int index)
{
var sbguigraphctrl = new StringBuilder(guigraphctrl, 1024);

return  SafeNativeMethods.mwle_fnGuiGraphCtrl_getDatum(sbguigraphctrl, plotId, index);
}
/// <summary>
/// Sets up the given plotting curve to automatically plot the value of the @a variable with a 
///    frequency of @a updateFrequency.
///    @param plotId Index of the plotting curve.  Must be 0<=plotId<6.
///    @param variable Name of the global variable.
///    @param updateFrequency Frequency with which to add new data points to the plotting curve (in milliseconds).
///    @tsexample
///    // Plot FPS counter at 1 second intervals.
///    %graph.addAutoPlot( 0, \"fps::real\", 1000 );
///    @endtsexample )
/// 
/// </summary>

internal void fnGuiGraphCtrl_addAutoPlot (string guigraphctrl, int plotId, string variable, int updateFrequency)
{
var sbguigraphctrl = new StringBuilder(guigraphctrl, 1024);
var sbvariable = new StringBuilder(variable, 4096);

SafeNativeMethods.mwle_fnGuiGraphCtrl_addAutoPlot(sbguigraphctrl, plotId, sbvariable, updateFrequency);
}
/// <summary>
/// Stop automatic variable plotting for the given curve.
///    @param plotId Index of the plotting curve.  Must be 0<=plotId<6. )
/// 
/// </summary>

internal void fnGuiGraphCtrl_removeAutoPlot (string guigraphctrl, int plotId)
{
var sbguigraphctrl = new StringBuilder(guigraphctrl, 1024);

SafeNativeMethods.mwle_fnGuiGraphCtrl_removeAutoPlot(sbguigraphctrl, plotId);
}
/// <summary>
/// Change the charting type of the given plotting curve.
///    @param plotId Index of the plotting curve.  Must be 0<=plotId<6.
///    @param graphType Charting type to use for the curve.
///    @note Instead of calling this method, you can directly assign to #plotType. )
/// 
/// </summary>

internal void fnGuiGraphCtrl_setGraphType (string guigraphctrl, int plotId, int graphType)
{
var sbguigraphctrl = new StringBuilder(guigraphctrl, 1024);

SafeNativeMethods.mwle_fnGuiGraphCtrl_setGraphType(sbguigraphctrl, plotId, graphType);
}
/// <summary>
/// @brief Get a path to the texture at the specified index.
///    @param index Index of the image in the list.
///    @tsexample
///    // Define the image index/n
///    %index = \"5\";
///    // Request the image path location from the control.
///    %imagePath = %thisGuiImageList.getImage(%index);
///    @endtsexample
///    @return File path to the image map for the specified index.
///    @see SimObject)
/// 
/// </summary>

internal string fnGuiImageList_getImage (string guiimagelist, int index)
{
var returnbuff = new StringBuilder(4096);
var sbguiimagelist = new StringBuilder(guiimagelist, 1024);

SafeNativeMethods.mwle_fnGuiImageList_getImage(sbguiimagelist, index, returnbuff);
return returnbuff.ToString();

}
/// <summary>
/// @brief Clears the imagelist
///    @tsexample
///    // Inform the GuiImageList control to clear itself.
///    %isFinished = %thisGuiImageList.clear();
///    @endtsexample
///    @return Returns true when finished.
///    @see SimObject)
/// 
/// </summary>

internal bool fnGuiImageList_clear (string guiimagelist)
{
var sbguiimagelist = new StringBuilder(guiimagelist, 1024);

return  SafeNativeMethods.mwle_fnGuiImageList_clear(sbguiimagelist)>=1;
}
/// <summary>
/// @brief Gets the number of images in the list.
///    @tsexample
///    // Request the number of images from the GuiImageList control.
///    %imageCount = %thisGuiImageList.count();
///    @endtsexample
///    @return Number of images in the control.
///    @see SimObject)
/// 
/// </summary>

internal int fnGuiImageList_count (string guiimagelist)
{
var sbguiimagelist = new StringBuilder(guiimagelist, 1024);

return  SafeNativeMethods.mwle_fnGuiImageList_count(sbguiimagelist);
}
/// <summary>
/// @brief Removes an image from the list by index.
///    @param index Image index to remove.
///    @tsexample
///    // Define the image index.
///    %imageIndex = \"4\";
///    // Inform the GuiImageList control to remove the image at the defined index.
///    %wasSuccessful = %thisGuiImageList.remove(%imageIndex);
///    @endtsexample
///    @return True if the operation was successful, false if it was not.
///    @see SimObject)
/// 
/// </summary>

internal bool fnGuiImageList_remove (string guiimagelist, int index)
{
var sbguiimagelist = new StringBuilder(guiimagelist, 1024);

return  SafeNativeMethods.mwle_fnGuiImageList_remove(sbguiimagelist, index)>=1;
}
/// <summary>
/// @brief Retrieves the imageindex of a specified texture in the list.
///    @param imagePath Imagemap including filepath of image to search for
///    @tsexample
///    // Define the imagemap to search for
///    %imagePath = \"./game/client/data/images/thisImage\";
///    // Request the index entry for the defined imagemap
///    %imageIndex = %thisGuiImageList.getIndex(%imagePath);
///    @endtsexample
///    @return Index of the imagemap matching the defined image path.
///    @see SimObject)
/// 
/// </summary>

internal int fnGuiImageList_getIndex (string guiimagelist, string imagePath)
{
var sbguiimagelist = new StringBuilder(guiimagelist, 1024);
var sbimagePath = new StringBuilder(imagePath, 4096);

return  SafeNativeMethods.mwle_fnGuiImageList_getIndex(sbguiimagelist, sbimagePath);
}
/// <summary>
/// @brief Insert an image into imagelist- returns the image index or -1 for failure.
///    @param imagePath Imagemap, with path, to add to the list.
///    @tsexample
///    // Define the imagemap to add to the list
///    %imagePath = \"./game/client/data/images/thisImage\";
///    // Request the GuiImageList control to add the defined image to its list.
///    %imageIndex = %thisGuiImageList.insert(%imagePath);
///    @endtsexample
///    @return The index of the newly inserted imagemap, or -1 if the insertion failed.
///    @see SimObject)
/// 
/// </summary>

internal int fnGuiImageList_insert (string guiimagelist, string imagePath)
{
var sbguiimagelist = new StringBuilder(guiimagelist, 1024);
var sbimagePath = new StringBuilder(imagePath, 4096);

return  SafeNativeMethods.mwle_fnGuiImageList_insert(sbguiimagelist, sbimagePath);
}
/// <summary>
/// ( GuiInspector, inspect, void, 3, 3, Inspect(Object))
/// 
/// </summary>

internal void fnGuiInspector_inspect (string guiinspector, string a2)
{
var sbguiinspector = new StringBuilder(guiinspector, 1024);
var sba2 = new StringBuilder(a2, 4096);

SafeNativeMethods.mwle_fnGuiInspector_inspect(sbguiinspector, sba2);
}
/// <summary>
/// ( GuiInspector, addInspect, void, 3, 4, ( id object, (bool autoSync = true) ) - Add the object to the list of objects being inspected. )
/// 
/// </summary>

internal void fnGuiInspector_addInspect (string guiinspector, string a2, string a3)
{
var sbguiinspector = new StringBuilder(guiinspector, 1024);
var sba2 = new StringBuilder(a2, 4096);
var sba3 = new StringBuilder(a3, 4096);

SafeNativeMethods.mwle_fnGuiInspector_addInspect(sbguiinspector, sba2, sba3);
}
/// <summary>
/// ( GuiInspector, removeInspect, void, 3, 3, ( id object ) - Remove the object from the list of objects being inspected. )
/// 
/// </summary>

internal void fnGuiInspector_removeInspect (string guiinspector, string a2)
{
var sbguiinspector = new StringBuilder(guiinspector, 1024);
var sba2 = new StringBuilder(a2, 4096);

SafeNativeMethods.mwle_fnGuiInspector_removeInspect(sbguiinspector, sba2);
}
/// <summary>
/// ( GuiInspector, refresh, void, 2, 2, Reinspect the currently selected object. )
/// 
/// </summary>

internal void fnGuiInspector_refresh (string guiinspector)
{
var sbguiinspector = new StringBuilder(guiinspector, 1024);

SafeNativeMethods.mwle_fnGuiInspector_refresh(sbguiinspector);
}
/// <summary>
/// ( GuiInspector, getInspectObject, const char*, 2, 3, getInspectObject( int index=0 ) - Returns currently inspected object )
/// 
/// </summary>

internal string fnGuiInspector_getInspectObject (string guiinspector, string a2)
{
var returnbuff = new StringBuilder(4096);
var sbguiinspector = new StringBuilder(guiinspector, 1024);
var sba2 = new StringBuilder(a2, 4096);

SafeNativeMethods.mwle_fnGuiInspector_getInspectObject(sbguiinspector, sba2, returnbuff);
return returnbuff.ToString();

}
/// <summary>
/// ( GuiInspector, getNumInspectObjects, S32, 2, 2, () - Return the number of objects currently being inspected. )
/// 
/// </summary>

internal int fnGuiInspector_getNumInspectObjects (string guiinspector)
{
var sbguiinspector = new StringBuilder(guiinspector, 1024);

return  SafeNativeMethods.mwle_fnGuiInspector_getNumInspectObjects(sbguiinspector);
}
/// <summary>
/// ( GuiInspector, setName, void, 3, 3, setName(NewObjectName))
/// 
/// </summary>

internal void fnGuiInspector_setName (string guiinspector, string a2)
{
var sbguiinspector = new StringBuilder(guiinspector, 1024);
var sba2 = new StringBuilder(a2, 4096);

SafeNativeMethods.mwle_fnGuiInspector_setName(sbguiinspector, sba2);
}
/// <summary>
/// ( GuiInspector, apply, void, 2, 2, apply() - Force application of inspected object's attributes )
/// 
/// </summary>

internal void fnGuiInspector_apply (string guiinspector)
{
var sbguiinspector = new StringBuilder(guiinspector, 1024);

SafeNativeMethods.mwle_fnGuiInspector_apply(sbguiinspector);
}
/// <summary>
/// ( GuiInspector, setObjectField, void, 4, 4, 
///    setObjectField( fieldname, data ) - Set a named fields value on the inspected object if it exists. This triggers all the usual callbacks that would occur if the field had been changed through the gui. )
/// 
/// </summary>

internal void fnGuiInspector_setObjectField (string guiinspector, string a2, string a3)
{
var sbguiinspector = new StringBuilder(guiinspector, 1024);
var sba2 = new StringBuilder(a2, 4096);
var sba3 = new StringBuilder(a3, 4096);

SafeNativeMethods.mwle_fnGuiInspector_setObjectField(sbguiinspector, sba2, sba3);
}
/// <summary>
/// ( GuiInspectorTypeFileName, apply, void, 3,3, apply(newValue); )
/// 
/// </summary>

internal void fnGuiInspectorTypeFileName_apply (string guiinspectortypefilename, string a2)
{
var sbguiinspectortypefilename = new StringBuilder(guiinspectortypefilename, 1024);
var sba2 = new StringBuilder(a2, 4096);

SafeNativeMethods.mwle_fnGuiInspectorTypeFileName_apply(sbguiinspectortypefilename, sba2);
}
/// <summary>
/// ( GuiInspectorTypeBitMask32, applyBit, void, 2,2, apply(); )
/// 
/// </summary>

internal void fnGuiInspectorTypeBitMask32_applyBit (string guiinspectortypebitmask32)
{
var sbguiinspectortypebitmask32 = new StringBuilder(guiinspectortypebitmask32, 1024);

SafeNativeMethods.mwle_fnGuiInspectorTypeBitMask32_applyBit(sbguiinspectortypebitmask32);
}
/// <summary>
/// @brief Clears all the menus from the menu bar.
///    @tsexample
///    // Inform the GuiMenuBar control to clear all menus from itself.
///    %thisGuiMenuBar.clearMenus();
///    @endtsexample
///    @see GuiTickCtrl)
/// 
/// </summary>

internal void fnGuiMenuBar_clearMenus (string guimenubar, int param1, int param2)
{
var sbguimenubar = new StringBuilder(guimenubar, 1024);

SafeNativeMethods.mwle_fnGuiMenuBar_clearMenus(sbguimenubar, param1, param2);
}
/// <summary>
/// @brief Sets the menu rendering margins: horizontal, vertical, bitmap spacing.
///    Detailed description
///    @param horizontalMargin Number of pixels on the left and right side of a menu's text.
///    @param verticalMargin Number of pixels on the top and bottom of a menu's text.
///    @param bitmapToTextSpacing Number of pixels between a menu's bitmap and text.
///    @tsexample
///    // Define the horizontalMargin
///    %horizontalMargin = \"5\";
///    // Define the verticalMargin
///    %verticalMargin = \"5\";
///    // Define the bitmapToTextSpacing
///    %bitmapToTextSpacing = \"12\";
///    // Inform the GuiMenuBar control to set its margins based on the defined values.
///    %thisGuiMenuBar.setMenuMargins(%horizontalMargin,%verticalMargin,%bitmapToTextSpacing);
///    @endtsexample
///    @see GuiTickCtrl)
/// 
/// </summary>

internal void fnGuiMenuBar_setMenuMargins (string guimenubar, int horizontalMargin, int verticalMargin, int bitmapToTextSpacing)
{
var sbguimenubar = new StringBuilder(guimenubar, 1024);

SafeNativeMethods.mwle_fnGuiMenuBar_setMenuMargins(sbguimenubar, horizontalMargin, verticalMargin, bitmapToTextSpacing);
}
/// <summary>
/// @brief Adds a new menu to the menu bar.
///    @param menuText Text to display for the new menu item.
///    @param menuId ID for the new menu item.
///    @tsexample
///    // Define the menu text
///    %menuText = \"New Menu\";
///    // Define the menu ID.
///    %menuId = \"2\";
///    // Inform the GuiMenuBar control to add the new menu
///    %thisGuiMenuBar.addMenu(%menuText,%menuId);
///    @endtsexample
///    @see GuiTickCtrl)
/// 
/// </summary>

internal void fnGuiMenuBar_addMenu (string guimenubar, string menuText, int menuId)
{
var sbguimenubar = new StringBuilder(guimenubar, 1024);
var sbmenuText = new StringBuilder(menuText, 4096);

SafeNativeMethods.mwle_fnGuiMenuBar_addMenu(sbguimenubar, sbmenuText, menuId);
}
/// <summary>
/// ,,0,NULL,-1),
///    @brief Adds a menu item to the specified menu.  The menu argument can be either the text of a menu or its id.
///    @param menu Menu name or menu Id to add the new item to.
///    @param menuItemText Text for the new menu item.
///    @param menuItemId Id for the new menu item.
///    @param accelerator Accelerator key for the new menu item.
///    @param checkGroup Check group to include this menu item in.
///    @tsexample
///    // Define the menu we wish to add the item to
///    %targetMenu = \"New Menu\";  or  %menu = \"4\";
///    // Define the text for the new menu item
///    %menuItemText = \"Menu Item\";
///    // Define the id for the new menu item
///    %menuItemId = \"3\";
///    // Set the accelerator key to toggle this menu item with
///    %accelerator = \"n\";
///    // Define the Check Group that this menu item will be in, if we want it to be in a check group. -1 sets it in no check group.
///    %checkGroup = \"4\";
///    // Inform the GuiMenuBar control to add the new menu item with the defined fields
///    %thisGuiMenuBar.addMenuItem(%menu,%menuItemText,%menuItemId,%accelerator,%checkGroup);
///    @endtsexample
///    @see GuiTickCtrl)
/// 
/// </summary>

internal void fnGuiMenuBar_addMenuItem (string guimenubar, string targetMenu, string menuItemText, int menuItemId, string accelerator, int checkGroup)
{
var sbguimenubar = new StringBuilder(guimenubar, 1024);
var sbtargetMenu = new StringBuilder(targetMenu, 4096);
var sbmenuItemText = new StringBuilder(menuItemText, 4096);
var sbaccelerator = new StringBuilder(accelerator, 4096);

SafeNativeMethods.mwle_fnGuiMenuBar_addMenuItem(sbguimenubar, sbtargetMenu, sbmenuItemText, menuItemId, sbaccelerator, checkGroup);
}
/// <summary>
/// @brief sets the menu item to enabled or disabled based on the enable parameter.
///    The specified menu and menu item can either be text or ids.
///    Detailed description
///    @param menuTarget Menu to work in
///    @param menuItemTarget The menu item inside of the menu to enable or disable
///    @param enabled Boolean enable / disable value.
///    @tsexample
///    // Define the menu
///    %menu = \"New Menu\";  or  %menu = \"4\";
///    // Define the menu item
///    %menuItem = \"New Menu Item\";  or %menuItem = \"2\";
///    // Define the enabled state
///    %enabled = \"true\";
///    // Inform the GuiMenuBar control to set the enabled state of the requested menu item
///    %thisGuiMenuBar.setMenuItemEnable(%menu,%menuItme,%enabled);
///    @endtsexample
///    @see GuiTickCtrl)
/// 
/// </summary>

internal void fnGuiMenuBar_setMenuItemEnable (string guimenubar, string menuTarget, string menuItemTarget, bool enabled)
{
var sbguimenubar = new StringBuilder(guimenubar, 1024);
var sbmenuTarget = new StringBuilder(menuTarget, 4096);
var sbmenuItemTarget = new StringBuilder(menuItemTarget, 4096);

SafeNativeMethods.mwle_fnGuiMenuBar_setMenuItemEnable(sbguimenubar, sbmenuTarget, sbmenuItemTarget, enabled);
}
/// <summary>
/// @brief Sets the menu bitmap index for the check mark image.
///    @param bitmapIndex Bitmap index for the check mark image.
///    @tsexample
///    // Define the bitmap index
///    %bitmapIndex = \"2\";
///    // Inform the GuiMenuBar control of the proper bitmap index for the check mark image
///    %thisGuiMenuBar.setCheckmarkBitmapIndex(%bitmapIndex);
///    @endtsexample
///    @see GuiTickCtrl)
/// 
/// </summary>

internal void fnGuiMenuBar_setCheckmarkBitmapIndex (string guimenubar, int bitmapindex)
{
var sbguimenubar = new StringBuilder(guimenubar, 1024);

SafeNativeMethods.mwle_fnGuiMenuBar_setCheckmarkBitmapIndex(sbguimenubar, bitmapindex);
}
/// <summary>
/// @brief Sets the menu item bitmap to a check mark, which by default is the first element in
///    the bitmap array (although this may be changed with setCheckmarkBitmapIndex()).
///    Any other menu items in the menu with the same check group become unchecked if they are checked.
///    @param menuTarget Menu to work in
///    @param menuItem Menu item to affect
///    @param checked Whether we are setting it to checked or not
///    @tsexample
///    
///    @endtsexample
///    @return If not void, return value and description
///    @see References)
/// 
/// </summary>

internal void fnGuiMenuBar_setMenuItemChecked (string guimenubar, string menuTarget, string menuItemTarget, bool xchecked)
{
var sbguimenubar = new StringBuilder(guimenubar, 1024);
var sbmenuTarget = new StringBuilder(menuTarget, 4096);
var sbmenuItemTarget = new StringBuilder(menuItemTarget, 4096);

SafeNativeMethods.mwle_fnGuiMenuBar_setMenuItemChecked(sbguimenubar, sbmenuTarget, sbmenuItemTarget, xchecked);
}
/// <summary>
/// @brief Sets the text of the specified menu to the new string.
///    @param menuTarget Menu to affect
///    @param newMenuText New menu text
///    @tsexample
///    // Define the menu to affect
///    %menu = \"New Menu\";  or %menu = \"3\";
///    // Define the text to change the menu to
///    %newMenuText = \"Still a New Menu\";
///    // Inform the GuiMenuBar control to change the defined menu to the defined text
///    %thisGuiMenuBar.setMenuText(%menu,%newMenuText);
///    @endtsexample
///    @see GuiTickCtrl)
/// 
/// </summary>

internal void fnGuiMenuBar_setMenuText (string guimenubar, string menuTarget, string newMenuText)
{
var sbguimenubar = new StringBuilder(guimenubar, 1024);
var sbmenuTarget = new StringBuilder(menuTarget, 4096);
var sbnewMenuText = new StringBuilder(newMenuText, 4096);

SafeNativeMethods.mwle_fnGuiMenuBar_setMenuText(sbguimenubar, sbmenuTarget, sbnewMenuText);
}
/// <summary>
/// @brief Sets the bitmap index for the menu and toggles rendering only the bitmap.
///    @param menuTarget Menu to affect
///    @param bitmapindex Bitmap index to set for the menu
///    @param bitmaponly If true, only the bitmap will be rendered
///    @param drawborder If true, a border will be drawn around the menu.
///    @tsexample
///    // Define the menuTarget to affect
///    %menuTarget = \"New Menu\";  or %menuTarget = \"3\";
///    // Set the bitmap index
///    %bitmapIndex = \"5\";
///    // Set if we are only to render the bitmap or not
///    %bitmaponly = \"true\";
///    // Set if we are rendering a border or not
///    %drawborder = \"true\";
///    // Inform the GuiMenuBar of the bitmap and rendering changes
///    %thisGuiMenuBar.setMenuBitmapIndex(%menuTarget,%bitmapIndex,%bitmapOnly,%drawBorder);
///    @endtsexample
///    @see GuiTickCtrl)
/// 
/// </summary>

internal void fnGuiMenuBar_setMenuBitmapIndex (string guimenubar, string menuTarget, int bitmapindex, bool bitmaponly, bool drawborder)
{
var sbguimenubar = new StringBuilder(guimenubar, 1024);
var sbmenuTarget = new StringBuilder(menuTarget, 4096);

SafeNativeMethods.mwle_fnGuiMenuBar_setMenuBitmapIndex(sbguimenubar, sbmenuTarget, bitmapindex, bitmaponly, drawborder);
}
/// <summary>
/// @brief Sets the whether or not to display the specified menu.
///    @param menuTarget Menu item to affect
///    @param visible Whether the menu item will be visible or not
///    @tsexample
///    // Define the menu to work with
///    %menuTarget = \"New Menu\";  or  %menuTarget = \"4\";
///    // Define if the menu should be visible or not
///    %visible = \"true\";
///    // Inform the GuiMenuBar control of the new visibility state for the defined menu
///    %thisGuiMenuBar.setMenuVisible(%menuTarget,%visible);
///    @endtsexample
///    @see GuiTickCtrl)
/// 
/// </summary>

internal void fnGuiMenuBar_setMenuVisible (string guimenubar, string menuTarget, bool visible)
{
var sbguimenubar = new StringBuilder(guimenubar, 1024);
var sbmenuTarget = new StringBuilder(menuTarget, 4096);

SafeNativeMethods.mwle_fnGuiMenuBar_setMenuVisible(sbguimenubar, sbmenuTarget, visible);
}
/// <summary>
/// @brief Sets the text of the specified menu item to the new string.
///    @param menuTarget Menu to affect
///    @param menuItem Menu item in the menu to change the text at
///    @param newMenuItemText New menu text
///    @tsexample
///    // Define the menuTarget
///    %menuTarget = \"New Menu\";  or  %menuTarget = \"4\";
///    // Define the menuItem
///    %menuItem = \"New Menu Item\";  or  %menuItem = \"2\";
///    // Define the new text for the menu item
///    %newMenuItemText = \"Very New Menu Item\";
///    // Inform the GuiMenuBar control to change the defined menu item with the new text
///    %thisGuiMenuBar.setMenuItemText(%menuTarget,%menuItem,%newMenuItemText);
///    @endtsexample
///    @see GuiTickCtrl)
/// 
/// </summary>

internal void fnGuiMenuBar_setMenuItemText (string guimenubar, string menuTarget, string menuItemTarget, string newMenuItemText)
{
var sbguimenubar = new StringBuilder(guimenubar, 1024);
var sbmenuTarget = new StringBuilder(menuTarget, 4096);
var sbmenuItemTarget = new StringBuilder(menuItemTarget, 4096);
var sbnewMenuItemText = new StringBuilder(newMenuItemText, 4096);

SafeNativeMethods.mwle_fnGuiMenuBar_setMenuItemText(sbguimenubar, sbmenuTarget, sbmenuItemTarget, sbnewMenuItemText);
}
/// <summary>
/// @brief Brief Description.
///    Detailed description
///    @param menuTarget Menu to affect the menu item in
///    @param menuItem Menu item to affect
///    @param isVisible Visible state to set the menu item to.
///    @tsexample
///    // Define the menuTarget
///    %menuTarget = \"New Menu\";  or  %menuTarget = \"3\";
///    // Define the menuItem
///    %menuItem = \"New Menu Item\";  or  %menuItem = \"2\";
///    // Define the visibility state
///    %isVisible = \"true\";
///    // Inform the GuiMenuBarControl of the visibility state of the defined menu item
///    %thisGuiMenuBar.setMenuItemVisible(%menuTarget,%menuItem,%isVisible);
///    @endtsexample
///    @see GuiTickCtrl)
/// 
/// </summary>

internal void fnGuiMenuBar_setMenuItemVisible (string guimenubar, string menuTarget, string menuItemTarget, bool isVisible)
{
var sbguimenubar = new StringBuilder(guimenubar, 1024);
var sbmenuTarget = new StringBuilder(menuTarget, 4096);
var sbmenuItemTarget = new StringBuilder(menuItemTarget, 4096);

SafeNativeMethods.mwle_fnGuiMenuBar_setMenuItemVisible(sbguimenubar, sbmenuTarget, sbmenuItemTarget, isVisible);
}
/// <summary>
/// @brief Sets the specified menu item bitmap index in the bitmap array.  Setting the item's index to -1 will remove any bitmap.
///    @param menuTarget Menu to affect the menuItem in
///    @param menuItem Menu item to affect
///    @param bitmapIndex Bitmap index to set the menu item to
///    @tsexample
///    // Define the menuTarget
///    %menuTarget = \"New Menu\";  or  %menuTarget = \"3\";
///    // Define the menuItem\"
///    %menuItem = \"New Menu Item\";  or %menuItem = \"2\";
///    // Define the bitmapIndex
///    %bitmapIndex = \"6\";
///    // Inform the GuiMenuBar control to set the menu item to the defined bitmap
///    %thisGuiMenuBar.setMenuItemBitmap(%menuTarget,%menuItem,%bitmapIndex);
///    @endtsexample
///    @see GuiTickCtrl)
/// 
/// </summary>

internal void fnGuiMenuBar_setMenuItemBitmap (string guimenubar, string menuTarget, string menuItemTarget, int bitmapIndex)
{
var sbguimenubar = new StringBuilder(guimenubar, 1024);
var sbmenuTarget = new StringBuilder(menuTarget, 4096);
var sbmenuItemTarget = new StringBuilder(menuItemTarget, 4096);

SafeNativeMethods.mwle_fnGuiMenuBar_setMenuItemBitmap(sbguimenubar, sbmenuTarget, sbmenuItemTarget, bitmapIndex);
}
/// <summary>
/// @brief Removes the specified menu item from the menu.
///    @param menuTarget Menu to affect the menu item in
///    @param menuItem Menu item to affect
///    @tsexample
///    // Define the menuTarget
///    %menuTarget = \"New Menu\";  or %menuTarget = \"3\";
///    // Define the menuItem
///    %menuItem = \"New Menu Item\";  or  %menuItem = \"5\";
///    // Request the GuiMenuBar control to remove the define menu item
///    %thisGuiMenuBar.removeMenuItem(%menuTarget,%menuItem);
///    @endtsexample
///    @see GuiTickCtrl)
/// 
/// </summary>

internal void fnGuiMenuBar_removeMenuItem (string guimenubar, string menuTarget, string menuItemTarget)
{
var sbguimenubar = new StringBuilder(guimenubar, 1024);
var sbmenuTarget = new StringBuilder(menuTarget, 4096);
var sbmenuItemTarget = new StringBuilder(menuItemTarget, 4096);

SafeNativeMethods.mwle_fnGuiMenuBar_removeMenuItem(sbguimenubar, sbmenuTarget, sbmenuItemTarget);
}
/// <summary>
/// @brief Removes all the menu items from the specified menu.
///    @param menuTarget Menu to remove all items from  
///    @tsexample
///    // Define the menuTarget
///    %menuTarget = \"New Menu\";  or %menuTarget = \"3\";
///    // Inform the GuiMenuBar control to clear all menu items from the defined menu
///    %thisGuiMenuBar.clearMenuItems(%menuTarget);
///    @endtsexample
///    @see GuiTickCtrl)
/// 
/// </summary>

internal void fnGuiMenuBar_clearMenuItems (string guimenubar, string menuTarget)
{
var sbguimenubar = new StringBuilder(guimenubar, 1024);
var sbmenuTarget = new StringBuilder(menuTarget, 4096);

SafeNativeMethods.mwle_fnGuiMenuBar_clearMenuItems(sbguimenubar, sbmenuTarget);
}
/// <summary>
/// @brief Removes the specified menu from the menu bar.
///    @param menuTarget Menu to remove from the menu bar  
///    @tsexample
///    // Define the menuTarget
///    %menuTarget = \"New Menu\";  or %menuTarget = \"3\";
///    // Inform the GuiMenuBar to remove the defined menu from the menu bar
///    %thisGuiMenuBar.removeMenu(%menuTarget);
///    @endtsexample
///    @see GuiTickCtrl)
/// 
/// </summary>

internal void fnGuiMenuBar_removeMenu (string guimenubar, string menuTarget)
{
var sbguimenubar = new StringBuilder(guimenubar, 1024);
var sbmenuTarget = new StringBuilder(menuTarget, 4096);

SafeNativeMethods.mwle_fnGuiMenuBar_removeMenu(sbguimenubar, sbmenuTarget);
}
/// <summary>
/// @brief Sets the given menu item to be a submenu.
///    @param menuTarget Menu to affect a submenu in
///    @param menuItem Menu item to affect
///    @param isSubmenu Whether or not the menuItem will become a subMenu or not
///    @tsexample
///    // Define the menuTarget
///    %menuTarget = \"New Menu\";  or %menuTarget = \"3\";
///    // Define the menuItem
///    %menuItem = \"New Menu Item\";  or  %menuItem = \"5\";
///    // Define whether or not the Menu Item is a sub menu or not
///    %isSubmenu = \"true\";
///    // Inform the GuiMenuBar control to set the defined menu item to be a submenu or not.
///    %thisGuiMenuBar.setMenuItemSubmenuState(%menuTarget,%menuItem,%isSubmenu);
///    @endtsexample
///    @see GuiTickCtrl)
/// 
/// </summary>

internal void fnGuiMenuBar_setMenuItemSubmenuState (string guimenubar, string menuTarget, string menuItem, bool isSubmenu)
{
var sbguimenubar = new StringBuilder(guimenubar, 1024);
var sbmenuTarget = new StringBuilder(menuTarget, 4096);
var sbmenuItem = new StringBuilder(menuItem, 4096);

SafeNativeMethods.mwle_fnGuiMenuBar_setMenuItemSubmenuState(sbguimenubar, sbmenuTarget, sbmenuItem, isSubmenu);
}
/// <summary>
/// @brief Adds a menu item to the specified menu.  The menu argument can be either the text of a menu or its id.
///    @param menuTarget Menu to affect a submenu in
///    @param menuItem Menu item to affect
///    @param submenuItemText Text to show for the new submenu
///    @param submenuItemId Id for the new submenu
///    @param accelerator Accelerator key for the new submenu
///    @param checkGroup Which check group the new submenu should be in, or -1 for none.
///    @tsexample
///    // Define the menuTarget
///    %menuTarget = \"New Menu\";  or  %menuTarget = \"3\";
///    // Define the menuItem
///    %menuItem = \"New Menu Item\";  or  %menuItem = \"5\";
///    // Define the text for the new submenu
///    %submenuItemText = \"New Submenu Item\";
///    // Define the id for the new submenu
///    %submenuItemId = \"4\";
///    // Define the accelerator key for the new submenu
///    %accelerator = \"n\";
///    // Define the checkgroup for the new submenu
///    %checkgroup = \"7\";
///    // Request the GuiMenuBar control to add the new submenu with the defined information
///    %thisGuiMenuBar.addSubmenuItem(%menuTarget,%menuItem,%submenuItemText,%submenuItemId,%accelerator,%checkgroup);
///    @endtsexample
///    @see GuiTickCtrl)
/// 
/// </summary>

internal void fnGuiMenuBar_addSubmenuItem (string guimenubar, string menuTarget, string menuItem, string submenuItemText, int submenuItemId, string accelerator, int checkGroup)
{
var sbguimenubar = new StringBuilder(guimenubar, 1024);
var sbmenuTarget = new StringBuilder(menuTarget, 4096);
var sbmenuItem = new StringBuilder(menuItem, 4096);
var sbsubmenuItemText = new StringBuilder(submenuItemText, 4096);
var sbaccelerator = new StringBuilder(accelerator, 4096);

SafeNativeMethods.mwle_fnGuiMenuBar_addSubmenuItem(sbguimenubar, sbmenuTarget, sbmenuItem, sbsubmenuItemText, submenuItemId, sbaccelerator, checkGroup);
}
/// <summary>
/// @brief Removes all the menu items from the specified submenu.
///    @param menuTarget Menu to affect a submenu in
///    @param menuItem Menu item to affect
///    @tsexample
///    // Define the menuTarget
///    %menuTarget = \"New Menu\";  or %menuTarget = \"3\";
///    // Define the menuItem
///    %menuItem = \"New Menu Item\";  or  %menuItem = \"5\";
///    // Inform the GuiMenuBar to remove all submenu items from the defined menu item
///    %thisGuiMenuBar.clearSubmenuItems(%menuTarget,%menuItem);
///    @endtsexample
///    @see GuiControl)
/// 
/// </summary>

internal void fnGuiMenuBar_clearSubmenuItems (string guimenubar, string menuTarget, string menuItem)
{
var sbguimenubar = new StringBuilder(guimenubar, 1024);
var sbmenuTarget = new StringBuilder(menuTarget, 4096);
var sbmenuItem = new StringBuilder(menuItem, 4096);

SafeNativeMethods.mwle_fnGuiMenuBar_clearSubmenuItems(sbguimenubar, sbmenuTarget, sbmenuItem);
}
/// <summary>
/// @brief Sets the menu item bitmap to a check mark, which by default is the first element in the
///    bitmap array (although this may be changed with setCheckmarkBitmapIndex()).
///    Any other menu items in the menu with the same check group become unchecked if they are checked.
///    @param menuTarget Menu to affect a submenu in
///    @param menuItem Menu item to affect
///    @param submenuItemText Text to show for submenu
///    @param checked Whether or not this submenu item will be checked.
///    @tsexample
///    // Define the menuTarget
///    %menuTarget = \"New Menu\";  or %menuTarget = \"3\";
///    // Define the menuItem
///    %menuItem = \"New Menu Item\";  or  %menuItem = \"5\";
///    // Define the text for the new submenu
///    %submenuItemText = \"Submenu Item\";
///    // Define if this submenu item should be checked or not
///    %checked = \"true\";
///    // Inform the GuiMenuBar control to set the checked state of the defined submenu item
///    %thisGuiMenuBar.setSubmenuItemChecked(%menuTarget,%menuItem,%submenuItemText,%checked);
///    @endtsexample
///    @return If not void, return value and description
///    @see References)
/// 
/// </summary>

internal void fnGuiMenuBar_setSubmenuItemChecked (string guimenubar, string menuTarget, string menuItemTarget, string submenuItemText, bool xchecked)
{
var sbguimenubar = new StringBuilder(guimenubar, 1024);
var sbmenuTarget = new StringBuilder(menuTarget, 4096);
var sbmenuItemTarget = new StringBuilder(menuItemTarget, 4096);
var sbsubmenuItemText = new StringBuilder(submenuItemText, 4096);

SafeNativeMethods.mwle_fnGuiMenuBar_setSubmenuItemChecked(sbguimenubar, sbmenuTarget, sbmenuItemTarget, sbsubmenuItemText, xchecked);
}
/// <summary>
/// (GuiParticleGraphCtrl, setSelectedPoint, void, 3, 3, (int point)
///               Set the selected point on the graph.
/// 			  @return No return value)
/// 
/// </summary>

internal void fnGuiParticleGraphCtrl_setSelectedPoint (string guiparticlegraphctrl, string a2)
{
var sbguiparticlegraphctrl = new StringBuilder(guiparticlegraphctrl, 1024);
var sba2 = new StringBuilder(a2, 4096);

SafeNativeMethods.mwle_fnGuiParticleGraphCtrl_setSelectedPoint(sbguiparticlegraphctrl, sba2);
}
/// <summary>
/// (GuiParticleGraphCtrl, setSelectedPlot, void, 3, 3, (int plotID)
///               Set the selected plot (a.k.a. graph).
/// 			  @return No return value )
/// 
/// </summary>

internal void fnGuiParticleGraphCtrl_setSelectedPlot (string guiparticlegraphctrl, string a2)
{
var sbguiparticlegraphctrl = new StringBuilder(guiparticlegraphctrl, 1024);
var sba2 = new StringBuilder(a2, 4096);

SafeNativeMethods.mwle_fnGuiParticleGraphCtrl_setSelectedPlot(sbguiparticlegraphctrl, sba2);
}
/// <summary>
/// (GuiParticleGraphCtrl, clearGraph, void, 3, 3, (int plotID)
///               Clear the graph of the given plot.
/// 			  @return No return value)
/// 
/// </summary>

internal void fnGuiParticleGraphCtrl_clearGraph (string guiparticlegraphctrl, string a2)
{
var sbguiparticlegraphctrl = new StringBuilder(guiparticlegraphctrl, 1024);
var sba2 = new StringBuilder(a2, 4096);

SafeNativeMethods.mwle_fnGuiParticleGraphCtrl_clearGraph(sbguiparticlegraphctrl, sba2);
}
/// <summary>
/// (GuiParticleGraphCtrl, clearAllGraphs, void, 2, 2, ()
///               Clear all of the graphs.
/// 			  @return No return value)
/// 
/// </summary>

internal void fnGuiParticleGraphCtrl_clearAllGraphs (string guiparticlegraphctrl)
{
var sbguiparticlegraphctrl = new StringBuilder(guiparticlegraphctrl, 1024);

SafeNativeMethods.mwle_fnGuiParticleGraphCtrl_clearAllGraphs(sbguiparticlegraphctrl);
}
/// <summary>
/// (GuiParticleGraphCtrl, addPlotPoint, const char*, 5, 6, (int plotID, float x, float y, bool setAdded = true;)
///               Add a data point to the given plot.
/// 			  @return)
/// 
/// </summary>

internal string fnGuiParticleGraphCtrl_addPlotPoint (string guiparticlegraphctrl, string a2, string a3, string a4, string a5)
{
var returnbuff = new StringBuilder(4096);
var sbguiparticlegraphctrl = new StringBuilder(guiparticlegraphctrl, 1024);
var sba2 = new StringBuilder(a2, 4096);
var sba3 = new StringBuilder(a3, 4096);
var sba4 = new StringBuilder(a4, 4096);
var sba5 = new StringBuilder(a5, 4096);

SafeNativeMethods.mwle_fnGuiParticleGraphCtrl_addPlotPoint(sbguiparticlegraphctrl, sba2, sba3, sba4, sba5, returnbuff);
return returnbuff.ToString();

}
/// <summary>
/// (GuiParticleGraphCtrl, insertPlotPoint, void, 6, 6, (int plotID, int i, float x, float y)
///               Insert a data point to the given plot and plot position.
/// 			  @param plotID The plot you want to access
/// 			  @param i The data point.
/// 			  @param x,y The plot position.
/// 			  @return No return value.)
/// 
/// </summary>

internal void fnGuiParticleGraphCtrl_insertPlotPoint (string guiparticlegraphctrl, string a2, string a3, string a4, string a5)
{
var sbguiparticlegraphctrl = new StringBuilder(guiparticlegraphctrl, 1024);
var sba2 = new StringBuilder(a2, 4096);
var sba3 = new StringBuilder(a3, 4096);
var sba4 = new StringBuilder(a4, 4096);
var sba5 = new StringBuilder(a5, 4096);

SafeNativeMethods.mwle_fnGuiParticleGraphCtrl_insertPlotPoint(sbguiparticlegraphctrl, sba2, sba3, sba4, sba5);
}
/// <summary>
/// (GuiParticleGraphCtrl, changePlotPoint, const char*, 6, 6, (int plotID, int i, float x, float y)
///               Change a data point to the given plot and plot position.
/// 			  @param plotID The plot you want to access
/// 			  @param i The data point.
/// 			  @param x,y The plot position.
/// 			  @return No return value.)
/// 
/// </summary>

internal string fnGuiParticleGraphCtrl_changePlotPoint (string guiparticlegraphctrl, string a2, string a3, string a4, string a5)
{
var returnbuff = new StringBuilder(4096);
var sbguiparticlegraphctrl = new StringBuilder(guiparticlegraphctrl, 1024);
var sba2 = new StringBuilder(a2, 4096);
var sba3 = new StringBuilder(a3, 4096);
var sba4 = new StringBuilder(a4, 4096);
var sba5 = new StringBuilder(a5, 4096);

SafeNativeMethods.mwle_fnGuiParticleGraphCtrl_changePlotPoint(sbguiparticlegraphctrl, sba2, sba3, sba4, sba5, returnbuff);
return returnbuff.ToString();

}
/// <summary>
/// (GuiParticleGraphCtrl, getSelectedPlot, const char*, 2, 2, () 
///               Gets the selected Plot (a.k.a. graph).
/// 			  @return The plot's ID.)
/// 
/// </summary>

internal string fnGuiParticleGraphCtrl_getSelectedPlot (string guiparticlegraphctrl)
{
var returnbuff = new StringBuilder(4096);
var sbguiparticlegraphctrl = new StringBuilder(guiparticlegraphctrl, 1024);

SafeNativeMethods.mwle_fnGuiParticleGraphCtrl_getSelectedPlot(sbguiparticlegraphctrl, returnbuff);
return returnbuff.ToString();

}
/// <summary>
/// (GuiParticleGraphCtrl, getSelectedPoint, const char*, 2, 2, ()
///               Gets the selected Point on the Plot (a.k.a. graph).
/// 			  @return The last selected point ID)
/// 
/// </summary>

internal string fnGuiParticleGraphCtrl_getSelectedPoint (string guiparticlegraphctrl)
{
var returnbuff = new StringBuilder(4096);
var sbguiparticlegraphctrl = new StringBuilder(guiparticlegraphctrl, 1024);

SafeNativeMethods.mwle_fnGuiParticleGraphCtrl_getSelectedPoint(sbguiparticlegraphctrl, returnbuff);
return returnbuff.ToString();

}
/// <summary>
/// (GuiParticleGraphCtrl, isExistingPoint, const char*, 4, 4, (int plotID, int samples)
///               @return Returns true or false whether or not the point in the plot passed is an existing point.)
/// 
/// </summary>

internal string fnGuiParticleGraphCtrl_isExistingPoint (string guiparticlegraphctrl, string a2, string a3)
{
var returnbuff = new StringBuilder(4096);
var sbguiparticlegraphctrl = new StringBuilder(guiparticlegraphctrl, 1024);
var sba2 = new StringBuilder(a2, 4096);
var sba3 = new StringBuilder(a3, 4096);

SafeNativeMethods.mwle_fnGuiParticleGraphCtrl_isExistingPoint(sbguiparticlegraphctrl, sba2, sba3, returnbuff);
return returnbuff.ToString();

}
/// <summary>
/// (GuiParticleGraphCtrl, getPlotPoint, const char*, 4, 4, (int plotID, int samples)
///               Get a data point from the plot specified, samples from the start of the graph.
/// 			  @return The data point ID)
/// 
/// </summary>

internal string fnGuiParticleGraphCtrl_getPlotPoint (string guiparticlegraphctrl, string a2, string a3)
{
var returnbuff = new StringBuilder(4096);
var sbguiparticlegraphctrl = new StringBuilder(guiparticlegraphctrl, 1024);
var sba2 = new StringBuilder(a2, 4096);
var sba3 = new StringBuilder(a3, 4096);

SafeNativeMethods.mwle_fnGuiParticleGraphCtrl_getPlotPoint(sbguiparticlegraphctrl, sba2, sba3, returnbuff);
return returnbuff.ToString();

}
/// <summary>
/// (GuiParticleGraphCtrl, getPlotIndex, const char*, 5, 5, (int plotID, float x, float y)
///               Gets the index of the point passed on the plotID passed (graph ID).
/// 			  @param plotID The plot you wish to check.
/// 			  @param x,y The coordinates of the point to get.
/// 			  @return Returns the index of the point.)
/// 
/// </summary>

internal string fnGuiParticleGraphCtrl_getPlotIndex (string guiparticlegraphctrl, string a2, string a3, string a4)
{
var returnbuff = new StringBuilder(4096);
var sbguiparticlegraphctrl = new StringBuilder(guiparticlegraphctrl, 1024);
var sba2 = new StringBuilder(a2, 4096);
var sba3 = new StringBuilder(a3, 4096);
var sba4 = new StringBuilder(a4, 4096);

SafeNativeMethods.mwle_fnGuiParticleGraphCtrl_getPlotIndex(sbguiparticlegraphctrl, sba2, sba3, sba4, returnbuff);
return returnbuff.ToString();

}
/// <summary>
/// (GuiParticleGraphCtrl, getGraphColor, const char*, 3, 3, (int plotID)
///               Get the color of the graph passed.
/// 			  @return Returns the color of the graph as a string of RGB values formatted as \"R G B\")
/// 
/// </summary>

internal string fnGuiParticleGraphCtrl_getGraphColor (string guiparticlegraphctrl, string a2)
{
var returnbuff = new StringBuilder(4096);
var sbguiparticlegraphctrl = new StringBuilder(guiparticlegraphctrl, 1024);
var sba2 = new StringBuilder(a2, 4096);

SafeNativeMethods.mwle_fnGuiParticleGraphCtrl_getGraphColor(sbguiparticlegraphctrl, sba2, returnbuff);
return returnbuff.ToString();

}
/// <summary>
/// (GuiParticleGraphCtrl, getGraphMin, const char*, 3, 3, (int plotID) 
///               Get the minimum values of the graph ranges.
/// 			  @return Returns the minimum of the range formatted as \"x-min y-min\")
/// 
/// </summary>

internal string fnGuiParticleGraphCtrl_getGraphMin (string guiparticlegraphctrl, string a2)
{
var returnbuff = new StringBuilder(4096);
var sbguiparticlegraphctrl = new StringBuilder(guiparticlegraphctrl, 1024);
var sba2 = new StringBuilder(a2, 4096);

SafeNativeMethods.mwle_fnGuiParticleGraphCtrl_getGraphMin(sbguiparticlegraphctrl, sba2, returnbuff);
return returnbuff.ToString();

}
/// <summary>
/// (GuiParticleGraphCtrl, getGraphMax, const char*, 3, 3, (int plotID) 
/// 			  Get the maximum values of the graph ranges.
/// 			  @return Returns the maximum of the range formatted as \"x-max y-max\")
/// 
/// </summary>

internal string fnGuiParticleGraphCtrl_getGraphMax (string guiparticlegraphctrl, string a2)
{
var returnbuff = new StringBuilder(4096);
var sbguiparticlegraphctrl = new StringBuilder(guiparticlegraphctrl, 1024);
var sba2 = new StringBuilder(a2, 4096);

SafeNativeMethods.mwle_fnGuiParticleGraphCtrl_getGraphMax(sbguiparticlegraphctrl, sba2, returnbuff);
return returnbuff.ToString();

}
/// <summary>
/// (GuiParticleGraphCtrl, getGraphName, const char*, 3, 3, (int plotID) 
///               Get the name of the graph passed.
/// 			  @return Returns the name of the plot)
/// 
/// </summary>

internal string fnGuiParticleGraphCtrl_getGraphName (string guiparticlegraphctrl, string a2)
{
var returnbuff = new StringBuilder(4096);
var sbguiparticlegraphctrl = new StringBuilder(guiparticlegraphctrl, 1024);
var sba2 = new StringBuilder(a2, 4096);

SafeNativeMethods.mwle_fnGuiParticleGraphCtrl_getGraphName(sbguiparticlegraphctrl, sba2, returnbuff);
return returnbuff.ToString();

}
/// <summary>
/// (GuiParticleGraphCtrl, setGraphMin, void, 5, 5, (int plotID, float minX, float minY) 
/// 			  Set the min values of the graph of plotID.
/// 			  @param plotID The plot to modify
/// 			  @param minX,minY The minimum bound of the value range.
/// 			  @return No return value.)
/// 
/// </summary>

internal void fnGuiParticleGraphCtrl_setGraphMin (string guiparticlegraphctrl, string a2, string a3, string a4)
{
var sbguiparticlegraphctrl = new StringBuilder(guiparticlegraphctrl, 1024);
var sba2 = new StringBuilder(a2, 4096);
var sba3 = new StringBuilder(a3, 4096);
var sba4 = new StringBuilder(a4, 4096);

SafeNativeMethods.mwle_fnGuiParticleGraphCtrl_setGraphMin(sbguiparticlegraphctrl, sba2, sba3, sba4);
}
/// <summary>
/// (GuiParticleGraphCtrl, setGraphMinX, void, 4, 4, (int plotID, float minX) 
/// 			  Set the min X value of the graph of plotID.
/// 			  @param plotID The plot to modify.
/// 			  @param minX The minimum x value.
/// 			  @return No return Value.)
/// 
/// </summary>

internal void fnGuiParticleGraphCtrl_setGraphMinX (string guiparticlegraphctrl, string a2, string a3)
{
var sbguiparticlegraphctrl = new StringBuilder(guiparticlegraphctrl, 1024);
var sba2 = new StringBuilder(a2, 4096);
var sba3 = new StringBuilder(a3, 4096);

SafeNativeMethods.mwle_fnGuiParticleGraphCtrl_setGraphMinX(sbguiparticlegraphctrl, sba2, sba3);
}
/// <summary>
/// (GuiParticleGraphCtrl, setGraphMinY, void, 4, 4, (int plotID, float minY) 
/// 			  Set the min Y value of the graph of plotID.
/// 			  @param plotID The plot to modify.
/// 			  @param minY The minimum y value.
/// 			  @return No return Value.)
/// 
/// </summary>

internal void fnGuiParticleGraphCtrl_setGraphMinY (string guiparticlegraphctrl, string a2, string a3)
{
var sbguiparticlegraphctrl = new StringBuilder(guiparticlegraphctrl, 1024);
var sba2 = new StringBuilder(a2, 4096);
var sba3 = new StringBuilder(a3, 4096);

SafeNativeMethods.mwle_fnGuiParticleGraphCtrl_setGraphMinY(sbguiparticlegraphctrl, sba2, sba3);
}
/// <summary>
/// (GuiParticleGraphCtrl, setGraphMax, void, 5, 5, (int plotID, float maxX, float maxY) 
/// 			  Set the max values of the graph of plotID.
/// 			  @param plotID The plot to modify
/// 			  @param maxX,maxY The maximum bound of the value range.
/// 			  @return No return value.)
/// 
/// </summary>

internal void fnGuiParticleGraphCtrl_setGraphMax (string guiparticlegraphctrl, string a2, string a3, string a4)
{
var sbguiparticlegraphctrl = new StringBuilder(guiparticlegraphctrl, 1024);
var sba2 = new StringBuilder(a2, 4096);
var sba3 = new StringBuilder(a3, 4096);
var sba4 = new StringBuilder(a4, 4096);

SafeNativeMethods.mwle_fnGuiParticleGraphCtrl_setGraphMax(sbguiparticlegraphctrl, sba2, sba3, sba4);
}
/// <summary>
/// (GuiParticleGraphCtrl, setGraphMaxX, void, 4, 4, (int plotID, float maxX)
/// 			  Set the max X value of the graph of plotID.
/// 			  @param plotID The plot to modify.
/// 			  @param maxX The maximum x value.
/// 			  @return No return Value.)
/// 
/// </summary>

internal void fnGuiParticleGraphCtrl_setGraphMaxX (string guiparticlegraphctrl, string a2, string a3)
{
var sbguiparticlegraphctrl = new StringBuilder(guiparticlegraphctrl, 1024);
var sba2 = new StringBuilder(a2, 4096);
var sba3 = new StringBuilder(a3, 4096);

SafeNativeMethods.mwle_fnGuiParticleGraphCtrl_setGraphMaxX(sbguiparticlegraphctrl, sba2, sba3);
}
/// <summary>
/// (GuiParticleGraphCtrl, setGraphMaxY, void, 4, 4, (int plotID, float maxY)
/// 			  Set the max Y value of the graph of plotID.
/// 			  @param plotID The plot to modify.
/// 			  @param maxY The maximum y value.
/// 			  @return No return Value.)
/// 
/// </summary>

internal void fnGuiParticleGraphCtrl_setGraphMaxY (string guiparticlegraphctrl, string a2, string a3)
{
var sbguiparticlegraphctrl = new StringBuilder(guiparticlegraphctrl, 1024);
var sba2 = new StringBuilder(a2, 4096);
var sba3 = new StringBuilder(a3, 4096);

SafeNativeMethods.mwle_fnGuiParticleGraphCtrl_setGraphMaxY(sbguiparticlegraphctrl, sba2, sba3);
}
/// <summary>
/// (GuiParticleGraphCtrl, setGraphHidden, void, 4, 4, (int plotID, bool isHidden)
/// 			  Set whether the graph number passed is hidden or not.
/// 			  @return No return value.)
/// 
/// </summary>

internal void fnGuiParticleGraphCtrl_setGraphHidden (string guiparticlegraphctrl, string a2, string a3)
{
var sbguiparticlegraphctrl = new StringBuilder(guiparticlegraphctrl, 1024);
var sba2 = new StringBuilder(a2, 4096);
var sba3 = new StringBuilder(a3, 4096);

SafeNativeMethods.mwle_fnGuiParticleGraphCtrl_setGraphHidden(sbguiparticlegraphctrl, sba2, sba3);
}
/// <summary>
/// (GuiParticleGraphCtrl, setAutoGraphMax, void, 3, 3, (bool autoMax) 
/// 			  Set whether the max will automatically be set when adding points 
/// 			  (ie if you add a value over the current max, the max is increased to that value).
/// 			  @return No return value.)
/// 
/// </summary>

internal void fnGuiParticleGraphCtrl_setAutoGraphMax (string guiparticlegraphctrl, string a2)
{
var sbguiparticlegraphctrl = new StringBuilder(guiparticlegraphctrl, 1024);
var sba2 = new StringBuilder(a2, 4096);

SafeNativeMethods.mwle_fnGuiParticleGraphCtrl_setAutoGraphMax(sbguiparticlegraphctrl, sba2);
}
/// <summary>
/// (GuiParticleGraphCtrl, setAutoRemove, void, 3, 3, (bool autoRemove) 
/// 			  Set whether or not a point should be deleted when you drag another one over it.
/// 			  @return No return value.)
/// 
/// </summary>

internal void fnGuiParticleGraphCtrl_setAutoRemove (string guiparticlegraphctrl, string a2)
{
var sbguiparticlegraphctrl = new StringBuilder(guiparticlegraphctrl, 1024);
var sba2 = new StringBuilder(a2, 4096);

SafeNativeMethods.mwle_fnGuiParticleGraphCtrl_setAutoRemove(sbguiparticlegraphctrl, sba2);
}
/// <summary>
/// (GuiParticleGraphCtrl, setRenderAll, void, 3, 3, (bool renderAll)
/// 			  Set whether or not a position should be rendered on every point or just the last selected.
/// 			  @return No return value.)
/// 
/// </summary>

internal void fnGuiParticleGraphCtrl_setRenderAll (string guiparticlegraphctrl, string a2)
{
var sbguiparticlegraphctrl = new StringBuilder(guiparticlegraphctrl, 1024);
var sba2 = new StringBuilder(a2, 4096);

SafeNativeMethods.mwle_fnGuiParticleGraphCtrl_setRenderAll(sbguiparticlegraphctrl, sba2);
}
/// <summary>
/// (GuiParticleGraphCtrl, setPointXMovementClamped, void, 3, 3, (bool clamped)
/// 			  Set whether the x position of the selected graph point should be clamped
/// 			  @return No return value.)
/// 
/// </summary>

internal void fnGuiParticleGraphCtrl_setPointXMovementClamped (string guiparticlegraphctrl, string a2)
{
var sbguiparticlegraphctrl = new StringBuilder(guiparticlegraphctrl, 1024);
var sba2 = new StringBuilder(a2, 4096);

SafeNativeMethods.mwle_fnGuiParticleGraphCtrl_setPointXMovementClamped(sbguiparticlegraphctrl, sba2);
}
/// <summary>
/// (GuiParticleGraphCtrl, setRenderGraphTooltip, void, 3, 3, (bool renderGraphTooltip)
/// 			  Set whether or not to render the graph tooltip.
/// 			  @return No return value.)
/// 
/// </summary>

internal void fnGuiParticleGraphCtrl_setRenderGraphTooltip (string guiparticlegraphctrl, string a2)
{
var sbguiparticlegraphctrl = new StringBuilder(guiparticlegraphctrl, 1024);
var sba2 = new StringBuilder(a2, 4096);

SafeNativeMethods.mwle_fnGuiParticleGraphCtrl_setRenderGraphTooltip(sbguiparticlegraphctrl, sba2);
}
/// <summary>
/// (GuiParticleGraphCtrl, setGraphName, void, 4, 4, (int plotID, string graphName) 
/// 			  Set the name of the given plot.
/// 			  @param plotID The plot to modify.
/// 			  @param graphName The name to set on the plot.
/// 			  @return No return value.)
/// 
/// </summary>

internal void fnGuiParticleGraphCtrl_setGraphName (string guiparticlegraphctrl, string a2, string a3)
{
var sbguiparticlegraphctrl = new StringBuilder(guiparticlegraphctrl, 1024);
var sba2 = new StringBuilder(a2, 4096);
var sba3 = new StringBuilder(a3, 4096);

SafeNativeMethods.mwle_fnGuiParticleGraphCtrl_setGraphName(sbguiparticlegraphctrl, sba2, sba3);
}
/// <summary>
/// (GuiParticleGraphCtrl, resetSelectedPoint, void, 2, 2, ()
/// 			  This will reset the currently selected point to nothing.
/// 			  @return No return value.)
/// 
/// </summary>

internal void fnGuiParticleGraphCtrl_resetSelectedPoint (string guiparticlegraphctrl)
{
var sbguiparticlegraphctrl = new StringBuilder(guiparticlegraphctrl, 1024);

SafeNativeMethods.mwle_fnGuiParticleGraphCtrl_resetSelectedPoint(sbguiparticlegraphctrl);
}
/// <summary>
/// Set the camera orbit position
///    @param pos Position in the form \"x y z\" )
/// 
/// </summary>

internal void fnGuiShapeEdPreview_setOrbitPos (string guishapeedpreview, string pos)
{
var sbguishapeedpreview = new StringBuilder(guishapeedpreview, 1024);
var sbpos = new StringBuilder(pos, 1024);

SafeNativeMethods.mwle_fnGuiShapeEdPreview_setOrbitPos(sbguishapeedpreview, sbpos);
}
/// <summary>
/// Sets the model to be displayed in this control
///    @param shapeName Name of the model to display.
///    @return True if the model was loaded successfully, false otherwise. )
/// 
/// </summary>

internal bool fnGuiShapeEdPreview_setModel (string guishapeedpreview, string shapePath)
{
var sbguishapeedpreview = new StringBuilder(guishapeedpreview, 1024);
var sbshapePath = new StringBuilder(shapePath, 4096);

return  SafeNativeMethods.mwle_fnGuiShapeEdPreview_setModel(sbguishapeedpreview, sbshapePath)>=1;
}
/// <summary>
/// Adjust the camera position and zoom to fit the shape within the view. )
/// 
/// </summary>

internal void fnGuiShapeEdPreview_fitToShape (string guishapeedpreview)
{
var sbguishapeedpreview = new StringBuilder(guishapeedpreview, 1024);

SafeNativeMethods.mwle_fnGuiShapeEdPreview_fitToShape(sbguishapeedpreview);
}
/// <summary>
/// Refresh the shape (used when the shape meshes or nodes have been added or removed) )
/// 
/// </summary>

internal void fnGuiShapeEdPreview_refreshShape (string guishapeedpreview)
{
var sbguishapeedpreview = new StringBuilder(guishapeedpreview, 1024);

SafeNativeMethods.mwle_fnGuiShapeEdPreview_refreshShape(sbguishapeedpreview);
}
/// <summary>
/// Refresh the shape node transforms (used when a node transform has been modified externally) )
/// 
/// </summary>

internal void fnGuiShapeEdPreview_updateNodeTransforms (string guishapeedpreview)
{
var sbguishapeedpreview = new StringBuilder(guishapeedpreview, 1024);

SafeNativeMethods.mwle_fnGuiShapeEdPreview_updateNodeTransforms(sbguishapeedpreview);
}
/// <summary>
/// Compute the bounding box of the shape using the current detail and node transforms
///    @return the bounding box \"min.x min.y min.z max.x max.y max.z\" )
/// 
/// </summary>

internal string fnGuiShapeEdPreview_computeShapeBounds (string guishapeedpreview)
{
var returnbuff = new StringBuilder(1024);
var sbguishapeedpreview = new StringBuilder(guishapeedpreview, 1024);

SafeNativeMethods.mwle_fnGuiShapeEdPreview_computeShapeBounds(sbguishapeedpreview, returnbuff);
return returnbuff.ToString();

}
/// <summary>
/// Return whether the named object is currently hidden )
/// 
/// </summary>

internal bool fnGuiShapeEdPreview_getMeshHidden (string guishapeedpreview, string name)
{
var sbguishapeedpreview = new StringBuilder(guishapeedpreview, 1024);
var sbname = new StringBuilder(name, 4096);

return  SafeNativeMethods.mwle_fnGuiShapeEdPreview_getMeshHidden(sbguishapeedpreview, sbname)>=1;
}
/// <summary>
/// Show or hide the named object in the shape )
/// 
/// </summary>

internal void fnGuiShapeEdPreview_setMeshHidden (string guishapeedpreview, string name, bool hidden)
{
var sbguishapeedpreview = new StringBuilder(guishapeedpreview, 1024);
var sbname = new StringBuilder(name, 4096);

SafeNativeMethods.mwle_fnGuiShapeEdPreview_setMeshHidden(sbguishapeedpreview, sbname, hidden);
}
/// <summary>
/// Show or hide all objects in the shape )
/// 
/// </summary>

internal void fnGuiShapeEdPreview_setAllMeshesHidden (string guishapeedpreview, bool hidden)
{
var sbguishapeedpreview = new StringBuilder(guishapeedpreview, 1024);

SafeNativeMethods.mwle_fnGuiShapeEdPreview_setAllMeshesHidden(sbguishapeedpreview, hidden);
}
/// <summary>
/// Export the current shape and all mounted objects to COLLADA (.dae).
///    Note that animation is not exported, and all geometry is combined into a 
///    single mesh.
///    @param path Destination filename )
/// 
/// </summary>

internal void fnGuiShapeEdPreview_exportToCollada (string guishapeedpreview, string path)
{
var sbguishapeedpreview = new StringBuilder(guishapeedpreview, 1024);
var sbpath = new StringBuilder(path, 4096);

SafeNativeMethods.mwle_fnGuiShapeEdPreview_exportToCollada(sbguishapeedpreview, sbpath);
}
/// <summary>
/// Add a new thread (initially without any sequence set) )
/// 
/// </summary>

internal void fnGuiShapeEdPreview_addThread (string guishapeedpreview)
{
var sbguishapeedpreview = new StringBuilder(guishapeedpreview, 1024);

SafeNativeMethods.mwle_fnGuiShapeEdPreview_addThread(sbguishapeedpreview);
}
/// <summary>
/// Removes the specifed thread
///    @param slot index of the thread to remove )
/// 
/// </summary>

internal void fnGuiShapeEdPreview_removeThread (string guishapeedpreview, int slot)
{
var sbguishapeedpreview = new StringBuilder(guishapeedpreview, 1024);

SafeNativeMethods.mwle_fnGuiShapeEdPreview_removeThread(sbguishapeedpreview, slot);
}
/// <summary>
/// Get the number of threads
///    @return the number of threads )
/// 
/// </summary>

internal int fnGuiShapeEdPreview_getThreadCount (string guishapeedpreview)
{
var sbguishapeedpreview = new StringBuilder(guishapeedpreview, 1024);

return  SafeNativeMethods.mwle_fnGuiShapeEdPreview_getThreadCount(sbguishapeedpreview);
}
/// <summary>
/// Set the time scale of all threads
///    @param scale new time scale value )
/// 
/// </summary>

internal void fnGuiShapeEdPreview_setTimeScale (string guishapeedpreview, float scale)
{
var sbguishapeedpreview = new StringBuilder(guishapeedpreview, 1024);

SafeNativeMethods.mwle_fnGuiShapeEdPreview_setTimeScale(sbguishapeedpreview, scale);
}
/// <summary>
/// Sets the sequence to play for the active thread.
///    @param name name of the sequence to play
///    @param duration transition duration (0 for no transition)
///    @param pos position in the new sequence to transition to
///    @param play if true, the new sequence will play during the transition )
/// 
/// </summary>

internal void fnGuiShapeEdPreview_setThreadSequence (string guishapeedpreview, string name, float duration, float pos, bool play)
{
var sbguishapeedpreview = new StringBuilder(guishapeedpreview, 1024);
var sbname = new StringBuilder(name, 4096);

SafeNativeMethods.mwle_fnGuiShapeEdPreview_setThreadSequence(sbguishapeedpreview, sbname, duration, pos, play);
}
/// <summary>
/// Get the name of the sequence assigned to the active thread )
/// 
/// </summary>

internal string fnGuiShapeEdPreview_getThreadSequence (string guishapeedpreview)
{
var returnbuff = new StringBuilder(4096);
var sbguishapeedpreview = new StringBuilder(guishapeedpreview, 1024);

SafeNativeMethods.mwle_fnGuiShapeEdPreview_getThreadSequence(sbguishapeedpreview, returnbuff);
return returnbuff.ToString();

}
/// <summary>
/// Refreshes thread sequences (in case of removed/renamed sequences )
/// 
/// </summary>

internal void fnGuiShapeEdPreview_refreshThreadSequences (string guishapeedpreview)
{
var sbguishapeedpreview = new StringBuilder(guishapeedpreview, 1024);

SafeNativeMethods.mwle_fnGuiShapeEdPreview_refreshThreadSequences(sbguishapeedpreview);
}
/// <summary>
/// Mount a shape onto the main shape at the specified node
///    @param shapePath path to the shape to mount
///    @param nodeName name of the node on the main shape to mount to
///    @param type type of mounting to use (Object, Image or Wheel)
///    @param slot mount slot )
/// 
/// </summary>

internal bool fnGuiShapeEdPreview_mountShape (string guishapeedpreview, string shapePath, string nodeName, string type, int slot)
{
var sbguishapeedpreview = new StringBuilder(guishapeedpreview, 1024);
var sbshapePath = new StringBuilder(shapePath, 4096);
var sbnodeName = new StringBuilder(nodeName, 4096);
var sbtype = new StringBuilder(type, 4096);

return  SafeNativeMethods.mwle_fnGuiShapeEdPreview_mountShape(sbguishapeedpreview, sbshapePath, sbnodeName, sbtype, slot)>=1;
}
/// <summary>
/// Set the node a shape is mounted to.
///    @param slot mounted shape slot
///    @param nodename name of the node to mount to )
/// 
/// </summary>

internal void fnGuiShapeEdPreview_setMountNode (string guishapeedpreview, int slot, string nodeName)
{
var sbguishapeedpreview = new StringBuilder(guishapeedpreview, 1024);
var sbnodeName = new StringBuilder(nodeName, 4096);

SafeNativeMethods.mwle_fnGuiShapeEdPreview_setMountNode(sbguishapeedpreview, slot, sbnodeName);
}
/// <summary>
/// Get the name of the sequence playing on this mounted shape
///    @param slot mounted shape slot
///    @return name of the sequence (if any) )
/// 
/// </summary>

internal string fnGuiShapeEdPreview_getMountThreadSequence (string guishapeedpreview, int slot)
{
var returnbuff = new StringBuilder(4096);
var sbguishapeedpreview = new StringBuilder(guishapeedpreview, 1024);

SafeNativeMethods.mwle_fnGuiShapeEdPreview_getMountThreadSequence(sbguishapeedpreview, slot, returnbuff);
return returnbuff.ToString();

}
/// <summary>
/// Set the sequence to play for the shape mounted in the specified slot
///    @param slot mounted shape slot
///    @param name name of the sequence to play )
/// 
/// </summary>

internal void fnGuiShapeEdPreview_setMountThreadSequence (string guishapeedpreview, int slot, string name)
{
var sbguishapeedpreview = new StringBuilder(guishapeedpreview, 1024);
var sbname = new StringBuilder(name, 4096);

SafeNativeMethods.mwle_fnGuiShapeEdPreview_setMountThreadSequence(sbguishapeedpreview, slot, sbname);
}
/// <summary>
/// Get the playback position of the sequence playing on this mounted shape
///    @param slot mounted shape slot
///    @return playback position of the sequence (0-1) )
/// 
/// </summary>

internal float fnGuiShapeEdPreview_getMountThreadPos (string guishapeedpreview, int slot)
{
var sbguishapeedpreview = new StringBuilder(guishapeedpreview, 1024);

return  SafeNativeMethods.mwle_fnGuiShapeEdPreview_getMountThreadPos(sbguishapeedpreview, slot);
}
/// <summary>
/// Set the sequence position of the shape mounted in the specified slot
///    @param slot mounted shape slot
///    @param pos sequence position (0-1) )
/// 
/// </summary>

internal void fnGuiShapeEdPreview_setMountThreadPos (string guishapeedpreview, int slot, float pos)
{
var sbguishapeedpreview = new StringBuilder(guishapeedpreview, 1024);

SafeNativeMethods.mwle_fnGuiShapeEdPreview_setMountThreadPos(sbguishapeedpreview, slot, pos);
}
/// <summary>
/// Get the playback direction of the sequence playing on this mounted shape
///    @param slot mounted shape slot
///    @return direction of the sequence (-1=reverse, 0=paused, 1=forward) )
/// 
/// </summary>

internal float fnGuiShapeEdPreview_getMountThreadDir (string guishapeedpreview, int slot)
{
var sbguishapeedpreview = new StringBuilder(guishapeedpreview, 1024);

return  SafeNativeMethods.mwle_fnGuiShapeEdPreview_getMountThreadDir(sbguishapeedpreview, slot);
}
/// <summary>
/// Set the playback direction of the shape mounted in the specified slot
///    @param slot mounted shape slot
///    @param dir playback direction (-1=backwards, 0=paused, 1=forwards) )
/// 
/// </summary>

internal void fnGuiShapeEdPreview_setMountThreadDir (string guishapeedpreview, int slot, float dir)
{
var sbguishapeedpreview = new StringBuilder(guishapeedpreview, 1024);

SafeNativeMethods.mwle_fnGuiShapeEdPreview_setMountThreadDir(sbguishapeedpreview, slot, dir);
}
/// <summary>
/// Unmount the shape in the specified slot
///    @param slot mounted shape slot )
/// 
/// </summary>

internal void fnGuiShapeEdPreview_unmountShape (string guishapeedpreview, int slot)
{
var sbguishapeedpreview = new StringBuilder(guishapeedpreview, 1024);

SafeNativeMethods.mwle_fnGuiShapeEdPreview_unmountShape(sbguishapeedpreview, slot);
}
/// <summary>
/// Unmount all shapes )
/// 
/// </summary>

internal void fnGuiShapeEdPreview_unmountAll (string guishapeedpreview)
{
var sbguishapeedpreview = new StringBuilder(guishapeedpreview, 1024);

SafeNativeMethods.mwle_fnGuiShapeEdPreview_unmountAll(sbguishapeedpreview);
}
/// <summary>
/// ( GuiInspectorDynamicField, renameField, void, 3,3, field.renameField(newDynamicFieldName); )
/// 
/// </summary>

internal void fnGuiInspectorDynamicField_renameField (string guiinspectordynamicfield, string a2)
{
var sbguiinspectordynamicfield = new StringBuilder(guiinspectordynamicfield, 1024);
var sba2 = new StringBuilder(a2, 4096);

SafeNativeMethods.mwle_fnGuiInspectorDynamicField_renameField(sbguiinspectordynamicfield, sba2);
}
/// <summary>
/// (GuiInspectorDynamicGroup, inspectGroup, bool, 2, 2, Refreshes the dynamic fields in the inspector.)
/// 
/// </summary>

internal bool fnGuiInspectorDynamicGroup_inspectGroup (string guiinspectordynamicgroup)
{
var sbguiinspectordynamicgroup = new StringBuilder(guiinspectordynamicgroup, 1024);

return  SafeNativeMethods.mwle_fnGuiInspectorDynamicGroup_inspectGroup(sbguiinspectordynamicgroup)>=1;
}
/// <summary>
/// ( GuiInspectorDynamicGroup, addDynamicField, void, 2, 2, obj.addDynamicField(); )
/// 
/// </summary>

internal void fnGuiInspectorDynamicGroup_addDynamicField (string guiinspectordynamicgroup)
{
var sbguiinspectordynamicgroup = new StringBuilder(guiinspectordynamicgroup, 1024);

SafeNativeMethods.mwle_fnGuiInspectorDynamicGroup_addDynamicField(sbguiinspectordynamicgroup);
}
/// <summary>
/// ( GuiInspectorDynamicGroup, removeDynamicField, void, 3, 3,  )
/// 
/// </summary>

internal void fnGuiInspectorDynamicGroup_removeDynamicField (string guiinspectordynamicgroup, string a2)
{
var sbguiinspectordynamicgroup = new StringBuilder(guiinspectordynamicgroup, 1024);
var sba2 = new StringBuilder(a2, 4096);

SafeNativeMethods.mwle_fnGuiInspectorDynamicGroup_removeDynamicField(sbguiinspectordynamicgroup, sba2);
}
/// <summary>
/// ( GuiInspectorField, getInspector, S32, 2, 2, () - Return the GuiInspector to which this field belongs. )
/// 
/// </summary>

internal int fnGuiInspectorField_getInspector (string guiinspectorfield)
{
var sbguiinspectorfield = new StringBuilder(guiinspectorfield, 1024);

return  SafeNativeMethods.mwle_fnGuiInspectorField_getInspector(sbguiinspectorfield);
}
/// <summary>
/// ( GuiInspectorField, getInspectedFieldName, const char*, 2, 2, () - Return the name of the field edited by this inspector field. )
/// 
/// </summary>

internal string fnGuiInspectorField_getInspectedFieldName (string guiinspectorfield)
{
var returnbuff = new StringBuilder(4096);
var sbguiinspectorfield = new StringBuilder(guiinspectorfield, 1024);

SafeNativeMethods.mwle_fnGuiInspectorField_getInspectedFieldName(sbguiinspectorfield, returnbuff);
return returnbuff.ToString();

}
/// <summary>
/// ( GuiInspectorField, getInspectedFieldType, const char*, 2, 2, () - Return the type of the field edited by this inspector field. )
/// 
/// </summary>

internal string fnGuiInspectorField_getInspectedFieldType (string guiinspectorfield)
{
var returnbuff = new StringBuilder(4096);
var sbguiinspectorfield = new StringBuilder(guiinspectorfield, 1024);

SafeNativeMethods.mwle_fnGuiInspectorField_getInspectedFieldType(sbguiinspectorfield, returnbuff);
return returnbuff.ToString();

}
/// <summary>
/// ( GuiInspectorField, apply, void, 3, 4, ( string newValue, bool callbacks=true ) - Set the field's value. Suppress callbacks for undo if callbacks=false. )
/// 
/// </summary>

internal void fnGuiInspectorField_apply (string guiinspectorfield, string a2, string a3)
{
var sbguiinspectorfield = new StringBuilder(guiinspectorfield, 1024);
var sba2 = new StringBuilder(a2, 4096);
var sba3 = new StringBuilder(a3, 4096);

SafeNativeMethods.mwle_fnGuiInspectorField_apply(sbguiinspectorfield, sba2, sba3);
}
/// <summary>
/// ( GuiInspectorField, applyWithoutUndo, void, 3, 3, () - Set field value without recording undo (same as 'apply( value, false )'). )
/// 
/// </summary>

internal void fnGuiInspectorField_applyWithoutUndo (string guiinspectorfield, string a2)
{
var sbguiinspectorfield = new StringBuilder(guiinspectorfield, 1024);
var sba2 = new StringBuilder(a2, 4096);

SafeNativeMethods.mwle_fnGuiInspectorField_applyWithoutUndo(sbguiinspectorfield, sba2);
}
/// <summary>
/// ( GuiInspectorField, getData, const char*, 2, 2, () - Return the value currently displayed on the field. )
/// 
/// </summary>

internal string fnGuiInspectorField_getData (string guiinspectorfield)
{
var returnbuff = new StringBuilder(4096);
var sbguiinspectorfield = new StringBuilder(guiinspectorfield, 1024);

SafeNativeMethods.mwle_fnGuiInspectorField_getData(sbguiinspectorfield, returnbuff);
return returnbuff.ToString();

}
/// <summary>
/// ( GuiInspectorField, reset, void, 2, 2, () - Reset to default value. )
/// 
/// </summary>

internal void fnGuiInspectorField_reset (string guiinspectorfield)
{
var sbguiinspectorfield = new StringBuilder(guiinspectorfield, 1024);

SafeNativeMethods.mwle_fnGuiInspectorField_reset(sbguiinspectorfield);
}
/// <summary>
/// ( GuiVariableInspector, loadVars, void, 3, 3, loadVars( searchString ) )
/// 
/// </summary>

internal void fnGuiVariableInspector_loadVars (string guivariableinspector, string a2)
{
var sbguivariableinspector = new StringBuilder(guivariableinspector, 1024);
var sba2 = new StringBuilder(a2, 4096);

SafeNativeMethods.mwle_fnGuiVariableInspector_loadVars(sbguivariableinspector, sba2);
}
/// <summary>
/// @brief Push a line onto the back of the list.
/// 
/// 	   @param item The GUI element being pushed into the control
/// 
/// 	   @tsexample
/// 	   // All messages are stored in this HudMessageVector, the actual
/// 	   // MainChatHud only displays the contents of this vector.
/// 	   new MessageVector(HudMessageVector);
/// 	   // Attach the MessageVector to the chat control
/// 	   chatHud.attach(HudMessageVector);
/// 	   @endtsexample
/// 
/// 	   @return Value)
/// 
/// </summary>

internal bool fnGuiMessageVectorCtrl_attach (string guimessagevectorctrl, string item)
{
var sbguimessagevectorctrl = new StringBuilder(guimessagevectorctrl, 1024);
var sbitem = new StringBuilder(item, 1024);

return  SafeNativeMethods.mwle_fnGuiMessageVectorCtrl_attach(sbguimessagevectorctrl, sbitem)>=1;
}
/// <summary>
/// @brief Stop listing messages from the MessageVector previously attached to, if any.
/// 
/// 				   Detailed description
/// 
/// 				   @param param Description
/// 
/// 				   @tsexample
/// 				   // Deatch the MessageVector from HudMessageVector
/// 				   // HudMessageVector will no longer render the text
/// 				   chatHud.detach();
/// 				   @endtsexample)
/// 
/// </summary>

internal void fnGuiMessageVectorCtrl_detach (string guimessagevectorctrl)
{
var sbguimessagevectorctrl = new StringBuilder(guimessagevectorctrl, 1024);

SafeNativeMethods.mwle_fnGuiMessageVectorCtrl_detach(sbguimessagevectorctrl);
}
/// <summary>
/// Set the bitmap to use for rendering the progress bar.
///    @param filename ~Path to the bitmap file.
///    @note Directly assign to #bitmap rather than using this method.
///    @see GuiProgressBitmapCtrl::setBitmap )
/// 
/// </summary>

internal void fnGuiProgressBitmapCtrl_setBitmap (string guiprogressbitmapctrl, string filename)
{
var sbguiprogressbitmapctrl = new StringBuilder(guiprogressbitmapctrl, 1024);
var sbfilename = new StringBuilder(filename, 4096);

SafeNativeMethods.mwle_fnGuiProgressBitmapCtrl_setBitmap(sbguiprogressbitmapctrl, sbfilename);
}
/// <summary>
/// ( GuiTickCtrl, setProcessTicks, void, 2, 3, ( [tick = true] ) - This will set this object to either be processing ticks or not )
/// 
/// </summary>

internal void fnGuiTickCtrl_setProcessTicks (string guitickctrl, string a2)
{
var sbguitickctrl = new StringBuilder(guitickctrl, 1024);
var sba2 = new StringBuilder(a2, 4096);

SafeNativeMethods.mwle_fnGuiTickCtrl_setProcessTicks(sbguitickctrl, sba2);
}
/// <summary>
/// Set the video file to play.  If a video is already playing, playback is stopped and 
///    the new video file is loaded.
///    @param filename The video file to load. )
/// 
/// </summary>

internal void fnGuiTheoraCtrl_setFile (string guitheoractrl, string filename)
{
var sbguitheoractrl = new StringBuilder(guitheoractrl, 1024);
var sbfilename = new StringBuilder(filename, 4096);

SafeNativeMethods.mwle_fnGuiTheoraCtrl_setFile(sbguitheoractrl, sbfilename);
}
/// <summary>
/// Start playing the video.  If the video is already playing, the call is ignored. )
/// 
/// </summary>

internal void fnGuiTheoraCtrl_play (string guitheoractrl)
{
var sbguitheoractrl = new StringBuilder(guitheoractrl, 1024);

SafeNativeMethods.mwle_fnGuiTheoraCtrl_play(sbguitheoractrl);
}
/// <summary>
/// Pause playback of the video.  If the video is not currently playing, the call is ignored.
///    While stopped, the control displays the last frame. )
/// 
/// </summary>

internal void fnGuiTheoraCtrl_pause (string guitheoractrl)
{
var sbguitheoractrl = new StringBuilder(guitheoractrl, 1024);

SafeNativeMethods.mwle_fnGuiTheoraCtrl_pause(sbguitheoractrl);
}
/// <summary>
/// Stop playback of the video.  The next call to play() will then start playback from the beginning of the video.
///    While stopped, the control renders empty with just the background color. )
/// 
/// </summary>

internal void fnGuiTheoraCtrl_stop (string guitheoractrl)
{
var sbguitheoractrl = new StringBuilder(guitheoractrl, 1024);

SafeNativeMethods.mwle_fnGuiTheoraCtrl_stop(sbguitheoractrl);
}
/// <summary>
/// Get the current playback time.
///    @return The elapsed playback time in seconds. )
/// 
/// </summary>

internal float fnGuiTheoraCtrl_getCurrentTime (string guitheoractrl)
{
var sbguitheoractrl = new StringBuilder(guitheoractrl, 1024);

return  SafeNativeMethods.mwle_fnGuiTheoraCtrl_getCurrentTime(sbguitheoractrl);
}
/// <summary>
/// Test whether the video has finished playing.
///    @return True if the video has finished playing, false otherwise. )
/// 
/// </summary>

internal bool fnGuiTheoraCtrl_isPlaybackDone (string guitheoractrl)
{
var sbguitheoractrl = new StringBuilder(guitheoractrl, 1024);

return  SafeNativeMethods.mwle_fnGuiTheoraCtrl_isPlaybackDone(sbguitheoractrl)>=1;
}
/// <summary>
/// ( MessageVector, dump, void, 3, 4, (string filename, string header=NULL)
///               Dump the message vector to a file, optionally prefixing a header.
/// 			  @hide)
/// 
/// </summary>

internal void fnMessageVector_dump (string messagevector, string a2, string a3)
{
var sbmessagevector = new StringBuilder(messagevector, 1024);
var sba2 = new StringBuilder(a2, 4096);
var sba3 = new StringBuilder(a3, 4096);

SafeNativeMethods.mwle_fnMessageVector_dump(sbmessagevector, sba2, sba3);
}
/// <summary>
/// Clear all messages in the vector
///    @tsexample
///    HudMessageVector.clear();
///    @endtsexample)
/// 
/// </summary>

internal void fnMessageVector_clear (string messagevector)
{
var sbmessagevector = new StringBuilder(messagevector, 1024);

SafeNativeMethods.mwle_fnMessageVector_clear(sbmessagevector);
}
/// <summary>
/// Push a line onto the back of the list.
///    @param msg Text that makes up the message
///    @param tag Numerical value associated with this message, useful for searching.
///    @tsexample
///    // Add the message...
///    HudMessageVector.pushBackLine(\"Hello World\", 0);
///    @endtsexample)
/// 
/// </summary>

internal void fnMessageVector_pushBackLine (string messagevector, string msg, int tag)
{
var sbmessagevector = new StringBuilder(messagevector, 1024);
var sbmsg = new StringBuilder(msg, 4096);

SafeNativeMethods.mwle_fnMessageVector_pushBackLine(sbmessagevector, sbmsg, tag);
}
/// <summary>
/// Pop a line from the back of the list; destroys the line.
///    @tsexample
///    HudMessageVector.popBackLine();
///    @endtsexample
///    @return False if there are no lines to pop (underflow), true otherwise)
/// 
/// </summary>

internal bool fnMessageVector_popBackLine (string messagevector)
{
var sbmessagevector = new StringBuilder(messagevector, 1024);

return  SafeNativeMethods.mwle_fnMessageVector_popBackLine(sbmessagevector)>=1;
}
/// <summary>
/// Push a line onto the front of the vector.
///    @param msg Text that makes up the message
///    @param tag Numerical value associated with this message, useful for searching.
///    @tsexample
///    // Add the message...
///    HudMessageVector.pushFrontLine(\"Hello World\", 0);
///    @endtsexample)
/// 
/// </summary>

internal void fnMessageVector_pushFrontLine (string messagevector, string msg, int tag)
{
var sbmessagevector = new StringBuilder(messagevector, 1024);
var sbmsg = new StringBuilder(msg, 4096);

SafeNativeMethods.mwle_fnMessageVector_pushFrontLine(sbmessagevector, sbmsg, tag);
}
/// <summary>
/// Pop a line from the front of the vector, destroying the line.
///    @tsexample
///    HudMessageVector.popFrontLine();
///    @endtsexample
///    @return False if there are no lines to pop (underflow), true otherwise)
/// 
/// </summary>

internal bool fnMessageVector_popFrontLine (string messagevector)
{
var sbmessagevector = new StringBuilder(messagevector, 1024);

return  SafeNativeMethods.mwle_fnMessageVector_popFrontLine(sbmessagevector)>=1;
}
/// <summary>
/// Push a line onto the back of the list.
///    @param msg Text that makes up the message
///    @param tag Numerical value associated with this message, useful for searching.
///    @tsexample
///    // Add the message...
///    HudMessageVector.insertLine(1, \"Hello World\", 0);
///    @endtsexample
///    @return False if insertPos is greater than the number of lines in the current vector)
/// 
/// </summary>

internal bool fnMessageVector_insertLine (string messagevector, int insertPos, string msg, int tag)
{
var sbmessagevector = new StringBuilder(messagevector, 1024);
var sbmsg = new StringBuilder(msg, 4096);

return  SafeNativeMethods.mwle_fnMessageVector_insertLine(sbmessagevector, insertPos, sbmsg, tag)>=1;
}
/// <summary>
/// Delete the line at the specified position.
///    @param deletePos Position in the vector containing the line to be deleted
///    @tsexample
///    // Delete the first line (index 0) in the vector...
///    HudMessageVector.deleteLine(0);
///    @endtsexample
///    @return False if deletePos is greater than the number of lines in the current vector)
/// 
/// </summary>

internal bool fnMessageVector_deleteLine (string messagevector, int deletePos)
{
var sbmessagevector = new StringBuilder(messagevector, 1024);

return  SafeNativeMethods.mwle_fnMessageVector_deleteLine(sbmessagevector, deletePos)>=1;
}
/// <summary>
/// Get the number of lines in the vector.
///    @tsexample
///    // Find out how many lines have been stored in HudMessageVector
///    %chatLines = HudMessageVector.getNumLines();
///    echo(%chatLines);
///    @endtsexample)
/// 
/// </summary>

internal int fnMessageVector_getNumLines (string messagevector)
{
var sbmessagevector = new StringBuilder(messagevector, 1024);

return  SafeNativeMethods.mwle_fnMessageVector_getNumLines(sbmessagevector);
}
/// <summary>
/// Scan through the lines in the vector, returning the first line that has a matching tag.
///    @param tag Numerical value assigned to a message when it was added or inserted
///    @tsexample
///    // Locate text in the vector tagged with the value \"1\", then print it
///    %taggedText = HudMessageVector.getLineTextByTag(1);
///    echo(%taggedText);
///    @endtsexample
///    @return Text from a line with matching tag, other wise \"\")
/// 
/// </summary>

internal string fnMessageVector_getLineTextByTag (string messagevector, int tag)
{
var returnbuff = new StringBuilder(4096);
var sbmessagevector = new StringBuilder(messagevector, 1024);

SafeNativeMethods.mwle_fnMessageVector_getLineTextByTag(sbmessagevector, tag, returnbuff);
return returnbuff.ToString();

}
/// <summary>
/// Scan through the vector, returning the line number of the first line that matches the specified tag; else returns -1 if no match was found.
///    @param tag Numerical value assigned to a message when it was added or inserted
///    @tsexample
///    // Locate a line of text tagged with the value \"1\", then delete it.
///    %taggedLine = HudMessageVector.getLineIndexByTag(1);
///    HudMessageVector.deleteLine(%taggedLine);
///    @endtsexample
///    @return Line with matching tag, other wise -1)
/// 
/// </summary>

internal int fnMessageVector_getLineIndexByTag (string messagevector, int tag)
{
var sbmessagevector = new StringBuilder(messagevector, 1024);

return  SafeNativeMethods.mwle_fnMessageVector_getLineIndexByTag(sbmessagevector, tag);
}
/// <summary>
/// Get the text at a specified line.
///    @param pos Position in vector to grab text from
///    @tsexample
///    // Print a line of text at position 1.
///    %text = HudMessageVector.getLineText(1);
///    echo(%text);
///    @endtsexample
///    @return Text at specified line, if the position is greater than the number of lines return \"\")
/// 
/// </summary>

internal string fnMessageVector_getLineText (string messagevector, int pos)
{
var returnbuff = new StringBuilder(4096);
var sbmessagevector = new StringBuilder(messagevector, 1024);

SafeNativeMethods.mwle_fnMessageVector_getLineText(sbmessagevector, pos, returnbuff);
return returnbuff.ToString();

}
/// <summary>
/// Get the tag of a specified line.
///    @param pos Position in vector to grab tag from
///    @tsexample
///    // Remove all lines that do not have a tag value of 1.
///    while( HudMessageVector.getNumLines())
///    {
///       %tag = HudMessageVector.getLineTag(1);
///       if(%tag != 1)
///          %tag.delete();
///       HudMessageVector.popFrontLine();
///    }
///    @endtsexample
///    @return Tag value of a given line, if the position is greater than the number of lines return 0)
/// 
/// </summary>

internal int fnMessageVector_getLineTag (string messagevector, int pos)
{
var sbmessagevector = new StringBuilder(messagevector, 1024);

return  SafeNativeMethods.mwle_fnMessageVector_getLineTag(sbmessagevector, pos);
}
/// <summary>
///  )
/// 
/// </summary>

internal int fnEditTSCtrl_getDisplayType (string edittsctrl)
{
var sbedittsctrl = new StringBuilder(edittsctrl, 1024);

return  SafeNativeMethods.mwle_fnEditTSCtrl_getDisplayType(sbedittsctrl);
}
/// <summary>
///  )
/// 
/// </summary>

internal void fnEditTSCtrl_setDisplayType (string edittsctrl, int displayType)
{
var sbedittsctrl = new StringBuilder(edittsctrl, 1024);

SafeNativeMethods.mwle_fnEditTSCtrl_setDisplayType(sbedittsctrl, displayType);
}
/// <summary>
/// Return the FOV for orthographic views. )
/// 
/// </summary>

internal float fnEditTSCtrl_getOrthoFOV (string edittsctrl)
{
var sbedittsctrl = new StringBuilder(edittsctrl, 1024);

return  SafeNativeMethods.mwle_fnEditTSCtrl_getOrthoFOV(sbedittsctrl);
}
/// <summary>
/// Set the FOV for to use for orthographic views. )
/// 
/// </summary>

internal void fnEditTSCtrl_setOrthoFOV (string edittsctrl, float fov)
{
var sbedittsctrl = new StringBuilder(edittsctrl, 1024);

SafeNativeMethods.mwle_fnEditTSCtrl_setOrthoFOV(sbedittsctrl, fov);
}
/// <summary>
///  )
/// 
/// </summary>

internal void fnEditTSCtrl_renderBox (string edittsctrl, string pos, string size)
{
var sbedittsctrl = new StringBuilder(edittsctrl, 1024);
var sbpos = new StringBuilder(pos, 1024);
var sbsize = new StringBuilder(size, 1024);

SafeNativeMethods.mwle_fnEditTSCtrl_renderBox(sbedittsctrl, sbpos, sbsize);
}
/// <summary>
///  )
/// 
/// </summary>

internal void fnEditTSCtrl_renderSphere (string edittsctrl, string pos, float radius, int sphereLevel)
{
var sbedittsctrl = new StringBuilder(edittsctrl, 1024);
var sbpos = new StringBuilder(pos, 1024);

SafeNativeMethods.mwle_fnEditTSCtrl_renderSphere(sbedittsctrl, sbpos, radius, sphereLevel);
}
/// <summary>
///  )
/// 
/// </summary>

internal void fnEditTSCtrl_renderCircle (string edittsctrl, string pos, string normal, float radius, int segments)
{
var sbedittsctrl = new StringBuilder(edittsctrl, 1024);
var sbpos = new StringBuilder(pos, 1024);
var sbnormal = new StringBuilder(normal, 1024);

SafeNativeMethods.mwle_fnEditTSCtrl_renderCircle(sbedittsctrl, sbpos, sbnormal, radius, segments);
}
/// <summary>
///  )
/// 
/// </summary>

internal void fnEditTSCtrl_renderTriangle (string edittsctrl, string a, string b, string c)
{
var sbedittsctrl = new StringBuilder(edittsctrl, 1024);
var sba = new StringBuilder(a, 1024);
var sbb = new StringBuilder(b, 1024);
var sbc = new StringBuilder(c, 1024);

SafeNativeMethods.mwle_fnEditTSCtrl_renderTriangle(sbedittsctrl, sba, sbb, sbc);
}
/// <summary>
///  )
/// 
/// </summary>

internal void fnEditTSCtrl_renderLine (string edittsctrl, string start, string end, float lineWidth)
{
var sbedittsctrl = new StringBuilder(edittsctrl, 1024);
var sbstart = new StringBuilder(start, 1024);
var sbend = new StringBuilder(end, 1024);

SafeNativeMethods.mwle_fnEditTSCtrl_renderLine(sbedittsctrl, sbstart, sbend, lineWidth);
}
/// <summary>
///  )
/// 
/// </summary>

internal int fnEditTSCtrl_getGizmo (string edittsctrl)
{
var sbedittsctrl = new StringBuilder(edittsctrl, 1024);

return  SafeNativeMethods.mwle_fnEditTSCtrl_getGizmo(sbedittsctrl);
}
/// <summary>
///  )
/// 
/// </summary>

internal bool fnEditTSCtrl_isMiddleMouseDown (string edittsctrl)
{
var sbedittsctrl = new StringBuilder(edittsctrl, 1024);

return  SafeNativeMethods.mwle_fnEditTSCtrl_isMiddleMouseDown(sbedittsctrl)>=1;
}
/// <summary>
/// @brief Set the MissionArea to edit.)
/// 
/// </summary>

internal void fnGuiMissionAreaCtrl_setMissionArea (string guimissionareactrl, string area)
{
var sbguimissionareactrl = new StringBuilder(guimissionareactrl, 1024);
var sbarea = new StringBuilder(area, 1024);

SafeNativeMethods.mwle_fnGuiMissionAreaCtrl_setMissionArea(sbguimissionareactrl, sbarea);
}
/// <summary>
/// @brief Update the terrain bitmap.)
/// 
/// </summary>

internal void fnGuiMissionAreaCtrl_updateTerrain (string guimissionareactrl)
{
var sbguimissionareactrl = new StringBuilder(guimissionareactrl, 1024);

SafeNativeMethods.mwle_fnGuiMissionAreaCtrl_updateTerrain(sbguimissionareactrl);
}
/// <summary>
/// ( MECreateUndoAction, addObject, void, 3, 3, ( SimObject obj ))
/// 
/// </summary>

internal void fnMECreateUndoAction_addObject (string mecreateundoaction, string a2)
{
var sbmecreateundoaction = new StringBuilder(mecreateundoaction, 1024);
var sba2 = new StringBuilder(a2, 4096);

SafeNativeMethods.mwle_fnMECreateUndoAction_addObject(sbmecreateundoaction, sba2);
}
/// <summary>
/// ( MEDeleteUndoAction, deleteObject, void, 3, 3, ( SimObject obj ))
/// 
/// </summary>

internal void fnMEDeleteUndoAction_deleteObject (string medeleteundoaction, string a2)
{
var sbmedeleteundoaction = new StringBuilder(medeleteundoaction, 1024);
var sba2 = new StringBuilder(a2, 4096);

SafeNativeMethods.mwle_fnMEDeleteUndoAction_deleteObject(sbmedeleteundoaction, sba2);
}
/// <summary>
/// ( WorldEditor, ignoreObjClass, void, 3, 0, (string class_name, ...))
/// 
/// </summary>

internal void fnWorldEditor_ignoreObjClass (string worldeditor, string a2, string a3, string a4, string a5, string a6, string a7, string a8, string a9, string a10, string a11, string a12, string a13, string a14, string a15, string a16, string a17, string a18, string a19)
{
var sbworldeditor = new StringBuilder(worldeditor, 1024);
var sba2 = new StringBuilder(a2, 4096);
var sba3 = new StringBuilder(a3, 4096);
var sba4 = new StringBuilder(a4, 4096);
var sba5 = new StringBuilder(a5, 4096);
var sba6 = new StringBuilder(a6, 4096);
var sba7 = new StringBuilder(a7, 4096);
var sba8 = new StringBuilder(a8, 4096);
var sba9 = new StringBuilder(a9, 4096);
var sba10 = new StringBuilder(a10, 4096);
var sba11 = new StringBuilder(a11, 4096);
var sba12 = new StringBuilder(a12, 4096);
var sba13 = new StringBuilder(a13, 4096);
var sba14 = new StringBuilder(a14, 4096);
var sba15 = new StringBuilder(a15, 4096);
var sba16 = new StringBuilder(a16, 4096);
var sba17 = new StringBuilder(a17, 4096);
var sba18 = new StringBuilder(a18, 4096);
var sba19 = new StringBuilder(a19, 4096);

SafeNativeMethods.mwle_fnWorldEditor_ignoreObjClass(sbworldeditor, sba2, sba3, sba4, sba5, sba6, sba7, sba8, sba9, sba10, sba11, sba12, sba13, sba14, sba15, sba16, sba17, sba18, sba19);
}
/// <summary>
/// ( WorldEditor, clearIgnoreList, void, 2, 2, )
/// 
/// </summary>

internal void fnWorldEditor_clearIgnoreList (string worldeditor)
{
var sbworldeditor = new StringBuilder(worldeditor, 1024);

SafeNativeMethods.mwle_fnWorldEditor_clearIgnoreList(sbworldeditor);
}
/// <summary>
/// ( WorldEditor, clearSelection, void, 2, 2, )
/// 
/// </summary>

internal void fnWorldEditor_clearSelection (string worldeditor)
{
var sbworldeditor = new StringBuilder(worldeditor, 1024);

SafeNativeMethods.mwle_fnWorldEditor_clearSelection(sbworldeditor);
}
/// <summary>
/// ( WorldEditor, getActiveSelection, S32, 2, 2, () - Return the currently active WorldEditorSelection object. )
/// 
/// </summary>

internal int fnWorldEditor_getActiveSelection (string worldeditor)
{
var sbworldeditor = new StringBuilder(worldeditor, 1024);

return  SafeNativeMethods.mwle_fnWorldEditor_getActiveSelection(sbworldeditor);
}
/// <summary>
/// ( WorldEditor, setActiveSelection, void, 3, 3, ( id set ) - Set the currently active WorldEditorSelection object. )
/// 
/// </summary>

internal void fnWorldEditor_setActiveSelection (string worldeditor, string a2)
{
var sbworldeditor = new StringBuilder(worldeditor, 1024);
var sba2 = new StringBuilder(a2, 4096);

SafeNativeMethods.mwle_fnWorldEditor_setActiveSelection(sbworldeditor, sba2);
}
/// <summary>
/// ( WorldEditor, selectObject, void, 3, 3, (SimObject obj))
/// 
/// </summary>

internal void fnWorldEditor_selectObject (string worldeditor, string a2)
{
var sbworldeditor = new StringBuilder(worldeditor, 1024);
var sba2 = new StringBuilder(a2, 4096);

SafeNativeMethods.mwle_fnWorldEditor_selectObject(sbworldeditor, sba2);
}
/// <summary>
/// ( WorldEditor, unselectObject, void, 3, 3, (SimObject obj))
/// 
/// </summary>

internal void fnWorldEditor_unselectObject (string worldeditor, string a2)
{
var sbworldeditor = new StringBuilder(worldeditor, 1024);
var sba2 = new StringBuilder(a2, 4096);

SafeNativeMethods.mwle_fnWorldEditor_unselectObject(sbworldeditor, sba2);
}
/// <summary>
/// ( WorldEditor, invalidateSelectionCentroid, void, 2, 2, )
/// 
/// </summary>

internal void fnWorldEditor_invalidateSelectionCentroid (string worldeditor)
{
var sbworldeditor = new StringBuilder(worldeditor, 1024);

SafeNativeMethods.mwle_fnWorldEditor_invalidateSelectionCentroid(sbworldeditor);
}
/// <summary>
/// ( WorldEditor, getSelectionSize, S32, 2, 2, () - Return the number of objects currently selected in the editor.)
/// 
/// </summary>

internal int fnWorldEditor_getSelectionSize (string worldeditor)
{
var sbworldeditor = new StringBuilder(worldeditor, 1024);

return  SafeNativeMethods.mwle_fnWorldEditor_getSelectionSize(sbworldeditor);
}
/// <summary>
/// ( WorldEditor, getSelectedObject, S32, 3, 3, (int index))
/// 
/// </summary>

internal int fnWorldEditor_getSelectedObject (string worldeditor, string a2)
{
var sbworldeditor = new StringBuilder(worldeditor, 1024);
var sba2 = new StringBuilder(a2, 4096);

return  SafeNativeMethods.mwle_fnWorldEditor_getSelectedObject(sbworldeditor, sba2);
}
/// <summary>
/// ( WorldEditor, getSelectionRadius, F32, 2, 2, )
/// 
/// </summary>

internal float fnWorldEditor_getSelectionRadius (string worldeditor)
{
var sbworldeditor = new StringBuilder(worldeditor, 1024);

return  SafeNativeMethods.mwle_fnWorldEditor_getSelectionRadius(sbworldeditor);
}
/// <summary>
/// ( WorldEditor, getSelectionCentroid, const char *, 2, 2, )
/// 
/// </summary>

internal string fnWorldEditor_getSelectionCentroid (string worldeditor)
{
var returnbuff = new StringBuilder(4096);
var sbworldeditor = new StringBuilder(worldeditor, 1024);

SafeNativeMethods.mwle_fnWorldEditor_getSelectionCentroid(sbworldeditor, returnbuff);
return returnbuff.ToString();

}
/// <summary>
/// ( WorldEditor, getSelectionExtent, const char *, 2, 2, )
/// 
/// </summary>

internal string fnWorldEditor_getSelectionExtent (string worldeditor)
{
var returnbuff = new StringBuilder(4096);
var sbworldeditor = new StringBuilder(worldeditor, 1024);

SafeNativeMethods.mwle_fnWorldEditor_getSelectionExtent(sbworldeditor, returnbuff);
return returnbuff.ToString();

}
/// <summary>
/// ( WorldEditor, dropSelection, void, 2, 3, ( bool skipUndo = false ))
/// 
/// </summary>

internal void fnWorldEditor_dropSelection (string worldeditor, string a2)
{
var sbworldeditor = new StringBuilder(worldeditor, 1024);
var sba2 = new StringBuilder(a2, 4096);

SafeNativeMethods.mwle_fnWorldEditor_dropSelection(sbworldeditor, sba2);
}
/// <summary>
/// ( WorldEditor, cutSelection, void, 2, 2, )
/// 
/// </summary>

internal void fnWorldEditor_cutSelection (string worldeditor)
{
var sbworldeditor = new StringBuilder(worldeditor, 1024);

SafeNativeMethods.mwle_fnWorldEditor_cutSelection(sbworldeditor);
}
/// <summary>
/// ( WorldEditor, copySelection, void, 2, 2, )
/// 
/// </summary>

internal void fnWorldEditor_copySelection (string worldeditor)
{
var sbworldeditor = new StringBuilder(worldeditor, 1024);

SafeNativeMethods.mwle_fnWorldEditor_copySelection(sbworldeditor);
}
/// <summary>
/// ( WorldEditor, pasteSelection, void, 2, 2, )
/// 
/// </summary>

internal void fnWorldEditor_pasteSelection (string worldeditor)
{
var sbworldeditor = new StringBuilder(worldeditor, 1024);

SafeNativeMethods.mwle_fnWorldEditor_pasteSelection(sbworldeditor);
}
/// <summary>
/// ( WorldEditor, canPasteSelection, bool, 2, 2, )
/// 
/// </summary>

internal bool fnWorldEditor_canPasteSelection (string worldeditor)
{
var sbworldeditor = new StringBuilder(worldeditor, 1024);

return  SafeNativeMethods.mwle_fnWorldEditor_canPasteSelection(sbworldeditor)>=1;
}
/// <summary>
/// ( WorldEditor, hideObject, void, 4, 4, (Object obj, bool hide))
/// 
/// </summary>

internal void fnWorldEditor_hideObject (string worldeditor, string a2, string a3)
{
var sbworldeditor = new StringBuilder(worldeditor, 1024);
var sba2 = new StringBuilder(a2, 4096);
var sba3 = new StringBuilder(a3, 4096);

SafeNativeMethods.mwle_fnWorldEditor_hideObject(sbworldeditor, sba2, sba3);
}
/// <summary>
/// ( WorldEditor, hideSelection, void, 3, 3, (bool hide))
/// 
/// </summary>

internal void fnWorldEditor_hideSelection (string worldeditor, string a2)
{
var sbworldeditor = new StringBuilder(worldeditor, 1024);
var sba2 = new StringBuilder(a2, 4096);

SafeNativeMethods.mwle_fnWorldEditor_hideSelection(sbworldeditor, sba2);
}
/// <summary>
/// ( WorldEditor, lockSelection, void, 3, 3, (bool lock))
/// 
/// </summary>

internal void fnWorldEditor_lockSelection (string worldeditor, string a2)
{
var sbworldeditor = new StringBuilder(worldeditor, 1024);
var sba2 = new StringBuilder(a2, 4096);

SafeNativeMethods.mwle_fnWorldEditor_lockSelection(sbworldeditor, sba2);
}
/// <summary>
/// ( WorldEditor, alignByBounds, void, 3, 3, (int boundsAxis)
///               Align all selected objects against the given bounds axis.)
/// 
/// </summary>

internal void fnWorldEditor_alignByBounds (string worldeditor, string a2)
{
var sbworldeditor = new StringBuilder(worldeditor, 1024);
var sba2 = new StringBuilder(a2, 4096);

SafeNativeMethods.mwle_fnWorldEditor_alignByBounds(sbworldeditor, sba2);
}
/// <summary>
/// ( WorldEditor, alignByAxis, void, 3, 3, (int axis)
///               Align all selected objects along the given axis.)
/// 
/// </summary>

internal void fnWorldEditor_alignByAxis (string worldeditor, string a2)
{
var sbworldeditor = new StringBuilder(worldeditor, 1024);
var sba2 = new StringBuilder(a2, 4096);

SafeNativeMethods.mwle_fnWorldEditor_alignByAxis(sbworldeditor, sba2);
}
/// <summary>
/// ( WorldEditor, resetSelectedRotation, void, 2, 2, )
/// 
/// </summary>

internal void fnWorldEditor_resetSelectedRotation (string worldeditor)
{
var sbworldeditor = new StringBuilder(worldeditor, 1024);

SafeNativeMethods.mwle_fnWorldEditor_resetSelectedRotation(sbworldeditor);
}
/// <summary>
/// ( WorldEditor, resetSelectedScale, void, 2, 2, )
/// 
/// </summary>

internal void fnWorldEditor_resetSelectedScale (string worldeditor)
{
var sbworldeditor = new StringBuilder(worldeditor, 1024);

SafeNativeMethods.mwle_fnWorldEditor_resetSelectedScale(sbworldeditor);
}
/// <summary>
/// ( WorldEditor, redirectConsole, void, 3, 3, ( int objID ))
/// 
/// </summary>

internal void fnWorldEditor_redirectConsole (string worldeditor, string a2)
{
var sbworldeditor = new StringBuilder(worldeditor, 1024);
var sba2 = new StringBuilder(a2, 4096);

SafeNativeMethods.mwle_fnWorldEditor_redirectConsole(sbworldeditor, sba2);
}
/// <summary>
/// ( WorldEditor, addUndoState, void, 2, 2, )
/// 
/// </summary>

internal void fnWorldEditor_addUndoState (string worldeditor)
{
var sbworldeditor = new StringBuilder(worldeditor, 1024);

SafeNativeMethods.mwle_fnWorldEditor_addUndoState(sbworldeditor);
}
/// <summary>
/// ( WorldEditor, getSoftSnap, bool, 2, 2, getSoftSnap()
///               Is soft snapping always on?)
/// 
/// </summary>

internal bool fnWorldEditor_getSoftSnap (string worldeditor)
{
var sbworldeditor = new StringBuilder(worldeditor, 1024);

return  SafeNativeMethods.mwle_fnWorldEditor_getSoftSnap(sbworldeditor)>=1;
}
/// <summary>
/// ( WorldEditor, setSoftSnap, void, 3, 3, setSoftSnap(bool)
///               Allow soft snapping all of the time.)
/// 
/// </summary>

internal void fnWorldEditor_setSoftSnap (string worldeditor, string a2)
{
var sbworldeditor = new StringBuilder(worldeditor, 1024);
var sba2 = new StringBuilder(a2, 4096);

SafeNativeMethods.mwle_fnWorldEditor_setSoftSnap(sbworldeditor, sba2);
}
/// <summary>
/// ( WorldEditor, getSoftSnapSize, F32, 2, 2, getSoftSnapSize()
///               Get the absolute size to trigger a soft snap.)
/// 
/// </summary>

internal float fnWorldEditor_getSoftSnapSize (string worldeditor)
{
var sbworldeditor = new StringBuilder(worldeditor, 1024);

return  SafeNativeMethods.mwle_fnWorldEditor_getSoftSnapSize(sbworldeditor);
}
/// <summary>
/// ( WorldEditor, setSoftSnapSize, void, 3, 3, setSoftSnapSize(F32)
///               Set the absolute size to trigger a soft snap.)
/// 
/// </summary>

internal void fnWorldEditor_setSoftSnapSize (string worldeditor, string a2)
{
var sbworldeditor = new StringBuilder(worldeditor, 1024);
var sba2 = new StringBuilder(a2, 4096);

SafeNativeMethods.mwle_fnWorldEditor_setSoftSnapSize(sbworldeditor, sba2);
}
/// <summary>
/// ( WorldEditor, softSnapSizeByBounds, void, 3, 3, softSnapSizeByBounds(bool)
///               Use selection bounds size as soft snap bounds.)
/// 
/// </summary>

internal void fnWorldEditor_softSnapSizeByBounds (string worldeditor, string a2)
{
var sbworldeditor = new StringBuilder(worldeditor, 1024);
var sba2 = new StringBuilder(a2, 4096);

SafeNativeMethods.mwle_fnWorldEditor_softSnapSizeByBounds(sbworldeditor, sba2);
}
/// <summary>
/// ( WorldEditor, getSoftSnapBackfaceTolerance, F32, 2, 2, getSoftSnapBackfaceTolerance()
///               The fraction of the soft snap radius that backfaces may be included.)
/// 
/// </summary>

internal float fnWorldEditor_getSoftSnapBackfaceTolerance (string worldeditor)
{
var sbworldeditor = new StringBuilder(worldeditor, 1024);

return  SafeNativeMethods.mwle_fnWorldEditor_getSoftSnapBackfaceTolerance(sbworldeditor);
}
/// <summary>
/// ( WorldEditor, setSoftSnapBackfaceTolerance, void, 3, 3, setSoftSnapBackfaceTolerance(F32 with range of 0..1)
///               The fraction of the soft snap radius that backfaces may be included.)
/// 
/// </summary>

internal void fnWorldEditor_setSoftSnapBackfaceTolerance (string worldeditor, string a2)
{
var sbworldeditor = new StringBuilder(worldeditor, 1024);
var sba2 = new StringBuilder(a2, 4096);

SafeNativeMethods.mwle_fnWorldEditor_setSoftSnapBackfaceTolerance(sbworldeditor, sba2);
}
/// <summary>
/// ( WorldEditor, softSnapRender, void, 3, 3, softSnapRender(bool)
///               Render the soft snapping bounds.)
/// 
/// </summary>

internal void fnWorldEditor_softSnapRender (string worldeditor, string a2)
{
var sbworldeditor = new StringBuilder(worldeditor, 1024);
var sba2 = new StringBuilder(a2, 4096);

SafeNativeMethods.mwle_fnWorldEditor_softSnapRender(sbworldeditor, sba2);
}
/// <summary>
/// ( WorldEditor, softSnapRenderTriangle, void, 3, 3, softSnapRenderTriangle(bool)
///               Render the soft snapped triangle.)
/// 
/// </summary>

internal void fnWorldEditor_softSnapRenderTriangle (string worldeditor, string a2)
{
var sbworldeditor = new StringBuilder(worldeditor, 1024);
var sba2 = new StringBuilder(a2, 4096);

SafeNativeMethods.mwle_fnWorldEditor_softSnapRenderTriangle(sbworldeditor, sba2);
}
/// <summary>
/// ( WorldEditor, softSnapDebugRender, void, 3, 3, softSnapDebugRender(bool)
///               Toggle soft snapping debug rendering.)
/// 
/// </summary>

internal void fnWorldEditor_softSnapDebugRender (string worldeditor, string a2)
{
var sbworldeditor = new StringBuilder(worldeditor, 1024);
var sba2 = new StringBuilder(a2, 4096);

SafeNativeMethods.mwle_fnWorldEditor_softSnapDebugRender(sbworldeditor, sba2);
}
/// <summary>
/// ( WorldEditor, transformSelection, void, 13, 13, transformSelection(...)
///               Transform selection by given parameters.)
/// 
/// </summary>

internal void fnWorldEditor_transformSelection (string worldeditor, string a2, string a3, string a4, string a5, string a6, string a7, string a8, string a9, string a10, string a11, string a12)
{
var sbworldeditor = new StringBuilder(worldeditor, 1024);
var sba2 = new StringBuilder(a2, 4096);
var sba3 = new StringBuilder(a3, 4096);
var sba4 = new StringBuilder(a4, 4096);
var sba5 = new StringBuilder(a5, 4096);
var sba6 = new StringBuilder(a6, 4096);
var sba7 = new StringBuilder(a7, 4096);
var sba8 = new StringBuilder(a8, 4096);
var sba9 = new StringBuilder(a9, 4096);
var sba10 = new StringBuilder(a10, 4096);
var sba11 = new StringBuilder(a11, 4096);
var sba12 = new StringBuilder(a12, 4096);

SafeNativeMethods.mwle_fnWorldEditor_transformSelection(sbworldeditor, sba2, sba3, sba4, sba5, sba6, sba7, sba8, sba9, sba10, sba11, sba12);
}
/// <summary>
/// ( WorldEditor, colladaExportSelection, void, 3, 3, 
///               ( String path ) - Export the combined geometry of all selected objects to the specified path in collada format. )
/// 
/// </summary>

internal void fnWorldEditor_colladaExportSelection (string worldeditor, string a2)
{
var sbworldeditor = new StringBuilder(worldeditor, 1024);
var sba2 = new StringBuilder(a2, 4096);

SafeNativeMethods.mwle_fnWorldEditor_colladaExportSelection(sbworldeditor, sba2);
}
/// <summary>
/// ( WorldEditor, makeSelectionPrefab, void, 3, 3, ( string filename ) - Save selected objects to a .prefab file and replace them in the level with a Prefab object. )
/// 
/// </summary>

internal void fnWorldEditor_makeSelectionPrefab (string worldeditor, string a2)
{
var sbworldeditor = new StringBuilder(worldeditor, 1024);
var sba2 = new StringBuilder(a2, 4096);

SafeNativeMethods.mwle_fnWorldEditor_makeSelectionPrefab(sbworldeditor, sba2);
}
/// <summary>
/// ( WorldEditor, explodeSelectedPrefab, void, 2, 2, () - Replace selected Prefab objects with a SimGroup containing all children objects defined in the .prefab. )
/// 
/// </summary>

internal void fnWorldEditor_explodeSelectedPrefab (string worldeditor)
{
var sbworldeditor = new StringBuilder(worldeditor, 1024);

SafeNativeMethods.mwle_fnWorldEditor_explodeSelectedPrefab(sbworldeditor);
}
/// <summary>
/// ( WorldEditor, mountRelative, void, 4, 4, ( Object A, Object B ) )
/// 
/// </summary>

internal void fnWorldEditor_mountRelative (string worldeditor, string a2, string a3)
{
var sbworldeditor = new StringBuilder(worldeditor, 1024);
var sba2 = new StringBuilder(a2, 4096);
var sba3 = new StringBuilder(a3, 4096);

SafeNativeMethods.mwle_fnWorldEditor_mountRelative(sbworldeditor, sba2, sba3);
}
/// <summary>
/// Get the soft snap alignment. )
/// 
/// </summary>

internal int fnWorldEditor_getSoftSnapAlignment (string worldeditor)
{
var sbworldeditor = new StringBuilder(worldeditor, 1024);

return  SafeNativeMethods.mwle_fnWorldEditor_getSoftSnapAlignment(sbworldeditor);
}
/// <summary>
/// Set the soft snap alignment. )
/// 
/// </summary>

internal void fnWorldEditor_setSoftSnapAlignment (string worldeditor, int type)
{
var sbworldeditor = new StringBuilder(worldeditor, 1024);

SafeNativeMethods.mwle_fnWorldEditor_setSoftSnapAlignment(sbworldeditor, type);
}
/// <summary>
/// Get the terrain snap alignment.  )
/// 
/// </summary>

internal int fnWorldEditor_getTerrainSnapAlignment (string worldeditor)
{
var sbworldeditor = new StringBuilder(worldeditor, 1024);

return  SafeNativeMethods.mwle_fnWorldEditor_getTerrainSnapAlignment(sbworldeditor);
}
/// <summary>
/// Set the terrain snap alignment. )
/// 
/// </summary>

internal void fnWorldEditor_setTerrainSnapAlignment (string worldeditor, int alignment)
{
var sbworldeditor = new StringBuilder(worldeditor, 1024);

SafeNativeMethods.mwle_fnWorldEditor_setTerrainSnapAlignment(sbworldeditor, alignment);
}
/// <summary>
/// Grab the geometry from @a geometryProvider, create a @a className object, and assign it the extracted geometry. )
/// 
/// </summary>

internal string fnWorldEditor_createPolyhedralObject (string worldeditor, string className, string geometryProvider)
{
var returnbuff = new StringBuilder(1024);
var sbworldeditor = new StringBuilder(worldeditor, 1024);
var sbclassName = new StringBuilder(className, 4096);
var sbgeometryProvider = new StringBuilder(geometryProvider, 1024);

SafeNativeMethods.mwle_fnWorldEditor_createPolyhedralObject(sbworldeditor, sbclassName, sbgeometryProvider, returnbuff);
return returnbuff.ToString();

}
/// <summary>
/// Create a ConvexShape from the given polyhedral object. )
/// 
/// </summary>

internal string fnWorldEditor_createConvexShapeFrom (string worldeditor, string polyObject)
{
var returnbuff = new StringBuilder(1024);
var sbworldeditor = new StringBuilder(worldeditor, 1024);
var sbpolyObject = new StringBuilder(polyObject, 1024);

SafeNativeMethods.mwle_fnWorldEditor_createConvexShapeFrom(sbworldeditor, sbpolyObject, returnbuff);
return returnbuff.ToString();

}
/// <summary>
/// (LangTable, addLanguage, S32, 3, 4, 
/// 			  (string filename, [string languageName])
/// 			  @brief Adds a language to the table
/// 			  @param filename Name and path to the language file
/// 			  @param languageName Optional name to assign to the new language entry
/// 			  @return True If file was successfully found and language created
/// 			  )
/// 
/// </summary>

internal int fnLangTable_addLanguage (string langtable, string a2, string a3)
{
var sblangtable = new StringBuilder(langtable, 1024);
var sba2 = new StringBuilder(a2, 4096);
var sba3 = new StringBuilder(a3, 4096);

return  SafeNativeMethods.mwle_fnLangTable_addLanguage(sblangtable, sba2, sba3);
}
/// <summary>
/// (LangTable, getString, const char *, 3, 3, 
/// 			  (string filename)
/// 			  @brief Grabs a string from the specified table
/// 			  If an invalid is passed, the function will attempt to 
/// 			  to grab from the default table
/// 			  @param filename Name of the language table to access
/// 			  @return Text from the specified language table, \"\" if ID was invalid and default table is not set)
/// 
/// </summary>

internal string fnLangTable_getString (string langtable, string a2)
{
var returnbuff = new StringBuilder(4096);
var sblangtable = new StringBuilder(langtable, 1024);
var sba2 = new StringBuilder(a2, 4096);

SafeNativeMethods.mwle_fnLangTable_getString(sblangtable, sba2, returnbuff);
return returnbuff.ToString();

}
/// <summary>
/// (LangTable, setDefaultLanguage, void, 3, 3, (int language)
/// 			  @brief Sets the default language table
/// 			  @param language ID of the table)
/// 
/// </summary>

internal void fnLangTable_setDefaultLanguage (string langtable, string a2)
{
var sblangtable = new StringBuilder(langtable, 1024);
var sba2 = new StringBuilder(a2, 4096);

SafeNativeMethods.mwle_fnLangTable_setDefaultLanguage(sblangtable, sba2);
}
/// <summary>
/// (LangTable, setCurrentLanguage, void, 3, 3, 
/// 			  (int language)
/// 			  @brief Sets the current language table for grabbing text
/// 			  @param language ID of the table)
/// 
/// </summary>

internal void fnLangTable_setCurrentLanguage (string langtable, string a2)
{
var sblangtable = new StringBuilder(langtable, 1024);
var sba2 = new StringBuilder(a2, 4096);

SafeNativeMethods.mwle_fnLangTable_setCurrentLanguage(sblangtable, sba2);
}
/// <summary>
/// (LangTable, getCurrentLanguage, S32, 2, 2, ()
/// 			  @brief Get the ID of the current language table
/// 			  @return Numerical ID of the current language table)
/// 
/// </summary>

internal int fnLangTable_getCurrentLanguage (string langtable)
{
var sblangtable = new StringBuilder(langtable, 1024);

return  SafeNativeMethods.mwle_fnLangTable_getCurrentLanguage(sblangtable);
}
/// <summary>
/// (LangTable, getLangName, const char *, 3, 3, (int language)
/// 			  @brief Return the readable name of the language table
/// 			  @param language Numerical ID of the language table to access
/// 			  @return String containing the name of the table, NULL if ID was invalid or name was never specified)
/// 
/// </summary>

internal string fnLangTable_getLangName (string langtable, string a2)
{
var returnbuff = new StringBuilder(4096);
var sblangtable = new StringBuilder(langtable, 1024);
var sba2 = new StringBuilder(a2, 4096);

SafeNativeMethods.mwle_fnLangTable_getLangName(sblangtable, sba2, returnbuff);
return returnbuff.ToString();

}
/// <summary>
/// (LangTable, getNumLang, S32, 2, 2, ()
/// 			  @brief Used to find out how many languages are in the table
/// 			  @return Size of the vector containing the languages, numerical)
/// 
/// </summary>

internal int fnLangTable_getNumLang (string langtable)
{
var sblangtable = new StringBuilder(langtable, 1024);

return  SafeNativeMethods.mwle_fnLangTable_getNumLang(sblangtable);
}
/// <summary>
/// ( setInteriorFocusedDebug, void, 2, 2, (bool enable)
/// 				@brief No longer properly supported
/// 				@internal)
/// 
/// </summary>

internal void fn__setInteriorFocusedDebug (string a1)
{
var sba1 = new StringBuilder(a1, 4096);

SafeNativeMethods.mwle_fn__setInteriorFocusedDebug(sba1);
}
/// <summary>
/// ( isPointInside, bool, 2, 4, Check to see if a point in world space is inside of an interior.
/// 				@hide)
/// 
/// </summary>

internal bool fn__isPointInside (string a1, string a2, string a3)
{
var sba1 = new StringBuilder(a1, 4096);
var sba2 = new StringBuilder(a2, 4096);
var sba3 = new StringBuilder(a3, 4096);

return  SafeNativeMethods.mwle_fn__isPointInside(sba1, sba2, sba3)>=1;
}
/// <summary>
/// Globally changes how InteriorInstances are rendered. Useful for debugging geometry and rendering artifacts
///    
///    @note This does not work in shipping mode
/// 
///    @param mode The render mode can be one of the following numbers:
///    NormalRender            = 0,
///    NormalRenderLines       = 1,
///    ShowDetail              = 2,
///    ShowAmbiguous           = 3,
///    ShowOrphan              = 4,
///    ShowLightmaps           = 5,
///    ShowTexturesOnly        = 6,
///    ShowPortalZones         = 7,
///    ShowOutsideVisible      = 8,
///    ShowCollisionFans       = 9,
///    ShowStrips              = 10,
///    ShowNullSurfaces        = 11,
///    ShowLargeTextures       = 12,
///    ShowHullSurfaces        = 13,
///    ShowVehicleHullSurfaces = 14,
///    ShowVertexColors        = 15,
///    ShowDetailLevel         = 16
///    
///    @ingroup Game )
/// 
/// </summary>

internal void fn_setInteriorRenderMode (int mode)
{

SafeNativeMethods.mwle_fn_setInteriorRenderMode(mode);
}
/// <summary>
/// (PathedInterior, setPathPosition, void, 3, 3, )
/// 
/// </summary>

internal void fnPathedInterior_setPathPosition (string pathedinterior, string a2)
{
var sbpathedinterior = new StringBuilder(pathedinterior, 1024);
var sba2 = new StringBuilder(a2, 4096);

SafeNativeMethods.mwle_fnPathedInterior_setPathPosition(sbpathedinterior, sba2);
}
/// <summary>
/// (PathedInterior, setTargetPosition, void, 3, 3, )
/// 
/// </summary>

internal void fnPathedInterior_setTargetPosition (string pathedinterior, string a2)
{
var sbpathedinterior = new StringBuilder(pathedinterior, 1024);
var sba2 = new StringBuilder(a2, 4096);

SafeNativeMethods.mwle_fnPathedInterior_setTargetPosition(sbpathedinterior, sba2);
}
/// <summary>
/// Finds and activates the named light manager.
///    @return Returns true if the light manager is found and activated.
///    @ingroup Lighting )
/// 
/// </summary>

internal bool fn_setLightManager (string name)
{
var sbname = new StringBuilder(name, 4096);

return  SafeNativeMethods.mwle_fn_setLightManager(sbname)>=1;
}
/// <summary>
/// Will generate static lighting for the scene if supported by the active light manager.
///    If mode is \"forceAlways\", the lightmaps will be regenerated regardless of whether 
///    lighting cache files can be written to. If mode is \"forceWritable\", then the lightmaps 
///    will be regenerated only if the lighting cache files can be written.
///    @param completeCallbackFn The name of the function to execute when the lighting is complete.
///    @param mode One of \"forceAlways\",  \"forceWritable\" or \"loadOnly\".
///    @return Returns true if the scene lighting process was started.
///    @ingroup Lighting )
/// 
/// </summary>

internal bool fn_lightScene (string completeCallbackFn, string mode)
{
var sbcompleteCallbackFn = new StringBuilder(completeCallbackFn, 4096);
var sbmode = new StringBuilder(mode, 4096);

return  SafeNativeMethods.mwle_fn_lightScene(sbcompleteCallbackFn, sbmode)>=1;
}
/// <summary>
/// Returns a tab seperated list of light manager names.
///    @ingroup Lighting )
/// 
/// </summary>

internal string fn_getLightManagerNames ()
{
var returnbuff = new StringBuilder(1024);

SafeNativeMethods.mwle_fn_getLightManagerNames(returnbuff);
return returnbuff.ToString();

}
/// <summary>
/// Returns the active light manager name.
///    @ingroup Lighting )
/// 
/// </summary>

internal string fn_getActiveLightManager ()
{
var returnbuff = new StringBuilder(4096);

SafeNativeMethods.mwle_fn_getActiveLightManager(returnbuff);
return returnbuff.ToString();

}
/// <summary>
/// @brief Deactivates and then activates the currently active light manager.
///    This causes most shaders to be regenerated and is often used when global 
///    rendering changes have occured.
///    @ingroup Lighting )
/// 
/// </summary>

internal void fn_resetLightManager ()
{

SafeNativeMethods.mwle_fn_resetLightManager();
}
/// <summary>
/// ( setShadowVizLight, const char*, 2, 2,  )
/// 
/// </summary>

internal string fn__setShadowVizLight (string a1)
{
var returnbuff = new StringBuilder(4096);
var sba1 = new StringBuilder(a1, 4096);

SafeNativeMethods.mwle_fn__setShadowVizLight(sba1, returnbuff);
return returnbuff.ToString();

}
/// <summary>
/// ( Material, flush, void, 2, 2, 
///    Flushes all material instances that use this material. )
/// 
/// </summary>

internal void fnMaterial_flush (string material)
{
var sbmaterial = new StringBuilder(material, 1024);

SafeNativeMethods.mwle_fnMaterial_flush(sbmaterial);
}
/// <summary>
/// ( Material, reload, void, 2, 2, 
///    Reloads all material instances that use this material. )
/// 
/// </summary>

internal void fnMaterial_reload (string material)
{
var sbmaterial = new StringBuilder(material, 1024);

SafeNativeMethods.mwle_fnMaterial_reload(sbmaterial);
}
/// <summary>
/// ( Material, dumpInstances, void, 2, 2, 
///    Dumps a formatted list of the currently allocated material instances for this material to the console. )
/// 
/// </summary>

internal void fnMaterial_dumpInstances (string material)
{
var sbmaterial = new StringBuilder(material, 1024);

SafeNativeMethods.mwle_fnMaterial_dumpInstances(sbmaterial);
}
/// <summary>
/// ( Material, getAnimFlags, const char*, 3, 3,  )
/// 
/// </summary>

internal string fnMaterial_getAnimFlags (string material, string a2)
{
var returnbuff = new StringBuilder(4096);
var sbmaterial = new StringBuilder(material, 1024);
var sba2 = new StringBuilder(a2, 4096);

SafeNativeMethods.mwle_fnMaterial_getAnimFlags(sbmaterial, sba2, returnbuff);
return returnbuff.ToString();

}
/// <summary>
/// (Material, getFilename, const char*, 2, 2, Get filename of material)
/// 
/// </summary>

internal string fnMaterial_getFilename (string material)
{
var returnbuff = new StringBuilder(4096);
var sbmaterial = new StringBuilder(material, 1024);

SafeNativeMethods.mwle_fnMaterial_getFilename(sbmaterial, returnbuff);
return returnbuff.ToString();

}
/// <summary>
/// ( Material, isAutoGenerated, bool, 2, 2, 
///               Returns true if this Material was automatically generated by MaterialList::mapMaterials() )
/// 
/// </summary>

internal bool fnMaterial_isAutoGenerated (string material)
{
var sbmaterial = new StringBuilder(material, 1024);

return  SafeNativeMethods.mwle_fnMaterial_isAutoGenerated(sbmaterial)>=1;
}
/// <summary>
/// ( Material, setAutoGenerated, void, 3, 3, 
///               setAutoGenerated(bool isAutoGenerated): Set whether or not the Material is autogenerated. )
/// 
/// </summary>

internal void fnMaterial_setAutoGenerated (string material, string a2)
{
var sbmaterial = new StringBuilder(material, 1024);
var sba2 = new StringBuilder(a2, 4096);

SafeNativeMethods.mwle_fnMaterial_setAutoGenerated(sbmaterial, sba2);
}
/// <summary>
/// ( addMaterialMapping, void, 3, 3, (string texName, string matName)
///    @brief Maps the given texture to the given material.
///    Generates a console warning before overwriting.
///    Material maps are used by terrain and interiors for triggering 
///    effects when an object moves onto a terrain 
///    block or interior surface using the associated texture.
///    @ingroup Materials)
/// 
/// </summary>

internal void fn__addMaterialMapping (string a1, string a2)
{
var sba1 = new StringBuilder(a1, 4096);
var sba2 = new StringBuilder(a2, 4096);

SafeNativeMethods.mwle_fn__addMaterialMapping(sba1, sba2);
}
/// <summary>
/// ( getMaterialMapping, const char*, 2, 2, (string texName)
///    @brief Returns the name of the material mapped to this texture.
///    If no materials are found, an empty string is returned.
///    @param texName Name of the texture
///    @ingroup Materials)
/// 
/// </summary>

internal string fn__getMaterialMapping (string a1)
{
var returnbuff = new StringBuilder(4096);
var sba1 = new StringBuilder(a1, 4096);

SafeNativeMethods.mwle_fn__getMaterialMapping(sba1, returnbuff);
return returnbuff.ToString();

}
/// <summary>
/// ( getRandom, F32, 1, 3,
///    ( int a, int b ) 
///    @brief Returns a random number based on parameters passed in..
///    If no parameters are passed in, getRandom() will return a float between 0.0 and 1.0. If one 
///    parameter is passed an integer between 0 and the passed in value will be returned. Two parameters will 
///    return an integer between the specified numbers.
///    @param a If this is the only parameter, a number between 0 and a is returned. Elsewise represents the lower bound.
///    @param b Upper bound on the random number.  The random number will be <= @a b.
///    @return A pseudo-random integer between @a a and @a b, between 0 and a, or a 
///    float between 0.0 and 1.1 depending on usage.
///    @note All parameters are optional.
///    @see setRandomSeed
///    @ingroup Random )
/// 
/// </summary>

internal float fn__getRandom (string a1, string a2)
{
var sba1 = new StringBuilder(a1, 4096);
var sba2 = new StringBuilder(a2, 4096);

return  SafeNativeMethods.mwle_fn__getRandom(sba1, sba2);
}
/// <summary>
/// Add two vectors.
///    @param a The first vector.
///    @param b The second vector.
///    @return The vector @a a + @a b.
///    @tsexample
///       //-----------------------------------------------------------------------------
///       //
///       // VectorAdd( %a, %b );
///       //
///       // The sum of vector a, (ax, ay, az), and vector b, (bx, by, bz) is:
///       //
///       //     a + b = ( ax + bx, ay + by, az + bz )
///       //
///       //-----------------------------------------------------------------------------
///       %a = \"1 0 0\";
///       %b = \"0 1 0\";
///       // %r = \"( 1 + 0, 0 + 1, 0 + 0 )\";
///       // %r = \"1 1 0\";
///       %r = VectorAdd( %a, %b );
///    @endtsexample
///    @ingroup Vectors)
/// 
/// </summary>

internal string fn_VectorAdd (string a, string b)
{
var returnbuff = new StringBuilder(1024);
var sba = new StringBuilder(a, 1024);
var sbb = new StringBuilder(b, 1024);

SafeNativeMethods.mwle_fn_VectorAdd(sba, sbb, returnbuff);
return returnbuff.ToString();

}
/// <summary>
/// Subtract two vectors.
///    @param a The first vector.
///    @param b The second vector.
///    @return The vector @a a - @a b.
///    @tsexample
/// 	//-----------------------------------------------------------------------------
/// 	//
/// 	// VectorSub( %a, %b );
/// 	//
/// 	// The difference of vector a, (ax, ay, az), and vector b, (bx, by, bz) is:
/// 	//
/// 	//     a - b = ( ax - bx, ay - by, az - bz )
/// 	//
/// 	//-----------------------------------------------------------------------------
/// 
/// 	%a = \"1 0 0\";
/// 	%b = \"0 1 0\";
/// 
/// 	// %r = \"( 1 - 0, 0 - 1, 0 - 0 )\";
/// 	// %r = \"1 -1 0\";
/// 	%r = VectorSub( %a, %b );
///    @endtsexample
///    @ingroup Vectors )
/// 
/// </summary>

internal string fn_VectorSub (string a, string b)
{
var returnbuff = new StringBuilder(1024);
var sba = new StringBuilder(a, 1024);
var sbb = new StringBuilder(b, 1024);

SafeNativeMethods.mwle_fn_VectorSub(sba, sbb, returnbuff);
return returnbuff.ToString();

}
/// <summary>
/// Scales a vector by a scalar.
///    @param a The vector to scale.
///    @param scalar The scale factor.
///    @return The vector @a a * @a scalar.
///    @tsexample
/// 	//-----------------------------------------------------------------------------
/// 	//
/// 	// VectorScale( %a, %v );
/// 	//
/// 	// Scaling vector a, (ax, ay, az), but the scalar, v, is:
/// 	//
/// 	//     a * v = ( ax * v, ay * v, az * v )
/// 	//
/// 	//-----------------------------------------------------------------------------
/// 
/// 	%a = \"1 1 0\";
/// 	%v = \"2\";
/// 
/// 	// %r = \"( 1 * 2, 1 * 2, 0 * 2 )\";
/// 	// %r = \"2 2 0\";
/// 	%r = VectorScale( %a, %v );
///    @endtsexample
///    @ingroup Vectors )
/// 
/// </summary>

internal string fn_VectorScale (string a, float scalar)
{
var returnbuff = new StringBuilder(1024);
var sba = new StringBuilder(a, 1024);

SafeNativeMethods.mwle_fn_VectorScale(sba, scalar, returnbuff);
return returnbuff.ToString();

}
/// <summary>
/// Brings a vector into its unit form, i.e. such that it has the magnitute 1.
///    @param v The vector to normalize.
///    @return The vector @a v scaled to length 1.
///    @tsexample
/// 	//-----------------------------------------------------------------------------
/// 	//
/// 	// VectorNormalize( %a );
/// 	//
/// 	// The normalized vector a, (ax, ay, az), is:
/// 	//
/// 	//     a^ = a / ||a||
/// 	//        = ( ax / ||a||, ay / ||a||, az / ||a|| )
/// 	//
/// 	//-----------------------------------------------------------------------------
/// 
/// 	%a = \"1 1 0\";
/// 	%l = 1.414;
/// 
/// 	// %r = \"( 1 / 1.141, 1 / 1.141, 0 / 1.141 )\";
/// 	// %r = \"0.707 0.707 0\";
/// 	%r = VectorNormalize( %a );
///    @endtsexample
///    @ingroup Vectors )
/// 
/// </summary>

internal string fn_VectorNormalize (string v)
{
var returnbuff = new StringBuilder(1024);
var sbv = new StringBuilder(v, 1024);

SafeNativeMethods.mwle_fn_VectorNormalize(sbv, returnbuff);
return returnbuff.ToString();

}
/// <summary>
/// Compute the dot product of two vectors.
///    @param a The first vector.
///    @param b The second vector.
///    @return The dot product @a a * @a b.
///    @tsexample
/// 	//-----------------------------------------------------------------------------
/// 	//
/// 	// VectorDot( %a, %b );
/// 	//
/// 	// The dot product between vector a, (ax, ay, az), and vector b, (bx, by, bz), is:
/// 	//
/// 	//     a . b = ( ax * bx + ay * by + az * bz )
/// 	//
/// 	//-----------------------------------------------------------------------------
/// 
/// 	%a = \"1 1 0\";
/// 	%b = \"2 0 1\";
/// 
/// 	// %r = \"( 1 * 2 + 1 * 0 + 0 * 1 )\";
/// 	// %r = 2;
/// 	%r = VectorDot( %a, %b );
///    @endtsexample
///    @ingroup Vectors )
/// 
/// </summary>

internal float fn_VectorDot (string a, string b)
{
var sba = new StringBuilder(a, 1024);
var sbb = new StringBuilder(b, 1024);

return  SafeNativeMethods.mwle_fn_VectorDot(sba, sbb);
}
/// <summary>
/// Calculcate the cross product of two vectors.
///    @param a The first vector.
///    @param b The second vector.
///    @return The cross product @a x @a b.
///    @tsexample
/// 	//-----------------------------------------------------------------------------
/// 	//
/// 	// VectorCross( %a, %b );
/// 	//
/// 	// The cross product of vector a, (ax, ay, az), and vector b, (bx, by, bz), is
/// 	//
/// 	//     a x b = ( ( ay * bz ) - ( az * by ), ( az * bx ) - ( ax * bz ), ( ax * by ) - ( ay * bx ) )
/// 	//
/// 	//-----------------------------------------------------------------------------
/// 
/// 	%a = \"1 1 0\";
/// 	%b = \"2 0 1\";
/// 
/// 	// %r = \"( ( 1 * 1 ) - ( 0 * 0 ), ( 0 * 2 ) - ( 1 * 1 ), ( 1 * 0 ) - ( 1 * 2 ) )\";
/// 	// %r = \"1 -1 -2\";
/// 	%r = VectorCross( %a, %b );
///    @endtsexample	
///    @ingroup Vectors )
/// 
/// </summary>

internal string fn_VectorCross (string a, string b)
{
var returnbuff = new StringBuilder(1024);
var sba = new StringBuilder(a, 1024);
var sbb = new StringBuilder(b, 1024);

SafeNativeMethods.mwle_fn_VectorCross(sba, sbb, returnbuff);
return returnbuff.ToString();

}
/// <summary>
/// Compute the distance between two vectors.
///    @param a The first vector.
///    @param b The second vector.
///    @return The length( @a b - @a a ).
///    @tsexample
/// 	//-----------------------------------------------------------------------------
/// 	//
/// 	// VectorDist( %a, %b );
/// 	//
/// 	// The distance between vector a, (ax, ay, az), and vector b, (bx, by, bz), is
/// 	//
/// 	//     a -> b = ||( b - a )||
/// 	//            = ||( bx - ax, by - ay, bz - az )||
/// 	//            = mSqrt( ( bx - ax ) * ( bx - ax ) + ( by - ay ) * ( by - ay ) + ( bz - az ) * ( bz - az ) )
/// 	//
/// 	//-----------------------------------------------------------------------------
/// 
/// 	%a = \"1 1 0\";
/// 	%b = \"2 0 1\";
/// 
/// 	// %r = mSqrt( ( 2 - 1 ) * ( 2 - 1) + ( 0 - 1 ) * ( 0 - 1 ) + ( 1 - 0 ) * ( 1 - 0 ) );
/// 	// %r = mSqrt( 3 );
/// 	%r = VectorDist( %a, %b );
///    @endtsexample
///    @ingroup Vectors )
/// 
/// </summary>

internal float fn_VectorDist (string a, string b)
{
var sba = new StringBuilder(a, 1024);
var sbb = new StringBuilder(b, 1024);

return  SafeNativeMethods.mwle_fn_VectorDist(sba, sbb);
}
/// <summary>
/// Calculate the magnitude of the given vector.
///    @param v A vector.
///    @return The length of vector @a v.
///    @tsexample
/// 	//-----------------------------------------------------------------------------
/// 	//
/// 	// VectorLen( %a );
/// 	//
/// 	// The length or magnitude of  vector a, (ax, ay, az), is:
/// 	//
/// 	//     ||a|| = Sqrt( ax * ax + ay * ay + az * az )
/// 	//
/// 	//-----------------------------------------------------------------------------
/// 
/// 	%a = \"1 1 0\";
/// 
/// 	// %r = mSqrt( 1 * 1 + 1 * 1 + 0 * 0 );
/// 	// %r = mSqrt( 2 );
/// 	// %r = 1.414;
/// 	%r = VectorLen( %a );
///    @endtsexample
///    @ingroup Vectors )
/// 
/// </summary>

internal float fn_VectorLen (string v)
{
var sbv = new StringBuilder(v, 1024);

return  SafeNativeMethods.mwle_fn_VectorLen(sbv);
}
/// <summary>
/// Create an orthogonal basis from the given vector.
///    @param aaf The vector to create the orthogonal basis from.
///    @return A matrix representing the orthogonal basis.
///    @ingroup Vectors )
/// 
/// </summary>

internal string fn_VectorOrthoBasis (string aa)
{
var returnbuff = new StringBuilder(1024);
var sbaa = new StringBuilder(aa, 1024);

SafeNativeMethods.mwle_fn_VectorOrthoBasis(sbaa, returnbuff);
return returnbuff.ToString();

}
/// <summary>
/// Linearly interpolate between two vectors by @a t.
///    @param a Vector to start interpolation from.
///    @param b Vector to interpolate to.
///    @param t Interpolation factor (0-1).  At zero, @a a is returned and at one, @a b is returned.  In between, an interpolated vector 
///       between @a a and @a b is returned.
///    @return An interpolated vector between @a a and @a b.
///    @tsexample
/// 	//-----------------------------------------------------------------------------
/// 	//
/// 	// VectorLerp( %a, %b );
/// 	//
/// 	// The point between vector a, (ax, ay, az), and vector b, (bx, by, bz), which is
/// 	// weighted by the interpolation factor, t, is
/// 	//
/// 	//     r = a + t * ( b - a )
/// 	//       = ( ax + t * ( bx - ax ), ay + t * ( by - ay ), az + t * ( bz - az ) )
/// 	//
/// 	//-----------------------------------------------------------------------------
/// 
/// 	%a = \"1 1 0\";
/// 	%b = \"2 0 1\";
/// 	%v = \"0.25\";
/// 
/// 	// %r = \"( 1 + 0.25 * ( 2 - 1 ), 1 + 0.25 * ( 0 - 1 ), 0 + 0.25 * ( 1 - 0 ) )\";
/// 	// %r = \"1.25 0.75 0.25\";
/// 	%r = VectorLerp( %a, %b );
///    @endtsexample
///    @ingroup Vectors )
/// 
/// </summary>

internal string fn_VectorLerp (string a, string b, float t)
{
var returnbuff = new StringBuilder(1024);
var sba = new StringBuilder(a, 1024);
var sbb = new StringBuilder(b, 1024);

SafeNativeMethods.mwle_fn_VectorLerp(sba, sbb, t, returnbuff);
return returnbuff.ToString();

}
/// <summary>
/// Create a transform from the given translation and orientation.
///    @param position The translation vector for the transform.
///    @param orientation The axis and rotation that orients the transform.
///    @return A transform based on the given position and orientation.
///    @ingroup Matrices )
/// 
/// </summary>

internal string fn_MatrixCreate (string position, string orientation)
{
var returnbuff = new StringBuilder(1024);
var sbposition = new StringBuilder(position, 1024);
var sborientation = new StringBuilder(orientation, 1024);

SafeNativeMethods.mwle_fn_MatrixCreate(sbposition, sborientation, returnbuff);
return returnbuff.ToString();

}
/// <summary>
/// @Create a matrix from the given rotations.
///    @param Vector3F X, Y, and Z rotation in *radians*.
///    @return A transform based on the given orientation.
///    @ingroup Matrices )
/// 
/// </summary>

internal string fn_MatrixCreateFromEuler (string angles)
{
var returnbuff = new StringBuilder(1024);
var sbangles = new StringBuilder(angles, 1024);

SafeNativeMethods.mwle_fn_MatrixCreateFromEuler(sbangles, returnbuff);
return returnbuff.ToString();

}
/// <summary>
/// @brief Multiply the two matrices.
///    @param left First transform.
///    @param right Right transform.
///    @return Concatenation of the two transforms.
///    @ingroup Matrices )
/// 
/// </summary>

internal string fn_MatrixMultiply (string left, string right)
{
var returnbuff = new StringBuilder(1024);
var sbleft = new StringBuilder(left, 1024);
var sbright = new StringBuilder(right, 1024);

SafeNativeMethods.mwle_fn_MatrixMultiply(sbleft, sbright, returnbuff);
return returnbuff.ToString();

}
/// <summary>
/// @brief Multiply the vector by the transform assuming that w=0.
///    This function will multiply the given vector by the given transform such that translation will 
///    not affect the vector.
///    @param transform A transform.
///    @param vector A vector.
///    @return The transformed vector.
///    @ingroup Matrices)
/// 
/// </summary>

internal string fn_MatrixMulVector (string transform, string vector)
{
var returnbuff = new StringBuilder(1024);
var sbtransform = new StringBuilder(transform, 1024);
var sbvector = new StringBuilder(vector, 1024);

SafeNativeMethods.mwle_fn_MatrixMulVector(sbtransform, sbvector, returnbuff);
return returnbuff.ToString();

}
/// <summary>
/// @brief Multiply the given point by the given transform assuming that w=1.
///    This function will multiply the given vector such that translation with take effect.
///    @param transform A transform.
///    @param point A vector.
///    @return The transformed vector.
///    @ingroup Matrices)
/// 
/// </summary>

internal string fn_MatrixMulPoint (string transform, string point)
{
var returnbuff = new StringBuilder(1024);
var sbtransform = new StringBuilder(transform, 1024);
var sbpoint = new StringBuilder(point, 1024);

SafeNativeMethods.mwle_fn_MatrixMulPoint(sbtransform, sbpoint, returnbuff);
return returnbuff.ToString();

}
/// <summary>
/// Get the center point of an axis-aligned box.
///    @param b A Box3F, in string format using \"minExtentX minExtentY minExtentZ maxExtentX maxExtentY maxExtentZ\"
///    @return Center of the box.
///    @ingroup Math)
/// 
/// </summary>

internal string fn_getBoxCenter (string box)
{
var returnbuff = new StringBuilder(1024);
var sbbox = new StringBuilder(box, 1024);

SafeNativeMethods.mwle_fn_getBoxCenter(sbbox, returnbuff);
return returnbuff.ToString();

}
/// <summary>
/// Set the current seed for the random number generator.
///    Based on this seed, a repeatable sequence of numbers will be produced by getRandom().
///    @param seed The seed with which to initialize the randon number generator with.  The same seed will always leed to
///       the same sequence of pseudo-random numbers.
///       If -1, the current timestamp will be used as the seed which is a good basis for randomization.
///    @ingroup Random )
/// 
/// </summary>

internal void fn_setRandomSeed (int seed)
{

SafeNativeMethods.mwle_fn_setRandomSeed(seed);
}
/// <summary>
/// Get the current seed used by the random number generator.
///    @return The current random number generator seed value.
///    @ingroup Random )
/// 
/// </summary>

internal int fn_getRandomSeed ()
{

return  SafeNativeMethods.mwle_fn_getRandomSeed();
}
/// <summary>
/// Solve a quadratic equation (2nd degree polynomial) of form a*x^2 + b*x + c = 0.
///     @param a First Coefficient.
///     @param b Second Coefficient.
///     @param c Third Coefficient.
///     @returns A triple, containing: (sol x0 x1). (sol) is the number of solutions
///     (being 0, 1, or 2), and (x0) and (x1) are the solutions, if any.
///     @ingroup Math )
/// 
/// </summary>

internal string fn_mSolveQuadratic (float a, float b, float c)
{
var returnbuff = new StringBuilder(4096);

SafeNativeMethods.mwle_fn_mSolveQuadratic(a, b, c, returnbuff);
return returnbuff.ToString();

}
/// <summary>
/// Solve a cubic equation (3rd degree polynomial) of form a*x^3 + b*x^2 + c*x + d = 0.
///     @param a First Coefficient.
///     @param b Second Coefficient.
///     @param c Third Coefficient.
///     @param d Fourth Coefficient.
///     @returns A 4-tuple, containing: (sol x0 x1 x2). (sol) is the number of solutions
///     (being 0, 1, 2 or 3), and (x0), (x1) and (x2) are the solutions, if any.
///     @ingroup Math )
/// 
/// </summary>

internal string fn_mSolveCubic (float a, float b, float c, float d)
{
var returnbuff = new StringBuilder(4096);

SafeNativeMethods.mwle_fn_mSolveCubic(a, b, c, d, returnbuff);
return returnbuff.ToString();

}
/// <summary>
/// Solve a quartic equation (4th degree polynomial) of form a*x^4 + b*x^3 + c*x^2 + d*x + e = 0.
///     @param a First Coefficient.
///     @param b Second Coefficient.
///     @param c Third Coefficient.
///     @param d Fourth Coefficient.
///     @param e Fifth Coefficient.
///     @returns A 5-tuple, containing: (sol x0 x1 x2 c3). (sol) is the number of solutions
///     (being 0, 1, 2, 3 or 4), and (x0), (x1), (x2) and (x3) are the solutions, if any.
///     @ingroup Math )
/// 
/// </summary>

internal string fn_mSolveQuartic (float a, float b, float c, float d, float e)
{
var returnbuff = new StringBuilder(4096);

SafeNativeMethods.mwle_fn_mSolveQuartic(a, b, c, d, e, returnbuff);
return returnbuff.ToString();

}
/// <summary>
/// Round v down to the nearest integer.
///     @param v Number to convert to integer.
///     @returns Number converted to integer.
///     @ingroup Math )
/// 
/// </summary>

internal int fn_mFloor (float v)
{

return  SafeNativeMethods.mwle_fn_mFloor(v);
}
/// <summary>
/// Round v to the nearest integer.
///     @param v Number to convert to integer.
///     @returns Number converted to integer.
///     @ingroup Math )
/// 
/// </summary>

internal int fn_mRound (float v)
{

return  SafeNativeMethods.mwle_fn_mRound(v);
}
/// <summary>
/// Round v up to the nearest integer.
///     @param v Number to convert to integer.
///     @returns Number converted to integer.
///     @ingroup Math )
/// 
/// </summary>

internal int fn_mCeil (float v)
{

return  SafeNativeMethods.mwle_fn_mCeil(v);
}
/// <summary>
/// Formats the specified number to the given number of decimal places.
///     @param v Number to format.
///     @param precision Number of decimal places to format to (1-9).
///     @returns Number formatted to the specified number of decimal places.
///     @ingroup Math )
/// 
/// </summary>

internal string fn_mFloatLength (float v, uint precision)
{
var returnbuff = new StringBuilder(4096);

SafeNativeMethods.mwle_fn_mFloatLength(v, precision, returnbuff);
return returnbuff.ToString();

}
/// <summary>
/// Calculate absolute value of specified value.
///     @param v Input Value.
///     @returns Absolute value of specified value.
///     @ingroup Math )
/// 
/// </summary>

internal float fn_mAbs (float v)
{

return  SafeNativeMethods.mwle_fn_mAbs(v);
}
/// <summary>
/// Calculate the remainder of v/d.
///     @param v Input Value.
///     @param d Divisor Value.
///     @returns The remainder of v/d.
///     @ingroup Math )
/// 
/// </summary>

internal float fn_mFMod (float v, float d)
{

return  SafeNativeMethods.mwle_fn_mFMod(v, d);
}
/// <summary>
/// Calculate the square-root of v.
///     @param v Input Value.
///     @returns The square-root of the input value.
///     @ingroup Math )
/// 
/// </summary>

internal float fn_mSqrt (float v)
{

return  SafeNativeMethods.mwle_fn_mSqrt(v);
}
/// <summary>
/// Calculate b raised to the p-th power.
///     @param v Input Value.
///     @param p Power to raise value by.
///     @returns v raised to the p-th power.
///     @ingroup Math )
/// 
/// </summary>

internal float fn_mPow (float v, float p)
{

return  SafeNativeMethods.mwle_fn_mPow(v, p);
}
/// <summary>
/// Calculate the natural logarithm of v.
///     @param v Input Value.
///     @returns The natural logarithm of the input value.
///     @ingroup Math )
/// 
/// </summary>

internal float fn_mLog (float v)
{

return  SafeNativeMethods.mwle_fn_mLog(v);
}
/// <summary>
/// Calculate the sine of v.
///     @param v Input Value (in radians).
///     @returns The sine of the input value.
///     @ingroup Math )
/// 
/// </summary>

internal float fn_mSin (float v)
{

return  SafeNativeMethods.mwle_fn_mSin(v);
}
/// <summary>
/// Calculate the cosine of v.
///     @param v Input Value (in radians).
///     @returns The cosine of the input value.
///     @ingroup Math )
/// 
/// </summary>

internal float fn_mCos (float v)
{

return  SafeNativeMethods.mwle_fn_mCos(v);
}
/// <summary>
/// Calculate the tangent of v.
///     @param v Input Value (in radians).
///     @returns The tangent of the input value.
///     @ingroup Math )
/// 
/// </summary>

internal float fn_mTan (float v)
{

return  SafeNativeMethods.mwle_fn_mTan(v);
}
/// <summary>
/// Calculate the arc-sine of v.
///     @param v Input Value (in radians).
///     @returns The arc-sine of the input value.
///     @ingroup Math )
/// 
/// </summary>

internal float fn_mAsin (float v)
{

return  SafeNativeMethods.mwle_fn_mAsin(v);
}
/// <summary>
/// Calculate the arc-cosine of v.
///     @param v Input Value (in radians).
///     @returns The arc-cosine of the input value.
///     @ingroup Math )
/// 
/// </summary>

internal float fn_mAcos (float v)
{

return  SafeNativeMethods.mwle_fn_mAcos(v);
}
/// <summary>
/// Calculate the arc-tangent (slope) of a line defined by rise and run.
///     @param rise of line.
///     @param run of line.
///     @returns The arc-tangent (slope) of a line defined by rise and run.
///     @ingroup Math )
/// 
/// </summary>

internal float fn_mAtan (float rise, float run)
{

return  SafeNativeMethods.mwle_fn_mAtan(rise, run);
}
/// <summary>
/// Convert specified radians into degrees.
///     @param radians Input Value (in radians).
///     @returns The specified radians value converted to degrees.
///     @ingroup Math )
/// 
/// </summary>

internal float fn_mRadToDeg (float radians)
{

return  SafeNativeMethods.mwle_fn_mRadToDeg(radians);
}
/// <summary>
/// Convert specified degrees into radians.
///     @param degrees Input Value (in degrees).
///     @returns The specified degrees value converted to radians.
///     @ingroup Math )
/// 
/// </summary>

internal float fn_mDegToRad (float degrees)
{

return  SafeNativeMethods.mwle_fn_mDegToRad(degrees);
}
/// <summary>
/// Clamp the specified value between two bounds.
///     @param v Input value.
///     @param min Minimum Bound.
///     @param max Maximum Bound.
///     @returns The specified value clamped to the specified bounds.
///     @ingroup Math )
/// 
/// </summary>

internal float fn_mClamp (float v, float min, float max)
{

return  SafeNativeMethods.mwle_fn_mClamp(v, min, max);
}
/// <summary>
/// Clamp the specified value between 0 and 1 (inclusive).
///     @param v Input value.
///     @returns The specified value clamped between 0 and 1 (inclusive).
///     @ingroup Math )
/// 
/// </summary>

internal float fn_mSaturate (float v)
{

return  SafeNativeMethods.mwle_fn_mSaturate(v);
}
/// <summary>
/// Calculate the greater of two specified numbers.
///     @param v1 Input value.
///     @param v2 Input value.
///     @returns The greater value of the two specified values.
///     @ingroup Math )
/// 
/// </summary>

internal float fn_getMax (float v1, float v2)
{

return  SafeNativeMethods.mwle_fn_getMax(v1, v2);
}
/// <summary>
/// Calculate the lesser of two specified numbers.
///     @param v1 Input value.
///     @param v2 Input value.
///     @returns The lesser value of the two specified values.
///     @ingroup Math )
/// 
/// </summary>

internal float fn_getMin (float v1, float v2)
{

return  SafeNativeMethods.mwle_fn_getMin(v1, v2);
}
/// <summary>
/// Calculate linearly interpolated value between two specified numbers using specified normalized time.
///     @param v1 Interpolate From Input value.
///     @param v2 Interpolate To Input value.
///     @param time Normalized time used to interpolate values (0-1).
///     @returns The interpolated value between the two specified values at normalized time t.
///     @ingroup Math )
/// 
/// </summary>

internal float fn_mLerp (float v1, float v2, float time)
{

return  SafeNativeMethods.mwle_fn_mLerp(v1, v2, time);
}
/// <summary>
/// Return the value of PI (half-circle in radians).
///     @returns The value of PI.
///     @ingroup Math )
/// 
/// </summary>

internal float fn_mPi ()
{

return  SafeNativeMethods.mwle_fn_mPi();
}
/// <summary>
/// Return the value of 2*PI (full-circle in radians).
///     @returns The value of 2*PI.
///     @ingroup Math )
/// 
/// </summary>

internal float fn_m2Pi ()
{

return  SafeNativeMethods.mwle_fn_m2Pi();
}
/// <summary>
/// Returns whether the value is an exact power of two.
///     @param v Input value.
///     @returns Whether the specified value is an exact power of two.
///     @ingroup Math )
/// 
/// </summary>

internal bool fn_mIsPow2 (int v)
{

return  SafeNativeMethods.mwle_fn_mIsPow2(v)>=1;
}
/// <summary>
/// ( SimResponseCurve, addPoint, void, 4, 4, addPoint( F32 value, F32 time ) )
/// 
/// </summary>

internal void fnSimResponseCurve_addPoint (string simresponsecurve, string a2, string a3)
{
var sbsimresponsecurve = new StringBuilder(simresponsecurve, 1024);
var sba2 = new StringBuilder(a2, 4096);
var sba3 = new StringBuilder(a3, 4096);

SafeNativeMethods.mwle_fnSimResponseCurve_addPoint(sbsimresponsecurve, sba2, sba3);
}
/// <summary>
/// ( SimResponseCurve, getValue, F32, 3, 3, getValue( F32 time ) )
/// 
/// </summary>

internal float fnSimResponseCurve_getValue (string simresponsecurve, string a2)
{
var sbsimresponsecurve = new StringBuilder(simresponsecurve, 1024);
var sba2 = new StringBuilder(a2, 4096);

return  SafeNativeMethods.mwle_fnSimResponseCurve_getValue(sbsimresponsecurve, sba2);
}
/// <summary>
/// ( SimResponseCurve, clear, void, 2, 2, clear() )
/// 
/// </summary>

internal void fnSimResponseCurve_clear (string simresponsecurve)
{
var sbsimresponsecurve = new StringBuilder(simresponsecurve, 1024);

SafeNativeMethods.mwle_fnSimResponseCurve_clear(sbsimresponsecurve);
}
/// <summary>
/// (getTemporaryDirectory, const char *, 1, 1, ()
/// 				@brief Returns the OS temporary directory, \"C:/Users/Mich/AppData/Local/Temp\" for example
/// 				@note This can be useful to adhering to OS standards and practices, 
/// 				but not really used in Torque 3D right now.
/// 				@note Be very careful when getting into OS level File I/O.
/// 				@return String containing path to OS temp directory
/// 				@note This is legacy function brought over from TGB, and does not appear 
/// 				to have much use. Possibly deprecate?
/// 				@ingroup FileSystem
/// 				@internal)
/// 
/// </summary>

internal string fn__getTemporaryDirectory ()
{
var returnbuff = new StringBuilder(4096);

SafeNativeMethods.mwle_fn__getTemporaryDirectory(returnbuff);
return returnbuff.ToString();

}
/// <summary>
/// (getTemporaryFileName, const char *, 1, 1, ()
/// 				@brief Creates a name and extension for a potential temporary file
/// 				This does not create the actual file. It simply creates a random name 
/// 				for a file that does not exist.
/// 				@note This is legacy function brought over from TGB, and does not appear 
/// 				to have much use. Possibly deprecate?
/// 				@ingroup FileSystem
/// 				@internal)
/// 
/// </summary>

internal string fn__getTemporaryFileName ()
{
var returnbuff = new StringBuilder(4096);

SafeNativeMethods.mwle_fn__getTemporaryFileName(returnbuff);
return returnbuff.ToString();

}
/// <summary>
/// @brief Enable or disable a specific profile.
///    @param enable     Optional paramater to enable or disable the profile.
///    @param markerName Name of a specific marker to enable or disable.
///    @note Calling this function will first call profilerReset(), clearing all data from profiler. 
///    All profile markers are enabled by default.
///    @ingroup Debugging)
/// 
/// </summary>

internal void fn_profilerMarkerEnable (string markerName, bool enable)
{
var sbmarkerName = new StringBuilder(markerName, 4096);

SafeNativeMethods.mwle_fn_profilerMarkerEnable(sbmarkerName, enable);
}
/// <summary>
/// @brief Enables or disables the profiler.
/// 				Data is only gathered while the profiler is enabled.
/// 				@note Profiler is not available in shipping builds.
/// 				T3D has predefined profiling areas surrounded by markers, 
/// 				but you may need to define additional markers (in C++) around areas you wish to profile,
/// 				 by using the PROFILE_START( markerName ); and PROFILE_END(); macros.
/// 				@ingroup Debugging )
/// 
/// </summary>

internal void fn_profilerEnable (bool enable)
{

SafeNativeMethods.mwle_fn_profilerEnable(enable);
}
/// <summary>
/// @brief Dumps current profiling stats to the console window.
/// 				@note Markers disabled with profilerMarkerEnable() will be skipped over. 
/// 				If the profiler is currently running, it will be disabled.
/// 				@ingroup Debugging)
/// 
/// </summary>

internal void fn_profilerDump ()
{

SafeNativeMethods.mwle_fn_profilerDump();
}
/// <summary>
/// @brief Dumps current profiling stats to a file.
/// 				@note If the profiler is currently running, it will be disabled.
/// 				@param fileName Name and path of file to save profiling stats to. Must use forward slashes (/). 
/// 				Will attempt to create the file if it does not already exist.
/// 				@tsexample
/// 				profilerDumpToFile( \"C:/Torque/log1.txt\" );
/// 				@endtsexample
/// 				@ingroup Debugging )
/// 
/// </summary>

internal void fn_profilerDumpToFile (string fileName)
{
var sbfileName = new StringBuilder(fileName, 4096);

SafeNativeMethods.mwle_fn_profilerDumpToFile(sbfileName);
}
/// <summary>
/// @brief Resets the profiler, clearing it of all its data.
/// 				If the profiler is currently running, it will first be disabled. 
/// 				All markers will retain their current enabled/disabled status.
/// 				@ingroup Debugging )
/// 
/// </summary>

internal void fn_profilerReset ()
{

SafeNativeMethods.mwle_fn_profilerReset();
}
/// <summary>
/// (MenuBar, attachToCanvas, void, 4, 4, (GuiCanvas, pos))
/// 
/// </summary>

internal void fnMenuBar_attachToCanvas (string menubar, string a2, string a3)
{
var sbmenubar = new StringBuilder(menubar, 1024);
var sba2 = new StringBuilder(a2, 4096);
var sba3 = new StringBuilder(a3, 4096);

SafeNativeMethods.mwle_fnMenuBar_attachToCanvas(sbmenubar, sba2, sba3);
}
/// <summary>
/// (MenuBar, removeFromCanvas, void, 2, 2, ())
/// 
/// </summary>

internal void fnMenuBar_removeFromCanvas (string menubar)
{
var sbmenubar = new StringBuilder(menubar, 1024);

SafeNativeMethods.mwle_fnMenuBar_removeFromCanvas(sbmenubar);
}
/// <summary>
/// (MenuBar, insert, void, 4, 4,(object, pos) insert object at position)
/// 
/// </summary>

internal void fnMenuBar_insert (string menubar, string a2, string a3)
{
var sbmenubar = new StringBuilder(menubar, 1024);
var sba2 = new StringBuilder(a2, 4096);
var sba3 = new StringBuilder(a3, 4096);

SafeNativeMethods.mwle_fnMenuBar_insert(sbmenubar, sba2, sba3);
}
/// <summary>
/// (PopupMenu, insertItem, S32, 3, 5, (pos[, title][, accelerator]))
/// 
/// </summary>

internal int fnPopupMenu_insertItem (string popupmenu, string a2, string a3, string a4)
{
var sbpopupmenu = new StringBuilder(popupmenu, 1024);
var sba2 = new StringBuilder(a2, 4096);
var sba3 = new StringBuilder(a3, 4096);
var sba4 = new StringBuilder(a4, 4096);

return  SafeNativeMethods.mwle_fnPopupMenu_insertItem(sbpopupmenu, sba2, sba3, sba4);
}
/// <summary>
/// (PopupMenu, removeItem, void, 3, 3, (pos))
/// 
/// </summary>

internal void fnPopupMenu_removeItem (string popupmenu, string a2)
{
var sbpopupmenu = new StringBuilder(popupmenu, 1024);
var sba2 = new StringBuilder(a2, 4096);

SafeNativeMethods.mwle_fnPopupMenu_removeItem(sbpopupmenu, sba2);
}
/// <summary>
/// (PopupMenu, insertSubMenu, S32, 5, 5, (pos, title, subMenu))
/// 
/// </summary>

internal int fnPopupMenu_insertSubMenu (string popupmenu, string a2, string a3, string a4)
{
var sbpopupmenu = new StringBuilder(popupmenu, 1024);
var sba2 = new StringBuilder(a2, 4096);
var sba3 = new StringBuilder(a3, 4096);
var sba4 = new StringBuilder(a4, 4096);

return  SafeNativeMethods.mwle_fnPopupMenu_insertSubMenu(sbpopupmenu, sba2, sba3, sba4);
}
/// <summary>
/// (PopupMenu, setItem, bool, 4, 5, (pos, title[, accelerator]))
/// 
/// </summary>

internal bool fnPopupMenu_setItem (string popupmenu, string a2, string a3, string a4)
{
var sbpopupmenu = new StringBuilder(popupmenu, 1024);
var sba2 = new StringBuilder(a2, 4096);
var sba3 = new StringBuilder(a3, 4096);
var sba4 = new StringBuilder(a4, 4096);

return  SafeNativeMethods.mwle_fnPopupMenu_setItem(sbpopupmenu, sba2, sba3, sba4)>=1;
}
/// <summary>
/// (PopupMenu, enableItem, void, 4, 4, (pos, enabled))
/// 
/// </summary>

internal void fnPopupMenu_enableItem (string popupmenu, string a2, string a3)
{
var sbpopupmenu = new StringBuilder(popupmenu, 1024);
var sba2 = new StringBuilder(a2, 4096);
var sba3 = new StringBuilder(a3, 4096);

SafeNativeMethods.mwle_fnPopupMenu_enableItem(sbpopupmenu, sba2, sba3);
}
/// <summary>
/// (PopupMenu, checkItem, void, 4, 4, (pos, checked))
/// 
/// </summary>

internal void fnPopupMenu_checkItem (string popupmenu, string a2, string a3)
{
var sbpopupmenu = new StringBuilder(popupmenu, 1024);
var sba2 = new StringBuilder(a2, 4096);
var sba3 = new StringBuilder(a3, 4096);

SafeNativeMethods.mwle_fnPopupMenu_checkItem(sbpopupmenu, sba2, sba3);
}
/// <summary>
/// (PopupMenu, checkRadioItem, void, 5, 5, (firstPos, lastPos, checkPos))
/// 
/// </summary>

internal void fnPopupMenu_checkRadioItem (string popupmenu, string a2, string a3, string a4)
{
var sbpopupmenu = new StringBuilder(popupmenu, 1024);
var sba2 = new StringBuilder(a2, 4096);
var sba3 = new StringBuilder(a3, 4096);
var sba4 = new StringBuilder(a4, 4096);

SafeNativeMethods.mwle_fnPopupMenu_checkRadioItem(sbpopupmenu, sba2, sba3, sba4);
}
/// <summary>
/// (PopupMenu, isItemChecked, bool, 3, 3, (pos))
/// 
/// </summary>

internal bool fnPopupMenu_isItemChecked (string popupmenu, string a2)
{
var sbpopupmenu = new StringBuilder(popupmenu, 1024);
var sba2 = new StringBuilder(a2, 4096);

return  SafeNativeMethods.mwle_fnPopupMenu_isItemChecked(sbpopupmenu, sba2)>=1;
}
/// <summary>
/// (PopupMenu, getItemCount, S32, 2, 2, ())
/// 
/// </summary>

internal int fnPopupMenu_getItemCount (string popupmenu)
{
var sbpopupmenu = new StringBuilder(popupmenu, 1024);

return  SafeNativeMethods.mwle_fnPopupMenu_getItemCount(sbpopupmenu);
}
/// <summary>
/// (PopupMenu, attachToMenuBar, void, 5, 5, (GuiCanvas, pos, title))
/// 
/// </summary>

internal void fnPopupMenu_attachToMenuBar (string popupmenu, string a2, string a3, string a4)
{
var sbpopupmenu = new StringBuilder(popupmenu, 1024);
var sba2 = new StringBuilder(a2, 4096);
var sba3 = new StringBuilder(a3, 4096);
var sba4 = new StringBuilder(a4, 4096);

SafeNativeMethods.mwle_fnPopupMenu_attachToMenuBar(sbpopupmenu, sba2, sba3, sba4);
}
/// <summary>
/// (PopupMenu, removeFromMenuBar, void, 2, 2, ())
/// 
/// </summary>

internal void fnPopupMenu_removeFromMenuBar (string popupmenu)
{
var sbpopupmenu = new StringBuilder(popupmenu, 1024);

SafeNativeMethods.mwle_fnPopupMenu_removeFromMenuBar(sbpopupmenu);
}
/// <summary>
/// (PopupMenu, showPopup, void, 3, 5, (Canvas,[x, y]))
/// 
/// </summary>

internal void fnPopupMenu_showPopup (string popupmenu, string a2, string a3, string a4)
{
var sbpopupmenu = new StringBuilder(popupmenu, 1024);
var sba2 = new StringBuilder(a2, 4096);
var sba3 = new StringBuilder(a3, 4096);
var sba4 = new StringBuilder(a4, 4096);

SafeNativeMethods.mwle_fnPopupMenu_showPopup(sbpopupmenu, sba2, sba3, sba4);
}
/// <summary>
/// Display a modal message box using the platform's native message box implementation.
///    @param title The title to display on the message box window.
///    @param message The text message to display in the box.
///    @param buttons Which buttons to put on the message box.
///    @param icons Which icon to show next to the message.
///    @return One of $MROK, $MRCancel, $MRRetry, and $MRDontSave identifying the button that the user pressed.
///    @tsexample
///       messageBox( \"Error\", \"\" ); //TODO
///    @endtsexample
///    @ingroup Platform )
/// 
/// </summary>

internal int fn_messageBox (string title, string message, int buttons, int icons)
{
var sbtitle = new StringBuilder(title, 4096);
var sbmessage = new StringBuilder(message, 4096);

return  SafeNativeMethods.mwle_fn_messageBox(sbtitle, sbmessage, buttons, icons);
}
/// <summary>
/// ( isJoystickEnabled, bool, 1, 1, ()
/// 				@brief Queries input manager to see if a joystick is enabled
/// 				@return 1 if a joystick exists and is enabled, 0 if it's not.
/// 				@ingroup Input)
/// 
/// </summary>

internal bool fn__isJoystickEnabled ()
{

return  SafeNativeMethods.mwle_fn__isJoystickEnabled()>=1;
}
/// <summary>
/// ( enableXInput, bool, 1, 1, ()
///             @brief Enables XInput for Xbox 360 controllers.
///             @note XInput is enabled by default. Disable to use an Xbox 360 
///             Controller as a joystick device.
/// 				@ingroup Input)
/// 
/// </summary>

internal bool fn__enableXInput ()
{

return  SafeNativeMethods.mwle_fn__enableXInput()>=1;
}
/// <summary>
/// ( isXInputConnected, bool, 2, 2, ( int controllerID )
/// 				@brief Checks to see if an Xbox 360 controller is connected
/// 				@param controllerID Zero-based index of the controller to check.
///             @return 1 if the controller is connected, 0 if it isn't, and 205 if XInput 
///             hasn't been initialized.
/// 				@ingroup Input)
/// 
/// </summary>

internal bool fn__isXInputConnected (string a1)
{
var sba1 = new StringBuilder(a1, 4096);

return  SafeNativeMethods.mwle_fn__isXInputConnected(sba1)>=1;
}
/// <summary>
/// ( getXInputState, int, 3, 4, ( int controllerID, string property, bool current )
/// 				@brief Queries the current state of a connected Xbox 360 controller.
///             XInput Properties:
///              - XI_THUMBLX, XI_THUMBLY - X and Y axes of the left thumbstick. 
///              - XI_THUMBRX, XI_THUMBRY - X and Y axes of the right thumbstick. 
///              - XI_LEFT_TRIGGER, XI_RIGHT_TRIGGER - Left and Right triggers. 
///              - SI_UPOV, SI_DPOV, SI_LPOV, SI_RPOV - Up, Down, Left, and Right on the directional pad.
///              - XI_START, XI_BACK - The Start and Back buttons.
///              - XI_LEFT_THUMB, XI_RIGHT_THUMB - Clicking in the left and right thumbstick.
///              - XI_LEFT_SHOULDER, XI_RIGHT_SHOULDER - Left and Right bumpers.
///              - XI_A, XI_B , XI_X, XI_Y - The A, B, X, and Y buttons.
///             @param controllerID Zero-based index of the controller to return information about.
///             @param property Name of input action being queried, such as \"XI_THUMBLX\".
///             @param current True checks current device in action.
///             @return Button queried - 1 if the button is pressed, 0 if it's not.
///             @return Thumbstick queried - Int representing displacement from rest position.
///             @return %Trigger queried - Int from 0 to 255 representing how far the trigger is displaced.
///             @ingroup Input)
/// 
/// </summary>

internal int fn__getXInputState (string a1, string a2, string a3)
{
var sba1 = new StringBuilder(a1, 4096);
var sba2 = new StringBuilder(a2, 4096);
var sba3 = new StringBuilder(a3, 4096);

return  SafeNativeMethods.mwle_fn__getXInputState(sba1, sba2, sba3);
}
/// <summary>
/// ( rumble, void, 4, 4, (string device, float xRumble, float yRumble)
///       @brief Activates the vibration motors in the specified controller.
///       The controller will constantly at it's xRumble and yRumble intensities until 
///       changed or told to stop.
///       Valid inputs for xRumble/yRumble are [0 - 1].
///       @param device Name of the device to rumble.
///       @param xRumble Intensity to apply to the left motor.
///       @param yRumble Intensity to apply to the right motor.
///       @note in an Xbox 360 controller, the left motor is low-frequency, 
///       while the right motor is high-frequency.
///       @ingroup Input)
/// 
/// </summary>

internal void fn__rumble (string a1, string a2, string a3)
{
var sba1 = new StringBuilder(a1, 4096);
var sba2 = new StringBuilder(a2, 4096);
var sba3 = new StringBuilder(a3, 4096);

SafeNativeMethods.mwle_fn__rumble(sba1, sba2, sba3);
}
/// <summary>
/// @brief Launches the OS file browser
/// 
///    After an Execute() call, the chosen file name and path is available in one of two areas.  
///    If only a single file selection is permitted, the results will be stored in the @a fileName 
///    attribute.
/// 
///    If multiple file selection is permitted, the results will be stored in the 
///    @a files array.  The total number of files in the array will be stored in the 
///    @a fileCount attribute.
/// 
///    @tsexample
///    // NOTE: This is not he preferred class to use, but this still works
///    // Create the file dialog
///    %baseFileDialog = new FileDialog()
///    {
///       // Allow browsing of all file types
///       filters = \"*.*\";
///       // No default file
///       defaultFile = ;
///       // Set default path relative to project
///       defaultPath = \"./\";
///       // Set the title
///       title = \"Durpa\";
///       // Allow changing of path you are browsing
///       changePath = true;
///    };
///     // Launch the file dialog
///     %baseFileDialog.Execute();
///     
///     // Don't forget to cleanup
///     %baseFileDialog.delete();
/// 
///     // A better alternative is to use the 
///     // derived classes which are specific to file open and save
///     // Create a dialog dedicated to opening files
///     %openFileDlg = new OpenFileDialog()
///     {
///        // Look for jpg image files
///        // First part is the descriptor|second part is the extension
///        Filters = \"Jepg Files|*.jpg\";
///        // Allow browsing through other folders
///        ChangePath = true;
///        // Only allow opening of one file at a time
///        MultipleFiles = false;
///     };
///     // Launch the open file dialog
///     %result = %openFileDlg.Execute();
///     // Obtain the chosen file name and path
///     if ( %result )
///     {
///        %seletedFile = %openFileDlg.file;
///     }
///     else
///     {
///        %selectedFile = \"\";
///     }
///     // Cleanup
///     %openFileDlg.delete();
/// 
///     // Create a dialog dedicated to saving a file
///     %saveFileDlg = new SaveFileDialog()
///     {
///        // Only allow for saving of COLLADA files
///        Filters = \"COLLADA Files (*.dae)|*.dae|\";
///        // Default save path to where the WorldEditor last saved
///        DefaultPath = $pref::WorldEditor::LastPath;
///        // No default file specified
///        DefaultFile = \"\";
///        // Do not allow the user to change to a new directory
///        ChangePath = false;
///        // Prompt the user if they are going to overwrite an existing file
///        OverwritePrompt = true;
///     };
///     // Launch the save file dialog
///     %result = %saveFileDlg.Execute();
///     // Obtain the file name
///     %selectedFile = \"\";
///     if ( %result )
///        %selectedFile = %saveFileDlg.file;
///     // Cleanup
///     %saveFileDlg.delete();
///    @endtsexample
/// 
///    @return True if the file was selected was successfully found (opened) or declared (saved).)
/// 
/// </summary>

internal bool fnFileDialog_Execute (string filedialog)
{
var sbfiledialog = new StringBuilder(filedialog, 1024);

return  SafeNativeMethods.mwle_fnFileDialog_Execute(sbfiledialog)>=1;
}
/// <summary>
/// (debug_debugbreak, void, 1, 1, debug_debugbreak())
/// 
/// </summary>

internal void fn__debug_debugbreak ()
{

SafeNativeMethods.mwle_fn__debug_debugbreak();
}
/// <summary>
/// Creates a 64x64 normal map texture filled with noise. The texture is saved 
///    to randNormTex.png in the location of the game executable.
///    @ingroup GFX)
/// 
/// </summary>

internal void fn_dumpRandomNormalMap ()
{

SafeNativeMethods.mwle_fn_dumpRandomNormalMap();
}
/// <summary>
/// Reloads the effect shader and textures. )
/// 
/// </summary>

internal void fnPostEffect_reload (string posteffect)
{
var sbposteffect = new StringBuilder(posteffect, 1024);

SafeNativeMethods.mwle_fnPostEffect_reload(sbposteffect);
}
/// <summary>
/// Enables the effect. )
/// 
/// </summary>

internal void fnPostEffect_enable (string posteffect)
{
var sbposteffect = new StringBuilder(posteffect, 1024);

SafeNativeMethods.mwle_fnPostEffect_enable(sbposteffect);
}
/// <summary>
/// Disables the effect. )
/// 
/// </summary>

internal void fnPostEffect_disable (string posteffect)
{
var sbposteffect = new StringBuilder(posteffect, 1024);

SafeNativeMethods.mwle_fnPostEffect_disable(sbposteffect);
}
/// <summary>
/// Toggles the effect between enabled / disabled.
///    @return True if effect is enabled. )
/// 
/// </summary>

internal bool fnPostEffect_toggle (string posteffect)
{
var sbposteffect = new StringBuilder(posteffect, 1024);

return  SafeNativeMethods.mwle_fnPostEffect_toggle(sbposteffect)>=1;
}
/// <summary>
/// @return True if the effect is enabled. )
/// 
/// </summary>

internal bool fnPostEffect_isEnabled (string posteffect)
{
var sbposteffect = new StringBuilder(posteffect, 1024);

return  SafeNativeMethods.mwle_fnPostEffect_isEnabled(sbposteffect)>=1;
}
/// <summary>
/// This is used to set the texture file and load the texture on a running effect. 
///    If the texture file is not different from the current file nothing is changed.  If 
///    the texture cannot be found a null texture is assigned.    
///    @param index The texture stage index. 
///    @param filePath The file name of the texture to set. )
/// 
/// </summary>

internal void fnPostEffect_setTexture (string posteffect, int index, string filePath)
{
var sbposteffect = new StringBuilder(posteffect, 1024);
var sbfilePath = new StringBuilder(filePath, 4096);

SafeNativeMethods.mwle_fnPostEffect_setTexture(sbposteffect, index, sbfilePath);
}
/// <summary>
/// Sets the value of a uniform defined in the shader. This will usually 
///    be called within the setShaderConsts callback. Array type constants are 
///    not supported.    
///    @param name Name of the constanst, prefixed with '$'. 
///    @param value Value to set, space seperate values with more than one element.
///    @tsexample
///    function MyPfx::setShaderConsts( %this )
///    {
///       // example float4 uniform
///       %this.setShaderConst( \"$colorMod\", \"1.0 0.9 1.0 1.0\" );
///       // example float1 uniform
///       %this.setShaderConst( \"$strength\", \"3.0\" );
///       // example integer uniform
///       %this.setShaderConst( \"$loops\", \"5\" );
///    }
///    @endtsexample )   
/// 
/// </summary>

internal void fnPostEffect_setShaderConst (string posteffect, string name, string value)
{
var sbposteffect = new StringBuilder(posteffect, 1024);
var sbname = new StringBuilder(name, 4096);
var sbvalue = new StringBuilder(value, 4096);

SafeNativeMethods.mwle_fnPostEffect_setShaderConst(sbposteffect, sbname, sbvalue);
}
/// <summary>
/// @return Width over height of the backbuffer. )
/// 
/// </summary>

internal float fnPostEffect_getAspectRatio (string posteffect)
{
var sbposteffect = new StringBuilder(posteffect, 1024);

return  SafeNativeMethods.mwle_fnPostEffect_getAspectRatio(sbposteffect);
}
/// <summary>
/// Dumps this PostEffect shader's disassembly to a temporary text file.
///    @return Full path to the dumped file or an empty string if failed. )
/// 
/// </summary>

internal string fnPostEffect_dumpShaderDisassembly (string posteffect)
{
var returnbuff = new StringBuilder(1024);
var sbposteffect = new StringBuilder(posteffect, 1024);

SafeNativeMethods.mwle_fnPostEffect_dumpShaderDisassembly(sbposteffect, returnbuff);
return returnbuff.ToString();

}
/// <summary>
///  ),
///    Adds a macro to the effect's shader or sets an existing one's value. 
///    This will usually be called within the onAdd or preProcess callback.
///    @param key lval of the macro.
///    @param value rval of the macro, or may be empty.
///    @tsexample
///    function MyPfx::onAdd( %this )
///    {
///       %this.setShaderMacro( \"NUM_SAMPLES\", \"10\" );
///       %this.setShaderMacro( \"HIGH_QUALITY_MODE\" );
///       
///       // In the shader looks like... 
///       // #define NUM_SAMPLES 10
///       // #define HIGH_QUALITY_MODE
///    }
///    @endtsexample )
/// 
/// </summary>

internal void fnPostEffect_setShaderMacro (string posteffect, string key, string value)
{
var sbposteffect = new StringBuilder(posteffect, 1024);
var sbkey = new StringBuilder(key, 4096);
var sbvalue = new StringBuilder(value, 4096);

SafeNativeMethods.mwle_fnPostEffect_setShaderMacro(sbposteffect, sbkey, sbvalue);
}
/// <summary>
/// Remove a shader macro. This will usually be called within the preProcess callback.
///    @param key Macro to remove. )
/// 
/// </summary>

internal void fnPostEffect_removeShaderMacro (string posteffect, string key)
{
var sbposteffect = new StringBuilder(posteffect, 1024);
var sbkey = new StringBuilder(key, 4096);

SafeNativeMethods.mwle_fnPostEffect_removeShaderMacro(sbposteffect, sbkey);
}
/// <summary>
/// Remove all shader macros. )
/// 
/// </summary>

internal void fnPostEffect_clearShaderMacros (string posteffect)
{
var sbposteffect = new StringBuilder(posteffect, 1024);

SafeNativeMethods.mwle_fnPostEffect_clearShaderMacros(sbposteffect);
}
/// <summary>
/// Returns the bin type string. )
/// 
/// </summary>

internal string fnRenderBinManager_getBinType (string renderbinmanager)
{
var returnbuff = new StringBuilder(4096);
var sbrenderbinmanager = new StringBuilder(renderbinmanager, 1024);

SafeNativeMethods.mwle_fnRenderBinManager_getBinType(sbrenderbinmanager, returnbuff);
return returnbuff.ToString();

}
/// <summary>
/// Returns the total number of bin managers. )
/// 
/// </summary>

internal int fnRenderPassManager_getManagerCount (string renderpassmanager)
{
var sbrenderpassmanager = new StringBuilder(renderpassmanager, 1024);

return  SafeNativeMethods.mwle_fnRenderPassManager_getManagerCount(sbrenderpassmanager);
}
/// <summary>
/// Returns the render bin manager at the index or null if the index is out of range. )
/// 
/// </summary>

internal string fnRenderPassManager_getManager (string renderpassmanager, int index)
{
var returnbuff = new StringBuilder(1024);
var sbrenderpassmanager = new StringBuilder(renderpassmanager, 1024);

SafeNativeMethods.mwle_fnRenderPassManager_getManager(sbrenderpassmanager, index, returnbuff);
return returnbuff.ToString();

}
/// <summary>
/// Add as a render bin manager to the pass. )
/// 
/// </summary>

internal void fnRenderPassManager_addManager (string renderpassmanager, string renderBin)
{
var sbrenderpassmanager = new StringBuilder(renderpassmanager, 1024);
var sbrenderBin = new StringBuilder(renderBin, 1024);

SafeNativeMethods.mwle_fnRenderPassManager_addManager(sbrenderpassmanager, sbrenderBin);
}
/// <summary>
/// Removes a render bin manager. )
/// 
/// </summary>

internal void fnRenderPassManager_removeManager (string renderpassmanager, string renderBin)
{
var sbrenderpassmanager = new StringBuilder(renderpassmanager, 1024);
var sbrenderBin = new StringBuilder(renderBin, 1024);

SafeNativeMethods.mwle_fnRenderPassManager_removeManager(sbrenderpassmanager, sbrenderBin);
}
/// <summary>
/// @brief Enables the token. )
/// 
/// </summary>

internal void fnRenderPassStateToken_enable (string renderpassstatetoken)
{
var sbrenderpassstatetoken = new StringBuilder(renderpassstatetoken, 1024);

SafeNativeMethods.mwle_fnRenderPassStateToken_enable(sbrenderpassstatetoken);
}
/// <summary>
/// @brief Disables the token.)
/// 
/// </summary>

internal void fnRenderPassStateToken_disable (string renderpassstatetoken)
{
var sbrenderpassstatetoken = new StringBuilder(renderpassstatetoken, 1024);

SafeNativeMethods.mwle_fnRenderPassStateToken_disable(sbrenderpassstatetoken);
}
/// <summary>
/// @brief Toggles the token from enabled to disabled or vice versa. )
/// 
/// </summary>

internal void fnRenderPassStateToken_toggle (string renderpassstatetoken)
{
var sbrenderpassstatetoken = new StringBuilder(renderpassstatetoken, 1024);

SafeNativeMethods.mwle_fnRenderPassStateToken_toggle(sbrenderpassstatetoken);
}
/// <summary>
/// (clearClientPaths, void, 1, 1, )
/// 
/// </summary>

internal void fn__clearClientPaths ()
{

SafeNativeMethods.mwle_fn__clearClientPaths();
}
/// <summary>
/// Set the reflection texture format.
///    @ingroup GFX )
/// 
/// </summary>

internal void fn_setReflectFormat (int format)
{

SafeNativeMethods.mwle_fn_setReflectFormat(format);
}
/// <summary>
/// @brief See if any objects of the given types are present in box of given extent.
///    @note Extent parameter is last since only one radius is often needed.  If 
///    one radius is provided, the yRadius and zRadius are assumed to be the same.  Unfortunately, 
///    if you need to use the client container, you'll need to set all of the radius parameters.  
///    Fortunately, this function is mostly used on the server.
///    @param  mask   Indicates the type of objects we are checking against.
///    @param  center Center of box.
///    @param  xRadius Search radius in the x-axis. See note above.
///    @param  yRadius Search radius in the y-axis. See note above.
///    @param  zRadius Search radius in the z-axis. See note above.
///    @param useClientContainer Optionally indicates the search should be within the 
///    client container.
///    @return true if the box is empty, false if any object is found.
///    @ingroup Game)
/// 
/// </summary>

internal bool fn_containerBoxEmpty (uint mask, string center, float xRadius, float yRadius, float zRadius, bool useClientContainer)
{
var sbcenter = new StringBuilder(center, 1024);

return  SafeNativeMethods.mwle_fn_containerBoxEmpty(mask, sbcenter, xRadius, yRadius, zRadius, useClientContainer)>=1;
}
/// <summary>
/// @brief Start a search for items at the given position and within the given radius, filtering by mask.
/// 
///    @param pos Center position for the search
///    @param radius Search radius
///    @param mask Bitmask of object types to include in the search
///    @param useClientContainer Optionally indicates the search should be within the 
///    client container.
/// 
///    @see containerSearchNext 
///    @ingroup Game)
/// 
/// </summary>

internal void fn_initContainerRadiusSearch (string pos, float radius, uint mask, bool useClientContainer)
{
var sbpos = new StringBuilder(pos, 1024);

SafeNativeMethods.mwle_fn_initContainerRadiusSearch(sbpos, radius, mask, useClientContainer);
}
/// <summary>
/// @brief Start a search for all items of the types specified by the bitset mask.
/// 
///    @param mask Bitmask of object types to include in the search
///    @param useClientContainer Optionally indicates the search should be within the 
///    client container.
/// 
///    @see containerSearchNext 
///    @ingroup Game)
/// 
/// </summary>

internal void fn_initContainerTypeSearch (uint mask, bool useClientContainer)
{

SafeNativeMethods.mwle_fn_initContainerTypeSearch(mask, useClientContainer);
}
/// <summary>
/// @brief Get next item from a search started with initContainerRadiusSearch() or 
///    initContainerTypeSearch().
/// 
///    @param useClientContainer Optionally indicates the search should be within the 
///    client container.
///    @return the next object found in the search, or null if no more
/// 
///    @tsexample
///    // print the names of all nearby ShapeBase derived objects
///    %position = %obj.getPosition;
///    %radius = 20;
///    %mask = $TypeMasks::ShapeBaseObjectType;
///    initContainerRadiusSearch( %position, %radius, %mask );
///    while ( (%targetObject = containerSearchNext()) != 0 )
///    {
///       echo( \"Found: \" @ %targetObject.getName() );
///    }
///    @endtsexample
/// 
///    @see initContainerRadiusSearch()
///    @see initContainerTypeSearch()
///    @ingroup Game)
/// 
/// </summary>

internal string fn_containerSearchNext (bool useClientContainer)
{
var returnbuff = new StringBuilder(1024);

SafeNativeMethods.mwle_fn_containerSearchNext(useClientContainer, returnbuff);
return returnbuff.ToString();

}
/// <summary>
/// @brief Get distance of the center of the current item from the center of the 
///    current initContainerRadiusSearch.
/// 
///    @param useClientContainer Optionally indicates the search should be within the 
///    client container.
///    @return distance from the center of the current object to the center of 
///    the search
/// 
///    @see containerSearchNext
///    @ingroup Game)
/// 
/// </summary>

internal float fn_containerSearchCurrDist (bool useClientContainer)
{

return  SafeNativeMethods.mwle_fn_containerSearchCurrDist(useClientContainer);
}
/// <summary>
/// @brief Get the distance of the closest point of the current item from the center 
///    of the current initContainerRadiusSearch.
/// 
///    @param useClientContainer Optionally indicates the search should be within the 
///    client container.
///    @return distance from the closest point of the current object to the 
///    center of the search
/// 
///    @see containerSearchNext 
///    @ingroup Game)
/// 
/// </summary>

internal float fn_containerSearchCurrRadiusDist (bool useClientContainer)
{

return  SafeNativeMethods.mwle_fn_containerSearchCurrRadiusDist(useClientContainer);
}
/// <summary>
/// @brief Cast a ray from start to end, checking for collision against items matching mask.
/// 
///    If pExempt is specified, then it is temporarily excluded from collision checks (For 
///    instance, you might want to exclude the player if said player was firing a weapon.)
/// 
///    @param start An XYZ vector containing the tail position of the ray.
///    @param end An XYZ vector containing the head position of the ray
///    @param mask A bitmask corresponding to the type of objects to check for
///    @param pExempt An optional ID for a single object that ignored for this raycast
///    @param useClientContainer Optionally indicates the search should be within the 
///    client container.
/// 
///    @returns A string containing either null, if nothing was struck, or these fields:
///    <ul><li>The ID of the object that was struck.</li>
///    <li>The x, y, z position that it was struck.</li>
///    <li>The x, y, z of the normal of the face that was struck.</li>
///    <li>The distance between the start point and the position we hit.</li></ul> 
/// 
///    @ingroup Game)
/// 
/// </summary>

internal string fn_containerRayCast (string start, string end, uint mask, string pExempt, bool useClientContainer)
{
var returnbuff = new StringBuilder(4096);
var sbstart = new StringBuilder(start, 1024);
var sbend = new StringBuilder(end, 1024);
var sbpExempt = new StringBuilder(pExempt, 1024);

SafeNativeMethods.mwle_fn_containerRayCast(sbstart, sbend, mask, sbpExempt, useClientContainer, returnbuff);
return returnbuff.ToString();

}
/// <summary>
/// Dump the current zoning states of all zone spaces in the scene to the console.
///    @param updateFirst If true, zoning states are brought up to date first; if false, the zoning states 
///    are dumped as is.
///    @note Only valid on the client.
///    @ingroup Game )
/// 
/// </summary>

internal void fn_sceneDumpZoneStates (bool updateFirst)
{

SafeNativeMethods.mwle_fn_sceneDumpZoneStates(updateFirst);
}
/// <summary>
/// Return the SceneObject that contains the given zone.
///    @param zoneId ID of zone.
///    @return A SceneObject or NULL if the given @a zoneId is invalid.
///    @note Only valid on the client.
///    @ingroup Game )
/// 
/// </summary>

internal string fn_sceneGetZoneOwner (uint zoneId)
{
var returnbuff = new StringBuilder(1024);

SafeNativeMethods.mwle_fn_sceneGetZoneOwner(zoneId, returnbuff);
return returnbuff.ToString();

}
/// <summary>
/// Return the type mask for this object.
///    @return The numeric type mask for the object. )
/// 
/// </summary>

internal int fnSceneObject_getType (string sceneobject)
{
var sbsceneobject = new StringBuilder(sceneobject, 1024);

return  SafeNativeMethods.mwle_fnSceneObject_getType(sbsceneobject);
}
/// <summary>
/// @brief Mount objB to this object at the desired slot with optional transform.
/// 
///    @param objB  Object to mount onto us
///    @param slot  Mount slot ID
///    @param txfm (optional) mount offset transform
///    @return true if successful, false if failed (objB is not valid) )
/// 
/// </summary>

internal bool fnSceneObject_mountObject (string sceneobject, string objB, int slot, string txfm)
{
var sbsceneobject = new StringBuilder(sceneobject, 1024);
var sbobjB = new StringBuilder(objB, 1024);
var sbtxfm = new StringBuilder(txfm, 1024);

return  SafeNativeMethods.mwle_fnSceneObject_mountObject(sbsceneobject, sbobjB, slot, sbtxfm)>=1;
}
/// <summary>
/// @brief Unmount an object from ourselves.
/// 
///    @param target object to unmount
///    @return true if successful, false if failed )
/// 
/// </summary>

internal bool fnSceneObject_unmountObject (string sceneobject, string target)
{
var sbsceneobject = new StringBuilder(sceneobject, 1024);
var sbtarget = new StringBuilder(target, 1024);

return  SafeNativeMethods.mwle_fnSceneObject_unmountObject(sbsceneobject, sbtarget)>=1;
}
/// <summary>
/// Unmount us from the currently mounted object if any. )
/// 
/// </summary>

internal void fnSceneObject_unmount (string sceneobject)
{
var sbsceneobject = new StringBuilder(sceneobject, 1024);

SafeNativeMethods.mwle_fnSceneObject_unmount(sbsceneobject);
}
/// <summary>
/// @brief Check if we are mounted to another object.
///    @return true if mounted to another object, false if not mounted. )
/// 
/// </summary>

internal bool fnSceneObject_isMounted (string sceneobject)
{
var sbsceneobject = new StringBuilder(sceneobject, 1024);

return  SafeNativeMethods.mwle_fnSceneObject_isMounted(sbsceneobject)>=1;
}
/// <summary>
/// @brief Get the object we are mounted to.
///    @return the SimObjectID of the object we're mounted to, or 0 if not mounted. )
/// 
/// </summary>

internal int fnSceneObject_getObjectMount (string sceneobject)
{
var sbsceneobject = new StringBuilder(sceneobject, 1024);

return  SafeNativeMethods.mwle_fnSceneObject_getObjectMount(sbsceneobject);
}
/// <summary>
/// Get the number of objects mounted to us.
///    @return the number of mounted objects. )
/// 
/// </summary>

internal int fnSceneObject_getMountedObjectCount (string sceneobject)
{
var sbsceneobject = new StringBuilder(sceneobject, 1024);

return  SafeNativeMethods.mwle_fnSceneObject_getMountedObjectCount(sbsceneobject);
}
/// <summary>
/// Get the object mounted at a particular slot.
///    @param slot mount slot index to query
///    @return ID of the object mounted in the slot, or 0 if no object. )
/// 
/// </summary>

internal int fnSceneObject_getMountedObject (string sceneobject, int slot)
{
var sbsceneobject = new StringBuilder(sceneobject, 1024);

return  SafeNativeMethods.mwle_fnSceneObject_getMountedObject(sbsceneobject, slot);
}
/// <summary>
/// @brief Get the mount node index of the object mounted at our given slot.
///    @param slot mount slot index to query
///    @return index of the mount node used by the object mounted in this slot. )
/// 
/// </summary>

internal int fnSceneObject_getMountedObjectNode (string sceneobject, int slot)
{
var sbsceneobject = new StringBuilder(sceneobject, 1024);

return  SafeNativeMethods.mwle_fnSceneObject_getMountedObjectNode(sbsceneobject, slot);
}
/// <summary>
/// @brief Get the object mounted at our given node index.
///    @param node mount node index to query
///    @return ID of the first object mounted at the node, or 0 if none found. )
/// 
/// </summary>

internal int fnSceneObject_getMountNodeObject (string sceneobject, int node)
{
var sbsceneobject = new StringBuilder(sceneobject, 1024);

return  SafeNativeMethods.mwle_fnSceneObject_getMountNodeObject(sbsceneobject, node);
}
/// <summary>
/// Get the object's transform.
///    @return the current transform of the object )
/// 
/// </summary>

internal string fnSceneObject_getTransform (string sceneobject)
{
var returnbuff = new StringBuilder(1024);
var sbsceneobject = new StringBuilder(sceneobject, 1024);

SafeNativeMethods.mwle_fnSceneObject_getTransform(sbsceneobject, returnbuff);
return returnbuff.ToString();

}
/// <summary>
/// Get the object's inverse transform.
///    @return the inverse transform of the object )
/// 
/// </summary>

internal string fnSceneObject_getInverseTransform (string sceneobject)
{
var returnbuff = new StringBuilder(1024);
var sbsceneobject = new StringBuilder(sceneobject, 1024);

SafeNativeMethods.mwle_fnSceneObject_getInverseTransform(sbsceneobject, returnbuff);
return returnbuff.ToString();

}
/// <summary>
/// Get the object's world position.
///    @return the current world position of the object )
/// 
/// </summary>

internal string fnSceneObject_getPosition (string sceneobject)
{
var returnbuff = new StringBuilder(1024);
var sbsceneobject = new StringBuilder(sceneobject, 1024);

SafeNativeMethods.mwle_fnSceneObject_getPosition(sbsceneobject, returnbuff);
return returnbuff.ToString();

}
/// <summary>
/// Get Euler rotation of this object.
///    @return the orientation of the object in the form of rotations around the 
///    X, Y and Z axes in degrees. )
/// 
/// </summary>

internal string fnSceneObject_getEulerRotation (string sceneobject)
{
var returnbuff = new StringBuilder(1024);
var sbsceneobject = new StringBuilder(sceneobject, 1024);

SafeNativeMethods.mwle_fnSceneObject_getEulerRotation(sbsceneobject, returnbuff);
return returnbuff.ToString();

}
/// <summary>
/// Get the direction this object is facing.
///    @return a vector indicating the direction this object is facing.
///    @note This is the object's y axis. )
/// 
/// </summary>

internal string fnSceneObject_getForwardVector (string sceneobject)
{
var returnbuff = new StringBuilder(1024);
var sbsceneobject = new StringBuilder(sceneobject, 1024);

SafeNativeMethods.mwle_fnSceneObject_getForwardVector(sbsceneobject, returnbuff);
return returnbuff.ToString();

}
/// <summary>
/// Get the right vector of the object.
///    @return a vector indicating the right direction of this object.
///    @note This is the object's x axis. )
/// 
/// </summary>

internal string fnSceneObject_getRightVector (string sceneobject)
{
var returnbuff = new StringBuilder(1024);
var sbsceneobject = new StringBuilder(sceneobject, 1024);

SafeNativeMethods.mwle_fnSceneObject_getRightVector(sbsceneobject, returnbuff);
return returnbuff.ToString();

}
/// <summary>
/// Get the up vector of the object.
///    @return a vector indicating the up direction of this object.
///    @note This is the object's z axis. )
/// 
/// </summary>

internal string fnSceneObject_getUpVector (string sceneobject)
{
var returnbuff = new StringBuilder(1024);
var sbsceneobject = new StringBuilder(sceneobject, 1024);

SafeNativeMethods.mwle_fnSceneObject_getUpVector(sbsceneobject, returnbuff);
return returnbuff.ToString();

}
/// <summary>
/// Set the object's transform (orientation and position).
///    @param txfm object transform to set )
/// 
/// </summary>

internal void fnSceneObject_setTransform (string sceneobject, string txfm)
{
var sbsceneobject = new StringBuilder(sceneobject, 1024);
var sbtxfm = new StringBuilder(txfm, 1024);

SafeNativeMethods.mwle_fnSceneObject_setTransform(sbsceneobject, sbtxfm);
}
/// <summary>
/// Get the object's scale.
///    @return object scale as a Point3F )
/// 
/// </summary>

internal string fnSceneObject_getScale (string sceneobject)
{
var returnbuff = new StringBuilder(1024);
var sbsceneobject = new StringBuilder(sceneobject, 1024);

SafeNativeMethods.mwle_fnSceneObject_getScale(sbsceneobject, returnbuff);
return returnbuff.ToString();

}
/// <summary>
/// Set the object's scale.
///    @param scale object scale to set )
/// 
/// </summary>

internal void fnSceneObject_setScale (string sceneobject, string scale)
{
var sbsceneobject = new StringBuilder(sceneobject, 1024);
var sbscale = new StringBuilder(scale, 1024);

SafeNativeMethods.mwle_fnSceneObject_setScale(sbsceneobject, sbscale);
}
/// <summary>
/// Get the object's world bounding box.
///    @return six fields, two Point3Fs, containing the min and max points of the 
///    worldbox. )
/// 
/// </summary>

internal string fnSceneObject_getWorldBox (string sceneobject)
{
var returnbuff = new StringBuilder(1024);
var sbsceneobject = new StringBuilder(sceneobject, 1024);

SafeNativeMethods.mwle_fnSceneObject_getWorldBox(sbsceneobject, returnbuff);
return returnbuff.ToString();

}
/// <summary>
/// Get the center of the object's world bounding box.
///    @return the center of the world bounding box for this object. )
/// 
/// </summary>

internal string fnSceneObject_getWorldBoxCenter (string sceneobject)
{
var returnbuff = new StringBuilder(1024);
var sbsceneobject = new StringBuilder(sceneobject, 1024);

SafeNativeMethods.mwle_fnSceneObject_getWorldBoxCenter(sbsceneobject, returnbuff);
return returnbuff.ToString();

}
/// <summary>
/// Get the object's bounding box (relative to the object's origin).
///    @return six fields, two Point3Fs, containing the min and max points of the 
///    objectbox. )
/// 
/// </summary>

internal string fnSceneObject_getObjectBox (string sceneobject)
{
var returnbuff = new StringBuilder(1024);
var sbsceneobject = new StringBuilder(sceneobject, 1024);

SafeNativeMethods.mwle_fnSceneObject_getObjectBox(sbsceneobject, returnbuff);
return returnbuff.ToString();

}
/// <summary>
/// Check if this object has a global bounds set.
///    If global bounds are set to be true, then the object is assumed to have an 
///    infinitely large bounding box for collision and rendering purposes.
///    @return true if the object has a global bounds. )
/// 
/// </summary>

internal bool fnSceneObject_isGlobalBounds (string sceneobject)
{
var sbsceneobject = new StringBuilder(sceneobject, 1024);

return  SafeNativeMethods.mwle_fnSceneObject_isGlobalBounds(sbsceneobject)>=1;
}
/// <summary>
/// @brief Load all Path information from the mission.
/// 
///    This function is usually called from the loadMissionStage2() server-side function 
///    after the mission file has loaded.  Internally it places all Paths into the server's 
///    PathManager.  From this point the Paths are ready for transmission to the clients.
/// 
///    @tsexample
///       // Inform the engine to load all Path information from the mission.
///       pathOnMissionLoadDone();
///    @endtsexample
/// 
///    @see NetConnection::transmitPaths()
///    @see NetConnection::clearPaths()
///    @see Path
/// 
///    @ingroup Networking)
/// 
/// </summary>

internal void fn_pathOnMissionLoadDone ()
{

SafeNativeMethods.mwle_fn_pathOnMissionLoadDone();
}
/// <summary>
/// Get the index of the playlist slot currently processed by the controller.
///    @return The slot index currently being played.
///    @see SFXPlayList )
/// 
/// </summary>

internal int fnSFXController_getCurrentSlot (string sfxcontroller)
{
var sbsfxcontroller = new StringBuilder(sfxcontroller, 1024);

return  SafeNativeMethods.mwle_fnSFXController_getCurrentSlot(sbsfxcontroller);
}
/// <summary>
/// Set the index of the playlist slot to play by the controller.  This can be used to seek in the playlist.
///    @param index Index of the playlist slot. )
/// 
/// </summary>

internal void fnSFXController_setCurrentSlot (string sfxcontroller, int index)
{
var sbsfxcontroller = new StringBuilder(sfxcontroller, 1024);

SafeNativeMethods.mwle_fnSFXController_setCurrentSlot(sbsfxcontroller, index);
}
/// <summary>
/// Get the name of the parameter.
///    @return The paramete name. )
/// 
/// </summary>

internal string fnSFXParameter_getParameterName (string sfxparameter)
{
var returnbuff = new StringBuilder(1024);
var sbsfxparameter = new StringBuilder(sfxparameter, 1024);

SafeNativeMethods.mwle_fnSFXParameter_getParameterName(sbsfxparameter, returnbuff);
return returnbuff.ToString();

}
/// <summary>
/// Reset the parameter's value to its default.
///    @see SFXParameter::defaultValue )
/// 
/// </summary>

internal void fnSFXParameter_reset (string sfxparameter)
{
var sbsfxparameter = new StringBuilder(sfxparameter, 1024);

SafeNativeMethods.mwle_fnSFXParameter_reset(sbsfxparameter);
}
/// <summary>
/// Return the length of the sound data in seconds.
///    @return The length of the sound data in seconds or 0 if the sound referenced by the profile could not be found. )
/// 
/// </summary>

internal float fnSFXProfile_getSoundDuration (string sfxprofile)
{
var sbsfxprofile = new StringBuilder(sfxprofile, 1024);

return  SafeNativeMethods.mwle_fnSFXProfile_getSoundDuration(sbsfxprofile);
}
/// <summary>
/// ( SFXSource, setTransform, void, 3, 4,
///    ( vector position [, vector direction ] ) 
///    Set the position and orientation of a 3D sound source.
///    @hide )
/// 
/// </summary>

internal void fnSFXSource_setTransform (string sfxsource, string a2, string a3)
{
var sbsfxsource = new StringBuilder(sfxsource, 1024);
var sba2 = new StringBuilder(a2, 4096);
var sba3 = new StringBuilder(a3, 4096);

SafeNativeMethods.mwle_fnSFXSource_setTransform(sbsfxsource, sba2, sba3);
}
/// <summary>
/// Start playback of the source.
///    If the sound data for the source has not yet been fully loaded, there will be a delay after calling 
///    play and playback will start after the data has become available.
///    @param fadeInTime Seconds for the sound to reach full volume.  If -1, the SFXDescription::fadeInTime 
///       set in the source's associated description is used.  Pass 0 to disable a fade-in effect that may 
///       be configured on the description. )
/// 
/// </summary>

internal void fnSFXSource_play (string sfxsource, float fadeInTime)
{
var sbsfxsource = new StringBuilder(sfxsource, 1024);

SafeNativeMethods.mwle_fnSFXSource_play(sbsfxsource, fadeInTime);
}
/// <summary>
/// Stop playback of the source.
///    @param fadeOutTime Seconds for the sound to fade down to zero volume.  If -1, the SFXDescription::fadeOutTime 
///       set in the source's associated description is used.  Pass 0 to disable a fade-out effect that may be 
///       configured on the description.
///       Be aware that if a fade-out effect is used, the source will not immediately transtion to stopped state but 
///       will rather remain in playing state until the fade-out time has expired. )
/// 
/// </summary>

internal void fnSFXSource_stop (string sfxsource, float fadeOutTime)
{
var sbsfxsource = new StringBuilder(sfxsource, 1024);

SafeNativeMethods.mwle_fnSFXSource_stop(sbsfxsource, fadeOutTime);
}
/// <summary>
/// Pause playback of the source.
///    @param fadeOutTime Seconds for the sound to fade down to zero volume.  If -1, the SFXDescription::fadeOutTime 
///       set in the source's associated description is used.  Pass 0 to disable a fade-out effect that may be 
///       configured on the description.
///       Be aware that if a fade-out effect is used, the source will not immediately to paused state but will 
///       rather remain in playing state until the fade-out time has expired.. )
/// 
/// </summary>

internal void fnSFXSource_pause (string sfxsource, float fadeOutTime)
{
var sbsfxsource = new StringBuilder(sfxsource, 1024);

SafeNativeMethods.mwle_fnSFXSource_pause(sbsfxsource, fadeOutTime);
}
/// <summary>
/// Test whether the source is currently playing.
///    @return True if the source is in playing state, false otherwise.
///    @see play
///    @see getStatus
///    @see SFXStatus )
/// 
/// </summary>

internal bool fnSFXSource_isPlaying (string sfxsource)
{
var sbsfxsource = new StringBuilder(sfxsource, 1024);

return  SafeNativeMethods.mwle_fnSFXSource_isPlaying(sbsfxsource)>=1;
}
/// <summary>
/// Test whether the source is currently paused.
///    @return True if the source is in paused state, false otherwise.
///    @see pause
///    @see getStatus
///    @see SFXStatus )
/// 
/// </summary>

internal bool fnSFXSource_isPaused (string sfxsource)
{
var sbsfxsource = new StringBuilder(sfxsource, 1024);

return  SafeNativeMethods.mwle_fnSFXSource_isPaused(sbsfxsource)>=1;
}
/// <summary>
/// Test whether the source is currently stopped.
///    @return True if the source is in stopped state, false otherwise.
///    @see stop
///    @see getStatus
///    @see SFXStatus )
/// 
/// </summary>

internal bool fnSFXSource_isStopped (string sfxsource)
{
var sbsfxsource = new StringBuilder(sfxsource, 1024);

return  SafeNativeMethods.mwle_fnSFXSource_isStopped(sbsfxsource)>=1;
}
/// <summary>
/// Get the current playback status.
///    @return Te current playback status )
/// 
/// </summary>

internal int fnSFXSource_getStatus (string sfxsource)
{
var sbsfxsource = new StringBuilder(sfxsource, 1024);

return  SafeNativeMethods.mwle_fnSFXSource_getStatus(sbsfxsource);
}
/// <summary>
/// Get the current base volume level of the source.
///    This is not the final effective volume that the source is playing at but rather the starting 
///    volume level before source group modulation, fades, or distance-based volume attenuation are applied.
///    @return The current base volume level.
///    @see setVolume
///    @see SFXDescription::volume
///    @ref SFXSource_volume )
/// 
/// </summary>

internal float fnSFXSource_getVolume (string sfxsource)
{
var sbsfxsource = new StringBuilder(sfxsource, 1024);

return  SafeNativeMethods.mwle_fnSFXSource_getVolume(sbsfxsource);
}
/// <summary>
/// Set the base volume level for the source.
///    This volume will be the starting point for source group volume modulation, fades, and distance-based 
///    volume attenuation.
///    @param volume The new base volume level for the source.  Must be 0>=volume<=1.
///    @see getVolume
///    @ref SFXSource_volume )
/// 
/// </summary>

internal void fnSFXSource_setVolume (string sfxsource, float volume)
{
var sbsfxsource = new StringBuilder(sfxsource, 1024);

SafeNativeMethods.mwle_fnSFXSource_setVolume(sbsfxsource, volume);
}
/// <summary>
/// Get the final effective volume level of the source.
///    This method returns the volume level as it is after source group volume modulation, fades, and distance-based 
///    volume attenuation have been applied to the base volume level.
///    @return The effective volume of the source.
///    @ref SFXSource_volume )
/// 
/// </summary>

internal float fnSFXSource_getAttenuatedVolume (string sfxsource)
{
var sbsfxsource = new StringBuilder(sfxsource, 1024);

return  SafeNativeMethods.mwle_fnSFXSource_getAttenuatedVolume(sbsfxsource);
}
/// <summary>
/// Get the fade-in time set on the source.
///    This will initially be SFXDescription::fadeInTime.
///    @return The fade-in time set on the source in seconds.
///    @see SFXDescription::fadeInTime
///    @ref SFXSource_fades )
/// 
/// </summary>

internal float fnSFXSource_getFadeInTime (string sfxsource)
{
var sbsfxsource = new StringBuilder(sfxsource, 1024);

return  SafeNativeMethods.mwle_fnSFXSource_getFadeInTime(sbsfxsource);
}
/// <summary>
/// Get the fade-out time set on the source.
///    This will initially be SFXDescription::fadeOutTime.
///    @return The fade-out time set on the source in seconds.
///    @see SFXDescription::fadeOutTime
///    @ref SFXSource_fades )
/// 
/// </summary>

internal float fnSFXSource_getFadeOutTime (string sfxsource)
{
var sbsfxsource = new StringBuilder(sfxsource, 1024);

return  SafeNativeMethods.mwle_fnSFXSource_getFadeOutTime(sbsfxsource);
}
/// <summary>
/// Set the fade time parameters of the source.
///    @param fadeInTime The new fade-in time in seconds.
///    @param fadeOutTime The new fade-out time in seconds.
///    @see SFXDescription::fadeInTime
///    @see SFXDescription::fadeOutTime
///    @ref SFXSource_fades )
/// 
/// </summary>

internal void fnSFXSource_setFadeTimes (string sfxsource, float fadeInTime, float fadeOutTime)
{
var sbsfxsource = new StringBuilder(sfxsource, 1024);

SafeNativeMethods.mwle_fnSFXSource_setFadeTimes(sbsfxsource, fadeInTime, fadeOutTime);
}
/// <summary>
/// Get the pitch scale of the source.
///    Pitch determines the playback speed of the source (default: 1).
///    @return The current pitch scale factor of the source.
///    @see setPitch
///    @see SFXDescription::pitch )
/// 
/// </summary>

internal float fnSFXSource_getPitch (string sfxsource)
{
var sbsfxsource = new StringBuilder(sfxsource, 1024);

return  SafeNativeMethods.mwle_fnSFXSource_getPitch(sbsfxsource);
}
/// <summary>
/// Set the pitch scale of the source.
///    Pitch determines the playback speed of the source (default: 1).
///    @param pitch The new pitch scale factor.
///    @see getPitch
///    @see SFXDescription::pitch )
/// 
/// </summary>

internal void fnSFXSource_setPitch (string sfxsource, float pitch)
{
var sbsfxsource = new StringBuilder(sfxsource, 1024);

SafeNativeMethods.mwle_fnSFXSource_setPitch(sbsfxsource, pitch);
}
/// <summary>
/// Set up the 3D volume cone for the source.
///    @param innerAngle Angle of the inner sound cone in degrees (@ref SFXDescription::coneInsideAngle).  Must be 0<=innerAngle<=360.
///    @param outerAngle Angle of the outer sound cone in degrees (@ref SFXDescription::coneOutsideAngle).  Must be 0<=outerAngle<=360.
///    @param outsideVolume Volume scale factor outside of outer cone (@ref SFXDescription::coneOutsideVolume).  Must be 0<=outsideVolume<=1.
///    @note This method has no effect on the source if the source is not 3D. )
/// 
/// </summary>

internal void fnSFXSource_setCone (string sfxsource, float innerAngle, float outerAngle, float outsideVolume)
{
var sbsfxsource = new StringBuilder(sfxsource, 1024);

SafeNativeMethods.mwle_fnSFXSource_setCone(sbsfxsource, innerAngle, outerAngle, outsideVolume);
}
/// <summary>
/// Get the number of SFXParameters that are attached to the source.
///    @return The number of parameters attached to the source.
///    @tsexample
///       // Print the name ofo each parameter attached to %source.
///       %numParams = %source.getParameterCount();
///       for( %i = 0; %i < %numParams; %i ++ )
///          echo( %source.getParameter( %i ).getParameterName() );
///    @endtsexample
///    @see getParameter
///    @see addParameter )
/// 
/// </summary>

internal int fnSFXSource_getParameterCount (string sfxsource)
{
var sbsfxsource = new StringBuilder(sfxsource, 1024);

return  SafeNativeMethods.mwle_fnSFXSource_getParameterCount(sbsfxsource);
}
/// <summary>
/// Attach @a parameter to the source,
///    Once attached, the source will react to value changes of the given @a parameter.  Attaching a parameter 
///    will also trigger an initial read-out of the parameter's current value.
///    @param parameter The parameter to attach to the source. )
/// 
/// </summary>

internal void fnSFXSource_addParameter (string sfxsource, string parameter)
{
var sbsfxsource = new StringBuilder(sfxsource, 1024);
var sbparameter = new StringBuilder(parameter, 1024);

SafeNativeMethods.mwle_fnSFXSource_addParameter(sbsfxsource, sbparameter);
}
/// <summary>
/// Detach @a parameter from the source.
///    Once detached, the source will no longer react to value changes of the given @a parameter.
///    If the parameter is not attached to the source, the method will do nothing.
///    @param parameter The parameter to detach from the source. )
/// 
/// </summary>

internal void fnSFXSource_removeParameter (string sfxsource, string parameter)
{
var sbsfxsource = new StringBuilder(sfxsource, 1024);
var sbparameter = new StringBuilder(parameter, 1024);

SafeNativeMethods.mwle_fnSFXSource_removeParameter(sbsfxsource, sbparameter);
}
/// <summary>
/// Get the parameter at the given index.
///    @param index Index of the parameter to fetch.  Must be 0<=index<=getParameterCount().
///    @return The parameter at the given @a index or null if @a index is out of range.
///    @tsexample
///       // Print the name ofo each parameter attached to %source.
///       %numParams = %source.getParameterCount();
///       for( %i = 0; %i < %numParams; %i ++ )
///          echo( %source.getParameter( %i ).getParameterName() );
///    @endtsexample
///    @see getParameterCount )
/// 
/// </summary>

internal string fnSFXSource_getParameter (string sfxsource, int index)
{
var returnbuff = new StringBuilder(1024);
var sbsfxsource = new StringBuilder(sfxsource, 1024);

SafeNativeMethods.mwle_fnSFXSource_getParameter(sbsfxsource, index, returnbuff);
return returnbuff.ToString();

}
/// <summary>
/// Add a notification marker called @a name at @a pos seconds of playback.
///    @param name Symbolic name for the marker that will be passed to the onMarkerPassed() callback.
///    @param pos Playback position in seconds when the notification should trigger.  Note that this is a soft limit and there 
///       may be a delay between the play cursor actually passing the position and the callback being triggered.
///    @note For looped sounds, the marker will trigger on each iteration.
///    @tsexample
///    // Create a new source.
///    $source = sfxCreateSource( AudioMusicLoop2D, \"art/sound/backgroundMusic\" );
///    
///    // Assign a class to the source.
///    $source.class = \"BackgroundMusic\";
///    
///    // Add a playback marker at one minute into playback.
///    $source.addMarker( \"first\", 60 );
///    
///    // Define the callback function.  This function will be called when the playback position passes the one minute mark.
///    function BackgroundMusic::onMarkerPassed( %this, %markerName )
///    {
///       if( %markerName $= \"first\" )
///          echo( \"Playback has passed the 60 seconds mark.\" );
///    }
///    
///    // Play the sound.
///    $source.play();
///    @endtsexample )
/// 
/// </summary>

internal void fnSFXSource_addMarker (string sfxsource, string name, float pos)
{
var sbsfxsource = new StringBuilder(sfxsource, 1024);
var sbname = new StringBuilder(name, 1024);

SafeNativeMethods.mwle_fnSFXSource_addMarker(sbsfxsource, sbname, pos);
}
/// <summary>
/// ( sfxCreateSource, S32, 2, 6,
///                      ( SFXTrack track | ( SFXDescription description, string filename ) [, float x, float y, float z ] ) 
///                      Creates a new paused sound source using a profile or a description 
///                      and filename.  The return value is the source which must be 
///                      released by delete().
///                      @hide )
/// 
/// </summary>

internal int fn__sfxCreateSource (string a1, string a2, string a3, string a4, string a5)
{
var sba1 = new StringBuilder(a1, 4096);
var sba2 = new StringBuilder(a2, 4096);
var sba3 = new StringBuilder(a3, 4096);
var sba4 = new StringBuilder(a4, 4096);
var sba5 = new StringBuilder(a5, 4096);

return  SafeNativeMethods.mwle_fn__sfxCreateSource(sba1, sba2, sba3, sba4, sba5);
}
/// <summary>
/// ( sfxPlay, S32, 2, 5, ( SFXSource source | ( SFXTrack track [, float x, float y, float z ] ) ) 
///    Start playing the given source or create a new source for the given track and play it.
///    @hide )
/// 
/// </summary>

internal int fn__sfxPlay (string a1, string a2, string a3, string a4)
{
var sba1 = new StringBuilder(a1, 4096);
var sba2 = new StringBuilder(a2, 4096);
var sba3 = new StringBuilder(a3, 4096);
var sba4 = new StringBuilder(a4, 4096);

return  SafeNativeMethods.mwle_fn__sfxPlay(sba1, sba2, sba3, sba4);
}
/// <summary>
/// ( sfxPlayOnce, S32, 2, 6,
///    SFXSource sfxPlayOnce( ( SFXTrack track | SFXDescription description, string filename ) [, float x, float y, float z, float fadeInTime=-1 ] ) 
///    Create a new play-once source for the given profile or description+filename and start playback of the source.
///    @hide )
/// 
/// </summary>

internal int fn__sfxPlayOnce (string a1, string a2, string a3, string a4, string a5)
{
var sba1 = new StringBuilder(a1, 4096);
var sba2 = new StringBuilder(a2, 4096);
var sba3 = new StringBuilder(a3, 4096);
var sba4 = new StringBuilder(a4, 4096);
var sba5 = new StringBuilder(a5, 4096);

return  SafeNativeMethods.mwle_fn__sfxPlayOnce(sba1, sba2, sba3, sba4, sba5);
}
/// <summary>
/// Get a list of all available sound devices.
///    The return value will be a newline-separated list of entries where each line describes one available sound 
///    device.  Each such line will have the following format:
///    @verbatim
///       provider TAB device TAB hasHardware TAB numMaxBuffers
///    @endverbatim
///    - provider: The name of the device provider (e.g. \"FMOD\").
///    - device: The name of the device as returned by the device layer.
///    - hasHardware: Whether the device supports hardware mixing or not.
///    - numMaxBuffers: The maximum number of concurrent voices supported by the device's mixer.  If this limit 
///       limit is exceeded, i.e. if there are more active sounds playing at any one time, then voice virtualization 
///       will start culling voices and put them into virtualized playback mode.  Voice virtualization may or may not 
///       be provided by the device itself; if not provided by the device, it will be provided by Torque's sound system.
///    @return A newline-separated list of information about all available sound devices.
///    @see sfxCreateDevice
///    @see sfxGetDeviceInfo
///    @see $SFX::DEVICE_INFO_PROVIDER
///    @see $SFX::DEVICE_INFO_NAME
///    @see $SFX::DEVICE_INFO_USEHARDWARE
///    @see $SFX::DEVICE_INFO_MAXBUFFERS
///    @ref SFX_devices
///    @ingroup SFX )
/// 
/// </summary>

internal string fn_sfxGetAvailableDevices ()
{
var returnbuff = new StringBuilder(4096);

SafeNativeMethods.mwle_fn_sfxGetAvailableDevices(returnbuff);
return returnbuff.ToString();

}
/// <summary>
/// Try to create a new sound device using the given properties.
///    If a sound device is currently initialized, it will be uninitialized first.  However, be aware that in this case, 
///    if this function fails, it will not restore the previously active device but rather leave the sound system in an 
///    uninitialized state.
///    Sounds that are already playing while the new device is created will be temporarily transitioned to virtualized 
///    playback and then resume normal playback once the device has been created.
///    In the core scripts, sound is automatically set up during startup in the sfxStartup() function.
///    @param provider The name of the device provider as returned by sfxGetAvailableDevices().
///    @param device The name of the device as returned by sfxGetAvailableDevices().
///    @param useHardware Whether to enabled hardware mixing on the device or not.  Only relevant if supported by the given device.
///    @param maxBuffers The maximum number of concurrent voices for this device to use or -1 for the device to pick its own reasonable default.
///    @return True if the initialization was successful, false if not.
///    @note This function must be called before any of the sound playback functions can be used.
///    @see sfxGetAvailableDevices
///    @see sfxGetDeviceInfo
///    @see sfxDeleteDevice
///    @ref SFX_devices
///    @ingroup SFX )
/// 
/// </summary>

internal bool fn_sfxCreateDevice (string provider, string device, bool useHardware, int maxBuffers)
{
var sbprovider = new StringBuilder(provider, 4096);
var sbdevice = new StringBuilder(device, 4096);

return  SafeNativeMethods.mwle_fn_sfxCreateDevice(sbprovider, sbdevice, useHardware, maxBuffers)>=1;
}
/// <summary>
/// Delete the currently active sound device and release all its resources.
///    SFXSources that are still playing will be transitioned to virtualized playback mode. 
///    When creating a new device, they will automatically transition back to normal playback.
///    In the core scripts, this is done automatically for you during shutdown in the sfxShutdown() function.
///    @see sfxCreateDevice
///    @ref SFX_devices
///    @ingroup SFX )
/// 
/// </summary>

internal void fn_sfxDeleteDevice ()
{

SafeNativeMethods.mwle_fn_sfxDeleteDevice();
}
/// <summary>
/// Return information about the currently active sound device.
///    The return value is a tab-delimited string of the following format:
///    @verbatim
///       provider TAB device TAB hasHardware TAB numMaxBuffers TAB caps
///    @endverbatim
///    - provider: The name of the device provider (e.g. \"FMOD\").
///    - device: The name of the device as returned by the device layer.
///    - hasHardware: Whether the device supports hardware mixing or not.
///    - numMaxBuffers: The maximum number of concurrent voices supported by the device's mixer.  If this limit 
///       limit is exceeded, i.e. if there are more active sounds playing at any one time, then voice virtualization 
///       will start culling voices and put them into virtualized playback mode.  Voice virtualization may or may not 
///       be provided by the device itself; if not provided by the device, it will be provided by Torque's sound system.
///    - caps: A bitfield of capability flags.
///    @return A tab-separated list of properties of the currently active sound device or the empty string if no sound device has been initialized.
///    @see sfxCreateDevice
///    @see sfxGetAvailableDevices
///    @see $SFX::DEVICE_INFO_PROVIDER
///    @see $SFX::DEVICE_INFO_NAME
///    @see $SFX::DEVICE_INFO_USEHARDWARE
///    @see $SFX::DEVICE_INFO_MAXBUFFERS
///    @see $SFX::DEVICE_INFO_CAPS
///    @see $SFX::DEVICE_CAPS_REVERB
///    @see $SFX::DEVICE_CAPS_VOICEMANAGEMENT
///    @see $SFX::DEVICE_CAPS_OCCLUSION
///    @see $SFX::DEVICE_CAPS_DSPEFFECTS
///    @see $SFX::DEVICE_CAPS_MULTILISTENER
///    @see $SFX::DEVICE_CAPS_FMODDESIGNER
///    @ref SFX_devices
///    @ingroup SFX )
/// 
/// </summary>

internal string fn_sfxGetDeviceInfo ()
{
var returnbuff = new StringBuilder(4096);

SafeNativeMethods.mwle_fn_sfxGetDeviceInfo(returnbuff);
return returnbuff.ToString();

}
/// <summary>
/// Stop playback of the given @a source.
///    This is equivalent to calling SFXSource::stop().
///    @param source The source to put into stopped state.
///    @ingroup SFX )
/// 
/// </summary>

internal void fn_sfxStop (string source)
{
var sbsource = new StringBuilder(source, 1024);

SafeNativeMethods.mwle_fn_sfxStop(sbsource);
}
/// <summary>
/// Stop playback of the given @a source (if it is not already stopped) and delete the @a source.
///    The advantage of this function over directly calling delete() is that it will correctly 
///    handle volume fades that may be configured on the source.  Whereas calling delete() would immediately 
///    stop playback and delete the source, this functionality will wait for the fade-out to play and only then 
///    stop the source and delete it.
///    @param source A sound source.
///    @ref SFXSource_fades
///    @ingroup SFX )
/// 
/// </summary>

internal void fn_sfxStopAndDelete (string source)
{
var sbsource = new StringBuilder(source, 1024);

SafeNativeMethods.mwle_fn_sfxStopAndDelete(sbsource);
}
/// <summary>
/// Mark the given @a source for deletion as soon as it moves into stopped state.
///    This function will retroactively turn the given @a source into a play-once source (see @ref SFXSource_playonce).
///    @param source A sound source.
///    @ingroup SFX )
/// 
/// </summary>

internal void fn_sfxDeleteWhenStopped (string source)
{
var sbsource = new StringBuilder(source, 1024);

SafeNativeMethods.mwle_fn_sfxDeleteWhenStopped(sbsource);
}
/// <summary>
/// Get the falloff curve type currently being applied to 3D sounds.
///    @return The current distance model type.
///    @ref SFXSource_volume
///    @ref SFX_3d
///    @ingroup SFX )
/// 
/// </summary>

internal int fn_sfxGetDistanceModel ()
{

return  SafeNativeMethods.mwle_fn_sfxGetDistanceModel();
}
/// <summary>
/// Set the falloff curve type to use for distance-based volume attenuation of 3D sounds.
///    @param model The distance model to use for 3D sound.
///    @note This setting takes effect globally and is applied to all 3D sounds.
///    @ingroup SFX )
/// 
/// </summary>

internal void fn_sfxSetDistanceModel (int model)
{

SafeNativeMethods.mwle_fn_sfxSetDistanceModel(model);
}
/// <summary>
/// Get the current global doppler effect setting.
///    @return The current global doppler effect scale factor (>=0).
///    @see sfxSetDopplerFactor
///    @ref SFXSource_doppler
///    @ingroup SFX )
/// 
/// </summary>

internal float fn_sfxGetDopplerFactor ()
{

return  SafeNativeMethods.mwle_fn_sfxGetDopplerFactor();
}
/// <summary>
/// Set the global doppler effect scale factor.
///    @param value The new doppler shift scale factor.
///    @pre @a value must be >= 0.
///    @see sfxGetDopplerFactor
///    @ref SFXSource_doppler
///    @ingroup SFX )
/// 
/// </summary>

internal void fn_sfxSetDopplerFactor (float value)
{

SafeNativeMethods.mwle_fn_sfxSetDopplerFactor(value);
}
/// <summary>
/// Get the current global scale factor applied to volume attenuation of 3D sounds in the logarithmic model.
///    @return The current scale factor for logarithmic 3D sound falloff curves.
///    @see sfxGetDistanceModel
///    @see SFXDistanceModel
///    @ref SFXSource_volume
///    @ref SFX_3d
///    @ingroup SFX )
/// 
/// </summary>

internal float fn_sfxGetRolloffFactor ()
{

return  SafeNativeMethods.mwle_fn_sfxGetRolloffFactor();
}
/// <summary>
/// Set the global scale factor to apply to volume attenuation of 3D sounds in the logarithmic model.
///    @param value The new scale factor for logarithmic 3D sound falloff curves.
///    @pre @a value must be > 0.
///    @note This function has no effect if the currently distance model is set to SFXDistanceModel::Linear.
///    @see sfxGetDistanceModel
///    @see SFXDistanceModel
///    @ref SFXSource_volume
///    @ref SFX_3d
///    @ingroup SFX )
/// 
/// </summary>

internal void fn_sfxSetRolloffFactor (float value)
{

SafeNativeMethods.mwle_fn_sfxSetRolloffFactor(value);
}
/// <summary>
/// Dump information about all current SFXSource instances to the console.
///    The dump includes information about the playback status for each source, volume levels, virtualization, etc.
///    @param includeGroups If true, direct instances of SFXSources (which represent logical sound groups) will be included. 
///       Otherwise only instances of subclasses of SFXSources are included in the dump.
///    @see SFXSource
///    @see sfxDumpSourcesToString
///    @ingroup SFX )
/// 
/// </summary>

internal void fn_sfxDumpSources (bool includeGroups)
{

SafeNativeMethods.mwle_fn_sfxDumpSources(includeGroups);
}
/// <summary>
/// Dump information about all current SFXSource instances to a string.
///    The dump includes information about the playback status for each source, volume levels, virtualization, etc.
///    @param includeGroups If true, direct instances of SFXSources (which represent logical sound groups) will be included. 
///       Otherwise only instances of subclasses of SFXSources are included in the dump.
///    @return A string containing a dump of information about all currently instantiated SFXSources.
///    @see SFXSource
///    @see sfxDumpSources
///    @ingroup SFX )
/// 
/// </summary>

internal string fn_sfxDumpSourcesToString (bool includeGroups)
{
var returnbuff = new StringBuilder(4096);

SafeNativeMethods.mwle_fn_sfxDumpSourcesToString(includeGroups, returnbuff);
return returnbuff.ToString();

}
/// <summary>
/// ( ActionMap, bind, bool, 5, 10, actionMap.bind( device, action, [modifier spec, mod...], command ) 
/// 			  @hide)
/// 
/// </summary>

internal bool fnActionMap_bind (string actionmap, string a2, string a3, string a4, string a5, string a6, string a7, string a8, string a9)
{
var sbactionmap = new StringBuilder(actionmap, 1024);
var sba2 = new StringBuilder(a2, 4096);
var sba3 = new StringBuilder(a3, 4096);
var sba4 = new StringBuilder(a4, 4096);
var sba5 = new StringBuilder(a5, 4096);
var sba6 = new StringBuilder(a6, 4096);
var sba7 = new StringBuilder(a7, 4096);
var sba8 = new StringBuilder(a8, 4096);
var sba9 = new StringBuilder(a9, 4096);

return  SafeNativeMethods.mwle_fnActionMap_bind(sbactionmap, sba2, sba3, sba4, sba5, sba6, sba7, sba8, sba9)>=1;
}
/// <summary>
/// ( ActionMap, bindObj, bool, 6, 11, (device, action, [modifier spec, mod...], command, object)
/// 			  @hide)
/// 
/// </summary>

internal bool fnActionMap_bindObj (string actionmap, string a2, string a3, string a4, string a5, string a6, string a7, string a8, string a9, string a10)
{
var sbactionmap = new StringBuilder(actionmap, 1024);
var sba2 = new StringBuilder(a2, 4096);
var sba3 = new StringBuilder(a3, 4096);
var sba4 = new StringBuilder(a4, 4096);
var sba5 = new StringBuilder(a5, 4096);
var sba6 = new StringBuilder(a6, 4096);
var sba7 = new StringBuilder(a7, 4096);
var sba8 = new StringBuilder(a8, 4096);
var sba9 = new StringBuilder(a9, 4096);
var sba10 = new StringBuilder(a10, 4096);

return  SafeNativeMethods.mwle_fnActionMap_bindObj(sbactionmap, sba2, sba3, sba4, sba5, sba6, sba7, sba8, sba9, sba10)>=1;
}
/// <summary>
/// @brief Returns the current %ActionMap.
///    @see ActionMap
/// 	@ingroup Input)
/// 
/// </summary>

internal string fn_getCurrentActionMap ()
{
var returnbuff = new StringBuilder(1024);

SafeNativeMethods.mwle_fn_getCurrentActionMap(returnbuff);
return returnbuff.ToString();

}
/// <summary>
///  ),
///     @brief Associates a make command and optional break command to a specified input device action.
///     Must include parenthesis and semicolon in the make and break command strings.
///     @param device The device to bind to. Can be a keyboard, mouse, joystick or gamepad.
///     @param action The device action to bind to. The action is dependant upon the device. Specify a key for keyboards.
///     @param makeCmd The command to execute when the device/action is made.
///     @param breakCmd [optional] The command to execute when the device or action is unmade.
///     @return True the bind was successful, false if the device was unknown or description failed.
/// 	@tsexample
/// 	// Print to the console when the spacebar is pressed
/// 	function onSpaceDown()
/// 	{
/// 	   echo(\"Space bar down!\");
/// 	}
/// 	// Print to the console when the spacebar is released
/// 	function onSpaceUp()
/// 	{
/// 	   echo(\"Space bar up!\");
/// 	}
///    // Bind the commands onSpaceDown() and onSpaceUp() to spacebar events
/// 	moveMap.bindCmd(keyboard, \"space\", \"onSpaceDown();\", \"onSpaceUp();\");
/// 	@endtsexample)
/// 
/// </summary>

internal bool fnActionMap_bindCmd (string actionmap, string device, string action, string makeCmd, string breakCmd)
{
var sbactionmap = new StringBuilder(actionmap, 1024);
var sbdevice = new StringBuilder(device, 4096);
var sbaction = new StringBuilder(action, 4096);
var sbmakeCmd = new StringBuilder(makeCmd, 4096);
var sbbreakCmd = new StringBuilder(breakCmd, 4096);

return  SafeNativeMethods.mwle_fnActionMap_bindCmd(sbactionmap, sbdevice, sbaction, sbmakeCmd, sbbreakCmd)>=1;
}
/// <summary>
/// @brief Removes the binding on an input device and action.
///    @param device The device to unbind from. Can be a keyboard, mouse, joystick or a gamepad.
///    @param action The device action to unbind from. The action is dependant upon the device. Specify a key for keyboards.
///    @return True if the unbind was successful, false if the device was unknown or description failed.
/// 	@tsexample
/// 	moveMap.unbind(\"keyboard\", \"space\");
/// 	@endtsexample)
/// 
/// </summary>

internal bool fnActionMap_unbind (string actionmap, string device, string action)
{
var sbactionmap = new StringBuilder(actionmap, 1024);
var sbdevice = new StringBuilder(device, 4096);
var sbaction = new StringBuilder(action, 4096);

return  SafeNativeMethods.mwle_fnActionMap_unbind(sbactionmap, sbdevice, sbaction)>=1;
}
/// <summary>
/// @brief Remove any object-binding on an input device and action.
///    @param device The device to bind to.  Can be keyboard, mouse, joystick or gamepad.
///    @param action The device action to unbind from. The action is dependant upon the device. Specify a key for keyboards.
///    @param obj The object to perform unbind against.
///    @return True if the unbind was successful, false if the device was unknown or description failed.
/// 	@tsexample
///    moveMap.unbindObj(\"keyboard\", \"numpad1\", \"rangeChange\", %player);
///    @endtsexample)
/// 
/// </summary>

internal bool fnActionMap_unbindObj (string actionmap, string device, string action, string obj)
{
var sbactionmap = new StringBuilder(actionmap, 1024);
var sbdevice = new StringBuilder(device, 4096);
var sbaction = new StringBuilder(action, 4096);
var sbobj = new StringBuilder(obj, 4096);

return  SafeNativeMethods.mwle_fnActionMap_unbindObj(sbactionmap, sbdevice, sbaction, sbobj)>=1;
}
/// <summary>
/// @brief Saves the ActionMap to a file or dumps it to the console.
///    @param fileName The file path to save the ActionMap to. If a filename is not specified 
///     the ActionMap will be dumped to the console.
///    @param append Whether to write the ActionMap at the end of the file or overwrite it.
/// 	@tsexample
/// 	// Write out the actionmap into the config.cs file
///    moveMap.save( \"scripts/client/config.cs\" );
/// 	@endtsexample)
/// 
/// </summary>

internal void fnActionMap_save (string actionmap, string fileName, bool append)
{
var sbactionmap = new StringBuilder(actionmap, 1024);
var sbfileName = new StringBuilder(fileName, 4096);

SafeNativeMethods.mwle_fnActionMap_save(sbactionmap, sbfileName, append);
}
/// <summary>
/// @brief Push the ActionMap onto the %ActionMap stack.
///    Activates an ActionMap and placees it at the top of the ActionMap stack.
/// 	@tsexample
/// 	// Make moveMap the active action map
/// 	moveMap.push();
/// 	@endtsexample
///    @see ActionMap)
/// 
/// </summary>

internal void fnActionMap_push (string actionmap)
{
var sbactionmap = new StringBuilder(actionmap, 1024);

SafeNativeMethods.mwle_fnActionMap_push(sbactionmap);
}
/// <summary>
/// @brief Pop the ActionMap off the %ActionMap stack.
///    Deactivates an %ActionMap and removes it from the @ActionMap stack.
/// 	@tsexample
/// 	// Deactivate moveMap
/// 	moveMap.pop();
/// 	@endtsexample
///    @see ActionMap)
/// 
/// </summary>

internal void fnActionMap_pop (string actionmap)
{
var sbactionmap = new StringBuilder(actionmap, 1024);

SafeNativeMethods.mwle_fnActionMap_pop(sbactionmap);
}
/// <summary>
/// @brief Gets the ActionMap binding for the specified command.
///    Use getField() on the return value to get the device and action of the binding.
///    @param command The function to search bindings for.
///    @return The binding against the specified command. Returns an empty string(\"\") 
///    if a binding wasn't found.
/// 	@tsexample
/// 	// Find what the function \"jump()\" is bound to in moveMap
/// 	%bind = moveMap.getBinding( \"jump\" );
/// 	if ( %bind !$= \"\" )
/// 	{
/// 	// Find out what device is used in the binding
/// 		%device = getField( %bind, 0 );
/// 	// Find out what action (such as a key) is used in the binding
/// 		%action = getField( %bind, 1 );
/// 	}
/// 	@endtsexample
///    @see getField)
/// 
/// </summary>

internal string fnActionMap_getBinding (string actionmap, string command)
{
var returnbuff = new StringBuilder(4096);
var sbactionmap = new StringBuilder(actionmap, 1024);
var sbcommand = new StringBuilder(command, 4096);

SafeNativeMethods.mwle_fnActionMap_getBinding(sbactionmap, sbcommand, returnbuff);
return returnbuff.ToString();

}
/// <summary>
/// @brief Gets ActionMap command for the device and action.
///    @param device The device that was bound. Can be a keyboard, mouse, joystick or a gamepad.
///    @param action The device action that was bound.  The action is dependant upon the device. Specify a key for keyboards.
///    @return The command against the specified device and action.
/// 	@tsexample
/// 	// Find what function is bound to a device\'s action
/// 	// In this example, \"jump()\" was assigned to the space key in another script
/// 	%command = moveMap.getCommand(\"keyboard\", \"space\");
/// 	// Should print \"jump\" in the console
/// 	echo(%command)
/// 	@endtsexample)
/// 
/// </summary>

internal string fnActionMap_getCommand (string actionmap, string device, string action)
{
var returnbuff = new StringBuilder(4096);
var sbactionmap = new StringBuilder(actionmap, 1024);
var sbdevice = new StringBuilder(device, 4096);
var sbaction = new StringBuilder(action, 4096);

SafeNativeMethods.mwle_fnActionMap_getCommand(sbactionmap, sbdevice, sbaction, returnbuff);
return returnbuff.ToString();

}
/// <summary>
/// @brief Determines if the specified device and action is inverted.
///    Should only be used for scrolling devices or gamepad/joystick axes.
///    @param device The device that was bound. Can be a keyboard, mouse, joystick or a gamepad.
///    @param action The device action that was bound.  The action is dependant upon the device. Specify a key for keyboards.
///    @return True if the specified device and action is inverted.
/// 	@tsexample
///    %if ( moveMap.isInverted( \"mouse\", \"xaxis\"))
///       echo(\"Mouse's xAxis is inverted\");
/// 	@endtsexample)
/// 
/// </summary>

internal bool fnActionMap_isInverted (string actionmap, string device, string action)
{
var sbactionmap = new StringBuilder(actionmap, 1024);
var sbdevice = new StringBuilder(device, 4096);
var sbaction = new StringBuilder(action, 4096);

return  SafeNativeMethods.mwle_fnActionMap_isInverted(sbactionmap, sbdevice, sbaction)>=1;
}
/// <summary>
/// @brief Get any scaling on the specified device and action.
///    @param device The device that was bound. Can be keyboard, mouse, joystick or gamepad.
///    @param action The device action that was bound. The action is dependant upon the device. Specify a key for keyboards.
///    @return Any scaling applied to the specified device and action.
/// 	@tsexample
/// 	%scale = %moveMap.getScale( \"gamepad\", \"thumbrx\");
/// 	@endtsexample)
/// 
/// </summary>

internal float fnActionMap_getScale (string actionmap, string device, string action)
{
var sbactionmap = new StringBuilder(actionmap, 1024);
var sbdevice = new StringBuilder(device, 4096);
var sbaction = new StringBuilder(action, 4096);

return  SafeNativeMethods.mwle_fnActionMap_getScale(sbactionmap, sbdevice, sbaction);
}
/// <summary>
/// @brief Gets the Dead zone for the specified device and action.
///    @param device The device that was bound.  Can be a keyboard, mouse, joystick or a gamepad.
///    @param action The device action that was bound. The action is dependant upon the device. Specify a key for keyboards.
///    @return The dead zone for the specified device and action. Returns \"0 0\" if there is no dead zone  
///    or an empty string(\"\") if the mapping was not found.
/// 	@tsexample
/// 	%deadZone = moveMap.getDeadZone( \"gamepad\", \"thumbrx\");
/// 	@endtsexample)
/// 
/// </summary>

internal string fnActionMap_getDeadZone (string actionmap, string device, string action)
{
var returnbuff = new StringBuilder(4096);
var sbactionmap = new StringBuilder(actionmap, 1024);
var sbdevice = new StringBuilder(device, 4096);
var sbaction = new StringBuilder(action, 4096);

SafeNativeMethods.mwle_fnActionMap_getDeadZone(sbactionmap, sbdevice, sbaction, returnbuff);
return returnbuff.ToString();

}
/// <summary>
/// @brief Sent by the server during phase 2 of the mission download to update motion spline paths.
/// 
///    The server transmits all spline motion paths that are within the mission (Path) separate from 
///    other objects.  This is due to the potentially large number of nodes within each path, which may 
///    saturate a packet sent to the client.  By managing this step separately, Torque has finer control 
///    over how packets are organised vs. doing it during the ghosting stage.
/// 
///    Internally a PathManager is used to track all paths defined within a mission on the server, and each 
///    one is transmitted using a PathManagerEvent.  The client side collects these events and builds the 
///    given paths within its own PathManager.  This is typically done during the standard mission start 
///    phase 2 when following Torque's example mission startup sequence.
/// 
///    When a mission is ended, all paths need to be cleared from their respective path managers.
/// 
///    @tsexample
///    function serverCmdMissionStartPhase2Ack(%client, %seq, %playerDB)
///    {
///       // Make sure to ignore calls from a previous mission load
///       if (%seq != $missionSequence || !$MissionRunning)
///          return;
///       if (%client.currentPhase != 1.5)
///          return;
///       %client.currentPhase = 2;
///    
///       // Set the player datablock choice
///       %client.playerDB = %playerDB;
///    
///       // Update mission paths (SimPath), this needs to get there before the objects.
///       %client.transmitPaths();
///    
///       // Start ghosting objects to the client
///       %client.activateGhosting();
///    }
///    @endtsexample
///    
///    @see clearPaths()
///    @see Path)
/// 
/// </summary>

internal void fnNetConnection_transmitPaths (string netconnection)
{
var sbnetconnection = new StringBuilder(netconnection, 1024);

SafeNativeMethods.mwle_fnNetConnection_transmitPaths(sbnetconnection);
}
/// <summary>
/// @brief On the server, resets the connection to indicate that motion spline paths have not been transmitted.
/// 
///    Typically when a mission has ended on the server, all connected clients are informed of this change 
///    and their connections are reset back to a starting state.  This method resets a connection on the 
///    server to indicate that motion spline paths have not been transmitted.
/// 
///    @tsexample
///       // Inform the clients
///       for (%clientIndex = 0; %clientIndex < ClientGroup.getCount(); %clientIndex++)
///       {
///          // clear ghosts and paths from all clients
///          %cl = ClientGroup.getObject(%clientIndex);
///          %cl.endMission();
///          %cl.resetGhosting();
///          %cl.clearPaths();
///       }
///    @endtsexample
///    
///    @see transmitPaths()
///    @see Path)
/// 
/// </summary>

internal void fnNetConnection_clearPaths (string netconnection)
{
var sbnetconnection = new StringBuilder(netconnection, 1024);

SafeNativeMethods.mwle_fnNetConnection_clearPaths(sbnetconnection);
}
/// <summary>
/// @brief Returns the far end network address for the connection.
/// 
///    The address will be in one of the following forms:
///    - <b>IP:Broadcast:<port></b> for broadcast type addresses
///    - <b>IP:<address>:<port></b> for IP addresses
///    - <b>local</b> when connected locally (server and client running in same process)
/// 
/// </summary>

internal string fnNetConnection_getAddress (string netconnection)
{
var returnbuff = new StringBuilder(4096);
var sbnetconnection = new StringBuilder(netconnection, 1024);

SafeNativeMethods.mwle_fnNetConnection_getAddress(sbnetconnection, returnbuff);
return returnbuff.ToString();

}
/// <summary>
/// @brief Simulate network issues on the connection for testing.
/// 
///    @param packetLoss The fraction of packets that will be lost.  Ranges from 0.0 (no loss) to 1.0 (complete loss)
///    @param delay Delays packets being transmitted by simulating a particular ping.  This is an absolute 
///    integer, measured in ms.)
/// 
/// </summary>

internal void fnNetConnection_setSimulatedNetParams (string netconnection, float packetLoss, int delay)
{
var sbnetconnection = new StringBuilder(netconnection, 1024);

SafeNativeMethods.mwle_fnNetConnection_setSimulatedNetParams(sbnetconnection, packetLoss, delay);
}
/// <summary>
/// @brief Returns the average round trip time (in ms) for the connection.
/// 
///    The round trip time is recalculated every time a notify packet is received.  Notify 
///    packets are used to information the connection that the far end successfully received 
///    the sent packet.)
/// 
/// </summary>

internal int fnNetConnection_getPing (string netconnection)
{
var sbnetconnection = new StringBuilder(netconnection, 1024);

return  SafeNativeMethods.mwle_fnNetConnection_getPing(sbnetconnection);
}
/// <summary>
/// @brief Returns the percentage of packets lost per tick.
/// 
///    @note This method is not yet hooked up.)
/// 
/// </summary>

internal int fnNetConnection_getPacketLoss (string netconnection)
{
var sbnetconnection = new StringBuilder(netconnection, 1024);

return  SafeNativeMethods.mwle_fnNetConnection_getPacketLoss(sbnetconnection);
}
/// <summary>
/// @brief Ensures that all configured packet rates and sizes meet minimum requirements.
/// 
///    This method is normally only called when a NetConnection class is first constructed.  It need 
///    only be manually called if the global variables that set the packet rate or size have changed.
/// 
///    @note If @$pref::Net::PacketRateToServer, @$pref::Net::PacketRateToClient or @$pref::Net::PacketSize 
///    have been changed since a NetConnection has been created, this method must be called on 
///    all connections for them to follow the new rates or size.)
/// 
/// </summary>

internal void fnNetConnection_checkMaxRate (string netconnection)
{
var sbnetconnection = new StringBuilder(netconnection, 1024);

SafeNativeMethods.mwle_fnNetConnection_checkMaxRate(sbnetconnection);
}
/// <summary>
/// @brief On the client, convert a ghost ID from this connection to a real SimObject ID.
/// 
///    Torque's network ghosting system only exchanges ghost ID's between the server and client.  Use 
///    this method on the client to discover an object's local SimObject ID when you only have a 
///    ghost ID.
/// 
///    @param ghostID The ghost ID of the object as sent by the server.
///    @returns The SimObject ID of the object, or 0 if it could not be resolved.
/// 
///    @tsexample
///       %object = ServerConnection.resolveGhostID( %ghostId );
///    @endtsexample
/// 
///    @see @ref ghosting_scoping for a description of the ghosting system.)
/// 
/// </summary>

internal int fnNetConnection_resolveGhostID (string netconnection, int ghostID)
{
var sbnetconnection = new StringBuilder(netconnection, 1024);

return  SafeNativeMethods.mwle_fnNetConnection_resolveGhostID(sbnetconnection, ghostID);
}
/// <summary>
/// @brief On the server, convert a ghost ID from this connection to a real SimObject ID.
/// 
///    Torque's network ghosting system only exchanges ghost ID's between the server and client.  Use 
///    this method on the server to discover an object's local SimObject ID when you only have a 
///    ghost ID.
/// 
///    @param ghostID The ghost ID of the object as sent by the server.
///    @returns The SimObject ID of the object, or 0 if it could not be resolved.
/// 
///    @tsexample
///       %object = %client.resolveObjectFromGhostIndex( %ghostId );
///    @endtsexample
/// 
///    @see @ref ghosting_scoping for a description of the ghosting system.)
/// 
/// </summary>

internal int fnNetConnection_resolveObjectFromGhostIndex (string netconnection, int ghostID)
{
var sbnetconnection = new StringBuilder(netconnection, 1024);

return  SafeNativeMethods.mwle_fnNetConnection_resolveObjectFromGhostIndex(sbnetconnection, ghostID);
}
/// <summary>
/// @brief On server or client, convert a real id to the ghost id for this connection.
/// 
///    Torque's network ghosting system only exchanges ghost ID's between the server and client.  Use 
///    this method on the server or client to discover an object's ghost ID based on its real SimObject ID.
/// 
///    @param realID The real SimObject ID of the object.
///    @returns The ghost ID of the object for this connection, or -1 if it could not be resolved.
/// 
///    @see @ref ghosting_scoping for a description of the ghosting system.)
/// 
/// </summary>

internal int fnNetConnection_getGhostID (string netconnection, int realID)
{
var sbnetconnection = new StringBuilder(netconnection, 1024);

return  SafeNativeMethods.mwle_fnNetConnection_getGhostID(sbnetconnection, realID);
}
/// <summary>
/// @brief Connects to the remote address.
/// 
///    Attempts to connect with another NetConnection on the given address.  Typically once 
///    connected, a game's information is passed along from the server to the client, followed 
///    by the player entering the game world.  The actual procedure is dependent on 
///    the NetConnection subclass that is used.  i.e. GameConnection.
/// 
///    @param remoteAddress The address to connect to in the form of IP:<address>:<port&rt; 
///    although the <i>IP:</i> portion is optional.  The <i>address</i> portion may be in the form 
///    of w.x.y.z or as a host name, in which case a DNS lookup will be performed.  You may also 
///    substitue the word <i>broadcast</i> for the address to broadcast the connect request over 
///    the local subnet.
/// 
///    @see NetConnection::connectLocal() to connect to a server running within the same process 
///    as the client.
///    )
/// 
/// </summary>

internal void fnNetConnection_connect (string netconnection, string remoteAddress)
{
var sbnetconnection = new StringBuilder(netconnection, 1024);
var sbremoteAddress = new StringBuilder(remoteAddress, 4096);

SafeNativeMethods.mwle_fnNetConnection_connect(sbnetconnection, sbremoteAddress);
}
/// <summary>
/// @brief Connects with the server that is running within the same process as the client.
/// 
///    @returns An error text message upon failure, or an empty string when successful.
/// 
///    @see See @ref local_connections for a description of local connections and their use.  See 
///    NetConnection::connect() to connect to a server running in another process (on the same machine or not).)
/// 
/// </summary>

internal string fnNetConnection_connectLocal (string netconnection)
{
var returnbuff = new StringBuilder(4096);
var sbnetconnection = new StringBuilder(netconnection, 1024);

SafeNativeMethods.mwle_fnNetConnection_connectLocal(sbnetconnection, returnbuff);
return returnbuff.ToString();

}
/// <summary>
/// @brief Provides the number of active ghosts on the connection.
///    @returns The number of active ghosts.
///    @see @ref ghosting_scoping for a description of the ghosting system.)
/// 
/// </summary>

internal int fnNetConnection_getGhostsActive (string netconnection)
{
var sbnetconnection = new StringBuilder(netconnection, 1024);

return  SafeNativeMethods.mwle_fnNetConnection_getGhostsActive(sbnetconnection);
}
/// <summary>
/// @brief Cause the NetObject to be forced as scoped on the specified NetConnection.
/// 
///    @param client The connection this object will always be scoped to
/// 
///    @tsexample
///       // Called to create new cameras in TorqueScript
///       // %this - The active GameConnection
///       // %spawnPoint - The spawn point location where we creat the camera
///       function GameConnection::spawnCamera(%this, %spawnPoint)
///       {
///       	// If this connection's camera exists
///       	if(isObject(%this.camera))
///       	{
///       		// Add it to the mission group to be cleaned up later
///       		MissionCleanup.add( %this.camera );
///       		// Force it to scope to the client side
///       		%this.camera.scopeToClient(%this);
///       	}
///       }
///    @endtsexample
///    
///    @see clearScopeToClient())
/// 
/// </summary>

internal void fnNetObject_scopeToClient (string netobject, string client)
{
var sbnetobject = new StringBuilder(netobject, 1024);
var sbclient = new StringBuilder(client, 1024);

SafeNativeMethods.mwle_fnNetObject_scopeToClient(sbnetobject, sbclient);
}
/// <summary>
/// @brief Undo the effects of a scopeToClient() call.
/// 
///    @param client The connection to remove this object's scoping from 
///    
///    @see scopeToClient())
/// 
/// </summary>

internal void fnNetObject_clearScopeToClient (string netobject, string client)
{
var sbnetobject = new StringBuilder(netobject, 1024);
var sbclient = new StringBuilder(client, 1024);

SafeNativeMethods.mwle_fnNetObject_clearScopeToClient(sbnetobject, sbclient);
}
/// <summary>
/// @brief Always scope this object on all connections.
/// 
///    The object is marked as ScopeAlways and is immediately ghosted to 
///    all active connections.  This function has no effect if the object 
///    is not marked as Ghostable.)
/// 
/// </summary>

internal void fnNetObject_setScopeAlways (string netobject)
{
var sbnetobject = new StringBuilder(netobject, 1024);

SafeNativeMethods.mwle_fnNetObject_setScopeAlways(sbnetobject);
}
/// <summary>
/// @brief Get the ghost index of this object from the server.
/// 
///    @returns The ghost ID of this NetObject on the server
/// 
///    @tsexample
///       %ghostID = LocalClientConnection.getGhostId( %serverObject );
///    @endtsexample)
/// 
/// </summary>

internal int fnNetObject_getGhostID (string netobject)
{
var sbnetobject = new StringBuilder(netobject, 1024);

return  SafeNativeMethods.mwle_fnNetObject_getGhostID(sbnetobject);
}
/// <summary>
/// @brief Returns a pointer to the client object when on a local connection.
/// 
///    Short-Circuit-Networking: this is only valid for a local-client / singleplayer situation.
/// 
///    @returns the SimObject ID of the client object.
/// 
///    @tsexample
///       // Psuedo-code, some values left out for this example
///       %node = new ParticleEmitterNode(){};
///       %clientObject = %node.getClientObject();
///       if(isObject(%clientObject)
///       	%clientObject.setTransform(\"0 0 0\");
///    @endtsexample
///    
///    @see @ref local_connections)
/// 
/// </summary>

internal int fnNetObject_getClientObject (string netobject)
{
var sbnetobject = new StringBuilder(netobject, 1024);

return  SafeNativeMethods.mwle_fnNetObject_getClientObject(sbnetobject);
}
/// <summary>
/// @brief Returns a pointer to the client object when on a local connection.
/// 
///    Short-Circuit-Netorking: this is only valid for a local-client / singleplayer situation.
///    
///    @returns The SimObject ID of the server object.
///    @tsexample
///       // Psuedo-code, some values left out for this example
///       %node = new ParticleEmitterNode(){};
///       %serverObject = %node.getServerObject();
///       if(isObject(%serverObject)
///       	%serverObject.setTransform(\"0 0 0\");
///    @endtsexample
///    
///    @see @ref local_connections)
/// 
/// </summary>

internal int fnNetObject_getServerObject (string netobject)
{
var sbnetobject = new StringBuilder(netobject, 1024);

return  SafeNativeMethods.mwle_fnNetObject_getServerObject(sbnetobject);
}
/// <summary>
/// @brief Called to check if an object resides on the clientside.
///    @return True if the object resides on the client, false otherwise.)
/// 
/// </summary>

internal bool fnNetObject_isClientObject (string netobject)
{
var sbnetobject = new StringBuilder(netobject, 1024);

return  SafeNativeMethods.mwle_fnNetObject_isClientObject(sbnetobject)>=1;
}
/// <summary>
/// @brief Checks if an object resides on the server.
///    @return True if the object resides on the server, false otherwise.)
/// 
/// </summary>

internal bool fnNetObject_isServerObject (string netobject)
{
var sbnetobject = new StringBuilder(netobject, 1024);

return  SafeNativeMethods.mwle_fnNetObject_isServerObject(sbnetobject)>=1;
}
/// <summary>
/// ( aiAddPlayer, S32 , 2, 3, aiAddPlayer( 'playerName'[, 'AIClassType'] ); ) 
/// </summary>

internal int fn__aiAddPlayer (string a1, string a2)
{
var sba1 = new StringBuilder(a1, 4096);
var sba2 = new StringBuilder(a2, 4096);

return  SafeNativeMethods.mwle_fn__aiAddPlayer(sba1, sba2);
}
/// <summary>
/// ( AIClient, setMoveSpeed, void, 3, 3, ai.setMoveSpeed( float ); ) 
/// </summary>

internal void fnAIClient_setMoveSpeed (string aiclient, string a2)
{
var sbaiclient = new StringBuilder(aiclient, 1024);
var sba2 = new StringBuilder(a2, 4096);

SafeNativeMethods.mwle_fnAIClient_setMoveSpeed(sbaiclient, sba2);
}
/// <summary>
/// ( AIClient, stop, void, 2, 2, ai.stop(); ) 
/// </summary>

internal void fnAIClient_stop (string aiclient)
{
var sbaiclient = new StringBuilder(aiclient, 1024);

SafeNativeMethods.mwle_fnAIClient_stop(sbaiclient);
}
/// <summary>
/// ( AIClient, setAimLocation, void, 3, 3, ai.setAimLocation( x y z ); ) 
/// </summary>

internal void fnAIClient_setAimLocation (string aiclient, string a2)
{
var sbaiclient = new StringBuilder(aiclient, 1024);
var sba2 = new StringBuilder(a2, 4096);

SafeNativeMethods.mwle_fnAIClient_setAimLocation(sbaiclient, sba2);
}
/// <summary>
/// ( AIClient, setMoveDestination, void, 3, 3, ai.setMoveDestination( x y z ); ) 
/// </summary>

internal void fnAIClient_setMoveDestination (string aiclient, string a2)
{
var sbaiclient = new StringBuilder(aiclient, 1024);
var sba2 = new StringBuilder(a2, 4096);

SafeNativeMethods.mwle_fnAIClient_setMoveDestination(sbaiclient, sba2);
}
/// <summary>
/// ( AIClient, getAimLocation, const char *, 2, 2, ai.getAimLocation(); ) 
/// </summary>

internal string fnAIClient_getAimLocation (string aiclient)
{
var returnbuff = new StringBuilder(4096);
var sbaiclient = new StringBuilder(aiclient, 1024);

SafeNativeMethods.mwle_fnAIClient_getAimLocation(sbaiclient, returnbuff);
return returnbuff.ToString();

}
/// <summary>
/// ( AIClient, getMoveDestination, const char *, 2, 2, ai.getMoveDestination(); ) 
/// </summary>

internal string fnAIClient_getMoveDestination (string aiclient)
{
var returnbuff = new StringBuilder(4096);
var sbaiclient = new StringBuilder(aiclient, 1024);

SafeNativeMethods.mwle_fnAIClient_getMoveDestination(sbaiclient, returnbuff);
return returnbuff.ToString();

}
/// <summary>
/// ( AIClient, setTargetObject, void, 3, 3, ai.setTargetObject( obj ); ) 
/// </summary>

internal void fnAIClient_setTargetObject (string aiclient, string a2)
{
var sbaiclient = new StringBuilder(aiclient, 1024);
var sba2 = new StringBuilder(a2, 4096);

SafeNativeMethods.mwle_fnAIClient_setTargetObject(sbaiclient, sba2);
}
/// <summary>
/// ( AIClient, getTargetObject, S32, 2, 2, ai.getTargetObject(); ) 
/// </summary>

internal int fnAIClient_getTargetObject (string aiclient)
{
var sbaiclient = new StringBuilder(aiclient, 1024);

return  SafeNativeMethods.mwle_fnAIClient_getTargetObject(sbaiclient);
}
/// <summary>
/// ( AIClient, missionCycleCleanup, void, 2, 2, ai.missionCycleCleanup(); ) 
/// </summary>

internal void fnAIClient_missionCycleCleanup (string aiclient)
{
var sbaiclient = new StringBuilder(aiclient, 1024);

SafeNativeMethods.mwle_fnAIClient_missionCycleCleanup(sbaiclient);
}
/// <summary>
/// ( AIClient, move, void, 2, 2, ai.move(); ) 
/// </summary>

internal void fnAIClient_move (string aiclient)
{
var sbaiclient = new StringBuilder(aiclient, 1024);

SafeNativeMethods.mwle_fnAIClient_move(sbaiclient);
}
/// <summary>
/// ( AIClient, getLocation, const char *, 2, 2, ai.getLocation(); ) 
/// </summary>

internal string fnAIClient_getLocation (string aiclient)
{
var returnbuff = new StringBuilder(4096);
var sbaiclient = new StringBuilder(aiclient, 1024);

SafeNativeMethods.mwle_fnAIClient_getLocation(sbaiclient, returnbuff);
return returnbuff.ToString();

}
/// <summary>
/// ( AIClient, moveForward, void, 2, 2, ai.moveForward(); ) 
/// </summary>

internal void fnAIClient_moveForward (string aiclient)
{
var sbaiclient = new StringBuilder(aiclient, 1024);

SafeNativeMethods.mwle_fnAIClient_moveForward(sbaiclient);
}
/// <summary>
/// (aiConnect, S32 , 2, 20, (...)
///    @brief Creates a new AIConnection, and passes arguments to its onConnect script callback.
///    @returns The newly created AIConnection
///    @see GameConnection for parameter information
///    @ingroup AI)
/// 
/// </summary>

internal int fn__aiConnect (string a1, string a2, string a3, string a4, string a5, string a6, string a7, string a8, string a9, string a10, string a11, string a12, string a13, string a14, string a15, string a16, string a17, string a18, string a19)
{
var sba1 = new StringBuilder(a1, 4096);
var sba2 = new StringBuilder(a2, 4096);
var sba3 = new StringBuilder(a3, 4096);
var sba4 = new StringBuilder(a4, 4096);
var sba5 = new StringBuilder(a5, 4096);
var sba6 = new StringBuilder(a6, 4096);
var sba7 = new StringBuilder(a7, 4096);
var sba8 = new StringBuilder(a8, 4096);
var sba9 = new StringBuilder(a9, 4096);
var sba10 = new StringBuilder(a10, 4096);
var sba11 = new StringBuilder(a11, 4096);
var sba12 = new StringBuilder(a12, 4096);
var sba13 = new StringBuilder(a13, 4096);
var sba14 = new StringBuilder(a14, 4096);
var sba15 = new StringBuilder(a15, 4096);
var sba16 = new StringBuilder(a16, 4096);
var sba17 = new StringBuilder(a17, 4096);
var sba18 = new StringBuilder(a18, 4096);
var sba19 = new StringBuilder(a19, 4096);

return  SafeNativeMethods.mwle_fn__aiConnect(sba1, sba2, sba3, sba4, sba5, sba6, sba7, sba8, sba9, sba10, sba11, sba12, sba13, sba14, sba15, sba16, sba17, sba18, sba19);
}
/// <summary>
/// (AIConnection,setMove,void,4, 4,(string field, float value)
///               Set a field on the current move.
///               @param   field One of {'x','y','z','yaw','pitch','roll'}
///               @param   value Value to set field to.)
/// 
/// </summary>

internal void fnAIConnection_setMove (string aiconnection, string a2, string a3)
{
var sbaiconnection = new StringBuilder(aiconnection, 1024);
var sba2 = new StringBuilder(a2, 4096);
var sba3 = new StringBuilder(a3, 4096);

SafeNativeMethods.mwle_fnAIConnection_setMove(sbaiconnection, sba2, sba3);
}
/// <summary>
/// (AIConnection,getMove,F32,3, 3,(string field)
///               Get the given field of a move.
///               @param field One of {'x','y','z','yaw','pitch','roll'}
///               @returns The requested field on the current move.)
/// 
/// </summary>

internal float fnAIConnection_getMove (string aiconnection, string a2)
{
var sbaiconnection = new StringBuilder(aiconnection, 1024);
var sba2 = new StringBuilder(a2, 4096);

return  SafeNativeMethods.mwle_fnAIConnection_getMove(sbaiconnection, sba2);
}
/// <summary>
/// (AIConnection,setFreeLook,void,3, 3,(bool isFreeLook)
///               Enable/disable freelook on the current move.)
/// 
/// </summary>

internal void fnAIConnection_setFreeLook (string aiconnection, string a2)
{
var sbaiconnection = new StringBuilder(aiconnection, 1024);
var sba2 = new StringBuilder(a2, 4096);

SafeNativeMethods.mwle_fnAIConnection_setFreeLook(sbaiconnection, sba2);
}
/// <summary>
/// (AIConnection,getFreeLook,bool,2, 2,getFreeLook()
///               Is freelook on for the current move?)
/// 
/// </summary>

internal bool fnAIConnection_getFreeLook (string aiconnection)
{
var sbaiconnection = new StringBuilder(aiconnection, 1024);

return  SafeNativeMethods.mwle_fnAIConnection_getFreeLook(sbaiconnection)>=1;
}
/// <summary>
/// (AIConnection,setTrigger,void,4, 4,(int trigger, bool set)
///               Set a trigger.)
/// 
/// </summary>

internal void fnAIConnection_setTrigger (string aiconnection, string a2, string a3)
{
var sbaiconnection = new StringBuilder(aiconnection, 1024);
var sba2 = new StringBuilder(a2, 4096);
var sba3 = new StringBuilder(a3, 4096);

SafeNativeMethods.mwle_fnAIConnection_setTrigger(sbaiconnection, sba2, sba3);
}
/// <summary>
/// (AIConnection,getTrigger,bool,4, 4,(int trigger)
///               Is the given trigger set?)
/// 
/// </summary>

internal bool fnAIConnection_getTrigger (string aiconnection, string a2, string a3)
{
var sbaiconnection = new StringBuilder(aiconnection, 1024);
var sba2 = new StringBuilder(a2, 4096);
var sba3 = new StringBuilder(a3, 4096);

return  SafeNativeMethods.mwle_fnAIConnection_getTrigger(sbaiconnection, sba2, sba3)>=1;
}
/// <summary>
/// (AIConnection,getAddress,const char*,2, 2,)
/// 
/// </summary>

internal string fnAIConnection_getAddress (string aiconnection)
{
var returnbuff = new StringBuilder(4096);
var sbaiconnection = new StringBuilder(aiconnection, 1024);

SafeNativeMethods.mwle_fnAIConnection_getAddress(sbaiconnection, returnbuff);
return returnbuff.ToString();

}
/// <summary>
/// ( AIPlayer, setAimObject, void, 3, 4, ( GameBase obj, [Point3F offset] )
///               Sets the bot's target object. Optionally set an offset from target location.
/// 			  @hide)
/// 
/// </summary>

internal void fnAIPlayer_setAimObject (string aiplayer, string a2, string a3)
{
var sbaiplayer = new StringBuilder(aiplayer, 1024);
var sba2 = new StringBuilder(a2, 4096);
var sba3 = new StringBuilder(a3, 4096);

SafeNativeMethods.mwle_fnAIPlayer_setAimObject(sbaiplayer, sba2, sba3);
}
/// <summary>
/// @brief Tells the AIPlayer to stop moving.)
/// 
/// </summary>

internal void fnAIPlayer_stop (string aiplayer)
{
var sbaiplayer = new StringBuilder(aiplayer, 1024);

SafeNativeMethods.mwle_fnAIPlayer_stop(sbaiplayer);
}
/// <summary>
/// @brief Use this to stop aiming at an object or a point.
///    
///    @see setAimLocation()
///    @see setAimObject())
/// 
/// </summary>

internal void fnAIPlayer_clearAim (string aiplayer)
{
var sbaiplayer = new StringBuilder(aiplayer, 1024);

SafeNativeMethods.mwle_fnAIPlayer_clearAim(sbaiplayer);
}
/// <summary>
/// @brief Sets the move speed for an AI object.
/// 
///    @param speed A speed multiplier between 0.0 and 1.0.  
///    This is multiplied by the AIPlayer's base movement rates (as defined in 
///    its PlayerData datablock)
///    
///    @see getMoveDestination())
/// 
/// </summary>

internal void fnAIPlayer_setMoveSpeed (string aiplayer, float speed)
{
var sbaiplayer = new StringBuilder(aiplayer, 1024);

SafeNativeMethods.mwle_fnAIPlayer_setMoveSpeed(sbaiplayer, speed);
}
/// <summary>
/// @brief Gets the move speed of an AI object.
/// 
///    @return A speed multiplier between 0.0 and 1.0.
/// 
///    @see setMoveSpeed())
/// 
/// </summary>

internal float fnAIPlayer_getMoveSpeed (string aiplayer)
{
var sbaiplayer = new StringBuilder(aiplayer, 1024);

return  SafeNativeMethods.mwle_fnAIPlayer_getMoveSpeed(sbaiplayer);
}
/// <summary>
/// @brief Tells the AI to move to the location provided
/// 
///    @param goal Coordinates in world space representing location to move to.
///    @param slowDown A boolean value. If set to true, the bot will slow down 
///    when it gets within 5-meters of its move destination. If false, the bot 
///    will stop abruptly when it reaches the move destination. By default, this is true.
/// 
///    @note Upon reaching a move destination, the bot will clear its move destination and 
///    calls to getMoveDestination will return \"0 0 0\".
///    
///    @see getMoveDestination())
/// 
/// </summary>

internal void fnAIPlayer_setMoveDestination (string aiplayer, string goal, bool slowDown)
{
var sbaiplayer = new StringBuilder(aiplayer, 1024);
var sbgoal = new StringBuilder(goal, 1024);

SafeNativeMethods.mwle_fnAIPlayer_setMoveDestination(sbaiplayer, sbgoal, slowDown);
}
/// <summary>
/// @brief Get the AIPlayer's current destination.
/// 
///    @return Returns a point containing the \"x y z\" position 
///    of the AIPlayer's current move destination. If no move destination 
///    has yet been set, this returns \"0 0 0\".
///    
///    @see setMoveDestination())
/// 
/// </summary>

internal string fnAIPlayer_getMoveDestination (string aiplayer)
{
var returnbuff = new StringBuilder(1024);
var sbaiplayer = new StringBuilder(aiplayer, 1024);

SafeNativeMethods.mwle_fnAIPlayer_getMoveDestination(sbaiplayer, returnbuff);
return returnbuff.ToString();

}
/// <summary>
/// @brief Tells the AIPlayer to aim at the location provided.
/// 
///    @param target An \"x y z\" position in the game world to target.
///    
///    @see getAimLocation())
/// 
/// </summary>

internal void fnAIPlayer_setAimLocation (string aiplayer, string target)
{
var sbaiplayer = new StringBuilder(aiplayer, 1024);
var sbtarget = new StringBuilder(target, 1024);

SafeNativeMethods.mwle_fnAIPlayer_setAimLocation(sbaiplayer, sbtarget);
}
/// <summary>
/// @brief Returns the point the AIPlayer is aiming at.
/// 
///    This will reflect the position set by setAimLocation(), 
///    or the position of the object that the bot is now aiming at.  
///    If the bot is not aiming at anything, this value will 
///    change to whatever point the bot's current line-of-sight intercepts.
/// 
///    @return World space coordinates of the object AI is aiming at. Formatted as \"X Y Z\".
///    
///    @see setAimLocation()
///    @see setAimObject())
/// 
/// </summary>

internal string fnAIPlayer_getAimLocation (string aiplayer)
{
var returnbuff = new StringBuilder(1024);
var sbaiplayer = new StringBuilder(aiplayer, 1024);

SafeNativeMethods.mwle_fnAIPlayer_getAimLocation(sbaiplayer, returnbuff);
return returnbuff.ToString();

}
/// <summary>
/// @brief Gets the object the AIPlayer is targeting.
/// 
///    @return Returns -1 if no object is being aimed at, 
///    or the SimObjectID of the object the AIPlayer is aiming at.
///    
///    @see setAimObject())
/// 
/// </summary>

internal int fnAIPlayer_getAimObject (string aiplayer)
{
var sbaiplayer = new StringBuilder(aiplayer, 1024);

return  SafeNativeMethods.mwle_fnAIPlayer_getAimObject(sbaiplayer);
}
/// <summary>
/// Returns the current camera control mode.
///                    @see CameraMotionMode)
/// 
/// </summary>

internal int fnCamera_getMode (string camera)
{
var sbcamera = new StringBuilder(camera, 1024);

return  SafeNativeMethods.mwle_fnCamera_getMode(sbcamera);
}
/// <summary>
/// Get the camera's position in the world.
///                    @returns The position in the form of \"x y z\".)
/// 
/// </summary>

internal string fnCamera_getPosition (string camera)
{
var returnbuff = new StringBuilder(1024);
var sbcamera = new StringBuilder(camera, 1024);

SafeNativeMethods.mwle_fnCamera_getPosition(sbcamera, returnbuff);
return returnbuff.ToString();

}
/// <summary>
/// Get the camera's Euler rotation in radians.
///                    @returns The rotation in radians in the form of \"x y z\".)
/// 
/// </summary>

internal string fnCamera_getRotation (string camera)
{
var returnbuff = new StringBuilder(1024);
var sbcamera = new StringBuilder(camera, 1024);

SafeNativeMethods.mwle_fnCamera_getRotation(sbcamera, returnbuff);
return returnbuff.ToString();

}
/// <summary>
/// Set the camera's Euler rotation in radians.
///                    @param rot The rotation in radians in the form of \"x y z\".
///                    @note Rotation around the Y axis is ignored )
/// 
/// </summary>

internal void fnCamera_setRotation (string camera, string rot)
{
var sbcamera = new StringBuilder(camera, 1024);
var sbrot = new StringBuilder(rot, 1024);

SafeNativeMethods.mwle_fnCamera_setRotation(sbcamera, sbrot);
}
/// <summary>
/// Get the camera's offset from its orbit or tracking point.
///                    The offset is added to the camera's position when set to CameraMode::OrbitObject.
///                    @returns The offset in the form of \"x y z\".)
/// 
/// </summary>

internal string fnCamera_getOffset (string camera)
{
var returnbuff = new StringBuilder(1024);
var sbcamera = new StringBuilder(camera, 1024);

SafeNativeMethods.mwle_fnCamera_getOffset(sbcamera, returnbuff);
return returnbuff.ToString();

}
/// <summary>
/// Set the camera's offset.
///                    The offset is added to the camera's position when set to CameraMode::OrbitObject.
///                    @param offset The distance to offset the camera by in the form of \"x y z\".)
/// 
/// </summary>

internal void fnCamera_setOffset (string camera, string offset)
{
var sbcamera = new StringBuilder(camera, 1024);
var sboffset = new StringBuilder(offset, 1024);

SafeNativeMethods.mwle_fnCamera_setOffset(sbcamera, sboffset);
}
/// <summary>
/// Set the camera to orbit around the given object, or if none is given, around the given point.
///                     @param orbitObject The object to orbit around.  If no object is given (0 or blank string is passed in) use the orbitPoint instead
///                     @param orbitPoint The point to orbit around when no object is given.  In the form of \"x y z ax ay az aa\" such as returned by SceneObject::getTransform().
///                     @param minDistance The minimum distance allowed to the orbit object or point.
///                     @param maxDistance The maximum distance allowed from the orbit object or point.
///                     @param initDistance The initial distance from the orbit object or point.
///                     @param ownClientObj [optional] Are we orbiting an object that is owned by us?  Default is false.
///                     @param offset [optional] An offset added to the camera's position.  Default is no offset.
///                     @param locked [optional] Indicates the camera does not receive input from the player.  Default is false.
///                     @see Camera::setOrbitObject()
///                     @see Camera::setOrbitPoint())
/// 
/// </summary>

internal void fnCamera_setOrbitMode (string camera, string orbitObject, string orbitPoint, float minDistance, float maxDistance, float initDistance, bool ownClientObj, string offset, bool xlocked)
{
var sbcamera = new StringBuilder(camera, 1024);
var sborbitObject = new StringBuilder(orbitObject, 1024);
var sborbitPoint = new StringBuilder(orbitPoint, 1024);
var sboffset = new StringBuilder(offset, 1024);

SafeNativeMethods.mwle_fnCamera_setOrbitMode(sbcamera, sborbitObject, sborbitPoint, minDistance, maxDistance, initDistance, ownClientObj, sboffset, xlocked);
}
/// <summary>
/// Set the camera to orbit around a given object.
///                     @param orbitObject The object to orbit around.
///                     @param rotation The initial camera rotation about the object in radians in the form of \"x y z\".
///                     @param minDistance The minimum distance allowed to the orbit object or point.
///                     @param maxDistance The maximum distance allowed from the orbit object or point.
///                     @param initDistance The initial distance from the orbit object or point.
///                     @param ownClientObject [optional] Are we orbiting an object that is owned by us?  Default is false.
///                     @param offset [optional] An offset added to the camera's position.  Default is no offset.
///                     @param locked [optional] Indicates the camera does not receive input from the player.  Default is false.
///                     @returns false if the given object could not be found.
///                     @see Camera::setOrbitMode())
/// 
/// </summary>

internal bool fnCamera_setOrbitObject (string camera, string orbitObject, string rotation, float minDistance, float maxDistance, float initDistance, bool ownClientObject, string offset, bool xlocked)
{
var sbcamera = new StringBuilder(camera, 1024);
var sborbitObject = new StringBuilder(orbitObject, 1024);
var sbrotation = new StringBuilder(rotation, 1024);
var sboffset = new StringBuilder(offset, 1024);

return  SafeNativeMethods.mwle_fnCamera_setOrbitObject(sbcamera, sborbitObject, sbrotation, minDistance, maxDistance, initDistance, ownClientObject, sboffset, xlocked)>=1;
}
/// <summary>
/// Set the camera to orbit around a given point.
///                     @param orbitPoint The point to orbit around.  In the form of \"x y z ax ay az aa\" such as returned by SceneObject::getTransform().
///                     @param minDistance The minimum distance allowed to the orbit object or point.
///                     @param maxDistance The maximum distance allowed from the orbit object or point.
///                     @param initDistance The initial distance from the orbit object or point.
///                     @param offset [optional] An offset added to the camera's position.  Default is no offset.
///                     @param locked [optional] Indicates the camera does not receive input from the player.  Default is false.
///                     @see Camera::setOrbitMode())
/// 
/// </summary>

internal void fnCamera_setOrbitPoint (string camera, string orbitPoint, float minDistance, float maxDistance, float initDistance, string offset, bool xlocked)
{
var sbcamera = new StringBuilder(camera, 1024);
var sborbitPoint = new StringBuilder(orbitPoint, 1024);
var sboffset = new StringBuilder(offset, 1024);

SafeNativeMethods.mwle_fnCamera_setOrbitPoint(sbcamera, sborbitPoint, minDistance, maxDistance, initDistance, sboffset, xlocked);
}
/// <summary>
/// Set the camera to track a given object.
///                     @param trackObject The object to track.
///                     @param offset [optional] An offset added to the camera's position.  Default is no offset.
///                     @returns false if the given object could not be found.)
/// 
/// </summary>

internal bool fnCamera_setTrackObject (string camera, string trackObject, string offset)
{
var sbcamera = new StringBuilder(camera, 1024);
var sbtrackObject = new StringBuilder(trackObject, 1024);
var sboffset = new StringBuilder(offset, 1024);

return  SafeNativeMethods.mwle_fnCamera_setTrackObject(sbcamera, sbtrackObject, sboffset)>=1;
}
/// <summary>
/// Set the editor camera to orbit around a point set with Camera::setEditOrbitPoint().
///                     @note This method is generally used only within the World Editor and other tools.  To 
///                     orbit about an object or point within a game, see Camera::setOrbitMode() and its helper methods.)
/// 
/// </summary>

internal void fnCamera_setEditOrbitMode (string camera)
{
var sbcamera = new StringBuilder(camera, 1024);

SafeNativeMethods.mwle_fnCamera_setEditOrbitMode(sbcamera);
}
/// <summary>
/// Set the camera to fly freely.
///                    Allows the camera to have 6 degrees of freedom.  Provides for instantaneous motion 
///                    and rotation unless one of the Newton fields has been set to true.  See Camera::newtonMode 
///                    and Camera::newtonRotation.)
/// 
/// </summary>

internal void fnCamera_setFlyMode (string camera)
{
var sbcamera = new StringBuilder(camera, 1024);

SafeNativeMethods.mwle_fnCamera_setFlyMode(sbcamera);
}
/// <summary>
/// Set the camera to fly freely, but with ease-in and ease-out.
///                     This method allows for the same 6 degrees of freedom as Camera::setFlyMode() but 
///                     activates the ease-in and ease-out on the camera's movement.  To also activate 
///                     Newton mode for the camera's rotation, set Camera::newtonRotation to true.)
/// 
/// </summary>

internal void fnCamera_setNewtonFlyMode (string camera)
{
var sbcamera = new StringBuilder(camera, 1024);

SafeNativeMethods.mwle_fnCamera_setNewtonFlyMode(sbcamera);
}
/// <summary>
/// Is this a Newton Fly mode camera with damped rotation?
///                     @returns true if the camera uses a damped rotation.  i.e. Camera::newtonRotation is set to true.)
/// 
/// </summary>

internal bool fnCamera_isRotationDamped (string camera)
{
var sbcamera = new StringBuilder(camera, 1024);

return  SafeNativeMethods.mwle_fnCamera_isRotationDamped(sbcamera)>=1;
}
/// <summary>
/// Get the angular velocity for a Newton mode camera.
///                    @returns The angular velocity in the form of \"x y z\".
///                    @note Only returns useful results when Camera::newtonRotation is set to true.)
/// 
/// </summary>

internal string fnCamera_getAngularVelocity (string camera)
{
var returnbuff = new StringBuilder(1024);
var sbcamera = new StringBuilder(camera, 1024);

SafeNativeMethods.mwle_fnCamera_getAngularVelocity(sbcamera, returnbuff);
return returnbuff.ToString();

}
/// <summary>
/// Set the angular velocity for a Newton mode camera.
///                    @param velocity The angular velocity infor form of \"x y z\".
///                    @note Only takes affect when Camera::newtonRotation is set to true.)
/// 
/// </summary>

internal void fnCamera_setAngularVelocity (string camera, string velocity)
{
var sbcamera = new StringBuilder(camera, 1024);
var sbvelocity = new StringBuilder(velocity, 1024);

SafeNativeMethods.mwle_fnCamera_setAngularVelocity(sbcamera, sbvelocity);
}
/// <summary>
/// Set the angular force for a Newton mode camera.
///                    @param force The angular force applied when attempting to rotate the camera.
///                    @note Only takes affect when Camera::newtonRotation is set to true.)
/// 
/// </summary>

internal void fnCamera_setAngularForce (string camera, float force)
{
var sbcamera = new StringBuilder(camera, 1024);

SafeNativeMethods.mwle_fnCamera_setAngularForce(sbcamera, force);
}
/// <summary>
/// Set the angular drag for a Newton mode camera.
///                    @param drag The angular drag applied while the camera is rotating.
///                    @note Only takes affect when Camera::newtonRotation is set to true.)
/// 
/// </summary>

internal void fnCamera_setAngularDrag (string camera, float drag)
{
var sbcamera = new StringBuilder(camera, 1024);

SafeNativeMethods.mwle_fnCamera_setAngularDrag(sbcamera, drag);
}
/// <summary>
/// Set the mass for a Newton mode camera.
///                    @param mass The mass used during ease-in and ease-out calculations.
///                    @note Only used when Camera is in Newton mode.)
/// 
/// </summary>

internal void fnCamera_setMass (string camera, float mass)
{
var sbcamera = new StringBuilder(camera, 1024);

SafeNativeMethods.mwle_fnCamera_setMass(sbcamera, mass);
}
/// <summary>
/// Get the velocity for the camera.
///                    @returns The camera's velocity in the form of \"x y z\".
///                    @note Only useful when the Camera is in Newton mode.)
/// 
/// </summary>

internal string fnCamera_getVelocity (string camera)
{
var returnbuff = new StringBuilder(1024);
var sbcamera = new StringBuilder(camera, 1024);

SafeNativeMethods.mwle_fnCamera_getVelocity(sbcamera, returnbuff);
return returnbuff.ToString();

}
/// <summary>
/// Set the velocity for the camera.
///                    @param velocity The camera's velocity in the form of \"x y z\".
///                    @note Only affects the Camera when in Newton mode.)
/// 
/// </summary>

internal void fnCamera_setVelocity (string camera, string velocity)
{
var sbcamera = new StringBuilder(camera, 1024);
var sbvelocity = new StringBuilder(velocity, 1024);

SafeNativeMethods.mwle_fnCamera_setVelocity(sbcamera, sbvelocity);
}
/// <summary>
/// Set the drag for a Newton mode camera.
///                    @param drag The drag applied to the camera while moving.
///                    @note Only used when Camera is in Newton mode.)
/// 
/// </summary>

internal void fnCamera_setDrag (string camera, float drag)
{
var sbcamera = new StringBuilder(camera, 1024);

SafeNativeMethods.mwle_fnCamera_setDrag(sbcamera, drag);
}
/// <summary>
/// Set the force applied to a Newton mode camera while moving.
///                    @param force The force applied to the camera while attempting to move.
///                    @note Only used when Camera is in Newton mode.)
/// 
/// </summary>

internal void fnCamera_setFlyForce (string camera, float force)
{
var sbcamera = new StringBuilder(camera, 1024);

SafeNativeMethods.mwle_fnCamera_setFlyForce(sbcamera, force);
}
/// <summary>
/// Set the Newton mode camera speed multiplier when trigger[0] is active.
///                    @param multiplier The speed multiplier to apply.
///                    @note Only used when Camera is in Newton mode.)
/// 
/// </summary>

internal void fnCamera_setSpeedMultiplier (string camera, float multiplier)
{
var sbcamera = new StringBuilder(camera, 1024);

SafeNativeMethods.mwle_fnCamera_setSpeedMultiplier(sbcamera, multiplier);
}
/// <summary>
/// Set the Newton mode camera brake multiplier when trigger[1] is active.
///                    @param multiplier The brake multiplier to apply.
///                    @note Only used when Camera is in Newton mode.)
/// 
/// </summary>

internal void fnCamera_setBrakeMultiplier (string camera, float multiplier)
{
var sbcamera = new StringBuilder(camera, 1024);

SafeNativeMethods.mwle_fnCamera_setBrakeMultiplier(sbcamera, multiplier);
}
/// <summary>
/// Is the camera in edit orbit mode?
///                    @returns true if the camera is in edit orbit mode.)
/// 
/// </summary>

internal bool fnCamera_isEditOrbitMode (string camera)
{
var sbcamera = new StringBuilder(camera, 1024);

return  SafeNativeMethods.mwle_fnCamera_isEditOrbitMode(sbcamera)>=1;
}
/// <summary>
/// Set if there is a valid editor camera orbit point.
///                    When validPoint is set to false the Camera operates as if it is 
///                    in Fly mode rather than an Orbit mode.
///                    @param validPoint Indicates the validity of the orbit point.
///                    @note Only used when Camera is in Edit Orbit Mode.)
/// 
/// </summary>

internal void fnCamera_setValidEditOrbitPoint (string camera, bool validPoint)
{
var sbcamera = new StringBuilder(camera, 1024);

SafeNativeMethods.mwle_fnCamera_setValidEditOrbitPoint(sbcamera, validPoint);
}
/// <summary>
/// Set the editor camera's orbit point.
///                    @param point The point the camera will orbit in the form of \"x y z\".)
/// 
/// </summary>

internal void fnCamera_setEditOrbitPoint (string camera, string point)
{
var sbcamera = new StringBuilder(camera, 1024);
var sbpoint = new StringBuilder(point, 1024);

SafeNativeMethods.mwle_fnCamera_setEditOrbitPoint(sbcamera, sbpoint);
}
/// <summary>
/// Move the camera to fully view the given radius.
///                    @note For this operation to take affect a valid edit orbit point must first be specified.  See Camera::setEditOrbitPoint().
///                    @param radius The radius to view.)
/// 
/// </summary>

internal void fnCamera_autoFitRadius (string camera, float radius)
{
var sbcamera = new StringBuilder(camera, 1024);

SafeNativeMethods.mwle_fnCamera_autoFitRadius(sbcamera, radius);
}
/// <summary>
/// Point the camera at the specified position.  Does not work in Orbit or Track modes.
///                    @param point The position to point the camera at.)
/// 
/// </summary>

internal void fnCamera_lookAt (string camera, string point)
{
var sbcamera = new StringBuilder(camera, 1024);
var sbpoint = new StringBuilder(point, 1024);

SafeNativeMethods.mwle_fnCamera_lookAt(sbcamera, sbpoint);
}
/// <summary>
/// 1.0 1.0 1.0, 1.0 0.0 0.0), 
///    @brief Manually set this piece of debris at the given position with the given velocity.
/// 
///    Usually you do not manually create Debris objects as they are generated through other means, 
///    such as an Explosion.  This method exists when you do manually create a Debris object and 
///    want to have it start moving.
/// 
///    @param inputPosition Position to place the debris.
///    @param inputVelocity Velocity to move the debris after it has been placed.
///    @return Always returns true.
/// 
///    @tsexample
///       // Define the position
///       %position = \"1.0 1.0 1.0\";
///       // Define the velocity
///       %velocity = \"1.0 0.0 0.0\";
///       // Inform the debris object of its new position and velocity
///       %debris.init(%position,%velocity);
///    @endtsexample)
/// 
/// </summary>

internal bool fnDebris_init (string debris, string inputPosition, string inputVelocity)
{
var sbdebris = new StringBuilder(debris, 1024);
var sbinputPosition = new StringBuilder(inputPosition, 4096);
var sbinputVelocity = new StringBuilder(inputVelocity, 4096);

return  SafeNativeMethods.mwle_fnDebris_init(sbdebris, sbinputPosition, sbinputVelocity)>=1;
}
/// <summary>
/// (containerFindFirst, const char*, 6, 6, (int mask, Point3F point, float x, float y, float z)
///    @brief Find objects matching the bitmask type within a box centered at point, with extents x, y, z.
///    @returns The first object found, or an empty string if nothing was found.  Thereafter, you can get more 
///    results using containerFindNext().
///    @see containerFindNext
///    @ingroup Game)
/// 
/// </summary>

internal string fn__containerFindFirst (string a1, string a2, string a3, string a4, string a5)
{
var returnbuff = new StringBuilder(4096);
var sba1 = new StringBuilder(a1, 4096);
var sba2 = new StringBuilder(a2, 4096);
var sba3 = new StringBuilder(a3, 4096);
var sba4 = new StringBuilder(a4, 4096);
var sba5 = new StringBuilder(a5, 4096);

SafeNativeMethods.mwle_fn__containerFindFirst(sba1, sba2, sba3, sba4, sba5, returnbuff);
return returnbuff.ToString();

}
/// <summary>
/// ( containerFindNext, const char*, 1, 1, ()
///    @brief Get more results from a previous call to containerFindFirst().
///    @note You must call containerFindFirst() to begin the search.
///    @returns The next object found, or an empty string if nothing else was found.
///    @see containerFindFirst()
/// 	@ingroup Game)
/// 
/// </summary>

internal string fn__containerFindNext ()
{
var returnbuff = new StringBuilder(4096);

SafeNativeMethods.mwle_fn__containerFindNext(returnbuff);
return returnbuff.ToString();

}
/// <summary>
/// Intended as a helper to developers and editor scripts.
///                    Force trigger an inspectPostApply. This will transmit 
///                    material and other fields to client objects.
///                    )
/// 
/// </summary>

internal void fnGroundPlane_postApply (string groundplane)
{
var sbgroundplane = new StringBuilder(groundplane, 1024);

SafeNativeMethods.mwle_fnGroundPlane_postApply(sbgroundplane);
}
/// <summary>
/// Sets the model to be displayed in this control
///    @param shapeName Name of the model to display.)
/// 
/// </summary>

internal void fnGuiMaterialPreview_setModel (string guimaterialpreview, string shapeName)
{
var sbguimaterialpreview = new StringBuilder(guimaterialpreview, 1024);
var sbshapeName = new StringBuilder(shapeName, 4096);

SafeNativeMethods.mwle_fnGuiMaterialPreview_setModel(sbguimaterialpreview, sbshapeName);
}
/// <summary>
/// Deletes the preview model.)
/// 
/// </summary>

internal void fnGuiMaterialPreview_deleteModel (string guimaterialpreview)
{
var sbguimaterialpreview = new StringBuilder(guimaterialpreview, 1024);

SafeNativeMethods.mwle_fnGuiMaterialPreview_deleteModel(sbguimaterialpreview);
}
/// <summary>
/// Sets the distance at which the camera orbits the object. Clamped to the 
///    acceptable range defined in the class by min and max orbit distances.
///    @param distance The distance to set the orbit to (will be clamped).)
/// 
/// </summary>

internal void fnGuiMaterialPreview_setOrbitDistance (string guimaterialpreview, float distance)
{
var sbguimaterialpreview = new StringBuilder(guimaterialpreview, 1024);

SafeNativeMethods.mwle_fnGuiMaterialPreview_setOrbitDistance(sbguimaterialpreview, distance);
}
/// <summary>
/// Resets the viewport to default zoom, pan, rotate and lighting.)
/// 
/// </summary>

internal void fnGuiMaterialPreview_reset (string guimaterialpreview)
{
var sbguimaterialpreview = new StringBuilder(guimaterialpreview, 1024);

SafeNativeMethods.mwle_fnGuiMaterialPreview_reset(sbguimaterialpreview);
}
/// <summary>
/// Sets the color of the light in the scene.)
/// 
/// </summary>

internal void fnGuiMaterialPreview_setLightColor (string guimaterialpreview, string color)
{
var sbguimaterialpreview = new StringBuilder(guimaterialpreview, 1024);
var sbcolor = new StringBuilder(color, 1024);

SafeNativeMethods.mwle_fnGuiMaterialPreview_setLightColor(sbguimaterialpreview, sbcolor);
}
/// <summary>
/// Sets the color of the ambient light in the scene.)
/// 
/// </summary>

internal void fnGuiMaterialPreview_setAmbientLightColor (string guimaterialpreview, string color)
{
var sbguimaterialpreview = new StringBuilder(guimaterialpreview, 1024);
var sbcolor = new StringBuilder(color, 1024);

SafeNativeMethods.mwle_fnGuiMaterialPreview_setAmbientLightColor(sbguimaterialpreview, sbcolor);
}
/// <summary>
/// @brief Return the model displayed in this view.
///    @tsexample
///    // Request the displayed model name from the GuiObjectView object.
///    %modelName = %thisGuiObjectView.getModel();
///    @endtsexample
///    @return Name of the displayed model.
///    @see GuiControl)
/// 
/// </summary>

internal string fnGuiObjectView_getModel (string guiobjectview)
{
var returnbuff = new StringBuilder(4096);
var sbguiobjectview = new StringBuilder(guiobjectview, 1024);

SafeNativeMethods.mwle_fnGuiObjectView_getModel(sbguiobjectview, returnbuff);
return returnbuff.ToString();

}
/// <summary>
/// @brief Sets the model to be displayed in this control.
///    @param shapeName Name of the model to display.
///    @tsexample
///    // Define the model we want to display
///    %shapeName = \"gideon.dts\";
///    // Tell the GuiObjectView object to display the defined model
///    %thisGuiObjectView.setModel(%shapeName);
///    @endtsexample
///    @see GuiControl)
/// 
/// </summary>

internal void fnGuiObjectView_setModel (string guiobjectview, string shapeName)
{
var sbguiobjectview = new StringBuilder(guiobjectview, 1024);
var sbshapeName = new StringBuilder(shapeName, 4096);

SafeNativeMethods.mwle_fnGuiObjectView_setModel(sbguiobjectview, sbshapeName);
}
/// <summary>
/// @brief Return the name of the mounted model.
///    @tsexample
///    // Request the name of the mounted model from the GuiObjectView object
///    %mountedModelName = %thisGuiObjectView.getMountedModel();
///    @endtsexample
///    @return Name of the mounted model.
///    @see GuiControl)
/// 
/// </summary>

internal string fnGuiObjectView_getMountedModel (string guiobjectview)
{
var returnbuff = new StringBuilder(4096);
var sbguiobjectview = new StringBuilder(guiobjectview, 1024);

SafeNativeMethods.mwle_fnGuiObjectView_getMountedModel(sbguiobjectview, returnbuff);
return returnbuff.ToString();

}
/// <summary>
/// @brief Sets the model to be mounted on the primary model.
///    @param shapeName Name of the model to mount.
///    @tsexample
///    // Define the model name to mount
///    %modelToMount = \"GideonGlasses.dts\";
///    // Inform the GuiObjectView object to mount the defined model to the existing model in the control
///    %thisGuiObjectView.setMountedModel(%modelToMount);
///    @endtsexample
///    @see GuiControl)
/// 
/// </summary>

internal void fnGuiObjectView_setMountedModel (string guiobjectview, string shapeName)
{
var sbguiobjectview = new StringBuilder(guiobjectview, 1024);
var sbshapeName = new StringBuilder(shapeName, 4096);

SafeNativeMethods.mwle_fnGuiObjectView_setMountedModel(sbguiobjectview, sbshapeName);
}
/// <summary>
/// @brief Return the name of skin used on the primary model.
///    @tsexample
///    // Request the name of the skin used on the primary model in the control
///    %skinName = %thisGuiObjectView.getSkin();
///    @endtsexample
///    @return Name of the skin used on the primary model.
///    @see GuiControl)
/// 
/// </summary>

internal string fnGuiObjectView_getSkin (string guiobjectview)
{
var returnbuff = new StringBuilder(4096);
var sbguiobjectview = new StringBuilder(guiobjectview, 1024);

SafeNativeMethods.mwle_fnGuiObjectView_getSkin(sbguiobjectview, returnbuff);
return returnbuff.ToString();

}
/// <summary>
/// @brief Sets the skin to use on the model being displayed.
///    @param skinName Name of the skin to use.
///    @tsexample
///    // Define the skin we want to apply to the main model in the control
///    %skinName = \"disco_gideon\";
///    // Inform the GuiObjectView control to update the skin the to defined skin
///    %thisGuiObjectView.setSkin(%skinName);
///    @endtsexample
///    @see GuiControl)
/// 
/// </summary>

internal void fnGuiObjectView_setSkin (string guiobjectview, string skinName)
{
var sbguiobjectview = new StringBuilder(guiobjectview, 1024);
var sbskinName = new StringBuilder(skinName, 4096);

SafeNativeMethods.mwle_fnGuiObjectView_setSkin(sbguiobjectview, sbskinName);
}
/// <summary>
/// @brief Return the name of skin used on the mounted model.
///    @tsexample
///    // Request the skin name from the model mounted on to the main model in the control
///    %mountModelSkin = %thisGuiObjectView.getMountSkin();
///    @endtsexample
///    @return Name of the skin used on the mounted model.
///    @see GuiControl)
/// 
/// </summary>

internal string fnGuiObjectView_getMountSkin (string guiobjectview, int param1, int param2)
{
var returnbuff = new StringBuilder(4096);
var sbguiobjectview = new StringBuilder(guiobjectview, 1024);

SafeNativeMethods.mwle_fnGuiObjectView_getMountSkin(sbguiobjectview, param1, param2, returnbuff);
return returnbuff.ToString();

}
/// <summary>
/// @brief Sets the skin to use on the mounted model.
///    @param skinName Name of the skin to set on the model mounted to the main model in the control
///    @tsexample
///    // Define the name of the skin
///    %skinName = \"BronzeGlasses\";
///    // Inform the GuiObjectView Control of the skin to use on the mounted model
///    %thisGuiObjectViewCtrl.setMountSkin(%skinName);
///    @endtsexample
///    @see GuiControl)
/// 
/// </summary>

internal void fnGuiObjectView_setMountSkin (string guiobjectview, string skinName)
{
var sbguiobjectview = new StringBuilder(guiobjectview, 1024);
var sbskinName = new StringBuilder(skinName, 4096);

SafeNativeMethods.mwle_fnGuiObjectView_setMountSkin(sbguiobjectview, sbskinName);
}
/// <summary>
/// @brief Sets the animation to play for the viewed object.
///    @param indexOrName The index or name of the animation to play.
///    @tsexample
///    // Set the animation index value, or animation sequence name.
///    %indexVal = \"3\";
///    //OR:
///    %indexVal = \"idle\";
///    // Inform the GuiObjectView object to set the animation sequence of the object in the control.
///    %thisGuiObjectVew.setSeq(%indexVal);
///    @endtsexample
///    @see GuiControl)
/// 
/// </summary>

internal void fnGuiObjectView_setSeq (string guiobjectview, string indexOrName)
{
var sbguiobjectview = new StringBuilder(guiobjectview, 1024);
var sbindexOrName = new StringBuilder(indexOrName, 4096);

SafeNativeMethods.mwle_fnGuiObjectView_setSeq(sbguiobjectview, sbindexOrName);
}
/// <summary>
/// @brief Mounts the given model to the specified mount point of the primary model displayed in this control.
///    Detailed description
///    @param shapeName Name of the model to mount.
///    @param mountNodeIndexOrName Index or name of the mount point to be mounted to. If index, corresponds to \"mountN\" in your shape where N is the number passed here.
///    @tsexample
///    // Set the shapeName to mount
///    %shapeName = \"GideonGlasses.dts\"
///    // Set the mount node of the primary model in the control to mount the new shape at
///    %mountNodeIndexOrName = \"3\";
///    //OR:
///    %mountNodeIndexOrName = \"Face\";
///    // Inform the GuiObjectView object to mount the shape at the specified node.
///    %thisGuiObjectView.setMount(%shapeName,%mountNodeIndexOrName);
///    @endtsexample
///    @see GuiControl)
/// 
/// </summary>

internal void fnGuiObjectView_setMount (string guiobjectview, string shapeName, string mountNodeIndexOrName)
{
var sbguiobjectview = new StringBuilder(guiobjectview, 1024);
var sbshapeName = new StringBuilder(shapeName, 4096);
var sbmountNodeIndexOrName = new StringBuilder(mountNodeIndexOrName, 4096);

SafeNativeMethods.mwle_fnGuiObjectView_setMount(sbguiobjectview, sbshapeName, sbmountNodeIndexOrName);
}
/// <summary>
/// @brief Return the current distance at which the camera orbits the object.
///    @tsexample
///    // Request the current orbit distance
///    %orbitDistance = %thisGuiObjectView.getOrbitDistance();
///    @endtsexample
///    @return The distance at which the camera orbits the object.
///    @see GuiControl)
/// 
/// </summary>

internal float fnGuiObjectView_getOrbitDistance (string guiobjectview)
{
var sbguiobjectview = new StringBuilder(guiobjectview, 1024);

return  SafeNativeMethods.mwle_fnGuiObjectView_getOrbitDistance(sbguiobjectview);
}
/// <summary>
/// @brief Sets the distance at which the camera orbits the object. Clamped to the acceptable range defined in the class by min and max orbit distances.
///    Detailed description
///    @param distance The distance to set the orbit to (will be clamped).
///    @tsexample
///    // Define the orbit distance value
///    %orbitDistance = \"1.5\";
///    // Inform the GuiObjectView object to set the orbit distance to the defined value
///    %thisGuiObjectView.setOrbitDistance(%orbitDistance);
///    @endtsexample
///    @see GuiControl)
/// 
/// </summary>

internal void fnGuiObjectView_setOrbitDistance (string guiobjectview, float distance)
{
var sbguiobjectview = new StringBuilder(guiobjectview, 1024);

SafeNativeMethods.mwle_fnGuiObjectView_setOrbitDistance(sbguiobjectview, distance);
}
/// <summary>
/// @brief Return the current multiplier for camera zooming and rotation.
///    @tsexample
///    // Request the current camera zooming and rotation multiplier value
///    %multiplier = %thisGuiObjectView.getCameraSpeed();
///    @endtsexample
///    @return Camera zooming / rotation multiplier value.
///    @see GuiControl)
/// 
/// </summary>

internal float fnGuiObjectView_getCameraSpeed (string guiobjectview)
{
var sbguiobjectview = new StringBuilder(guiobjectview, 1024);

return  SafeNativeMethods.mwle_fnGuiObjectView_getCameraSpeed(sbguiobjectview);
}
/// <summary>
/// @brief Sets the multiplier for the camera rotation and zoom speed.
///    @param factor Multiplier for camera rotation and zoom speed.
///    @tsexample
///    // Set the factor value
///    %factor = \"0.75\";
///    // Inform the GuiObjectView object to set the camera speed.
///    %thisGuiObjectView.setCameraSpeed(%factor);
///    @endtsexample
///    @see GuiControl)
/// 
/// </summary>

internal void fnGuiObjectView_setCameraSpeed (string guiobjectview, float factor)
{
var sbguiobjectview = new StringBuilder(guiobjectview, 1024);

SafeNativeMethods.mwle_fnGuiObjectView_setCameraSpeed(sbguiobjectview, factor);
}
/// <summary>
/// @brief Set the light color on the sun object used to render the model.
///    @param color Color of sunlight.
///    @tsexample
///    // Set the color value for the sun
///    %color = \"1.0 0.4 0.5\";
///    // Inform the GuiObjectView object to change the sun color to the defined value
///    %thisGuiObjectView.setLightColor(%color);
///    @endtsexample
///    @see GuiControl)
/// 
/// </summary>

internal void fnGuiObjectView_setLightColor (string guiobjectview, string color)
{
var sbguiobjectview = new StringBuilder(guiobjectview, 1024);
var sbcolor = new StringBuilder(color, 1024);

SafeNativeMethods.mwle_fnGuiObjectView_setLightColor(sbguiobjectview, sbcolor);
}
/// <summary>
/// @brief Set the light ambient color on the sun object used to render the model.
///    @param color Ambient color of sunlight.
///    @tsexample
///    // Define the sun ambient color value
///    %color = \"1.0 0.4 0.6\";
///    // Inform the GuiObjectView object to set the sun ambient color to the requested value
///    %thisGuiObjectView.setLightAmbient(%color);
///    @endtsexample
///    @see GuiControl)
/// 
/// </summary>

internal void fnGuiObjectView_setLightAmbient (string guiobjectview, string color)
{
var sbguiobjectview = new StringBuilder(guiobjectview, 1024);
var sbcolor = new StringBuilder(color, 1024);

SafeNativeMethods.mwle_fnGuiObjectView_setLightAmbient(sbguiobjectview, sbcolor);
}
/// <summary>
/// @brief Set the light direction from which to light the model.
///    @param direction XYZ direction from which the light will shine on the model
///    @tsexample
///    // Set the light direction
///    %direction = \"1.0 0.2 0.4\"
///    // Inform the GuiObjectView object to change the light direction to the defined value
///    %thisGuiObjectView.setLightDirection(%direction);
///    @endtsexample
///    @see GuiControl)
/// 
/// </summary>

internal void fnGuiObjectView_setLightDirection (string guiobjectview, string direction)
{
var sbguiobjectview = new StringBuilder(guiobjectview, 1024);
var sbdirection = new StringBuilder(direction, 1024);

SafeNativeMethods.mwle_fnGuiObjectView_setLightDirection(sbguiobjectview, sbdirection);
}
/// <summary>
/// @brief Is the object static (ie, non-movable)?   
///    @return True if the object is static, false if it is not.
///    @tsexample
/// 	   // Query the item on if it is or is not static.
/// 	   %isStatic = %itemData.isStatic();
///    @endtsexample
///    @see static
///    )
/// 
/// </summary>

internal bool fnItem_isStatic (string item)
{
var sbitem = new StringBuilder(item, 1024);

return  SafeNativeMethods.mwle_fnItem_isStatic(sbitem)>=1;
}
/// <summary>
/// @brief Is the object at rest (ie, no longer moving)?   
///    @return True if the object is at rest, false if it is not.
///    @tsexample
/// 	   // Query the item on if it is or is not at rest.
/// 	   %isAtRest = %item.isAtRest();
///    @endtsexample
///    )
/// 
/// </summary>

internal bool fnItem_isAtRest (string item)
{
var sbitem = new StringBuilder(item, 1024);

return  SafeNativeMethods.mwle_fnItem_isAtRest(sbitem)>=1;
}
/// <summary>
/// @brief Is the object still rotating?   
///    @return True if the object is still rotating, false if it is not.
///    @tsexample
/// 	   // Query the item on if it is or is not rotating.
/// 	   %isRotating = %itemData.isRotating();
///    @endtsexample
///    @see rotate
///    )
/// 
/// </summary>

internal bool fnItem_isRotating (string item)
{
var sbitem = new StringBuilder(item, 1024);

return  SafeNativeMethods.mwle_fnItem_isRotating(sbitem)>=1;
}
/// <summary>
/// @brief Temporarily disable collisions against a specific ShapeBase object.
/// 
///    This is useful to prevent a player from immediately picking up an Item they have 
///    just thrown.  Only one object may be on the timeout list at a time.  The timeout is 
///    defined as 15 ticks.
/// 
///    @param objectID ShapeBase object ID to disable collisions against.
///    @return Returns true if the ShapeBase object requested could be found, false if it could not.
/// 
///    @tsexample
/// 	   // Set the ShapeBase Object ID to disable collisions against
/// 	   %ignoreColObj = %player.getID();
/// 	   // Inform this Item object to ignore collisions temproarily against the %ignoreColObj.
/// 	   %item.setCollisionTimeout(%ignoreColObj);
///    @endtsexample
///    )
/// 
/// </summary>

internal bool fnItem_setCollisionTimeout (string item, int ignoreColObj)
{
var sbitem = new StringBuilder(item, 1024);

return  SafeNativeMethods.mwle_fnItem_setCollisionTimeout(sbitem, ignoreColObj)>=1;
}
/// <summary>
/// @brief Get the position on the surface on which this Item is stuck.   
///    @return Returns The XYZ position of where this Item is stuck.
///    @tsexample
/// 	   // Acquire the position where this Item is currently stuck
/// 	   %stuckPosition = %item.getLastStickPos();
///    @endtsexample
///    @note Server side only.
///    )
/// 
/// </summary>

internal string fnItem_getLastStickyPos (string item)
{
var returnbuff = new StringBuilder(4096);
var sbitem = new StringBuilder(item, 1024);

SafeNativeMethods.mwle_fnItem_getLastStickyPos(sbitem, returnbuff);
return returnbuff.ToString();

}
/// <summary>
/// @brief Get the normal of the surface on which the object is stuck.   
///    @return Returns The XYZ normal from where this Item is stuck.
///    @tsexample
/// 	   // Acquire the position where this Item is currently stuck
/// 	   %stuckPosition = %item.getLastStickPos();
///    @endtsexample
///    @note Server side only.
///    )
/// 
/// </summary>

internal string fnItem_getLastStickyNormal (string item)
{
var returnbuff = new StringBuilder(4096);
var sbitem = new StringBuilder(item, 1024);

SafeNativeMethods.mwle_fnItem_getLastStickyNormal(sbitem, returnbuff);
return returnbuff.ToString();

}
/// <summary>
/// ( LightBase, playAnimation, void, 2, 3, ( [LightAnimData anim] )\t
///    Plays a light animation on the light.  If no LightAnimData is passed the 
///    existing one is played.
///    @hide)
/// 
/// </summary>

internal void fnLightBase_playAnimation (string lightbase, string a2)
{
var sblightbase = new StringBuilder(lightbase, 1024);
var sba2 = new StringBuilder(a2, 4096);

SafeNativeMethods.mwle_fnLightBase_playAnimation(sblightbase, sba2);
}
/// <summary>
/// ( LightBase, pauseAnimation, void, 2, 2, Stops the light animation. )
/// 
/// </summary>

internal void fnLightBase_pauseAnimation (string lightbase)
{
var sblightbase = new StringBuilder(lightbase, 1024);

SafeNativeMethods.mwle_fnLightBase_pauseAnimation(sblightbase);
}
/// <summary>
/// @brief Toggles the light on and off
///    
///    @param state Turns the light on (true) or off (false)
/// 
///    @tsexample
///    // Disable the light
///    CrystalLight.setLightEnabled(false);
///    // Renable the light
///    CrystalLight.setLightEnabled(true);
///    
///    @endtsexample
/// )
/// 
/// </summary>

internal void fnLightBase_setLightEnabled (string lightbase, bool state)
{
var sblightbase = new StringBuilder(lightbase, 1024);

SafeNativeMethods.mwle_fnLightBase_setLightEnabled(sblightbase, state);
}
/// <summary>
/// @brief Force an inspectPostApply call for the benefit of tweaking via the console
///    
///    Normally this functionality is only exposed to objects via the World Editor, once changes have been made. 
///    Exposing apply to script allows you to make changes to it on the fly without the World Editor.
/// 
///    @note This is intended for debugging and tweaking, not for game play
/// 
///    @tsexample
///    // Change a property of the light description
///    RocketLauncherLightDesc.brightness = 10;
///    // Make it so
///    RocketLauncherLightDesc.apply();
///    
///    @endtsexample
/// )
/// 
/// </summary>

internal void fnLightDescription_apply (string lightdescription)
{
var sblightdescription = new StringBuilder(lightdescription, 1024);

SafeNativeMethods.mwle_fnLightDescription_apply(sblightdescription);
}
/// <summary>
/// Intended as a helper to developers and editor scripts.
///                    Force trigger an inspectPostApply
///                    )
/// 
/// </summary>

internal void fnLightFlareData_apply (string lightflaredata)
{
var sblightflaredata = new StringBuilder(lightflaredata, 1024);

SafeNativeMethods.mwle_fnLightFlareData_apply(sblightflaredata);
}
/// <summary>
/// Get the MissionArea object, if any.
/// 					 @ingroup enviroMisc)
/// 
/// </summary>

internal string fn_getMissionAreaServerObject ()
{
var returnbuff = new StringBuilder(1024);

SafeNativeMethods.mwle_fn_getMissionAreaServerObject(returnbuff);
return returnbuff.ToString();

}
/// <summary>
/// Returns 4 fields: starting x, starting y, extents x, extents y.)
/// 
/// </summary>

internal string fnMissionArea_getArea (string missionarea)
{
var returnbuff = new StringBuilder(4096);
var sbmissionarea = new StringBuilder(missionarea, 1024);

SafeNativeMethods.mwle_fnMissionArea_getArea(sbmissionarea, returnbuff);
return returnbuff.ToString();

}
/// <summary>
/// @brief - Defines the size of the MissionArea
/// 			  param x Starting X coordinate position for MissionArea
/// 			  param y Starting Y coordinate position for MissionArea
/// 			  param width New width of the MissionArea
/// 			  param height New height of the MissionArea
///            @note Only the server object may be set.
/// 			  )
/// 
/// </summary>

internal void fnMissionArea_setArea (string missionarea, int x, int y, int width, int height)
{
var sbmissionarea = new StringBuilder(missionarea, 1024);

SafeNativeMethods.mwle_fnMissionArea_setArea(sbmissionarea, x, y, width, height);
}
/// <summary>
/// Intended as a helper to developers and editor scripts.
///                    Force trigger an inspectPostApply. This will transmit 
///                    material and other fields ( not including nodes ) to client objects.
///                    )
/// 
/// </summary>

internal void fnMissionArea_postApply (string missionarea)
{
var sbmissionarea = new StringBuilder(missionarea, 1024);

SafeNativeMethods.mwle_fnMissionArea_postApply(sbmissionarea);
}
/// <summary>
/// (SpawnSphere, spawnObject, S32, 2, 3,
///    ([string additionalProps]) Spawns the object based on the SpawnSphere's 
///    class, datablock, properties, and script settings. Allows you to pass in 
///    extra properties.
///    @hide )
/// 
/// </summary>

internal int fnSpawnSphere_spawnObject (string spawnsphere, string a2)
{
var sbspawnsphere = new StringBuilder(spawnsphere, 1024);
var sba2 = new StringBuilder(a2, 4096);

return  SafeNativeMethods.mwle_fnSpawnSphere_spawnObject(sbspawnsphere, sba2);
}
/// <summary>
/// Set the current position of the camera along the path.
/// 													@param position Position along the path, from 0.0 (path start) - 1.0 (path end), to place the camera.
/// 													@tsexample
///                                           // Set the camera on a position along its path from 0.0 - 1.0.
/// 														%position = \"0.35\";
/// 														// Force the pathCamera to its new position along the path.
/// 														%pathCamera.setPosition(%position);
/// 													@endtsexample)
/// 
/// </summary>

internal void fnPathCamera_setPosition (string pathcamera, float position)
{
var sbpathcamera = new StringBuilder(pathcamera, 1024);

SafeNativeMethods.mwle_fnPathCamera_setPosition(sbpathcamera, position);
}
/// <summary>
/// @brief Set the movement target for this camera along its path.
///                                        The camera will attempt to move along the path to the given target in the direction provided 
///                                        by setState() (the default is forwards).  Once the camera moves past this target it will come 
///                                        to a stop, and the target state will be cleared.
/// 													@param position Target position, between 0.0 (path start) and 1.0 (path end), for the camera to move to along its path.
/// 													@tsexample
///                                           // Set the position target, between 0.0 (path start) and 1.0 (path end), for this camera to move to.
/// 														%position = \"0.50\";
/// 														// Inform the pathCamera of the new target position it will move to.
/// 														%pathCamera.setTarget(%position);
/// 													@endtsexample)
/// 
/// </summary>

internal void fnPathCamera_setTarget (string pathcamera, float position)
{
var sbpathcamera = new StringBuilder(pathcamera, 1024);

SafeNativeMethods.mwle_fnPathCamera_setTarget(sbpathcamera, position);
}
/// <summary>
/// forward), Set the movement state for this path camera.
/// 													@param newState New movement state type for this camera. Forward, Backward or Stop.
/// 													@tsexample
/// 														// Set the state type (forward, backward, stop).
///                                           // In this example, the camera will travel from the first node
///                                           // to the last node (or target if given with setTarget())
/// 														%state = \"forward\";
/// 														// Inform the pathCamera to change its movement state to the defined value.
/// 														%pathCamera.setState(%state);
/// 													@endtsexample)
/// 
/// </summary>

internal void fnPathCamera_setState (string pathcamera, string newState)
{
var sbpathcamera = new StringBuilder(pathcamera, 1024);
var sbnewState = new StringBuilder(newState, 4096);

SafeNativeMethods.mwle_fnPathCamera_setState(sbpathcamera, sbnewState);
}
/// <summary>
/// @brief Clear the camera's path and set the camera's current transform as the start of the new path.
///                                        What specifically occurs is a new knot is created from the camera's current transform.  Then the current path 
///                                        is cleared and the new knot is pushed onto the path.  Any previous target is cleared and the camera's movement 
///                                        state is set to Forward.  The camera is now ready for a new path to be defined.
/// 													@param speed Speed for the camera to move along its path after being reset.
/// 													@tsexample
/// 														//Determine the new movement speed of this camera. If not set, the speed will default to 1.0.
/// 														%speed = \"0.50\";
/// 														// Inform the path camera to start a new path at
///                                           // the camera's current position, and set the new 
///                                           // path's speed value.
/// 														%pathCamera.reset(%speed);
///                                        @endtsexample)
/// 
/// </summary>

internal void fnPathCamera_reset (string pathcamera, float speed)
{
var sbpathcamera = new StringBuilder(pathcamera, 1024);

SafeNativeMethods.mwle_fnPathCamera_reset(sbpathcamera, speed);
}
/// <summary>
/// Normal, Linear), 
/// 											      @brief Adds a new knot to the back of a path camera's path.
/// 													@param transform Transform for the new knot.  In the form of \"x y z ax ay az aa\" such as returned by SceneObject::getTransform()
/// 													@param speed Speed setting for this knot.
/// 													@param type Knot type (Normal, Position Only, Kink).
/// 													@param path %Path type (Linear, Spline).
/// 													@tsexample
/// 														// Transform vector for new knot. (Pos_X Pos_Y Pos_Z Rot_X Rot_Y Rot_Z Angle)
/// 														%transform = \"15.0 5.0 5.0 1.4 1.0 0.2 1.0\"
/// 														// Speed setting for knot.
/// 														%speed = \"1.0\"
/// 														// Knot type. (Normal, Position Only, Kink)
/// 														%type = \"Normal\";
/// 														// Path Type. (Linear, Spline)
/// 														%path = \"Linear\";
/// 														// Inform the path camera to add a new knot to the back of its path
/// 														%pathCamera.pushBack(%transform,%speed,%type,%path);
/// 													@endtsexample)
/// 
/// </summary>

internal void fnPathCamera_pushBack (string pathcamera, string transform, float speed, string type, string path)
{
var sbpathcamera = new StringBuilder(pathcamera, 1024);
var sbtransform = new StringBuilder(transform, 1024);
var sbtype = new StringBuilder(type, 4096);
var sbpath = new StringBuilder(path, 4096);

SafeNativeMethods.mwle_fnPathCamera_pushBack(sbpathcamera, sbtransform, speed, sbtype, sbpath);
}
/// <summary>
/// Normal, Linear), 
/// 											      @brief Adds a new knot to the front of a path camera's path.
/// 													@param transform Transform for the new knot. In the form of \"x y z ax ay az aa\" such as returned by SceneObject::getTransform()
/// 													@param speed Speed setting for this knot.
/// 													@param type Knot type (Normal, Position Only, Kink).
/// 													@param path %Path type (Linear, Spline).
/// 													@tsexample
/// 														// Transform vector for new knot. (Pos_X,Pos_Y,Pos_Z,Rot_X,Rot_Y,Rot_Z,Angle)
/// 														%transform = \"15.0 5.0 5.0 1.4 1.0 0.2 1.0\"
/// 														// Speed setting for knot.
/// 														%speed = \"1.0\";
/// 														// Knot type. (Normal, Position Only, Kink)
/// 														%type = \"Normal\";
/// 														// Path Type. (Linear, Spline)
/// 														%path = \"Linear\";
/// 														// Inform the path camera to add a new knot to the front of its path
/// 														%pathCamera.pushFront(%transform, %speed, %type, %path);
/// 													@endtsexample)
/// 
/// </summary>

internal void fnPathCamera_pushFront (string pathcamera, string transform, float speed, string type, string path)
{
var sbpathcamera = new StringBuilder(pathcamera, 1024);
var sbtransform = new StringBuilder(transform, 1024);
var sbtype = new StringBuilder(type, 4096);
var sbpath = new StringBuilder(path, 4096);

SafeNativeMethods.mwle_fnPathCamera_pushFront(sbpathcamera, sbtransform, speed, sbtype, sbpath);
}
/// <summary>
/// Removes the knot at the front of the camera's path.
/// 													@tsexample
/// 														// Remove the first knot in the camera's path.
/// 														%pathCamera.popFront();
/// 													@endtsexample)
/// 
/// </summary>

internal void fnPathCamera_popFront (string pathcamera)
{
var sbpathcamera = new StringBuilder(pathcamera, 1024);

SafeNativeMethods.mwle_fnPathCamera_popFront(sbpathcamera);
}
/// <summary>
/// Activate the physical zone's effects.
/// 													@tsexample
/// 														// Activate effects for a specific physical zone.
/// 														%thisPhysicalZone.activate();
/// 													@endtsexample
/// 													@ingroup Datablocks
/// 				  )
/// 
/// </summary>

internal void fnPhysicalZone_activate (string physicalzone)
{
var sbphysicalzone = new StringBuilder(physicalzone, 1024);

SafeNativeMethods.mwle_fnPhysicalZone_activate(sbphysicalzone);
}
/// <summary>
/// Deactivate the physical zone's effects.
/// 													@tsexample
/// 														// Deactivate effects for a specific physical zone.
/// 														%thisPhysicalZone.deactivate();
/// 													@endtsexample
/// 													@ingroup Datablocks
/// 				  )
/// 
/// </summary>

internal void fnPhysicalZone_deactivate (string physicalzone)
{
var sbphysicalzone = new StringBuilder(physicalzone, 1024);

SafeNativeMethods.mwle_fnPhysicalZone_deactivate(sbphysicalzone);
}
/// <summary>
/// @brief Get the name of the player's current pose.
/// 
///    The pose is one of the following:<ul>
///    <li>Stand - Standard movement pose.</li>
///    <li>Sprint - Sprinting pose.</li>
///    <li>Crouch - Crouch pose.</li>
///    <li>Prone - Prone pose.</li>
///    <li>Swim - Swimming pose.</li></ul>
/// 
///    @return The current pose; one of: \"Stand\", \"Sprint\", \"Crouch\", \"Prone\", \"Swim\" )
/// 
/// </summary>

internal string fnPlayer_getPose (string player)
{
var returnbuff = new StringBuilder(4096);
var sbplayer = new StringBuilder(player, 1024);

SafeNativeMethods.mwle_fnPlayer_getPose(sbplayer, returnbuff);
return returnbuff.ToString();

}
/// <summary>
/// @brief Allow all poses a chance to occur.
///    This method resets any poses that have manually been blocked from occuring.  
///    This includes the regular pose states such as sprinting, crouch, being prone 
///    and swimming.  It also includes being able to jump and jet jump.  While this 
///    is allowing these poses to occur it doesn't mean that they all can due to other 
///    conditions.  We're just not manually blocking them from being allowed.
///    @see allowJumping()
///    @see allowJetJumping()
///    @see allowSprinting()
///    @see allowCrouching()
///    @see allowProne()
///    @see allowSwimming() )
/// 
/// </summary>

internal void fnPlayer_allowAllPoses (string player)
{
var sbplayer = new StringBuilder(player, 1024);

SafeNativeMethods.mwle_fnPlayer_allowAllPoses(sbplayer);
}
/// <summary>
/// @brief Set if the Player is allowed to jump.
///    The default is to allow jumping unless there are other environmental concerns 
///    that prevent it.  This method is mainly used to explicitly disallow jumping 
///    at any time.
///    @param state Set to true to allow jumping, false to disable it.
///    @see allowAllPoses() )
/// 
/// </summary>

internal void fnPlayer_allowJumping (string player, bool state)
{
var sbplayer = new StringBuilder(player, 1024);

SafeNativeMethods.mwle_fnPlayer_allowJumping(sbplayer, state);
}
/// <summary>
/// @brief Set if the Player is allowed to jet jump.
///    The default is to allow jet jumping unless there are other environmental concerns 
///    that prevent it.  This method is mainly used to explicitly disallow jet jumping 
///    at any time.
///    @param state Set to true to allow jet jumping, false to disable it.
///    @see allowAllPoses() )
/// 
/// </summary>

internal void fnPlayer_allowJetJumping (string player, bool state)
{
var sbplayer = new StringBuilder(player, 1024);

SafeNativeMethods.mwle_fnPlayer_allowJetJumping(sbplayer, state);
}
/// <summary>
/// @brief Set if the Player is allowed to sprint.
///    The default is to allow sprinting unless there are other environmental concerns 
///    that prevent it.  This method is mainly used to explicitly disallow sprinting 
///    at any time.
///    @param state Set to true to allow sprinting, false to disable it.
///    @see allowAllPoses() )
/// 
/// </summary>

internal void fnPlayer_allowSprinting (string player, bool state)
{
var sbplayer = new StringBuilder(player, 1024);

SafeNativeMethods.mwle_fnPlayer_allowSprinting(sbplayer, state);
}
/// <summary>
/// @brief Set if the Player is allowed to crouch.
///    The default is to allow crouching unless there are other environmental concerns 
///    that prevent it.  This method is mainly used to explicitly disallow crouching 
///    at any time.
///    @param state Set to true to allow crouching, false to disable it.
///    @see allowAllPoses() )
/// 
/// </summary>

internal void fnPlayer_allowCrouching (string player, bool state)
{
var sbplayer = new StringBuilder(player, 1024);

SafeNativeMethods.mwle_fnPlayer_allowCrouching(sbplayer, state);
}
/// <summary>
/// @brief Set if the Player is allowed to go prone.
///    The default is to allow being prone unless there are other environmental concerns 
///    that prevent it.  This method is mainly used to explicitly disallow going prone 
///    at any time.
///    @param state Set to true to allow being prone, false to disable it.
///    @see allowAllPoses() )
/// 
/// </summary>

internal void fnPlayer_allowProne (string player, bool state)
{
var sbplayer = new StringBuilder(player, 1024);

SafeNativeMethods.mwle_fnPlayer_allowProne(sbplayer, state);
}
/// <summary>
/// @brief Set if the Player is allowed to swim.
///    The default is to allow swimming unless there are other environmental concerns 
///    that prevent it.  This method is mainly used to explicitly disallow swimming 
///    at any time.
///    @param state Set to true to allow swimming, false to disable it.
///    @see allowAllPoses() )
/// 
/// </summary>

internal void fnPlayer_allowSwimming (string player, bool state)
{
var sbplayer = new StringBuilder(player, 1024);

SafeNativeMethods.mwle_fnPlayer_allowSwimming(sbplayer, state);
}
/// <summary>
/// @brief Get the name of the player's current state.
/// 
///    The state is one of the following:<ul>
///    <li>Dead - The Player is dead.</li>
///    <li>Mounted - The Player is mounted to an object such as a vehicle.</li>
///    <li>Move - The Player is free to move.  The usual state.</li>
///    <li>Recover - The Player is recovering from a fall.  See PlayerData::recoverDelay.</li></ul>
/// 
///    @return The current state; one of: \"Dead\", \"Mounted\", \"Move\", \"Recover\" )
/// 
/// </summary>

internal string fnPlayer_getState (string player)
{
var returnbuff = new StringBuilder(4096);
var sbplayer = new StringBuilder(player, 1024);

SafeNativeMethods.mwle_fnPlayer_getState(sbplayer, returnbuff);
return returnbuff.ToString();

}
/// <summary>
/// @brief Get the named damage location and modifier for a given world position.
/// 
///    the Player object can simulate different hit locations based on a pre-defined set 
///    of PlayerData defined percentages.  These hit percentages divide up the Player's 
///    bounding box into different regions.  The diagram below demonstrates how the various 
///    PlayerData properties split up the bounding volume:
/// 
///    <img src=\"images/player_damageloc.png\">
/// 
///    While you may pass in any world position and getDamageLocation() will provide a best-fit 
///    location, you should be aware that this can produce some interesting results.  For example, 
///    any position that is above PlayerData::boxHeadPercentage will be considered a 'head' hit, even 
///    if the world position is high in the sky.  Therefore it may be wise to keep the passed in point 
///    to somewhere on the surface of, or within, the Player's bounding volume.
/// 
///    @note This method will not return an accurate location when the player is 
///    prone or swimming.
/// 
///    @param pos A world position for which to retrieve a body region on this player.
/// 
///    @return a string containing two words (space separated strings), where the 
///    first is a location and the second is a modifier.
/// 
///    Posible locations:<ul>
///    <li>head</li>
///    <li>torso</li>
///    <li>legs</li></ul>
/// 
///    Head modifiers:<ul>
///    <li>left_back</li>
///    <li>middle_back</li>
///    <li>right_back</li>
///    <li>left_middle</li>
///    <li>middle_middle</li>
///    <li>right_middle</li>
///    <li>left_front</li>
///    <li>middle_front</li>
///    <li>right_front</li></ul>
/// 
///    Legs/Torso modifiers:<ul>
///    <li>front_left</li>
///    <li>front_right</li>
///    <li>back_left</li>
///    <li>back_right</li></ul>
/// 
///    @see PlayerData::boxHeadPercentage
///    @see PlayerData::boxHeadFrontPercentage
///    @see PlayerData::boxHeadBackPercentage
///    @see PlayerData::boxHeadLeftPercentage
///    @see PlayerData::boxHeadRightPercentage
///    @see PlayerData::boxTorsoPercentage
///    )
/// 
/// </summary>

internal string fnPlayer_getDamageLocation (string player, string pos)
{
var returnbuff = new StringBuilder(4096);
var sbplayer = new StringBuilder(player, 1024);
var sbpos = new StringBuilder(pos, 1024);

SafeNativeMethods.mwle_fnPlayer_getDamageLocation(sbplayer, sbpos, returnbuff);
return returnbuff.ToString();

}
/// <summary>
/// @brief Set the sequence that controls the player's arms (dynamically adjusted 
///    to match look direction).
///    @param name Name of the sequence to play on the player's arms.
///    @return true if successful, false if failed.
///    @note By default the 'look' sequence is used, if available.)
/// 
/// </summary>

internal bool fnPlayer_setArmThread (string player, string name)
{
var sbplayer = new StringBuilder(player, 1024);
var sbname = new StringBuilder(name, 4096);

return  SafeNativeMethods.mwle_fnPlayer_setArmThread(sbplayer, sbname)>=1;
}
/// <summary>
/// @brief Set the main action sequence to play for this player.
///    @param name Name of the action sequence to set
///    @param hold Set to false to get a callback on the datablock when the sequence ends (PlayerData::animationDone()).  
///    When set to true no callback is made.
///    @param fsp True if first person and none of the spine nodes in the shape should animate.  False will allow the shape's 
///    spine nodes to animate.
///    @return True if succesful, false if failed
///    
///    @note The spine nodes for the Player's shape are named as follows:<ul>
///    <li>Bip01 Pelvis</li>
///    <li>Bip01 Spine</li>
///    <li>Bip01 Spine1</li>
///    <li>Bip01 Spine2</li>
///    <li>Bip01 Neck</li>
///    <li>Bip01 Head</li></ul>
///    
///    You cannot use setActionThread() to have the Player play one of the motion 
///    determined action animation sequences.  These sequences are chosen based on how 
///    the Player moves and the Player's current pose.  The names of these sequences are:<ul>
///    <li>root</li>
///    <li>run</li>
///    <li>side</li>
///    <li>side_right</li>
///    <li>crouch_root</li>
///    <li>crouch_forward</li>
///    <li>crouch_backward</li>
///    <li>crouch_side</li>
///    <li>crouch_right</li>
///    <li>prone_root</li>
///    <li>prone_forward</li>
///    <li>prone_backward</li>
///    <li>swim_root</li>
///    <li>swim_forward</li>
///    <li>swim_backward</li>
///    <li>swim_left</li>
///    <li>swim_right</li>
///    <li>fall</li>
///    <li>jump</li>
///    <li>standjump</li>
///    <li>land</li>
///    <li>jet</li></ul>
///    
///    If the player moves in any direction then the animation sequence set using this 
///    method will be cancelled and the chosen mation-based sequence will take over.  This makes 
///    great for times when the Player cannot move, such as when mounted, or when it doesn't matter 
///    if the action sequence changes, such as waving and saluting.
///    
///    @tsexample
///       // Place the player in a sitting position after being mounted
///       %player.setActionThread( \"sitting\", true, true );
/// 	@endtsexample)
/// 
/// </summary>

internal bool fnPlayer_setActionThread (string player, string name, bool hold, bool fsp)
{
var sbplayer = new StringBuilder(player, 1024);
var sbname = new StringBuilder(name, 4096);

return  SafeNativeMethods.mwle_fnPlayer_setActionThread(sbplayer, sbname, hold, fsp)>=1;
}
/// <summary>
/// @brief Set the object to be controlled by this player
/// 
///    It is possible to have the moves sent to the Player object from the 
///    GameConnection to be passed along to another object.  This happens, for example 
///    when a player is mounted to a vehicle.  The move commands pass through the Player 
///    and on to the vehicle (while the player remains stationary within the vehicle).  
///    With setControlObject() you can have the Player pass along its moves to any object.  
///    One possible use is for a player to move a remote controlled vehicle.  In this case 
///    the player does not mount the vehicle directly, but still wants to be able to control it.
/// 
///    @param obj Object to control with this player
///    @return True if the object is valid, false if not
/// 
///    @see getControlObject()
///    @see clearControlObject()
///    @see GameConnection::setControlObject())
/// 
/// </summary>

internal bool fnPlayer_setControlObject (string player, string obj)
{
var sbplayer = new StringBuilder(player, 1024);
var sbobj = new StringBuilder(obj, 1024);

return  SafeNativeMethods.mwle_fnPlayer_setControlObject(sbplayer, sbobj)>=1;
}
/// <summary>
/// @brief Get the current object we are controlling.
///    @return ID of the ShapeBase object we control, or 0 if not controlling an 
///    object.
///    @see setControlObject()
///    @see clearControlObject())
/// 
/// </summary>

internal int fnPlayer_getControlObject (string player)
{
var sbplayer = new StringBuilder(player, 1024);

return  SafeNativeMethods.mwle_fnPlayer_getControlObject(sbplayer);
}
/// <summary>
/// @brief Clears the player's current control object.
///    Returns control to the player. This internally calls 
///    Player::setControlObject(0).
///    @tsexample
/// 		%player.clearControlObject();
///       echo(%player.getControlObject()); //<-- Returns 0, player assumes control
///       %player.setControlObject(%vehicle);
///       echo(%player.getControlObject()); //<-- Returns %vehicle, player controls the vehicle now.
/// 	@endtsexample
///    @note If the player does not have a control object, the player will receive all moves 
///    from its GameConnection.  If you're looking to remove control from the player itself 
///    (i.e. stop sending moves to the player) use GameConnection::setControlObject() to transfer 
///    control to another object, such as a camera.
///    @see setControlObject()
///    @see getControlObject()
///    @see GameConnection::setControlObject())
/// 
/// </summary>

internal void fnPlayer_clearControlObject (string player)
{
var sbplayer = new StringBuilder(player, 1024);

SafeNativeMethods.mwle_fnPlayer_clearControlObject(sbplayer);
}
/// <summary>
/// @brief Check if it is safe to dismount at this position.
/// 
///    Internally this method casts a ray from oldPos to pos to determine if it hits the 
///    terrain, an interior object, a water object, another player, a static shape, 
///    a vehicle (exluding the one currently mounted), or physical zone.  If this ray 
///    is in the clear, then the player's bounding box is also checked for a collision at 
///    the pos position.  If this displaced bounding box is also in the clear, then 
///    checkDismountPoint() returns true.
/// 
///    @param oldPos The player's current position
///    @param pos The dismount position to check
///    @return True if the dismount position is clear, false if not
///    
///    @note The player must be already mounted for this method to not assert.)
/// 
/// </summary>

internal bool fnPlayer_checkDismountPoint (string player, string oldPos, string pos)
{
var sbplayer = new StringBuilder(player, 1024);
var sboldPos = new StringBuilder(oldPos, 1024);
var sbpos = new StringBuilder(pos, 1024);

return  SafeNativeMethods.mwle_fnPlayer_checkDismountPoint(sbplayer, sboldPos, sbpos)>=1;
}
/// <summary>
/// @brief Get the number of death animations available to this player.
///    Death animations are assumed to be named death1-N using consecutive indices. )
/// 
/// </summary>

internal int fnPlayer_getNumDeathAnimations (string player)
{
var sbplayer = new StringBuilder(player, 1024);

return  SafeNativeMethods.mwle_fnPlayer_getNumDeathAnimations(sbplayer);
}
/// <summary>
/// Test whether the portal connects interior zones only.
///    @return True if the portal is an interior portal. )
/// 
/// </summary>

internal bool fnPortal_isInteriorPortal (string portal)
{
var sbportal = new StringBuilder(portal, 1024);

return  SafeNativeMethods.mwle_fnPortal_isInteriorPortal(sbportal)>=1;
}
/// <summary>
/// Test whether the portal connects interior zones to the outdoor zone.
///    @return True if the portal is an exterior portal. )
/// 
/// </summary>

internal bool fnPortal_isExteriorPortal (string portal)
{
var sbportal = new StringBuilder(portal, 1024);

return  SafeNativeMethods.mwle_fnPortal_isExteriorPortal(sbportal)>=1;
}
/// <summary>
/// @brief Updates the projectile's positional and collision information.
///                                        This function will first delete the projectile if it is a server object and is outside it's ProjectileData::lifetime. 
///                                        Also responsible for applying gravity, determining collisions, triggering explosions, 
///                                        emitting trail particles, and calculating bounces if necessary.
/// 									            @param seconds Amount of time, in seconds since the simulation's start, to advance.
/// 									            @tsexample
/// 									               // Tell the projectile to process a simulation event, and provide the amount of time
/// 										            // that has passed since the simulation began.
/// 										            %seconds = 2.0;
/// 										            %projectile.presimulate(%seconds);
/// 									            @endtsexample
///                                        @note This function is not called if the SimObject::hidden is true.)
/// 
/// </summary>

internal void fnProjectile_presimulate (string projectile, float seconds)
{
var sbprojectile = new StringBuilder(projectile, 1024);

SafeNativeMethods.mwle_fnProjectile_presimulate(sbprojectile, seconds);
}
/// <summary>
/// @brief Manually cause the mine to explode.)
/// 
/// </summary>

internal void fnProximityMine_explode (string proximitymine)
{
var sbproximitymine = new StringBuilder(proximitymine, 1024);

SafeNativeMethods.mwle_fnProximityMine_explode(sbproximitymine);
}
/// <summary>
/// @brief Check if there is the space at the given transform is free to spawn into.
/// 
///    The shape's bounding box volume is used to check for collisions at the given world 
///    transform.  Only interior and static objects are checked for collision.
/// 
///    @param txfm Deploy transform to check
///    @return True if the space is free, false if there is already something in 
///    the way.
/// 
///    @note This is a server side only check, and is not actually limited to spawning.)
/// 
/// </summary>

internal bool fnShapeBaseData_checkDeployPos (string shapebasedata, string txfm)
{
var sbshapebasedata = new StringBuilder(shapebasedata, 1024);
var sbtxfm = new StringBuilder(txfm, 1024);

return  SafeNativeMethods.mwle_fnShapeBaseData_checkDeployPos(sbshapebasedata, sbtxfm)>=1;
}
/// <summary>
/// @brief Helper method to get a transform from a position and vector (suitable for use with setTransform).
///    @param pos Desired transform position
///    @param normal Vector of desired direction
///    @return The deploy transform )
/// 
/// </summary>

internal string fnShapeBaseData_getDeployTransform (string shapebasedata, string pos, string normal)
{
var returnbuff = new StringBuilder(1024);
var sbshapebasedata = new StringBuilder(shapebasedata, 1024);
var sbpos = new StringBuilder(pos, 1024);
var sbnormal = new StringBuilder(normal, 1024);

SafeNativeMethods.mwle_fnShapeBaseData_getDeployTransform(sbshapebasedata, sbpos, sbnormal, returnbuff);
return returnbuff.ToString();

}
/// <summary>
/// @brief Add or remove this object from the scene.
///    When removed from the scene, the object will not be processed or rendered.
///    @param show False to hide the object, true to re-show it )
/// 
/// </summary>

internal void fnShapeBase_setHidden (string shapebase, bool show)
{
var sbshapebase = new StringBuilder(shapebase, 1024);

SafeNativeMethods.mwle_fnShapeBase_setHidden(sbshapebase, show);
}
/// <summary>
/// Check if the object is hidden.
///    @return true if the object is hidden, false if visible. )
/// 
/// </summary>

internal bool fnShapeBase_isHidden (string shapebase)
{
var sbshapebase = new StringBuilder(shapebase, 1024);

return  SafeNativeMethods.mwle_fnShapeBase_isHidden(sbshapebase)>=1;
}
/// <summary>
/// @brief Attach a sound to this shape and start playing it.
/// 
///    @param slot Audio slot index for the sound (valid range is 0 - 3) // 3 = ShapeBase::MaxSoundThreads-1
///    @param track SFXTrack to play
///    @return true if the sound was attached successfully, false if failed
///    
///    @see stopAudio())
/// 
/// </summary>

internal bool fnShapeBase_playAudio (string shapebase, int slot, string track)
{
var sbshapebase = new StringBuilder(shapebase, 1024);
var sbtrack = new StringBuilder(track, 1024);

return  SafeNativeMethods.mwle_fnShapeBase_playAudio(sbshapebase, slot, sbtrack)>=1;
}
/// <summary>
/// @brief Stop a sound started with playAudio.
/// 
///    @param slot audio slot index (started with playAudio)
///    @return true if the sound was stopped successfully, false if failed
///    
///    @see playAudio())
/// 
/// </summary>

internal bool fnShapeBase_stopAudio (string shapebase, int slot)
{
var sbshapebase = new StringBuilder(shapebase, 1024);

return  SafeNativeMethods.mwle_fnShapeBase_stopAudio(sbshapebase, slot)>=1;
}
/// <summary>
///  ),
///    @brief Start a new animation thread, or restart one that has been paused or 
///    stopped.
/// 
///    @param slot thread slot to play. Valid range is 0 - 3)  // 3 = ShapeBase::MaxScriptThreads-1
///    @param name name of the animation sequence to play in this slot. If not 
///    specified, the paused or stopped thread in this slot will be resumed.
///    @return true if successful, false if failed
/// 
///    @tsexample
///    %obj.playThread( 0, \"ambient\" );      // Play the ambient sequence in slot 0
///    %obj.setThreadTimeScale( 0, 0.5 );    // Play at half-speed
///    %obj.pauseThread( 0 );                // Pause the sequence
///    %obj.playThread( 0 );                 // Resume playback
///    %obj.playThread( 0, \"spin\" );         // Replace the sequence in slot 0
///    @endtsexample
///    
///    @see pauseThread()
///    @see stopThread()
///    @see setThreadDir()
///    @see setThreadTimeScale()
///    @see destroyThread())
/// 
/// </summary>

internal bool fnShapeBase_playThread (string shapebase, int slot, string name)
{
var sbshapebase = new StringBuilder(shapebase, 1024);
var sbname = new StringBuilder(name, 4096);

return  SafeNativeMethods.mwle_fnShapeBase_playThread(sbshapebase, slot, sbname)>=1;
}
/// <summary>
/// @brief Set the playback direction of an animation thread.
/// 
///    @param slot thread slot to modify
///    @param fwd true to play the animation forwards, false to play backwards
///    @return true if successful, false if failed
///    
///    @see playThread() )
/// 
/// </summary>

internal bool fnShapeBase_setThreadDir (string shapebase, int slot, bool fwd)
{
var sbshapebase = new StringBuilder(shapebase, 1024);

return  SafeNativeMethods.mwle_fnShapeBase_setThreadDir(sbshapebase, slot, fwd)>=1;
}
/// <summary>
/// @brief Set the playback time scale of an animation thread.
/// 
///    @param slot thread slot to modify
///    @param scale new thread time scale (1=normal speed, 0.5=half speed etc)
///    @return true if successful, false if failed
///    
///    @see playThread )
/// 
/// </summary>

internal bool fnShapeBase_setThreadTimeScale (string shapebase, int slot, float scale)
{
var sbshapebase = new StringBuilder(shapebase, 1024);

return  SafeNativeMethods.mwle_fnShapeBase_setThreadTimeScale(sbshapebase, slot, scale)>=1;
}
/// <summary>
/// @brief Set the position within an animation thread.
/// 
///    @param slot thread slot to modify
///    @param pos position within thread
///    @return true if successful, false if failed
///    
///    @see playThread )
/// 
/// </summary>

internal bool fnShapeBase_setThreadPosition (string shapebase, int slot, float pos)
{
var sbshapebase = new StringBuilder(shapebase, 1024);

return  SafeNativeMethods.mwle_fnShapeBase_setThreadPosition(sbshapebase, slot, pos)>=1;
}
/// <summary>
/// @brief Stop an animation thread.
/// 
///    If restarted using playThread, the animation 
///    will start from the beginning again.
///    @param slot thread slot to stop
///    @return true if successful, false if failed
///    
///    @see playThread )
/// 
/// </summary>

internal bool fnShapeBase_stopThread (string shapebase, int slot)
{
var sbshapebase = new StringBuilder(shapebase, 1024);

return  SafeNativeMethods.mwle_fnShapeBase_stopThread(sbshapebase, slot)>=1;
}
/// <summary>
/// @brief Destroy an animation thread, which prevents it from playing.
/// 
///    @param slot thread slot to destroy
///    @return true if successful, false if failed
///    
///    @see playThread )
/// 
/// </summary>

internal bool fnShapeBase_destroyThread (string shapebase, int slot)
{
var sbshapebase = new StringBuilder(shapebase, 1024);

return  SafeNativeMethods.mwle_fnShapeBase_destroyThread(sbshapebase, slot)>=1;
}
/// <summary>
/// @brief Pause an animation thread.
///    
///    If restarted using playThread, the animation 
///    will resume from the paused position.
///    @param slot thread slot to stop
///    @return true if successful, false if failed
///    
///    @see playThread )
/// 
/// </summary>

internal bool fnShapeBase_pauseThread (string shapebase, int slot)
{
var sbshapebase = new StringBuilder(shapebase, 1024);

return  SafeNativeMethods.mwle_fnShapeBase_pauseThread(sbshapebase, slot)>=1;
}
/// <summary>
///  ),
///    @brief Mount a new Image.
/// 
///    @param image the Image to mount
///    @param slot Image slot to mount into (valid range is 0 - 3)
///    @param loaded initial loaded state for the Image
///    @param skinTag tagged string to reskin the mounted Image
///    @return true if successful, false if failed
/// 
///    @tsexample
///    %player.mountImage( PistolImage, 1 );
///    %player.mountImage( CrossbowImage, 0, false );
///    %player.mountImage( RocketLauncherImage, 0, true, 'blue' );
///    @endtsexample
///    
///    @see unmountImage()
///    @see getMountedImage()
///    @see getPendingImage()
///    @see isImageMounted())
/// 
/// </summary>

internal bool fnShapeBase_mountImage (string shapebase, string image, int slot, bool loaded, string skinTag)
{
var sbshapebase = new StringBuilder(shapebase, 1024);
var sbimage = new StringBuilder(image, 1024);
var sbskinTag = new StringBuilder(skinTag, 4096);

return  SafeNativeMethods.mwle_fnShapeBase_mountImage(sbshapebase, sbimage, slot, loaded, sbskinTag)>=1;
}
/// <summary>
/// @brief Unmount the mounted Image in the specified slot.
/// 
///    @param slot Image slot to unmount
///    @return true if successful, false if failed
///    
///    @see mountImage())
/// 
/// </summary>

internal bool fnShapeBase_unmountImage (string shapebase, int slot)
{
var sbshapebase = new StringBuilder(shapebase, 1024);

return  SafeNativeMethods.mwle_fnShapeBase_unmountImage(sbshapebase, slot)>=1;
}
/// <summary>
/// @brief Get the Image mounted in the specified slot.
/// 
///    @param slot Image slot to query
///    @return ID of the ShapeBaseImageData datablock mounted in the slot, or 0 
///    if no Image is mounted there. )
/// 
/// </summary>

internal int fnShapeBase_getMountedImage (string shapebase, int slot)
{
var sbshapebase = new StringBuilder(shapebase, 1024);

return  SafeNativeMethods.mwle_fnShapeBase_getMountedImage(sbshapebase, slot);
}
/// <summary>
/// @brief Get the Image that will be mounted next in the specified slot.
/// 
///    Calling mountImage when an Image is already mounted does one of two things: 
///    <ol><li>Mount the new Image immediately, the old Image is discarded and 
///    whatever state it was in is ignored.</li>
///    <li>If the current Image state does not allow Image changes, the new 
///    Image is marked as pending, and will not be mounted until the current 
///    state completes. eg. if the user changes weapons, you may wish to ensure 
///    that the current weapon firing state plays to completion first.</li></ol>
///    This command retrieves the ID of the pending Image (2nd case above).
///    
///    @param slot Image slot to query
///    @return ID of the pending ShapeBaseImageData datablock, or 0 if none. )
/// 
/// </summary>

internal int fnShapeBase_getPendingImage (string shapebase, int slot)
{
var sbshapebase = new StringBuilder(shapebase, 1024);

return  SafeNativeMethods.mwle_fnShapeBase_getPendingImage(sbshapebase, slot);
}
/// <summary>
/// @brief Check if the current Image state is firing.
/// 
///    @param slot Image slot to query
///    @return true if the current Image state in this slot has the 'stateFire' flag set. )
/// 
/// </summary>

internal bool fnShapeBase_isImageFiring (string shapebase, int slot)
{
var sbshapebase = new StringBuilder(shapebase, 1024);

return  SafeNativeMethods.mwle_fnShapeBase_isImageFiring(sbshapebase, slot)>=1;
}
/// <summary>
/// @brief Check if the given datablock is mounted to any slot on this object.
/// 
///    @param image ShapeBaseImageData datablock to query
///    @return true if the Image is mounted to any slot, false otherwise. )
/// 
/// </summary>

internal bool fnShapeBase_isImageMounted (string shapebase, string image)
{
var sbshapebase = new StringBuilder(shapebase, 1024);
var sbimage = new StringBuilder(image, 1024);

return  SafeNativeMethods.mwle_fnShapeBase_isImageMounted(sbshapebase, sbimage)>=1;
}
/// <summary>
/// @brief Get the first slot the given datablock is mounted to on this object.
/// 
///    @param image ShapeBaseImageData datablock to query
///    @return index of the first slot the Image is mounted in, or -1 if the Image 
///    is not mounted in any slot on this object. )
/// 
/// 
/// </summary>

internal int fnShapeBase_getMountSlot (string shapebase, string image)
{
var sbshapebase = new StringBuilder(shapebase, 1024);
var sbimage = new StringBuilder(image, 1024);

return  SafeNativeMethods.mwle_fnShapeBase_getMountSlot(sbshapebase, sbimage);
}
/// <summary>
/// @brief Get the skin tag ID for the Image mounted in the specified slot.
/// 
///    @param slot Image slot to query
///    @return the skinTag value passed to mountImage when the image was 
///    mounted )
/// 
/// </summary>

internal int fnShapeBase_getImageSkinTag (string shapebase, int slot)
{
var sbshapebase = new StringBuilder(shapebase, 1024);

return  SafeNativeMethods.mwle_fnShapeBase_getImageSkinTag(sbshapebase, slot);
}
/// <summary>
/// @brief Get the name of the current state of the Image in the specified slot.
/// 
///    @param slot Image slot to query
///    @return name of the current Image state, or \"Error\" if slot is invalid )
/// 
/// </summary>

internal string fnShapeBase_getImageState (string shapebase, int slot)
{
var returnbuff = new StringBuilder(4096);
var sbshapebase = new StringBuilder(shapebase, 1024);

SafeNativeMethods.mwle_fnShapeBase_getImageState(sbshapebase, slot, returnbuff);
return returnbuff.ToString();

}
/// <summary>
/// @brief Check if the given state exists on the mounted Image.
/// 
///    @param slot Image slot to query
///    @param state Image state to check for
///    @return true if the Image has the requested state defined. )
/// 
/// </summary>

internal bool fnShapeBase_hasImageState (string shapebase, int slot, string state)
{
var sbshapebase = new StringBuilder(shapebase, 1024);
var sbstate = new StringBuilder(state, 4096);

return  SafeNativeMethods.mwle_fnShapeBase_hasImageState(sbshapebase, slot, sbstate)>=1;
}
/// <summary>
/// @brief Get the trigger state of the Image mounted in the specified slot.
/// 
///    @param slot Image slot to query
///    @return the Image's current trigger state )
/// 
/// </summary>

internal bool fnShapeBase_getImageTrigger (string shapebase, int slot)
{
var sbshapebase = new StringBuilder(shapebase, 1024);

return  SafeNativeMethods.mwle_fnShapeBase_getImageTrigger(sbshapebase, slot)>=1;
}
/// <summary>
/// @brief Set the trigger state of the Image mounted in the specified slot.
/// 
///    @param slot Image slot to modify
///    @param state new trigger state for the Image
///    @return the Image's new trigger state )
/// 
/// </summary>

internal bool fnShapeBase_setImageTrigger (string shapebase, int slot, bool state)
{
var sbshapebase = new StringBuilder(shapebase, 1024);

return  SafeNativeMethods.mwle_fnShapeBase_setImageTrigger(sbshapebase, slot, state)>=1;
}
/// <summary>
/// @brief Get the generic trigger state of the Image mounted in the specified slot.
/// 
///    @param slot Image slot to query
///    @param trigger Generic trigger number
///    @return the Image's current generic trigger state )
/// 
/// </summary>

internal bool fnShapeBase_getImageGenericTrigger (string shapebase, int slot, int trigger)
{
var sbshapebase = new StringBuilder(shapebase, 1024);

return  SafeNativeMethods.mwle_fnShapeBase_getImageGenericTrigger(sbshapebase, slot, trigger)>=1;
}
/// <summary>
/// @brief Set the generic trigger state of the Image mounted in the specified slot.
/// 
///    @param slot Image slot to modify
///    @param trigger Generic trigger number
///    @param state new generic trigger state for the Image
///    @return the Image's new generic trigger state or -1 if there was a problem. )
/// 
/// </summary>

internal int fnShapeBase_setImageGenericTrigger (string shapebase, int slot, int trigger, bool state)
{
var sbshapebase = new StringBuilder(shapebase, 1024);

return  SafeNativeMethods.mwle_fnShapeBase_setImageGenericTrigger(sbshapebase, slot, trigger, state);
}
/// <summary>
/// @brief Get the alt trigger state of the Image mounted in the specified slot.
/// 
///    @param slot Image slot to query
///    @return the Image's current alt trigger state )
/// 
/// </summary>

internal bool fnShapeBase_getImageAltTrigger (string shapebase, int slot)
{
var sbshapebase = new StringBuilder(shapebase, 1024);

return  SafeNativeMethods.mwle_fnShapeBase_getImageAltTrigger(sbshapebase, slot)>=1;
}
/// <summary>
/// @brief Set the alt trigger state of the Image mounted in the specified slot.
/// 
///    @param slot Image slot to modify
///    @param state new alt trigger state for the Image
///    @return the Image's new alt trigger state )
/// 
/// </summary>

internal bool fnShapeBase_setImageAltTrigger (string shapebase, int slot, bool state)
{
var sbshapebase = new StringBuilder(shapebase, 1024);

return  SafeNativeMethods.mwle_fnShapeBase_setImageAltTrigger(sbshapebase, slot, state)>=1;
}
/// <summary>
/// @brief Get the ammo state of the Image mounted in the specified slot.
/// 
///    @param slot Image slot to query
///    @return the Image's current ammo state )
/// 
/// </summary>

internal bool fnShapeBase_getImageAmmo (string shapebase, int slot)
{
var sbshapebase = new StringBuilder(shapebase, 1024);

return  SafeNativeMethods.mwle_fnShapeBase_getImageAmmo(sbshapebase, slot)>=1;
}
/// <summary>
/// @brief Set the ammo state of the Image mounted in the specified slot.
/// 
///    @param slot Image slot to modify
///    @param state new ammo state for the Image
///    @return the Image's new ammo state )
/// 
/// </summary>

internal bool fnShapeBase_setImageAmmo (string shapebase, int slot, bool state)
{
var sbshapebase = new StringBuilder(shapebase, 1024);

return  SafeNativeMethods.mwle_fnShapeBase_setImageAmmo(sbshapebase, slot, state)>=1;
}
/// <summary>
/// @brief Get the loaded state of the Image mounted in the specified slot.
/// 
///    @param slot Image slot to query
///    @return the Image's current loaded state )
/// 
/// </summary>

internal bool fnShapeBase_getImageLoaded (string shapebase, int slot)
{
var sbshapebase = new StringBuilder(shapebase, 1024);

return  SafeNativeMethods.mwle_fnShapeBase_getImageLoaded(sbshapebase, slot)>=1;
}
/// <summary>
/// @brief Set the loaded state of the Image mounted in the specified slot.
/// 
///    @param slot Image slot to modify
///    @param state new loaded state for the Image
///    @return the Image's new loaded state )
/// 
/// </summary>

internal bool fnShapeBase_setImageLoaded (string shapebase, int slot, bool state)
{
var sbshapebase = new StringBuilder(shapebase, 1024);

return  SafeNativeMethods.mwle_fnShapeBase_setImageLoaded(sbshapebase, slot, state)>=1;
}
/// <summary>
/// @brief Get the target state of the Image mounted in the specified slot.
/// 
///    @param slot Image slot to query
///    @return the Image's current target state )
/// 
/// </summary>

internal bool fnShapeBase_getImageTarget (string shapebase, int slot)
{
var sbshapebase = new StringBuilder(shapebase, 1024);

return  SafeNativeMethods.mwle_fnShapeBase_getImageTarget(sbshapebase, slot)>=1;
}
/// <summary>
/// @brief Set the target state of the Image mounted in the specified slot.
/// 
///    @param slot Image slot to modify
///    @param state new target state for the Image
///    @return the Image's new target state )
/// 
/// </summary>

internal bool fnShapeBase_setImageTarget (string shapebase, int slot, bool state)
{
var sbshapebase = new StringBuilder(shapebase, 1024);

return  SafeNativeMethods.mwle_fnShapeBase_setImageTarget(sbshapebase, slot, state)>=1;
}
/// <summary>
/// @brief Get the script animation prefix of the Image mounted in the specified slot.
/// 
///    @param slot Image slot to query
///    @return the Image's current script animation prefix )
/// 
/// </summary>

internal string fnShapeBase_getImageScriptAnimPrefix (string shapebase, int slot)
{
var returnbuff = new StringBuilder(4096);
var sbshapebase = new StringBuilder(shapebase, 1024);

SafeNativeMethods.mwle_fnShapeBase_getImageScriptAnimPrefix(sbshapebase, slot, returnbuff);
return returnbuff.ToString();

}
/// <summary>
/// @brief Set the script animation prefix for the Image mounted in the specified slot.
///    This is used to further modify the prefix used when deciding which animation sequence to 
///    play while this image is mounted.
/// 
///    @param slot Image slot to modify
///    @param prefix The prefix applied to the image )
/// 
/// </summary>

internal void fnShapeBase_setImageScriptAnimPrefix (string shapebase, int slot, string prefix)
{
var sbshapebase = new StringBuilder(shapebase, 1024);
var sbprefix = new StringBuilder(prefix, 4096);

SafeNativeMethods.mwle_fnShapeBase_setImageScriptAnimPrefix(sbshapebase, slot, sbprefix);
}
/// <summary>
/// @brief Get the muzzle vector of the Image mounted in the specified slot.
/// 
///    If the Image shape contains a node called 'muzzlePoint', then the muzzle 
///    vector is the forward direction vector of that node's transform in world 
///    space. If no such node is specified, the slot's mount node is used 
///    instead.
/// 
///    If the correctMuzzleVector flag (correctMuzzleVectorTP in 3rd person) 
///    is set in the Image, the muzzle vector is computed to point at whatever 
///    object is right in front of the object's 'eye' node.
/// 
///    @param slot Image slot to query
///    @return the muzzle vector, or \"0 1 0\" if the slot is invalid )
/// 
/// </summary>

internal string fnShapeBase_getMuzzleVector (string shapebase, int slot)
{
var returnbuff = new StringBuilder(1024);
var sbshapebase = new StringBuilder(shapebase, 1024);

SafeNativeMethods.mwle_fnShapeBase_getMuzzleVector(sbshapebase, slot, returnbuff);
return returnbuff.ToString();

}
/// <summary>
/// @brief Get the muzzle position of the Image mounted in the specified slot.
/// 
///    If the Image shape contains a node called 'muzzlePoint', then the muzzle 
///    position is the position of that node in world space. If no such node 
///    is specified, the slot's mount node is used instead.
/// 
///    @param slot Image slot to query
///    @return the muzzle position, or \"0 0 0\" if the slot is invalid )
/// 
/// </summary>

internal string fnShapeBase_getMuzzlePoint (string shapebase, int slot)
{
var returnbuff = new StringBuilder(1024);
var sbshapebase = new StringBuilder(shapebase, 1024);

SafeNativeMethods.mwle_fnShapeBase_getMuzzlePoint(sbshapebase, slot, returnbuff);
return returnbuff.ToString();

}
/// <summary>
/// @brief Get the world transform of the specified mount slot.
/// 
///    @param slot Image slot to query
///    @return the mount transform )
/// 
/// </summary>

internal string fnShapeBase_getSlotTransform (string shapebase, int slot)
{
var returnbuff = new StringBuilder(1024);
var sbshapebase = new StringBuilder(shapebase, 1024);

SafeNativeMethods.mwle_fnShapeBase_getSlotTransform(sbshapebase, slot, returnbuff);
return returnbuff.ToString();

}
/// <summary>
/// @brief Get the position at which the AI should stand to repair things.
/// 
///    If the shape defines a node called \"AIRepairNode\", this method will 
///    return the current world position of that node, otherwise \"0 0 0\".
///    @return the AI repair position )
/// 
/// </summary>

internal string fnShapeBase_getAIRepairPoint (string shapebase)
{
var returnbuff = new StringBuilder(1024);
var sbshapebase = new StringBuilder(shapebase, 1024);

SafeNativeMethods.mwle_fnShapeBase_getAIRepairPoint(sbshapebase, returnbuff);
return returnbuff.ToString();

}
/// <summary>
/// @brief Get the object's current velocity.
/// 
///    @return the current velocity )
/// 
/// </summary>

internal string fnShapeBase_getVelocity (string shapebase)
{
var returnbuff = new StringBuilder(1024);
var sbshapebase = new StringBuilder(shapebase, 1024);

SafeNativeMethods.mwle_fnShapeBase_getVelocity(sbshapebase, returnbuff);
return returnbuff.ToString();

}
/// <summary>
/// @brief Set the object's velocity.
/// 
///    @param vel new velocity for the object
///    @return true )
/// 
/// </summary>

internal bool fnShapeBase_setVelocity (string shapebase, string vel)
{
var sbshapebase = new StringBuilder(shapebase, 1024);
var sbvel = new StringBuilder(vel, 1024);

return  SafeNativeMethods.mwle_fnShapeBase_setVelocity(sbshapebase, sbvel)>=1;
}
/// <summary>
/// @brief Apply an impulse to the object.
/// 
///    @param pos world position of the impulse
///    @param vec impulse momentum (velocity * mass)
///    @return true )
/// 
/// </summary>

internal bool fnShapeBase_applyImpulse (string shapebase, string pos, string vec)
{
var sbshapebase = new StringBuilder(shapebase, 1024);
var sbpos = new StringBuilder(pos, 1024);
var sbvec = new StringBuilder(vec, 1024);

return  SafeNativeMethods.mwle_fnShapeBase_applyImpulse(sbshapebase, sbpos, sbvec)>=1;
}
/// <summary>
/// @brief Get the forward direction of the 'eye' for this object.
/// 
///    If the object model has a node called 'eye', this method will return that 
///    node's current forward direction vector, otherwise it will return the 
///    object's current forward direction vector.
/// 
///    @return the eye vector for this object
/// 
///    @see getEyePoint
///    @see getEyeTransform )
/// 
/// </summary>

internal string fnShapeBase_getEyeVector (string shapebase)
{
var returnbuff = new StringBuilder(1024);
var sbshapebase = new StringBuilder(shapebase, 1024);

SafeNativeMethods.mwle_fnShapeBase_getEyeVector(sbshapebase, returnbuff);
return returnbuff.ToString();

}
/// <summary>
/// @brief Get the position of the 'eye' for this object.
/// 
///    If the object model has a node called 'eye', this method will return that 
///    node's current world position, otherwise it will return the object's current 
///    world position.
/// 
///    @return the eye position for this object
/// 
///    @see getEyeVector
///    @see getEyeTransform )
/// 
/// </summary>

internal string fnShapeBase_getEyePoint (string shapebase)
{
var returnbuff = new StringBuilder(1024);
var sbshapebase = new StringBuilder(shapebase, 1024);

SafeNativeMethods.mwle_fnShapeBase_getEyePoint(sbshapebase, returnbuff);
return returnbuff.ToString();

}
/// <summary>
/// @brief Get the 'eye' transform for this object.
/// 
///    If the object model has a node called 'eye', this method will return that 
///    node's current transform, otherwise it will return the object's current 
///    transform.
/// 
///    @return the eye transform for this object
/// 
///    @see getEyeVector
///    @see getEyePoint )
/// 
/// </summary>

internal string fnShapeBase_getEyeTransform (string shapebase)
{
var returnbuff = new StringBuilder(1024);
var sbshapebase = new StringBuilder(shapebase, 1024);

SafeNativeMethods.mwle_fnShapeBase_getEyeTransform(sbshapebase, returnbuff);
return returnbuff.ToString();

}
/// <summary>
/// @brief Get the world position this object is looking at.
/// 
///    Casts a ray from the eye and returns information about what the ray hits.
/// 
///    @param distance maximum distance of the raycast
///    @param typeMask typeMask of objects to include for raycast collision testing
///    @return look-at information as \"Object HitX HitY HitZ [Material]\" or empty string for no hit
/// 
///    @tsexample
///    %lookat = %obj.getLookAtPoint();
///    echo( \"Looking at: \" @ getWords( %lookat, 1, 3 ) );
///    @endtsexample )
/// 
/// </summary>

internal string fnShapeBase_getLookAtPoint (string shapebase, float distance, int typeMask)
{
var returnbuff = new StringBuilder(4096);
var sbshapebase = new StringBuilder(shapebase, 1024);

SafeNativeMethods.mwle_fnShapeBase_getLookAtPoint(sbshapebase, distance, typeMask, returnbuff);
return returnbuff.ToString();

}
/// <summary>
/// @brief Set this object's current energy level.
/// 
///    @param level new energy level
///    
///    @see getEnergyLevel()
///    @see getEnergyPercent())
/// 
/// </summary>

internal void fnShapeBase_setEnergyLevel (string shapebase, float level)
{
var sbshapebase = new StringBuilder(shapebase, 1024);

SafeNativeMethods.mwle_fnShapeBase_setEnergyLevel(sbshapebase, level);
}
/// <summary>
/// @brief Get the object's current energy level.
/// 
///    @return energy level
///    
///    @see setEnergyLevel())
/// 
/// </summary>

internal float fnShapeBase_getEnergyLevel (string shapebase)
{
var sbshapebase = new StringBuilder(shapebase, 1024);

return  SafeNativeMethods.mwle_fnShapeBase_getEnergyLevel(sbshapebase);
}
/// <summary>
/// @brief Get the object's current energy level as a percentage of maxEnergy.
///    @return energyLevel / datablock.maxEnergy
/// 
///    @see setEnergyLevel())
/// 
/// </summary>

internal float fnShapeBase_getEnergyPercent (string shapebase)
{
var sbshapebase = new StringBuilder(shapebase, 1024);

return  SafeNativeMethods.mwle_fnShapeBase_getEnergyPercent(sbshapebase);
}
/// <summary>
/// @brief Set the object's current damage level.
/// 
///    @param level new damage level
///    
///    @see getDamageLevel()
///    @see getDamagePercent())
/// 
/// </summary>

internal void fnShapeBase_setDamageLevel (string shapebase, float level)
{
var sbshapebase = new StringBuilder(shapebase, 1024);

SafeNativeMethods.mwle_fnShapeBase_setDamageLevel(sbshapebase, level);
}
/// <summary>
/// @brief Get the object's current damage level.
/// 
///    @return damage level
///    
///    @see setDamageLevel())
/// 
/// </summary>

internal float fnShapeBase_getDamageLevel (string shapebase)
{
var sbshapebase = new StringBuilder(shapebase, 1024);

return  SafeNativeMethods.mwle_fnShapeBase_getDamageLevel(sbshapebase);
}
/// <summary>
/// @brief Get the object's current damage level as a percentage of maxDamage.
/// 
///    @return damageLevel / datablock.maxDamage
///    
///    @see setDamageLevel())
/// 
/// </summary>

internal float fnShapeBase_getDamagePercent (string shapebase)
{
var sbshapebase = new StringBuilder(shapebase, 1024);

return  SafeNativeMethods.mwle_fnShapeBase_getDamagePercent(sbshapebase);
}
/// <summary>
/// Get the object's maxDamage level.  
///    @return datablock.maxDamage)    
/// 
/// </summary>

internal float fnShapeBase_getMaxDamage (string shapebase)
{
var sbshapebase = new StringBuilder(shapebase, 1024);

return  SafeNativeMethods.mwle_fnShapeBase_getMaxDamage(sbshapebase);
}
/// <summary>
/// @brief Set the object's damage state.
/// 
///    @param state should be one of \"Enabled\", \"Disabled\", \"Destroyed\"
///    @return true if successful, false if failed
///    
///    @see getDamageState())
/// 
/// </summary>

internal bool fnShapeBase_setDamageState (string shapebase, string state)
{
var sbshapebase = new StringBuilder(shapebase, 1024);
var sbstate = new StringBuilder(state, 4096);

return  SafeNativeMethods.mwle_fnShapeBase_setDamageState(sbshapebase, sbstate)>=1;
}
/// <summary>
/// @brief Get the object's damage state.
/// 
///    @return the damage state; one of \"Enabled\", \"Disabled\", \"Destroyed\"
///    
///    @see setDamageState())
/// 
/// </summary>

internal string fnShapeBase_getDamageState (string shapebase)
{
var returnbuff = new StringBuilder(4096);
var sbshapebase = new StringBuilder(shapebase, 1024);

SafeNativeMethods.mwle_fnShapeBase_getDamageState(sbshapebase, returnbuff);
return returnbuff.ToString();

}
/// <summary>
/// @brief Check if the object is in the Destroyed damage state.
/// 
///    @return true if damage state is \"Destroyed\", false if not 
///    
///    @see isDisabled()
///    @see isEnabled())
/// 
/// </summary>

internal bool fnShapeBase_isDestroyed (string shapebase)
{
var sbshapebase = new StringBuilder(shapebase, 1024);

return  SafeNativeMethods.mwle_fnShapeBase_isDestroyed(sbshapebase)>=1;
}
/// <summary>
/// @brief Check if the object is in the Disabled or Destroyed damage state.
/// 
///    @return true if damage state is not \"Enabled\", false if it is
///    
///    @see isDestroyed()
///    @see isEnabled())
/// 
/// </summary>

internal bool fnShapeBase_isDisabled (string shapebase)
{
var sbshapebase = new StringBuilder(shapebase, 1024);

return  SafeNativeMethods.mwle_fnShapeBase_isDisabled(sbshapebase)>=1;
}
/// <summary>
/// @brief Check if the object is in the Enabled damage state.
/// 
///    @return true if damage state is \"Enabled\", false if not
///    
///    @see isDestroyed()
///    @see isDisabled())
/// 
/// </summary>

internal bool fnShapeBase_isEnabled (string shapebase)
{
var sbshapebase = new StringBuilder(shapebase, 1024);

return  SafeNativeMethods.mwle_fnShapeBase_isEnabled(sbshapebase)>=1;
}
/// <summary>
/// @brief Increment the current damage level by the specified amount.
/// 
///    @param amount value to add to current damage level )
/// 
/// </summary>

internal void fnShapeBase_applyDamage (string shapebase, float amount)
{
var sbshapebase = new StringBuilder(shapebase, 1024);

SafeNativeMethods.mwle_fnShapeBase_applyDamage(sbshapebase, amount);
}
/// <summary>
/// @brief Repair damage by the specified amount.
/// 
///    Note that the damage level is only reduced by repairRate per tick, so it may 
///    take several ticks for the total repair to complete.
/// 
///    @param amount total repair value (subtracted from damage level over time) )
/// 
/// </summary>

internal void fnShapeBase_applyRepair (string shapebase, float amount)
{
var sbshapebase = new StringBuilder(shapebase, 1024);

SafeNativeMethods.mwle_fnShapeBase_applyRepair(sbshapebase, amount);
}
/// <summary>
/// @brief Set amount to repair damage by each tick.
/// 
///    Note that this value is separate to the repairRate field in ShapeBaseData. 
///    This value will be subtracted from the damage level each tick, whereas the 
///    ShapeBaseData field limits how much of the applyRepair value is subtracted 
///    each tick. Both repair types can be active at the same time.
///    
///    @param rate value to subtract from damage level each tick (must be > 0)
///    
///    @see getRepairRate())
/// 
/// </summary>

internal void fnShapeBase_setRepairRate (string shapebase, float rate)
{
var sbshapebase = new StringBuilder(shapebase, 1024);

SafeNativeMethods.mwle_fnShapeBase_setRepairRate(sbshapebase, rate);
}
/// <summary>
/// @brief Get the per-tick repair amount.
/// 
///    @return the current value to be subtracted from damage level each tick
/// 
///    @see setRepairRate )
/// 
/// </summary>

internal float fnShapeBase_getRepairRate (string shapebase)
{
var sbshapebase = new StringBuilder(shapebase, 1024);

return  SafeNativeMethods.mwle_fnShapeBase_getRepairRate(sbshapebase);
}
/// <summary>
/// @brief Set the recharge rate.
/// 
///    The recharge rate is added to the object's current energy level each tick, 
///    up to the maxEnergy level set in the ShapeBaseData datablock.
///    
///    @param rate the recharge rate (per tick)
///    
///    @see getRechargeRate())
/// 
/// </summary>

internal void fnShapeBase_setRechargeRate (string shapebase, float rate)
{
var sbshapebase = new StringBuilder(shapebase, 1024);

SafeNativeMethods.mwle_fnShapeBase_setRechargeRate(sbshapebase, rate);
}
/// <summary>
/// @brief Get the current recharge rate.
/// 
///    @return the recharge rate (per tick)
///    
///    @see setRechargeRate())
/// 
/// </summary>

internal float fnShapeBase_getRechargeRate (string shapebase)
{
var sbshapebase = new StringBuilder(shapebase, 1024);

return  SafeNativeMethods.mwle_fnShapeBase_getRechargeRate(sbshapebase);
}
/// <summary>
/// @brief Get the client (if any) that controls this object.
/// 
///    The controlling client is the one that will send moves to us to act on.
/// 
///    @return the ID of the controlling GameConnection, or 0 if this object is not 
///    controlled by any client.
///    
///    @see GameConnection)
/// 
/// </summary>

internal int fnShapeBase_getControllingClient (string shapebase)
{
var sbshapebase = new StringBuilder(shapebase, 1024);

return  SafeNativeMethods.mwle_fnShapeBase_getControllingClient(sbshapebase);
}
/// <summary>
/// @brief Get the object (if any) that controls this object.
/// 
///    @return the ID of the controlling ShapeBase object, or 0 if this object is 
///    not controlled by another object. )
/// 
/// </summary>

internal int fnShapeBase_getControllingObject (string shapebase)
{
var sbshapebase = new StringBuilder(shapebase, 1024);

return  SafeNativeMethods.mwle_fnShapeBase_getControllingObject(sbshapebase);
}
/// <summary>
/// @brief Check if this object can cloak.
///    @return true
///    
///    @note Not implemented as it always returns true.)
/// 
/// </summary>

internal bool fnShapeBase_canCloak (string shapebase)
{
var sbshapebase = new StringBuilder(shapebase, 1024);

return  SafeNativeMethods.mwle_fnShapeBase_canCloak(sbshapebase)>=1;
}
/// <summary>
/// @brief Set the cloaked state of this object.
/// 
///    When an object is cloaked it is not rendered.
/// 
///    @param cloak true to cloak the object, false to uncloak
///    
///    @see isCloaked())
/// 
/// </summary>

internal void fnShapeBase_setCloaked (string shapebase, bool cloak)
{
var sbshapebase = new StringBuilder(shapebase, 1024);

SafeNativeMethods.mwle_fnShapeBase_setCloaked(sbshapebase, cloak);
}
/// <summary>
/// @brief Check if this object is cloaked.
/// 
///    @return true if cloaked, false if not 
///    
///    @see setCloaked())
/// 
/// </summary>

internal bool fnShapeBase_isCloaked (string shapebase)
{
var sbshapebase = new StringBuilder(shapebase, 1024);

return  SafeNativeMethods.mwle_fnShapeBase_isCloaked(sbshapebase)>=1;
}
/// <summary>
/// @brief Set the damage flash level.
/// 
///    Damage flash may be used as a postfx effect to flash the screen when the 
///    client is damaged.
/// 
///    @note Relies on the flash postFx.
/// 
///    @param level flash level (0-1)
///    
///    @see getDamageFlash())
/// 
/// </summary>

internal void fnShapeBase_setDamageFlash (string shapebase, float level)
{
var sbshapebase = new StringBuilder(shapebase, 1024);

SafeNativeMethods.mwle_fnShapeBase_setDamageFlash(sbshapebase, level);
}
/// <summary>
/// @brief Get the damage flash level.
/// 
///    @return flash level
/// 
///    @see setDamageFlash )
/// 
/// </summary>

internal float fnShapeBase_getDamageFlash (string shapebase)
{
var sbshapebase = new StringBuilder(shapebase, 1024);

return  SafeNativeMethods.mwle_fnShapeBase_getDamageFlash(sbshapebase);
}
/// <summary>
/// @brief Set the white-out level.
/// 
///    White-out may be used as a postfx effect to brighten the screen in response 
///    to a game event.
/// 
///    @note Relies on the flash postFx.
/// 
///    @param level flash level (0-1)
///    
///    @see getWhiteOut())
/// 
/// </summary>

internal void fnShapeBase_setWhiteOut (string shapebase, float level)
{
var sbshapebase = new StringBuilder(shapebase, 1024);

SafeNativeMethods.mwle_fnShapeBase_setWhiteOut(sbshapebase, level);
}
/// <summary>
/// @brief Get the white-out level.
/// 
///    @return white-out level
/// 
///    @see setWhiteOut )
/// 
/// </summary>

internal float fnShapeBase_getWhiteOut (string shapebase)
{
var sbshapebase = new StringBuilder(shapebase, 1024);

return  SafeNativeMethods.mwle_fnShapeBase_getWhiteOut(sbshapebase);
}
/// <summary>
/// @brief Returns the default vertical field of view in degrees for this object if used as a camera.
/// 
///    @return Default FOV )
/// 
/// </summary>

internal float fnShapeBase_getDefaultCameraFov (string shapebase)
{
var sbshapebase = new StringBuilder(shapebase, 1024);

return  SafeNativeMethods.mwle_fnShapeBase_getDefaultCameraFov(sbshapebase);
}
/// <summary>
/// @brief Returns the vertical field of view in degrees for this object if used as a camera.
/// 
///    @return current FOV as defined in ShapeBaseData::cameraDefaultFov )
/// 
/// </summary>

internal float fnShapeBase_getCameraFov (string shapebase)
{
var sbshapebase = new StringBuilder(shapebase, 1024);

return  SafeNativeMethods.mwle_fnShapeBase_getCameraFov(sbshapebase);
}
/// <summary>
/// @brief Set the vertical field of view in degrees for this object if used as a camera.
/// 
///    @param fov new FOV value )
/// 
/// </summary>

internal void fnShapeBase_setCameraFov (string shapebase, float fov)
{
var sbshapebase = new StringBuilder(shapebase, 1024);

SafeNativeMethods.mwle_fnShapeBase_setCameraFov(sbshapebase, fov);
}
/// <summary>
/// @brief Setup the invincible effect.
/// 
///    This effect is used for HUD feedback to the user that they are invincible.
///    @note Currently not implemented
/// 
///    @param time duration in seconds for the invincible effect
///    @param speed speed at which the invincible effect progresses )
/// 
/// </summary>

internal void fnShapeBase_setInvincibleMode (string shapebase, float time, float speed)
{
var sbshapebase = new StringBuilder(shapebase, 1024);

SafeNativeMethods.mwle_fnShapeBase_setInvincibleMode(sbshapebase, time, speed);
}
/// <summary>
/// @brief Fade the object in or out without removing it from the scene.
/// 
///    A faded out object is still in the scene and can still be collided with, 
///    so if you want to disable collisions for this shape after it fades out 
///    use setHidden to temporarily remove this shape from the scene.
///   
///    @note Items have the ability to light their surroundings. When an Item with 
///    an active light is fading out, the light it emits is correspondingly 
///    reduced until it goes out. Likewise, when the item fades in, the light is 
///    turned-up till it reaches it's normal brightntess.
/// 
///    @param time duration of the fade effect in ms
///    @param delay delay in ms before the fade effect begins
///    @param fadeOut true to fade-out to invisible, false to fade-in to full visibility )
/// 
/// </summary>

internal void fnShapeBase_startFade (string shapebase, int time, int delay, bool fadeOut)
{
var sbshapebase = new StringBuilder(shapebase, 1024);

SafeNativeMethods.mwle_fnShapeBase_startFade(sbshapebase, time, delay, fadeOut);
}
/// <summary>
/// @brief Set the damage direction vector.
/// 
///    Currently this is only used to initialise the explosion if this object 
///    is blown up.
/// 
///    @param vec damage direction vector
/// 
///    @tsexample
///    %obj.setDamageVector( \"0 0 1\" );
///    @endtsexample )
/// 
/// </summary>

internal void fnShapeBase_setDamageVector (string shapebase, string vec)
{
var sbshapebase = new StringBuilder(shapebase, 1024);
var sbvec = new StringBuilder(vec, 1024);

SafeNativeMethods.mwle_fnShapeBase_setDamageVector(sbshapebase, sbvec);
}
/// <summary>
/// @brief Set the name of this shape.
/// 
///    @note This is the name of the shape object that is sent to the client, 
///    not the DTS or DAE model filename.
/// 
///    @param name new name for the shape
///    
///    @see getShapeName())
/// 
/// </summary>

internal void fnShapeBase_setShapeName (string shapebase, string name)
{
var sbshapebase = new StringBuilder(shapebase, 1024);
var sbname = new StringBuilder(name, 4096);

SafeNativeMethods.mwle_fnShapeBase_setShapeName(sbshapebase, sbname);
}
/// <summary>
/// @brief Get the name of the shape.
/// 
///    @note This is the name of the shape object that is sent to the client, 
///    not the DTS or DAE model filename.
/// 
///    @return the name of the shape 
///    
///    @see setShapeName())
/// 
/// </summary>

internal string fnShapeBase_getShapeName (string shapebase)
{
var returnbuff = new StringBuilder(4096);
var sbshapebase = new StringBuilder(shapebase, 1024);

SafeNativeMethods.mwle_fnShapeBase_getShapeName(sbshapebase, returnbuff);
return returnbuff.ToString();

}
/// <summary>
/// @brief Apply a new skin to this shape.
/// 
///    'Skinning' the shape effectively renames the material targets, allowing 
///    different materials to be used on different instances of the same model.
/// 
///    @param name name of the skin to apply
/// 
///    @see skin
///    @see getSkinName())
/// 
/// </summary>

internal void fnShapeBase_setSkinName (string shapebase, string name)
{
var sbshapebase = new StringBuilder(shapebase, 1024);
var sbname = new StringBuilder(name, 4096);

SafeNativeMethods.mwle_fnShapeBase_setSkinName(sbshapebase, sbname);
}
/// <summary>
/// @brief Get the name of the skin applied to this shape.
/// 
///    @return the name of the skin 
/// 
///    @see skin
///    @see setSkinName())
/// 
/// </summary>

internal string fnShapeBase_getSkinName (string shapebase)
{
var returnbuff = new StringBuilder(4096);
var sbshapebase = new StringBuilder(shapebase, 1024);

SafeNativeMethods.mwle_fnShapeBase_getSkinName(sbshapebase, returnbuff);
return returnbuff.ToString();

}
/// <summary>
/// @brief Get the visible distance applied to this shape.
///    @return the visible distance 
///    @see 
///    @see )
/// 
/// </summary>

internal int fnShapeBase_getVisibleDistance (string shapebase)
{
var sbshapebase = new StringBuilder(shapebase, 1024);

return  SafeNativeMethods.mwle_fnShapeBase_getVisibleDistance(sbshapebase);
}
/// <summary>
/// @brief Get the visible distance applied to this shape.
///    @return the visible distance 
///    @see 
///    @see )
/// 
/// </summary>

internal void fnShapeBase_setVisibleDistance (string shapebase, int dist)
{
var sbshapebase = new StringBuilder(shapebase, 1024);

SafeNativeMethods.mwle_fnShapeBase_setVisibleDistance(sbshapebase, dist);
}
/// <summary>
/// @brief Set the hidden state on all the shape meshes.
/// 
///    This allows you to hide all meshes in the shape, for example, and then only 
///    enable a few.
/// 
///    @param hide new hidden state for all meshes )
/// 
/// </summary>

internal void fnShapeBase_setAllMeshesHidden (string shapebase, bool hide)
{
var sbshapebase = new StringBuilder(shapebase, 1024);

SafeNativeMethods.mwle_fnShapeBase_setAllMeshesHidden(sbshapebase, hide);
}
/// <summary>
/// @brief Set the hidden state on the named shape mesh.
/// 
///    @param name name of the mesh to hide/show
///    @param hide new hidden state for the mesh )
/// 
/// </summary>

internal void fnShapeBase_setMeshHidden (string shapebase, string name, bool hide)
{
var sbshapebase = new StringBuilder(shapebase, 1024);
var sbname = new StringBuilder(name, 4096);

SafeNativeMethods.mwle_fnShapeBase_setMeshHidden(sbshapebase, sbname, hide);
}
/// <summary>
/// @brief Print a list of visible and hidden meshes in the shape to the console 
///    for debugging purposes.
///    @note Only in a SHIPPING build.)
/// 
/// </summary>

internal void fnShapeBase_dumpMeshVisibility (string shapebase)
{
var sbshapebase = new StringBuilder(shapebase, 1024);

SafeNativeMethods.mwle_fnShapeBase_dumpMeshVisibility(sbshapebase);
}
/// <summary>
/// @brief Get the name of the indexed shape material.
/// 
///    @param index index of the material to get (valid range is 0 - getTargetCount()-1).
///    @return the name of the indexed material.
///    
///    @see getTargetCount())
/// 
/// </summary>

internal string fnShapeBase_getTargetName (string shapebase, int index)
{
var returnbuff = new StringBuilder(4096);
var sbshapebase = new StringBuilder(shapebase, 1024);

SafeNativeMethods.mwle_fnShapeBase_getTargetName(sbshapebase, index, returnbuff);
return returnbuff.ToString();

}
/// <summary>
/// @brief Get the number of materials in the shape.
/// 
///    @return the number of materials in the shape. 
///    
///    @see getTargetName())
/// 
/// </summary>

internal int fnShapeBase_getTargetCount (string shapebase)
{
var sbshapebase = new StringBuilder(shapebase, 1024);

return  SafeNativeMethods.mwle_fnShapeBase_getTargetCount(sbshapebase);
}
/// <summary>
/// @brief Change one of the materials on the shape.
/// 
///    This method changes materials per mapTo with others. The material that 
///    is being replaced is mapped to unmapped_mat as a part of this transition.
/// 
///    @note Warning, right now this only sort of works. It doesn't do a live 
///    update like it should.
/// 
///    @param mapTo the name of the material target to remap (from getTargetName)
///    @param oldMat the old Material that was mapped 
///    @param newMat the new Material to map
/// 
///    @tsexample
///    // remap the first material in the shape
///    %mapTo = %obj.getTargetName( 0 );
///    %obj.changeMaterial( %mapTo, 0, MyMaterial );
///    @endtsexample )
/// 
/// </summary>

internal void fnShapeBase_changeMaterial (string shapebase, string mapTo, string oldMat, string newMat)
{
var sbshapebase = new StringBuilder(shapebase, 1024);
var sbmapTo = new StringBuilder(mapTo, 4096);
var sboldMat = new StringBuilder(oldMat, 1024);
var sbnewMat = new StringBuilder(newMat, 1024);

SafeNativeMethods.mwle_fnShapeBase_changeMaterial(sbshapebase, sbmapTo, sboldMat, sbnewMat);
}
/// <summary>
/// @brief Get the model filename used by this shape.
/// 
///    @return the shape filename )
/// 
/// </summary>

internal string fnShapeBase_getModelFile (string shapebase)
{
var returnbuff = new StringBuilder(4096);
var sbshapebase = new StringBuilder(shapebase, 1024);

SafeNativeMethods.mwle_fnShapeBase_getModelFile(sbshapebase, returnbuff);
return returnbuff.ToString();

}
/// <summary>
/// ( StaticShape, setPoweredState, void, 3, 3, (bool isPowered)
/// 			  @internal)
/// 
/// </summary>

internal void fnStaticShape_setPoweredState (string staticshape, string a2)
{
var sbstaticshape = new StringBuilder(staticshape, 1024);
var sba2 = new StringBuilder(a2, 4096);

SafeNativeMethods.mwle_fnStaticShape_setPoweredState(sbstaticshape, sba2);
}
/// <summary>
/// ( StaticShape, getPoweredState, bool, 2, 2, @internal)
/// 
/// </summary>

internal bool fnStaticShape_getPoweredState (string staticshape)
{
var sbstaticshape = new StringBuilder(staticshape, 1024);

return  SafeNativeMethods.mwle_fnStaticShape_getPoweredState(sbstaticshape)>=1;
}
/// <summary>
/// @brief Get the number of objects that are within the Trigger's bounds.
///    @see getObject())
/// 
/// </summary>

internal int fnTrigger_getNumObjects (string trigger)
{
var sbtrigger = new StringBuilder(trigger, 1024);

return  SafeNativeMethods.mwle_fnTrigger_getNumObjects(sbtrigger);
}
/// <summary>
/// @brief Retrieve the requested object that is within the Trigger's bounds.
///    @param index Index of the object to get (range is 0 to getNumObjects()-1)
///    @returns The SimObjectID of the object, or -1 if the requested index is invalid.
///    @see getNumObjects())
/// 
/// </summary>

internal int fnTrigger_getObject (string trigger, int index)
{
var sbtrigger = new StringBuilder(trigger, 1024);

return  SafeNativeMethods.mwle_fnTrigger_getObject(sbtrigger, index);
}
/// <summary>
/// Get the name of the indexed shape material.
///    @param index index of the material to get (valid range is 0 - getTargetCount()-1).
///    @return the name of the indexed material.
///    @see getTargetCount())
/// 
/// </summary>

internal string fnTSStatic_getTargetName (string tsstatic, int index)
{
var returnbuff = new StringBuilder(4096);
var sbtsstatic = new StringBuilder(tsstatic, 1024);

SafeNativeMethods.mwle_fnTSStatic_getTargetName(sbtsstatic, index, returnbuff);
return returnbuff.ToString();

}
/// <summary>
/// Get the number of materials in the shape.
///    @return the number of materials in the shape.
///    @see getTargetName())
/// 
/// </summary>

internal int fnTSStatic_getTargetCount (string tsstatic)
{
var sbtsstatic = new StringBuilder(tsstatic, 1024);

return  SafeNativeMethods.mwle_fnTSStatic_getTargetCount(sbtsstatic);
}
/// <summary>
/// ,NULL,NULL),
///    @brief Change one of the materials on the shape.
/// 
///    This method changes materials per mapTo with others. The material that 
///    is being replaced is mapped to unmapped_mat as a part of this transition.
/// 
///    @note Warning, right now this only sort of works. It doesn't do a live 
///    update like it should.
/// 
///    @param mapTo the name of the material target to remap (from getTargetName)
///    @param oldMat the old Material that was mapped 
///    @param newMat the new Material to map
/// 
///    @tsexample
///       // remap the first material in the shape
///       %mapTo = %obj.getTargetName( 0 );
///       %obj.changeMaterial( %mapTo, 0, MyMaterial );
///    @endtsexample )
/// 
/// </summary>

internal void fnTSStatic_changeMaterial (string tsstatic, string mapTo, string oldMat, string newMat)
{
var sbtsstatic = new StringBuilder(tsstatic, 1024);
var sbmapTo = new StringBuilder(mapTo, 4096);
var sboldMat = new StringBuilder(oldMat, 1024);
var sbnewMat = new StringBuilder(newMat, 1024);

SafeNativeMethods.mwle_fnTSStatic_changeMaterial(sbtsstatic, sbmapTo, sboldMat, sbnewMat);
}
/// <summary>
/// @brief Get the model filename used by this shape.
/// 
///    @return the shape filename
///    @tsexample
/// 		// Acquire the model filename used on this shape.
/// 		%modelFilename = %obj.getModelFile();
///    @endtsexample
///    )
/// 
/// </summary>

internal string fnTSStatic_getModelFile (string tsstatic)
{
var returnbuff = new StringBuilder(4096);
var sbtsstatic = new StringBuilder(tsstatic, 1024);

SafeNativeMethods.mwle_fnTSStatic_getModelFile(sbtsstatic, returnbuff);
return returnbuff.ToString();

}
/// <summary>
/// Get the unique numeric ID of the zone in its scene.
///    @return The ID of the zone. )
/// 
/// </summary>

internal int fnZone_getZoneId (string zone)
{
var sbzone = new StringBuilder(zone, 1024);

return  SafeNativeMethods.mwle_fnZone_getZoneId(sbzone);
}
/// <summary>
/// Dump a list of all objects assigned to the zone to the console as well as a list 
///    of all connected zone spaces.
///    @param updateFirst Whether to update the contents of the zone before dumping.  Since zoning states of 
///       objects are updated on demand, the zone contents can be outdated. )
/// 
/// </summary>

internal void fnZone_dumpZoneState (string zone, bool updateFirst)
{
var sbzone = new StringBuilder(zone, 1024);

SafeNativeMethods.mwle_fnZone_dumpZoneState(sbzone, updateFirst);
}
/// <summary>
/// A utility method for forcing a network update.)
/// 
/// </summary>

internal void fnRenderMeshExample_postApply (string rendermeshexample)
{
var sbrendermeshexample = new StringBuilder(rendermeshexample, 1024);

SafeNativeMethods.mwle_fnRenderMeshExample_postApply(sbrendermeshexample);
}
/// <summary>
/// @brief Calculates how much an explosion effects a specific object.
///    Use this to determine how much damage to apply to objects based on their 
///    distance from the explosion's center point, and whether the explosion is 
///    blocked by other objects.
///    @param pos Center position of the explosion.
///    @param id Id of the object of which to check coverage.
///    @param covMask Mask of object types that may block the explosion.
///    @return Coverage value from 0 (not affected by the explosion) to 1 (fully affected)
///    @tsexample
///    // Get the position of the explosion.
///    %position = %explosion.getPosition();
///    // Set a list of TypeMasks (defined in gameFunctioncs.cpp), seperated by the | character.
///    %TypeMasks = $TypeMasks::StaticObjectType | $TypeMasks::ItemObjectType
///    // Acquire the damage value from 0.0f - 1.0f.
///    %coverage = calcExplosionCoverage( %position, %sceneObject, %TypeMasks );
///    // Apply damage to object 
///    %sceneObject.applyDamage( %coverage * 20 );
///    @endtsexample
///    @ingroup FX)
/// 
/// </summary>

internal float fn_calcExplosionCoverage (string pos, int id, uint covMask)
{
var sbpos = new StringBuilder(pos, 1024);

return  SafeNativeMethods.mwle_fn_calcExplosionCoverage(sbpos, id, covMask);
}
/// <summary>
/// Activates the foliage replicator.
/// 													@tsexample
/// 														// Call the function
/// 														StartFoliageReplication();
/// 													@endtsexample
/// 													@ingroup Foliage)
/// 
/// </summary>

internal void fn_StartFoliageReplication ()
{

SafeNativeMethods.mwle_fn_StartFoliageReplication();
}
/// <summary>
/// Activates the shape replicator.
/// 													@tsexample
/// 														// Call the function
/// 														StartClientReplication()
/// 													@endtsexample
/// 													@ingroup Foliage
/// 					)
/// 
/// </summary>

internal void fn_StartClientReplication ()
{

SafeNativeMethods.mwle_fn_StartClientReplication();
}
/// <summary>
/// @brief Creates a LightningStrikeEvent that triggers harmless lightning 
///    bolts on all clients.
///    No objects will be damaged by these bolts.
///    @tsexample
///    // Generate a harmless lightning strike effect on all clients
///    %lightning.warningFlashes();
///    @endtsexample )
/// 
/// </summary>

internal void fnLightning_warningFlashes (string lightning)
{
var sblightning = new StringBuilder(lightning, 1024);

SafeNativeMethods.mwle_fnLightning_warningFlashes(sblightning);
}
/// <summary>
/// Creates a LightningStrikeEvent which attempts to strike and damage a random 
///    object in range of the Lightning object.
///    @tsexample
///    // Generate a damaging lightning strike effect on all clients
///    %lightning.strikeRandomPoint();
///    @endtsexample )
/// 
/// </summary>

internal void fnLightning_strikeRandomPoint (string lightning)
{
var sblightning = new StringBuilder(lightning, 1024);

SafeNativeMethods.mwle_fnLightning_strikeRandomPoint(sblightning);
}
/// <summary>
/// Creates a LightningStrikeEvent which strikes a specific object.
///    @note This method is currently unimplemented. )
/// 
/// </summary>

internal void fnLightning_strikeObject (string lightning, int id)
{
var sblightning = new StringBuilder(lightning, 1024);

SafeNativeMethods.mwle_fnLightning_strikeObject(sblightning, id);
}
/// <summary>
/// Reloads this particle.
///    @tsexample
///    // Get the editor's current particle
///    %particle = PE_ParticleEditor.currParticle
///    // Change a particle value
///    %particle.setFieldValue( %propertyField, %value );
///    // Reload it
///    %particle.reload();
///    @endtsexample )
/// 
/// </summary>

internal void fnParticleData_reload (string particledata)
{
var sbparticledata = new StringBuilder(particledata, 1024);

SafeNativeMethods.mwle_fnParticleData_reload(sbparticledata);
}
/// <summary>
/// Reloads the ParticleData datablocks and other fields used by this emitter.
///    @tsexample
///    // Get the editor's current particle emitter
///    %emitter = PE_EmitterEditor.currEmitter
///    // Change a field value
///    %emitter.setFieldValue( %propertyField, %value );
///    // Reload this emitter
///    %emitter.reload();
///    @endtsexample)
/// 
/// </summary>

internal void fnParticleEmitterData_reload (string particleemitterdata)
{
var sbparticleemitterdata = new StringBuilder(particleemitterdata, 1024);

SafeNativeMethods.mwle_fnParticleEmitterData_reload(sbparticleemitterdata);
}
/// <summary>
/// Assigns the datablock for this emitter node.
///    @param emitterDatablock ParticleEmitterData datablock to assign
///    @tsexample
///    // Assign a new emitter datablock
///    %emitter.setEmitterDatablock( %emitterDatablock );
///    @endtsexample )
/// 
/// </summary>

internal void fnParticleEmitterNode_setEmitterDataBlock (string particleemitternode, string emitterDatablock)
{
var sbparticleemitternode = new StringBuilder(particleemitternode, 1024);
var sbemitterDatablock = new StringBuilder(emitterDatablock, 1024);

SafeNativeMethods.mwle_fnParticleEmitterNode_setEmitterDataBlock(sbparticleemitternode, sbemitterDatablock);
}
/// <summary>
/// Turns the emitter on or off.
///    @param active New emitter state )
/// 
/// </summary>

internal void fnParticleEmitterNode_setActive (string particleemitternode, bool active)
{
var sbparticleemitternode = new StringBuilder(particleemitternode, 1024);

SafeNativeMethods.mwle_fnParticleEmitterNode_setActive(sbparticleemitternode, active);
}
/// <summary>
/// Sets the maximum number of drops in the effect, as a percentage of #numDrops.
///    The change occurs instantly (use modifyStorm() to change the number of drops 
///    over a period of time.
///    @param percentage New maximum number of drops value (as a percentage of 
///    #numDrops). Valid range is 0-1.
///    @tsexample
///    %percentage = 0.5;  // The percentage, from 0 to 1, of the maximum drops to display
///    %precipitation.setPercentage( %percentage );
///    @endtsexample
///    @see modifyStorm )
/// 
/// </summary>

internal void fnPrecipitation_setPercentage (string precipitation, float percentage)
{
var sbprecipitation = new StringBuilder(precipitation, 1024);

SafeNativeMethods.mwle_fnPrecipitation_setPercentage(sbprecipitation, percentage);
}
/// <summary>
/// Smoothly change the maximum number of drops in the effect (from current 
///    value to #numDrops * @a percentage).
///    This method can be used to simulate a storm building or fading in intensity 
///    as the number of drops in the Precipitation box changes.
///    @param percentage New maximum number of drops value (as a percentage of 
///    #numDrops). Valid range is 0-1.
///    @param seconds Length of time (in seconds) over which to increase the drops 
///    percentage value. Set to 0 to change instantly.
///    @tsexample
///    %percentage = 0.5;  // The percentage, from 0 to 1, of the maximum drops to display
///    %seconds = 5.0;     // The length of time over which to make the change.
///    %precipitation.modifyStorm( %percentage, %seconds );
///    @endtsexample )
/// 
/// </summary>

internal void fnPrecipitation_modifyStorm (string precipitation, float percentage, float seconds)
{
var sbprecipitation = new StringBuilder(precipitation, 1024);

SafeNativeMethods.mwle_fnPrecipitation_modifyStorm(sbprecipitation, percentage, seconds);
}
/// <summary>
/// Smoothly change the turbulence parameters over a period of time.
///    @param max New #maxTurbulence value. Set to 0 to disable turbulence.
///    @param speed New #turbulenceSpeed value.
///    @param seconds Length of time (in seconds) over which to interpolate the 
///    turbulence settings. Set to 0 to change instantly.
///    @tsexample
///    %turbulence = 0.5;     // Set the new turbulence value. Set to 0 to disable turbulence.
///    %speed = 5.0;          // The new speed of the turbulance effect.
///    %seconds = 5.0;        // The length of time over which to make the change.
///    %precipitation.setTurbulence( %turbulence, %speed, %seconds );
///    @endtsexample )
/// 
/// </summary>

internal void fnPrecipitation_setTurbulence (string precipitation, float max, float speed, float seconds)
{
var sbprecipitation = new StringBuilder(precipitation, 1024);

SafeNativeMethods.mwle_fnPrecipitation_setTurbulence(sbprecipitation, max, speed, seconds);
}
/// <summary>
/// @brief Get the datablock used by this object.
///    @return the datablock this GameBase is using.
///    @see setDataBlock())
/// 
/// </summary>

internal int fnGameBase_getDataBlock (string gamebase)
{
var sbgamebase = new StringBuilder(gamebase, 1024);

return  SafeNativeMethods.mwle_fnGameBase_getDataBlock(sbgamebase);
}
/// <summary>
/// @brief Assign this GameBase to use the specified datablock.
///    @param data new datablock to use
///    @return true if successful, false if failed.
///    @see getDataBlock())
/// 
/// </summary>

internal bool fnGameBase_setDataBlock (string gamebase, string data)
{
var sbgamebase = new StringBuilder(gamebase, 1024);
var sbdata = new StringBuilder(data, 1024);

return  SafeNativeMethods.mwle_fnGameBase_setDataBlock(sbgamebase, sbdata)>=1;
}
/// <summary>
/// @brief Apply an impulse to this object as defined by a world position and velocity vector.
/// 
///    @param pos impulse world position
///    @param vel impulse velocity (impulse force F = m * v)
///    @return Always true
/// 
///    @note Not all objects that derrive from GameBase have this defined.)
/// 
/// </summary>

internal bool fnGameBase_applyImpulse (string gamebase, string pos, string vel)
{
var sbgamebase = new StringBuilder(gamebase, 1024);
var sbpos = new StringBuilder(pos, 1024);
var sbvel = new StringBuilder(vel, 1024);

return  SafeNativeMethods.mwle_fnGameBase_applyImpulse(sbgamebase, sbpos, sbvel)>=1;
}
/// <summary>
/// @brief Applies a radial impulse to the object using the given origin and force.
/// 
///    @param origin World point of origin of the radial impulse.
///    @param radius The radius of the impulse area.
///    @param magnitude The strength of the impulse.
///    
///    @note Not all objects that derrive from GameBase have this defined.)
/// 
/// </summary>

internal void fnGameBase_applyRadialImpulse (string gamebase, string origin, float radius, float magnitude)
{
var sbgamebase = new StringBuilder(gamebase, 1024);
var sborigin = new StringBuilder(origin, 1024);

SafeNativeMethods.mwle_fnGameBase_applyRadialImpulse(sbgamebase, sborigin, radius, magnitude);
}
/// <summary>
/// (GameConnection, setConnectArgs, void, 3, 17,
///    (const char* args) @brief On the client, pass along a variable set of parameters to the server.
///    
///    Once the connection is established with the server, the server calls its onConnect() method 
///    with the client's passed in parameters as aruments.
///    
///    @see GameConnection::onConnect())
/// 
/// </summary>

internal void fnGameConnection_setConnectArgs (string gameconnection, string a2, string a3, string a4, string a5, string a6, string a7, string a8, string a9, string a10, string a11, string a12, string a13, string a14, string a15, string a16)
{
var sbgameconnection = new StringBuilder(gameconnection, 1024);
var sba2 = new StringBuilder(a2, 4096);
var sba3 = new StringBuilder(a3, 4096);
var sba4 = new StringBuilder(a4, 4096);
var sba5 = new StringBuilder(a5, 4096);
var sba6 = new StringBuilder(a6, 4096);
var sba7 = new StringBuilder(a7, 4096);
var sba8 = new StringBuilder(a8, 4096);
var sba9 = new StringBuilder(a9, 4096);
var sba10 = new StringBuilder(a10, 4096);
var sba11 = new StringBuilder(a11, 4096);
var sba12 = new StringBuilder(a12, 4096);
var sba13 = new StringBuilder(a13, 4096);
var sba14 = new StringBuilder(a14, 4096);
var sba15 = new StringBuilder(a15, 4096);
var sba16 = new StringBuilder(a16, 4096);

SafeNativeMethods.mwle_fnGameConnection_setConnectArgs(sbgameconnection, sba2, sba3, sba4, sba5, sba6, sba7, sba8, sba9, sba10, sba11, sba12, sba13, sba14, sba15, sba16);
}
/// <summary>
/// @brief On the client, set the password that will be passed to the server.
///               
///               On the server, this password is compared with what is stored in $pref::Server::Password.  
///               If $pref::Server::Password is empty then the client's sent password is ignored.  Otherwise, 
///               if the passed in client password and the server password do not match, the CHR_PASSWORD 
///               error string is sent back to the client and the connection is immediately terminated.
///               
///               This password checking is performed quite early on in the connection request process so as 
///               to minimize the impact of multiple failed attempts -- also known as hacking.)
/// 
/// </summary>

internal void fnGameConnection_setJoinPassword (string gameconnection, string password)
{
var sbgameconnection = new StringBuilder(gameconnection, 1024);
var sbpassword = new StringBuilder(password, 4096);

SafeNativeMethods.mwle_fnGameConnection_setJoinPassword(sbgameconnection, sbpassword);
}
/// <summary>
/// @brief Sent by the server during phase 1 of the mission download to send the datablocks to the client.
///    
///    SimDataBlocks, also known as just datablocks, need to be transmitted to the client 
///    prior to the client entering the game world.  These represent the static data that 
///    most objects in the world reference.  This is typically done during the standard 
///    mission start phase 1 when following Torque's example mission startup sequence.
/// 
///    When the datablocks have all been transmitted, onDataBlocksDone() is called to move 
///    the mission start process to the next phase.
/// 
///    @param sequence The sequence is common between the server and client and ensures 
///    that the client is acting on the most recent mission start process.  If an errant 
///    network packet (one that was lost but has now been found) is received by the client 
///    with an incorrect sequence, it is just ignored.  This sequence number is updated on 
///    the server every time a mission is loaded.
/// 
///    @tsexample
///    function serverCmdMissionStartPhase1Ack(%client, %seq)
///    {
///       // Make sure to ignore calls from a previous mission load
///       if (%seq != $missionSequence || !$MissionRunning)
///          return;
///       if (%client.currentPhase != 0)
///          return;
///       %client.currentPhase = 1;
///    
///       // Start with the CRC
///       %client.setMissionCRC( $missionCRC );
///    
///       // Send over the datablocks...
///       // OnDataBlocksDone will get called when have confirmation
///       // that they've all been received.
///       %client.transmitDataBlocks($missionSequence);
///    }
///    @endtsexample
///    
///    @see GameConnection::onDataBlocksDone())
/// 
/// </summary>

internal void fnGameConnection_transmitDataBlocks (string gameconnection, int sequence)
{
var sbgameconnection = new StringBuilder(gameconnection, 1024);

SafeNativeMethods.mwle_fnGameConnection_transmitDataBlocks(sbgameconnection, sequence);
}
/// <summary>
/// @brief Called by the server during phase 2 of the mission download to start sending ghosts to the client.
///    
///    Ghosts represent objects on the server that are in scope for the client.  These need 
///    to be synchronized with the client in order for the client to see and interact with them.  
///    This is typically done during the standard mission start phase 2 when following Torque's 
///    example mission startup sequence.
/// 
///    @tsexample
///    function serverCmdMissionStartPhase2Ack(%client, %seq, %playerDB)
///    {
///       // Make sure to ignore calls from a previous mission load
///       if (%seq != $missionSequence || !$MissionRunning)
///          return;
///       if (%client.currentPhase != 1.5)
///          return;
///       %client.currentPhase = 2;
///    
///       // Set the player datablock choice
///       %client.playerDB = %playerDB;
///    
///       // Update mod paths, this needs to get there before the objects.
///       %client.transmitPaths();
///    
///       // Start ghosting objects to the client
///       %client.activateGhosting();
///    }
///    @endtsexample
/// 
///    @see @ref ghosting_scoping for a description of the ghosting system.)
/// 
/// </summary>

internal void fnGameConnection_activateGhosting (string gameconnection)
{
var sbgameconnection = new StringBuilder(gameconnection, 1024);

SafeNativeMethods.mwle_fnGameConnection_activateGhosting(sbgameconnection);
}
/// <summary>
/// @brief On the server, resets the connection to indicate that ghosting has been disabled.
/// 
///    Typically when a mission has ended on the server, all connected clients are informed of this change 
///    and their connections are reset back to a starting state.  This method resets a connection on the 
///    server to indicate that ghosts are no longer being transmitted.  On the client end, all ghost 
///    information will be deleted.
/// 
///    @tsexample
///       // Inform the clients
///       for (%clientIndex = 0; %clientIndex < ClientGroup.getCount(); %clientIndex++)
///       {
///          // clear ghosts and paths from all clients
///          %cl = ClientGroup.getObject(%clientIndex);
///          %cl.endMission();
///          %cl.resetGhosting();
///          %cl.clearPaths();
///       }
///    @endtsexample
/// 
///    @see @ref ghosting_scoping for a description of the ghosting system.)
/// 
/// </summary>

internal void fnGameConnection_resetGhosting (string gameconnection)
{
var sbgameconnection = new StringBuilder(gameconnection, 1024);

SafeNativeMethods.mwle_fnGameConnection_resetGhosting(sbgameconnection);
}
/// <summary>
/// @brief On the server, sets the object that the client will control.
///    By default the control object is an instance of the Player class, but can also be an instance 
///    of Camera (when editing the mission, for example), or any other ShapeBase derived class as 
///    appropriate for the game.
///    @param ctrlObj The GameBase object on the server to control.)
/// 
/// </summary>

internal bool fnGameConnection_setControlObject (string gameconnection, string ctrlObj)
{
var sbgameconnection = new StringBuilder(gameconnection, 1024);
var sbctrlObj = new StringBuilder(ctrlObj, 1024);

return  SafeNativeMethods.mwle_fnGameConnection_setControlObject(sbgameconnection, sbctrlObj)>=1;
}
/// <summary>
/// @brief On the server, returns the object that the client is controlling.
///    By default the control object is an instance of the Player class, but can also be an instance 
///    of Camera (when editing the mission, for example), or any other ShapeBase derived class as 
///    appropriate for the game.
///    @see GameConnection::setControlObject())
/// 
/// </summary>

internal string fnGameConnection_getControlObject (string gameconnection)
{
var returnbuff = new StringBuilder(1024);
var sbgameconnection = new StringBuilder(gameconnection, 1024);

SafeNativeMethods.mwle_fnGameConnection_getControlObject(sbgameconnection, returnbuff);
return returnbuff.ToString();

}
/// <summary>
/// @brief Returns true if this connection is AI controlled.
///    @see AIConnection)
/// 
/// </summary>

internal bool fnGameConnection_isAIControlled (string gameconnection)
{
var sbgameconnection = new StringBuilder(gameconnection, 1024);

return  SafeNativeMethods.mwle_fnGameConnection_isAIControlled(sbgameconnection)>=1;
}
/// <summary>
/// @brief Returns true if the object being controlled by the client is making use 
///    of a rotation damped camera.
///    @see Camera)
/// 
/// </summary>

internal bool fnGameConnection_isControlObjectRotDampedCamera (string gameconnection)
{
var sbgameconnection = new StringBuilder(gameconnection, 1024);

return  SafeNativeMethods.mwle_fnGameConnection_isControlObjectRotDampedCamera(sbgameconnection)>=1;
}
/// <summary>
/// @brief Used on the server to play a 2D sound that is not attached to any object.
/// 
///    @param profile The SFXProfile that defines the sound to play.
/// 
///    @tsexample
///    function ServerPlay2D(%profile)
///    {
///       // Play the given sound profile on every client.
///       // The sounds will be transmitted as an event, not attached to any object.
///       for(%idx = 0; %idx < ClientGroup.getCount(); %idx++)
///          ClientGroup.getObject(%idx).play2D(%profile);
///    }
///    @endtsexample)
/// 
/// </summary>

internal bool fnGameConnection_play2D (string gameconnection, string profile)
{
var sbgameconnection = new StringBuilder(gameconnection, 1024);
var sbprofile = new StringBuilder(profile, 1024);

return  SafeNativeMethods.mwle_fnGameConnection_play2D(sbgameconnection, sbprofile)>=1;
}
/// <summary>
/// @brief Used on the server to play a 3D sound that is not attached to any object.
///    
///    @param profile The SFXProfile that defines the sound to play.
///    @param location The position and orientation of the 3D sound given in the form of \"x y z ax ay az aa\".
/// 
///    @tsexample
///    function ServerPlay3D(%profile,%transform)
///    {
///       // Play the given sound profile at the given position on every client
///       // The sound will be transmitted as an event, not attached to any object.
///       for(%idx = 0; %idx < ClientGroup.getCount(); %idx++)
///          ClientGroup.getObject(%idx).play3D(%profile,%transform);
///    }
///    @endtsexample)
/// 
/// </summary>

internal bool fnGameConnection_play3D (string gameconnection, string profile, string location)
{
var sbgameconnection = new StringBuilder(gameconnection, 1024);
var sbprofile = new StringBuilder(profile, 1024);
var sblocation = new StringBuilder(location, 1024);

return  SafeNativeMethods.mwle_fnGameConnection_play3D(sbgameconnection, sbprofile, sblocation)>=1;
}
/// <summary>
/// @brief Sets the size of the chase camera's matrix queue.
///    @note This sets the queue size across all GameConnections.
///    @note This is not currently hooked up.)
/// 
/// </summary>

internal bool fnGameConnection_chaseCam (string gameconnection, int size)
{
var sbgameconnection = new StringBuilder(gameconnection, 1024);

return  SafeNativeMethods.mwle_fnGameConnection_chaseCam(sbgameconnection, size)>=1;
}
/// <summary>
/// @brief Returns the default field of view as used by the control object's camera.)
/// 
/// </summary>

internal float fnGameConnection_getControlCameraDefaultFov (string gameconnection)
{
var sbgameconnection = new StringBuilder(gameconnection, 1024);

return  SafeNativeMethods.mwle_fnGameConnection_getControlCameraDefaultFov(sbgameconnection);
}
/// <summary>
/// @brief On the server, sets the control object's camera's field of view.
///    @param newFOV New field of view (in degrees) to force the control object's camera to use.  This value 
///    is clamped to be within the range of 1 to 179 degrees.
///    @note When transmitted over the network to the client, the resolution is limited to 
///    one degree.  Any fraction is dropped.)
/// 
/// </summary>

internal void fnGameConnection_setControlCameraFov (string gameconnection, float newFOV)
{
var sbgameconnection = new StringBuilder(gameconnection, 1024);

SafeNativeMethods.mwle_fnGameConnection_setControlCameraFov(sbgameconnection, newFOV);
}
/// <summary>
/// @brief Returns the field of view as used by the control object's camera.)
/// 
/// </summary>

internal float fnGameConnection_getControlCameraFov (string gameconnection)
{
var sbgameconnection = new StringBuilder(gameconnection, 1024);

return  SafeNativeMethods.mwle_fnGameConnection_getControlCameraFov(sbgameconnection);
}
/// <summary>
/// @brief On the client, get the control object's damage flash level.
///    @return flash level)
/// 
/// </summary>

internal float fnGameConnection_getDamageFlash (string gameconnection)
{
var sbgameconnection = new StringBuilder(gameconnection, 1024);

return  SafeNativeMethods.mwle_fnGameConnection_getDamageFlash(sbgameconnection);
}
/// <summary>
/// @brief On the client, get the control object's white-out level.
///    @return white-out level)
/// 
/// </summary>

internal float fnGameConnection_getWhiteOut (string gameconnection)
{
var sbgameconnection = new StringBuilder(gameconnection, 1024);

return  SafeNativeMethods.mwle_fnGameConnection_getWhiteOut(sbgameconnection);
}
/// <summary>
/// @brief On the server, sets the client's 3D display to fade to black.
///    @param doFade Set to true to fade to black, and false to fade from black.
///    @param timeMS Time it takes to perform the fade as measured in ms.
///    @note Not currently hooked up, and is not synchronized over the network.)
/// 
/// </summary>

internal void fnGameConnection_setBlackOut (string gameconnection, bool doFade, int timeMS)
{
var sbgameconnection = new StringBuilder(gameconnection, 1024);

SafeNativeMethods.mwle_fnGameConnection_setBlackOut(sbgameconnection, doFade, timeMS);
}
/// <summary>
/// @brief On the server, transmits the mission file's CRC value to the client.
/// 
///    Typically, during the standard mission start phase 1, the mission file's CRC value 
///    on the server is send to the client.  This allows the client to determine if the mission 
///    has changed since the last time it downloaded this mission and act appropriately, such as 
///    rebuilt cached lightmaps.
/// 
///    @param CRC The mission file's CRC value on the server.
/// 
///    @tsexample
///    function serverCmdMissionStartPhase1Ack(%client, %seq)
///    {
///       // Make sure to ignore calls from a previous mission load
///       if (%seq != $missionSequence || !$MissionRunning)
///          return;
///       if (%client.currentPhase != 0)
///          return;
///       %client.currentPhase = 1;
///    
///       // Start with the CRC
///       %client.setMissionCRC( $missionCRC );
///    
///       // Send over the datablocks...
///       // OnDataBlocksDone will get called when have confirmation
///       // that they've all been received.
///       %client.transmitDataBlocks($missionSequence);
///    }
///    @endtsexample)
/// 
/// </summary>

internal void fnGameConnection_setMissionCRC (string gameconnection, int CRC)
{
var sbgameconnection = new StringBuilder(gameconnection, 1024);

SafeNativeMethods.mwle_fnGameConnection_setMissionCRC(sbgameconnection, CRC);
}
/// <summary>
/// ),
///    @brief On the server, disconnect a client and pass along an optional reason why.
/// 
///    This method performs two operations: it disconnects a client connection from the server, 
///    and it deletes the connection object.  The optional reason is sent in the disconnect packet 
///    and is often displayed to the user so they know why they've been disconnected.
///    
///    @param reason [optional] The reason why the user has been disconnected from the server.
///    
///    @tsexample
///    function kick(%client)
///    {
///       messageAll( 'MsgAdminForce', '\\c2The Admin has kicked %1.', %client.playerName);
///    
///       if (!%client.isAIControlled())
///          BanList::add(%client.guid, %client.getAddress(), $Pref::Server::KickBanTime);
///       %client.delete(\"You have been kicked from this server\");
///    }
///    @endtsexample)
/// 
/// </summary>

internal void fnGameConnection_delete (string gameconnection, string reason)
{
var sbgameconnection = new StringBuilder(gameconnection, 1024);
var sbreason = new StringBuilder(reason, 4096);

SafeNativeMethods.mwle_fnGameConnection_delete(sbgameconnection, sbreason);
}
/// <summary>
/// @brief On the client, starts recording the network connection's traffic to a demo file.
///    
///    It is often useful to play back a game session.  This could be for producing a 
///    demo of the game that will be shown at a later time, or for debugging a game.  
///    By recording the entire network stream it is possible to later play game the game 
///    exactly as it unfolded during the actual play session.  This is because all user 
///    control and server results pass through the connection.
///    
///    @param fileName The file name to use for the demo recording.
///    
///    @see GameConnection::stopRecording(), GameConnection::playDemo())
/// 
/// </summary>

internal void fnGameConnection_startRecording (string gameconnection, string fileName)
{
var sbgameconnection = new StringBuilder(gameconnection, 1024);
var sbfileName = new StringBuilder(fileName, 4096);

SafeNativeMethods.mwle_fnGameConnection_startRecording(sbgameconnection, sbfileName);
}
/// <summary>
/// @brief On the client, stops the recording of a connection's network traffic to a file.
///    
///    @see GameConnection::startRecording(), GameConnection::playDemo())
/// 
/// </summary>

internal void fnGameConnection_stopRecording (string gameconnection)
{
var sbgameconnection = new StringBuilder(gameconnection, 1024);

SafeNativeMethods.mwle_fnGameConnection_stopRecording(sbgameconnection);
}
/// <summary>
/// @brief On the client, play back a previously recorded game session.
///    
///    It is often useful to play back a game session.  This could be for producing a 
///    demo of the game that will be shown at a later time, or for debugging a game.  
///    By recording the entire network stream it is possible to later play game the game 
///    exactly as it unfolded during the actual play session.  This is because all user 
///    control and server results pass through the connection.
/// 
///    @returns True if the playback was successful.  False if there was an issue, such as 
///    not being able to open the demo file for playback.
///    
///    @see GameConnection::startRecording(), GameConnection::stopRecording())
/// 
/// </summary>

internal bool fnGameConnection_playDemo (string gameconnection, string demoFileName)
{
var sbgameconnection = new StringBuilder(gameconnection, 1024);
var sbdemoFileName = new StringBuilder(demoFileName, 4096);

return  SafeNativeMethods.mwle_fnGameConnection_playDemo(sbgameconnection, sbdemoFileName)>=1;
}
/// <summary>
/// @brief Returns true if a previously recorded demo file is now playing.
///    
///    @see GameConnection::playDemo())
/// 
/// </summary>

internal bool fnGameConnection_isDemoPlaying (string gameconnection)
{
var sbgameconnection = new StringBuilder(gameconnection, 1024);

return  SafeNativeMethods.mwle_fnGameConnection_isDemoPlaying(sbgameconnection)>=1;
}
/// <summary>
/// @brief Returns true if a demo file is now being recorded.
///    
///    @see GameConnection::startRecording(), GameConnection::stopRecording())
/// 
/// </summary>

internal bool fnGameConnection_isDemoRecording (string gameconnection)
{
var sbgameconnection = new StringBuilder(gameconnection, 1024);

return  SafeNativeMethods.mwle_fnGameConnection_isDemoRecording(sbgameconnection)>=1;
}
/// <summary>
/// @brief List all of the classes that this connection knows about, and what their IDs are. Useful for debugging network problems.
///    @note The list is sent to the console.)
/// 
/// </summary>

internal void fnGameConnection_listClassIDs (string gameconnection)
{
var sbgameconnection = new StringBuilder(gameconnection, 1024);

SafeNativeMethods.mwle_fnGameConnection_listClassIDs(sbgameconnection);
}
/// <summary>
/// @brief On the server, set the connection's camera object used when not viewing 
///    through the control object.
///    
///    @see GameConnection::getCameraObject() and GameConnection::clearCameraObject())
/// 
/// </summary>

internal bool fnGameConnection_setCameraObject (string gameconnection, string camera)
{
var sbgameconnection = new StringBuilder(gameconnection, 1024);
var sbcamera = new StringBuilder(camera, 1024);

return  SafeNativeMethods.mwle_fnGameConnection_setCameraObject(sbgameconnection, sbcamera)>=1;
}
/// <summary>
/// @brief Returns the connection's camera object used when not viewing through the control object.
///    
///    @see GameConnection::setCameraObject() and GameConnection::clearCameraObject())
/// 
/// </summary>

internal string fnGameConnection_getCameraObject (string gameconnection)
{
var returnbuff = new StringBuilder(1024);
var sbgameconnection = new StringBuilder(gameconnection, 1024);

SafeNativeMethods.mwle_fnGameConnection_getCameraObject(sbgameconnection, returnbuff);
return returnbuff.ToString();

}
/// <summary>
/// @brief Clear the connection's camera object reference.
///    
///    @see GameConnection::setCameraObject() and GameConnection::getCameraObject())
/// 
/// </summary>

internal void fnGameConnection_clearCameraObject (string gameconnection)
{
var sbgameconnection = new StringBuilder(gameconnection, 1024);

SafeNativeMethods.mwle_fnGameConnection_clearCameraObject(sbgameconnection);
}
/// <summary>
/// @brief Returns true if this connection is in first person mode.
/// 
///    @note Transition to first person occurs over time via mCameraPos, so this 
///    won't immediately return true after a set.)
/// 
/// </summary>

internal bool fnGameConnection_isFirstPerson (string gameconnection)
{
var sbgameconnection = new StringBuilder(gameconnection, 1024);

return  SafeNativeMethods.mwle_fnGameConnection_isFirstPerson(sbgameconnection)>=1;
}
/// <summary>
/// @brief On the server, sets this connection into or out of first person mode.
///    
///    @param firstPerson Set to true to put the connection into first person mode.)
/// 
/// </summary>

internal void fnGameConnection_setFirstPerson (string gameconnection, bool firstPerson)
{
var sbgameconnection = new StringBuilder(gameconnection, 1024);

SafeNativeMethods.mwle_fnGameConnection_setFirstPerson(sbgameconnection, firstPerson);
}
/// <summary>
/// ( dumpProcessList, void, 1, 1, 
///    Dumps all ProcessObjects in ServerProcessList and ClientProcessList to the console. )
/// 
/// </summary>

internal void fn__dumpProcessList ()
{

SafeNativeMethods.mwle_fn__dumpProcessList();
}
/// <summary>
/// ( PhysicsDebrisData, preload, void, 2, 2, 
///    @brief Loads some information to have readily available at simulation time.
///    Forces generation of shaders, materials, and other data used by the %PhysicsDebris object. 
///    This function should be used while a level is loading in order to shorten 
///    the amount of time to create a PhysicsDebris in game.)
/// 
/// </summary>

internal void fnPhysicsDebrisData_preload (string physicsdebrisdata)
{
var sbphysicsdebrisdata = new StringBuilder(physicsdebrisdata, 1024);

SafeNativeMethods.mwle_fnPhysicsDebrisData_preload(sbphysicsdebrisdata);
}
/// <summary>
/// @brief Attempts to associate the PhysicsForce with a PhysicsBody.
///    Performs a physics ray cast of the provided length and direction. The %PhysicsForce  
///    will attach itself to the first dynamic PhysicsBody the ray collides with. 
///    On every tick, the attached body will be attracted towards the position of the %PhysicsForce.
///    A %PhysicsForce can only be attached to one body at a time.
///    @note To determine if an %attach was successful, check isAttached() immediately after 
///    calling this function.n)
/// 
/// </summary>

internal void fnPhysicsForce_attach (string physicsforce, string start, string direction, float maxDist)
{
var sbphysicsforce = new StringBuilder(physicsforce, 1024);
var sbstart = new StringBuilder(start, 1024);
var sbdirection = new StringBuilder(direction, 1024);

SafeNativeMethods.mwle_fnPhysicsForce_attach(sbphysicsforce, sbstart, sbdirection, maxDist);
}
/// <summary>
/// @brief Disassociates the PhysicsForce from any attached PhysicsBody.
///    @param force Optional force to apply to the attached PhysicsBody 
///    before detaching.
///    @note Has no effect if the %PhysicsForce is not attached to anything.)
/// 
/// </summary>

internal void fnPhysicsForce_detach (string physicsforce, string force)
{
var sbphysicsforce = new StringBuilder(physicsforce, 1024);
var sbforce = new StringBuilder(force, 1024);

SafeNativeMethods.mwle_fnPhysicsForce_detach(sbphysicsforce, sbforce);
}
/// <summary>
/// @brief Returns true if the %PhysicsForce is currently attached to an object.
///    @see PhysicsForce::attach())
/// 
/// </summary>

internal bool fnPhysicsForce_isAttached (string physicsforce)
{
var sbphysicsforce = new StringBuilder(physicsforce, 1024);

return  SafeNativeMethods.mwle_fnPhysicsForce_isAttached(sbphysicsforce)>=1;
}
/// <summary>
/// ( physicsStartSimulation, void, 2, 2, physicsStartSimulation( String worldName ) )
/// 
/// </summary>

internal void fn__physicsStartSimulation (string a1)
{
var sba1 = new StringBuilder(a1, 4096);

SafeNativeMethods.mwle_fn__physicsStartSimulation(sba1);
}
/// <summary>
/// ( physicsStopSimulation, void, 2, 2, physicsStopSimulation( String worldName ) )
/// 
/// </summary>

internal void fn__physicsStopSimulation (string a1)
{
var sba1 = new StringBuilder(a1, 4096);

SafeNativeMethods.mwle_fn__physicsStopSimulation(sba1);
}
/// <summary>
/// ( physicsSimulationEnabled, bool, 1, 1, physicsSimulationEnabled() )
/// 
/// </summary>

internal bool fn__physicsSimulationEnabled ()
{

return  SafeNativeMethods.mwle_fn__physicsSimulationEnabled()>=1;
}
/// <summary>
/// ( physicsGetTimeScale, F32, 1, 1, physicsGetTimeScale() )
/// 
/// </summary>

internal float fn__physicsGetTimeScale ()
{

return  SafeNativeMethods.mwle_fn__physicsGetTimeScale();
}
/// <summary>
/// ( physicsStoreState, void, 1, 1, physicsStoreState() )
/// 
/// </summary>

internal void fn__physicsStoreState ()
{

SafeNativeMethods.mwle_fn__physicsStoreState();
}
/// <summary>
/// @brief Returns if a PhysicsShape has been destroyed or not. )
/// 
/// </summary>

internal bool fnPhysicsShape_isDestroyed (string physicsshape)
{
var sbphysicsshape = new StringBuilder(physicsshape, 1024);

return  SafeNativeMethods.mwle_fnPhysicsShape_isDestroyed(sbphysicsshape)>=1;
}
/// <summary>
/// @brief Disables rendering and physical simulation.
///    Calling destroy() will also spawn any explosions, debris, and/or destroyedShape 
///    defined for it, as well as remove it from the scene graph.
///    Destroyed objects are only created on the server. Ghosting will later update the client.
///    @note This does not actually delete the PhysicsShape. )
/// 
/// </summary>

internal void fnPhysicsShape_destroy (string physicsshape)
{
var sbphysicsshape = new StringBuilder(physicsshape, 1024);

SafeNativeMethods.mwle_fnPhysicsShape_destroy(sbphysicsshape);
}
/// <summary>
/// @brief Restores the shape to its state before being destroyed.
///    Re-enables rendering and physical simulation on the object and 
///    adds it to the client's scene graph. 
///    Has no effect if the shape is not destroyed.)
/// 
/// </summary>

internal void fnPhysicsShape_restore (string physicsshape)
{
var sbphysicsshape = new StringBuilder(physicsshape, 1024);

SafeNativeMethods.mwle_fnPhysicsShape_restore(sbphysicsshape);
}
/// <summary>
/// @brief Adds object to the turret's ignore list.
///    All objects in this list will be ignored by the turret's targeting.
///    @param obj The ShapeBase object to ignore.)
/// 
/// </summary>

internal void fnAITurretShape_addToIgnoreList (string aiturretshape, string obj)
{
var sbaiturretshape = new StringBuilder(aiturretshape, 1024);
var sbobj = new StringBuilder(obj, 1024);

SafeNativeMethods.mwle_fnAITurretShape_addToIgnoreList(sbaiturretshape, sbobj);
}
/// <summary>
/// @brief Removes object from the turret's ignore list.
///    All objects in this list will be ignored by the turret's targeting.
///    @param obj The ShapeBase object to once again allow for targeting.)
/// 
/// </summary>

internal void fnAITurretShape_removeFromIgnoreList (string aiturretshape, string obj)
{
var sbaiturretshape = new StringBuilder(aiturretshape, 1024);
var sbobj = new StringBuilder(obj, 1024);

SafeNativeMethods.mwle_fnAITurretShape_removeFromIgnoreList(sbaiturretshape, sbobj);
}
/// <summary>
/// @brief Set the turret's current state.
///    Normally the turret's state comes from updating the state machine but this method 
///    allows you to override this and jump to the requested state immediately.
///    @param newState The name of the new state.
///    @param force Is true then force the full processing of the new state even if it is the 
///    same as the current state.  If false then only the time out value is reset and the state's 
///    script method is called, if any.)
/// 
/// </summary>

internal void fnAITurretShape_setTurretState (string aiturretshape, string newState, bool force)
{
var sbaiturretshape = new StringBuilder(aiturretshape, 1024);
var sbnewState = new StringBuilder(newState, 4096);

SafeNativeMethods.mwle_fnAITurretShape_setTurretState(sbaiturretshape, sbnewState, force);
}
/// <summary>
/// @brief Activate a turret from a deactive state.)
/// 
/// </summary>

internal void fnAITurretShape_activateTurret (string aiturretshape)
{
var sbaiturretshape = new StringBuilder(aiturretshape, 1024);

SafeNativeMethods.mwle_fnAITurretShape_activateTurret(sbaiturretshape);
}
/// <summary>
/// @brief Deactivate a turret from an active state.)
/// 
/// </summary>

internal void fnAITurretShape_deactivateTurret (string aiturretshape)
{
var sbaiturretshape = new StringBuilder(aiturretshape, 1024);

SafeNativeMethods.mwle_fnAITurretShape_deactivateTurret(sbaiturretshape);
}
/// <summary>
/// @brief Begin scanning for a target.)
/// 
/// </summary>

internal void fnAITurretShape_startScanForTargets (string aiturretshape)
{
var sbaiturretshape = new StringBuilder(aiturretshape, 1024);

SafeNativeMethods.mwle_fnAITurretShape_startScanForTargets(sbaiturretshape);
}
/// <summary>
/// @brief Stop scanning for targets.
///    @note Only impacts the scanning for new targets.  Does not effect a turret's current 
///    target lock.)
/// 
/// </summary>

internal void fnAITurretShape_stopScanForTargets (string aiturretshape)
{
var sbaiturretshape = new StringBuilder(aiturretshape, 1024);

SafeNativeMethods.mwle_fnAITurretShape_stopScanForTargets(sbaiturretshape);
}
/// <summary>
/// @brief Have the turret track the current target.)
/// 
/// </summary>

internal void fnAITurretShape_startTrackingTarget (string aiturretshape)
{
var sbaiturretshape = new StringBuilder(aiturretshape, 1024);

SafeNativeMethods.mwle_fnAITurretShape_startTrackingTarget(sbaiturretshape);
}
/// <summary>
/// @brief Stop the turret from tracking the current target.)
/// 
/// </summary>

internal void fnAITurretShape_stopTrackingTarget (string aiturretshape)
{
var sbaiturretshape = new StringBuilder(aiturretshape, 1024);

SafeNativeMethods.mwle_fnAITurretShape_stopTrackingTarget(sbaiturretshape);
}
/// <summary>
/// @brief Indicates if the turret has a target.
///    @returns True if the turret has a target.)
/// 
/// </summary>

internal bool fnAITurretShape_hasTarget (string aiturretshape)
{
var sbaiturretshape = new StringBuilder(aiturretshape, 1024);

return  SafeNativeMethods.mwle_fnAITurretShape_hasTarget(sbaiturretshape)>=1;
}
/// <summary>
/// @brief Get the turret's current target.
///    @returns The object that is the target's current target, or 0 if no target.)
/// 
/// </summary>

internal string fnAITurretShape_getTarget (string aiturretshape)
{
var returnbuff = new StringBuilder(1024);
var sbaiturretshape = new StringBuilder(aiturretshape, 1024);

SafeNativeMethods.mwle_fnAITurretShape_getTarget(sbaiturretshape, returnbuff);
return returnbuff.ToString();

}
/// <summary>
/// @brief Resets the turret's target tracking.
///    Only resets the internal target tracking.  Does not modify the turret's facing.)
/// 
/// </summary>

internal void fnAITurretShape_resetTarget (string aiturretshape)
{
var sbaiturretshape = new StringBuilder(aiturretshape, 1024);

SafeNativeMethods.mwle_fnAITurretShape_resetTarget(sbaiturretshape);
}
/// <summary>
/// @brief Set the turret's projectile velocity to help lead the target.
///    This value normally comes from AITurretShapeData::weaponLeadVelocity but this method 
///    allows you to override the datablock value.  This can be useful if the turret changes 
///    ammunition, uses a different weapon than the default, is damaged, etc.
///    @note Setting this to 0 will disable target leading.)
/// 
/// </summary>

internal void fnAITurretShape_setWeaponLeadVelocity (string aiturretshape, float velocity)
{
var sbaiturretshape = new StringBuilder(aiturretshape, 1024);

SafeNativeMethods.mwle_fnAITurretShape_setWeaponLeadVelocity(sbaiturretshape, velocity);
}
/// <summary>
/// @brief Get the turret's defined projectile velocity that helps with target leading.
///    @returns The defined weapon projectile speed, or 0 if leading is disabled.)
/// 
/// </summary>

internal float fnAITurretShape_getWeaponLeadVelocity (string aiturretshape)
{
var sbaiturretshape = new StringBuilder(aiturretshape, 1024);

return  SafeNativeMethods.mwle_fnAITurretShape_getWeaponLeadVelocity(sbaiturretshape);
}
/// <summary>
/// @brief Set the firing state of the turret's guns.
///    @param fire Set to true to activate all guns.  False to deactivate them.)
/// 
/// </summary>

internal void fnAITurretShape_setAllGunsFiring (string aiturretshape, bool fire)
{
var sbaiturretshape = new StringBuilder(aiturretshape, 1024);

SafeNativeMethods.mwle_fnAITurretShape_setAllGunsFiring(sbaiturretshape, fire);
}
/// <summary>
/// @brief Set the firing state of the given gun slot.
///    @param slot The gun to modify.  Valid range is 0-3 that corresponds to the weapon mount point.
///    @param fire Set to true to activate the gun.  False to deactivate it.)
/// 
/// </summary>

internal void fnAITurretShape_setGunSlotFiring (string aiturretshape, int slot, bool fire)
{
var sbaiturretshape = new StringBuilder(aiturretshape, 1024);

SafeNativeMethods.mwle_fnAITurretShape_setGunSlotFiring(sbaiturretshape, slot, fire);
}
/// <summary>
/// @brief Recenter the turret's weapon.)
/// 
/// </summary>

internal void fnAITurretShape_recenterTurret (string aiturretshape)
{
var sbaiturretshape = new StringBuilder(aiturretshape, 1024);

SafeNativeMethods.mwle_fnAITurretShape_recenterTurret(sbaiturretshape);
}
/// <summary>
/// @brief Get if the turret is allowed to rotate through moves.
///    @return True if the turret is allowed to rotate through moves. )
/// 
/// </summary>

internal bool fnTurretShape_getAllowManualRotation (string turretshape)
{
var sbturretshape = new StringBuilder(turretshape, 1024);

return  SafeNativeMethods.mwle_fnTurretShape_getAllowManualRotation(sbturretshape)>=1;
}
/// <summary>
/// @brief Set if the turret is allowed to rotate through moves.
///    @param allow If true then the turret may be rotated through moves.)
/// 
/// </summary>

internal void fnTurretShape_setAllowManualRotation (string turretshape, bool allow)
{
var sbturretshape = new StringBuilder(turretshape, 1024);

SafeNativeMethods.mwle_fnTurretShape_setAllowManualRotation(sbturretshape, allow);
}
/// <summary>
/// @brief Get if the turret is allowed to fire through moves.
///    @return True if the turret is allowed to fire through moves. )
/// 
/// </summary>

internal bool fnTurretShape_getAllowManualFire (string turretshape)
{
var sbturretshape = new StringBuilder(turretshape, 1024);

return  SafeNativeMethods.mwle_fnTurretShape_getAllowManualFire(sbturretshape)>=1;
}
/// <summary>
/// @brief Set if the turret is allowed to fire through moves.
///    @param allow If true then the turret may be fired through moves.)
/// 
/// </summary>

internal void fnTurretShape_setAllowManualFire (string turretshape, bool allow)
{
var sbturretshape = new StringBuilder(turretshape, 1024);

SafeNativeMethods.mwle_fnTurretShape_setAllowManualFire(sbturretshape, allow);
}
/// <summary>
/// @brief Get the name of the turret's current state.
/// 
///    The state is one of the following:<ul>
///    <li>Dead - The TurretShape is destroyed.</li>
///    <li>Mounted - The TurretShape is mounted to an object such as a vehicle.</li>
///    <li>Ready - The TurretShape is free to move.  The usual state.</li></ul>
/// 
///    @return The current state; one of: \"Dead\", \"Mounted\", \"Ready\" )
/// 
/// </summary>

internal string fnTurretShape_getState (string turretshape)
{
var returnbuff = new StringBuilder(4096);
var sbturretshape = new StringBuilder(turretshape, 1024);

SafeNativeMethods.mwle_fnTurretShape_getState(sbturretshape, returnbuff);
return returnbuff.ToString();

}
/// <summary>
/// @brief Get Euler rotation of this turret's heading and pitch nodes.
///    @return the orientation of the turret's heading and pitch nodes in the 
///    form of rotations around the X, Y and Z axes in degrees. )
/// 
/// </summary>

internal string fnTurretShape_getTurretEulerRotation (string turretshape)
{
var returnbuff = new StringBuilder(1024);
var sbturretshape = new StringBuilder(turretshape, 1024);

SafeNativeMethods.mwle_fnTurretShape_getTurretEulerRotation(sbturretshape, returnbuff);
return returnbuff.ToString();

}
/// <summary>
/// @brief Set Euler rotation of this turret's heading and pitch nodes in degrees.
///    @param rot The rotation in degrees.  The pitch is the X component and the 
///    heading is the Z component.  The Y component is ignored.)
/// 
/// </summary>

internal void fnTurretShape_setTurretEulerRotation (string turretshape, string rot)
{
var sbturretshape = new StringBuilder(turretshape, 1024);
var sbrot = new StringBuilder(rot, 1024);

SafeNativeMethods.mwle_fnTurretShape_setTurretEulerRotation(sbturretshape, sbrot);
}
/// <summary>
/// @brief Does the turret respawn after it has been destroyed.
///    @returns True if the turret respawns.)
/// 
/// </summary>

internal bool fnTurretShape_doRespawn (string turretshape)
{
var sbturretshape = new StringBuilder(turretshape, 1024);

return  SafeNativeMethods.mwle_fnTurretShape_doRespawn(sbturretshape)>=1;
}
/// <summary>
/// @brief Set whether the vehicle should temporarily use the createHoverHeight 
///    specified in the datablock.This can help avoid problems with spawning.
///    @param enabled true to use the datablock createHoverHeight, false otherwise )
/// 
/// </summary>

internal void fnFlyingVehicle_useCreateHeight (string flyingvehicle, bool enabled)
{
var sbflyingvehicle = new StringBuilder(flyingvehicle, 1024);

SafeNativeMethods.mwle_fnFlyingVehicle_useCreateHeight(sbflyingvehicle, enabled);
}
/// <summary>
/// @brief Set how much the wheel is affected by steering.
///    The steering factor controls how much the wheel is rotated by the vehicle 
///    steering. For example, most cars would have their front wheels set to 1.0, 
///    and their rear wheels set to 0 since only the front wheels should turn.
///    Negative values will turn the wheel in the opposite direction to the steering 
///    angle.
///    @param wheel index of the wheel to set (hub node #)
///    @param steering steering factor from -1 (full inverse) to 1 (full)
///    @return true if successful, false if failed )
/// 
/// </summary>

internal bool fnWheeledVehicle_setWheelSteering (string wheeledvehicle, int wheel, float steering)
{
var sbwheeledvehicle = new StringBuilder(wheeledvehicle, 1024);

return  SafeNativeMethods.mwle_fnWheeledVehicle_setWheelSteering(sbwheeledvehicle, wheel, steering)>=1;
}
/// <summary>
/// @brief Set whether the wheel is powered (has torque applied from the engine).
///    A rear wheel drive car for example would set the front wheels to false, 
///    and the rear wheels to true.
///    @param wheel index of the wheel to set (hub node #)
///    @param powered flag indicating whether to power the wheel or not
///    @return true if successful, false if failed )
/// 
/// </summary>

internal bool fnWheeledVehicle_setWheelPowered (string wheeledvehicle, int wheel, bool powered)
{
var sbwheeledvehicle = new StringBuilder(wheeledvehicle, 1024);

return  SafeNativeMethods.mwle_fnWheeledVehicle_setWheelPowered(sbwheeledvehicle, wheel, powered)>=1;
}
/// <summary>
/// @brief Set the WheeledVehicleTire datablock for this wheel.
///    @param wheel index of the wheel to set (hub node #)
///    @param tire WheeledVehicleTire datablock
///    @return true if successful, false if failed
///    @tsexample
///    %obj.setWheelTire( 0, FrontTire );
///    @endtsexample )
/// 
/// </summary>

internal bool fnWheeledVehicle_setWheelTire (string wheeledvehicle, int wheel, string tire)
{
var sbwheeledvehicle = new StringBuilder(wheeledvehicle, 1024);
var sbtire = new StringBuilder(tire, 1024);

return  SafeNativeMethods.mwle_fnWheeledVehicle_setWheelTire(sbwheeledvehicle, wheel, sbtire)>=1;
}
/// <summary>
/// @brief Set the WheeledVehicleSpring datablock for this wheel.
///    @param wheel index of the wheel to set (hub node #)
///    @param spring WheeledVehicleSpring datablock
///    @return true if successful, false if failed
///    @tsexample
///    %obj.setWheelSpring( 0, FrontSpring );
///    @endtsexample )
/// 
/// </summary>

internal bool fnWheeledVehicle_setWheelSpring (string wheeledvehicle, int wheel, string spring)
{
var sbwheeledvehicle = new StringBuilder(wheeledvehicle, 1024);
var sbspring = new StringBuilder(spring, 1024);

return  SafeNativeMethods.mwle_fnWheeledVehicle_setWheelSpring(sbwheeledvehicle, wheel, sbspring)>=1;
}
/// <summary>
/// @brief Get the number of wheels on this vehicle.
///    @return the number of wheels (equal to the number of hub nodes defined in the model) )
/// 
/// </summary>

internal int fnWheeledVehicle_getWheelCount (string wheeledvehicle)
{
var sbwheeledvehicle = new StringBuilder(wheeledvehicle, 1024);

return  SafeNativeMethods.mwle_fnWheeledVehicle_getWheelCount(sbwheeledvehicle);
}
/// <summary>
/// @brief Saves the terrain block's terrain file to the specified file name.
/// 
/// 				   @param fileName Name and path of file to save terrain data to.
/// 
/// 				   @return True if file save was successful, false otherwise)
/// 
/// </summary>

internal bool fnTerrainBlock_save (string terrainblock, string fileName)
{
var sbterrainblock = new StringBuilder(terrainblock, 1024);
var sbfileName = new StringBuilder(fileName, 4096);

return  SafeNativeMethods.mwle_fnTerrainBlock_save(sbterrainblock, sbfileName)>=1;
}
/// <summary>
/// ( enableSamples, void, 2, 3, (pattern, [state]) -
/// 				@brief Enable sampling for all keys that match the given name 
/// 				pattern. Slashes are treated as separators.
/// 				@ingroup Rendering)
/// 
/// </summary>

internal void fn__enableSamples (string a1, string a2)
{
var sba1 = new StringBuilder(a1, 4096);
var sba2 = new StringBuilder(a2, 4096);

SafeNativeMethods.mwle_fn__enableSamples(sba1, sba2);
}
/// <summary>
/// (Settings, findFirstValue, const char*, 2, 5, settingObj.findFirstValue();)
/// 
/// </summary>

internal string fnSettings_findFirstValue (string settings, string a2, string a3, string a4)
{
var returnbuff = new StringBuilder(4096);
var sbsettings = new StringBuilder(settings, 1024);
var sba2 = new StringBuilder(a2, 4096);
var sba3 = new StringBuilder(a3, 4096);
var sba4 = new StringBuilder(a4, 4096);

SafeNativeMethods.mwle_fnSettings_findFirstValue(sbsettings, sba2, sba3, sba4, returnbuff);
return returnbuff.ToString();

}
/// <summary>
/// (Settings, findNextValue, const char*, 2, 2, settingObj.findNextValue();)
/// 
/// </summary>

internal string fnSettings_findNextValue (string settings)
{
var returnbuff = new StringBuilder(4096);
var sbsettings = new StringBuilder(settings, 1024);

SafeNativeMethods.mwle_fnSettings_findNextValue(sbsettings, returnbuff);
return returnbuff.ToString();

}
/// <summary>
/// (Settings, setValue, void, 3, 4, settingObj.setValue(settingName, value);)
/// 
/// </summary>

internal void fnSettings_setValue (string settings, string a2, string a3)
{
var sbsettings = new StringBuilder(settings, 1024);
var sba2 = new StringBuilder(a2, 4096);
var sba3 = new StringBuilder(a3, 4096);

SafeNativeMethods.mwle_fnSettings_setValue(sbsettings, sba2, sba3);
}
/// <summary>
/// (Settings, setDefaultValue, void, 4, 4, settingObj.setDefaultValue(settingName, value);)
/// 
/// </summary>

internal void fnSettings_setDefaultValue (string settings, string a2, string a3)
{
var sbsettings = new StringBuilder(settings, 1024);
var sba2 = new StringBuilder(a2, 4096);
var sba3 = new StringBuilder(a3, 4096);

SafeNativeMethods.mwle_fnSettings_setDefaultValue(sbsettings, sba2, sba3);
}
/// <summary>
/// (Settings, value, const char*, 3, 4, settingObj.value(settingName, defaultValue);)
/// 
/// </summary>

internal string fnSettings_value (string settings, string a2, string a3)
{
var returnbuff = new StringBuilder(4096);
var sbsettings = new StringBuilder(settings, 1024);
var sba2 = new StringBuilder(a2, 4096);
var sba3 = new StringBuilder(a3, 4096);

SafeNativeMethods.mwle_fnSettings_value(sbsettings, sba2, sba3, returnbuff);
return returnbuff.ToString();

}
/// <summary>
/// (Settings, remove, void, 3, 4, settingObj.remove(settingName, includeDefaults = false);)
/// 
/// </summary>

internal void fnSettings_remove (string settings, string a2, string a3)
{
var sbsettings = new StringBuilder(settings, 1024);
var sba2 = new StringBuilder(a2, 4096);
var sba3 = new StringBuilder(a3, 4096);

SafeNativeMethods.mwle_fnSettings_remove(sbsettings, sba2, sba3);
}
/// <summary>
/// (Settings, write, bool, 2, 2, %success = settingObj.write();)
/// 
/// </summary>

internal bool fnSettings_write (string settings)
{
var sbsettings = new StringBuilder(settings, 1024);

return  SafeNativeMethods.mwle_fnSettings_write(sbsettings)>=1;
}
/// <summary>
/// (Settings, read, bool, 2, 2, %success = settingObj.read();)
/// 
/// </summary>

internal bool fnSettings_read (string settings)
{
var sbsettings = new StringBuilder(settings, 1024);

return  SafeNativeMethods.mwle_fnSettings_read(sbsettings)>=1;
}
/// <summary>
/// (Settings, beginGroup, void, 3, 4, settingObj.beginGroup(groupName, fromStart = false);)
/// 
/// </summary>

internal void fnSettings_beginGroup (string settings, string a2, string a3)
{
var sbsettings = new StringBuilder(settings, 1024);
var sba2 = new StringBuilder(a2, 4096);
var sba3 = new StringBuilder(a3, 4096);

SafeNativeMethods.mwle_fnSettings_beginGroup(sbsettings, sba2, sba3);
}
/// <summary>
/// (Settings, endGroup, void, 2, 2, settingObj.endGroup();)
/// 
/// </summary>

internal void fnSettings_endGroup (string settings)
{
var sbsettings = new StringBuilder(settings, 1024);

SafeNativeMethods.mwle_fnSettings_endGroup(sbsettings);
}
/// <summary>
/// (Settings, clearGroups, void, 2, 2, settingObj.clearGroups();)
/// 
/// </summary>

internal void fnSettings_clearGroups (string settings)
{
var sbsettings = new StringBuilder(settings, 1024);

SafeNativeMethods.mwle_fnSettings_clearGroups(sbsettings);
}
/// <summary>
/// (Settings, getCurrentGroups, const char*, 2, 2, settingObj.getCurrentGroups();)
/// 
/// </summary>

internal string fnSettings_getCurrentGroups (string settings)
{
var returnbuff = new StringBuilder(4096);
var sbsettings = new StringBuilder(settings, 1024);

SafeNativeMethods.mwle_fnSettings_getCurrentGroups(sbsettings, returnbuff);
return returnbuff.ToString();

}
/// <summary>
/// ( CompoundUndoAction, addAction, void, 3, 3, addAction( UndoAction ) )
/// 
/// </summary>

internal void fnCompoundUndoAction_addAction (string compoundundoaction, string a2)
{
var sbcompoundundoaction = new StringBuilder(compoundundoaction, 1024);
var sba2 = new StringBuilder(a2, 4096);

SafeNativeMethods.mwle_fnCompoundUndoAction_addAction(sbcompoundundoaction, sba2);
}
/// <summary>
/// (UndoManager, clearAll, void, 2, 2, Clears the undo manager.)
/// 
/// </summary>

internal void fnUndoManager_clearAll (string undomanager)
{
var sbundomanager = new StringBuilder(undomanager, 1024);

SafeNativeMethods.mwle_fnUndoManager_clearAll(sbundomanager);
}
/// <summary>
/// (UndoManager, getUndoCount, S32, 2, 2, )
/// 
/// </summary>

internal int fnUndoManager_getUndoCount (string undomanager)
{
var sbundomanager = new StringBuilder(undomanager, 1024);

return  SafeNativeMethods.mwle_fnUndoManager_getUndoCount(sbundomanager);
}
/// <summary>
/// (UndoManager, getUndoName, const char*, 3, 3, (index))
/// 
/// </summary>

internal string fnUndoManager_getUndoName (string undomanager, string a2)
{
var returnbuff = new StringBuilder(4096);
var sbundomanager = new StringBuilder(undomanager, 1024);
var sba2 = new StringBuilder(a2, 4096);

SafeNativeMethods.mwle_fnUndoManager_getUndoName(sbundomanager, sba2, returnbuff);
return returnbuff.ToString();

}
/// <summary>
/// (UndoManager, getUndoAction, S32, 3, 3, (index))
/// 
/// </summary>

internal int fnUndoManager_getUndoAction (string undomanager, string a2)
{
var sbundomanager = new StringBuilder(undomanager, 1024);
var sba2 = new StringBuilder(a2, 4096);

return  SafeNativeMethods.mwle_fnUndoManager_getUndoAction(sbundomanager, sba2);
}
/// <summary>
/// (UndoManager, getRedoCount, S32, 2, 2, )
/// 
/// </summary>

internal int fnUndoManager_getRedoCount (string undomanager)
{
var sbundomanager = new StringBuilder(undomanager, 1024);

return  SafeNativeMethods.mwle_fnUndoManager_getRedoCount(sbundomanager);
}
/// <summary>
/// (UndoManager, getRedoName, const char*, 3, 3, (index))
/// 
/// </summary>

internal string fnUndoManager_getRedoName (string undomanager, string a2)
{
var returnbuff = new StringBuilder(4096);
var sbundomanager = new StringBuilder(undomanager, 1024);
var sba2 = new StringBuilder(a2, 4096);

SafeNativeMethods.mwle_fnUndoManager_getRedoName(sbundomanager, sba2, returnbuff);
return returnbuff.ToString();

}
/// <summary>
/// (UndoManager, getRedoAction, S32, 3, 3, (index))
/// 
/// </summary>

internal int fnUndoManager_getRedoAction (string undomanager, string a2)
{
var sbundomanager = new StringBuilder(undomanager, 1024);
var sba2 = new StringBuilder(a2, 4096);

return  SafeNativeMethods.mwle_fnUndoManager_getRedoAction(sbundomanager, sba2);
}
/// <summary>
/// (UndoAction, addToManager, void, 2, 3, action.addToManager([undoManager]))
/// 
/// </summary>

internal void fnUndoAction_addToManager (string undoaction, string a2)
{
var sbundoaction = new StringBuilder(undoaction, 1024);
var sba2 = new StringBuilder(a2, 4096);

SafeNativeMethods.mwle_fnUndoAction_addToManager(sbundoaction, sba2);
}
/// <summary>
/// ( UndoAction, undo, void, 2, 2, () - Undo action contained in undo. )
/// 
/// </summary>

internal void fnUndoAction_undo (string undoaction)
{
var sbundoaction = new StringBuilder(undoaction, 1024);

SafeNativeMethods.mwle_fnUndoAction_undo(sbundoaction);
}
/// <summary>
/// ( UndoAction, redo, void, 2, 2, () - Reo action contained in undo. )
/// 
/// </summary>

internal void fnUndoAction_redo (string undoaction)
{
var sbundoaction = new StringBuilder(undoaction, 1024);

SafeNativeMethods.mwle_fnUndoAction_redo(sbundoaction);
}
/// <summary>
/// (UndoManager, undo, void, 2, 2, UndoManager.undo();)
/// 
/// </summary>

internal void fnUndoManager_undo (string undomanager)
{
var sbundomanager = new StringBuilder(undomanager, 1024);

SafeNativeMethods.mwle_fnUndoManager_undo(sbundomanager);
}
/// <summary>
/// (UndoManager, redo, void, 2, 2, UndoManager.redo();)
/// 
/// </summary>

internal void fnUndoManager_redo (string undomanager)
{
var sbundomanager = new StringBuilder(undomanager, 1024);

SafeNativeMethods.mwle_fnUndoManager_redo(sbundomanager);
}
/// <summary>
/// (UndoManager, getNextUndoName, const char *, 2, 2, UndoManager.getNextUndoName();)
/// 
/// </summary>

internal string fnUndoManager_getNextUndoName (string undomanager)
{
var returnbuff = new StringBuilder(4096);
var sbundomanager = new StringBuilder(undomanager, 1024);

SafeNativeMethods.mwle_fnUndoManager_getNextUndoName(sbundomanager, returnbuff);
return returnbuff.ToString();

}
/// <summary>
/// (UndoManager, getNextRedoName, const char *, 2, 2, UndoManager.getNextRedoName();)
/// 
/// </summary>

internal string fnUndoManager_getNextRedoName (string undomanager)
{
var returnbuff = new StringBuilder(4096);
var sbundomanager = new StringBuilder(undomanager, 1024);

SafeNativeMethods.mwle_fnUndoManager_getNextRedoName(sbundomanager, returnbuff);
return returnbuff.ToString();

}
/// <summary>
/// ( UndoManager, pushCompound, const char*, 2, 3, ( string name=\"\" ) - Push a CompoundUndoAction onto the compound stack for assembly. )
/// 
/// </summary>

internal string fnUndoManager_pushCompound (string undomanager, string a2)
{
var returnbuff = new StringBuilder(4096);
var sbundomanager = new StringBuilder(undomanager, 1024);
var sba2 = new StringBuilder(a2, 4096);

SafeNativeMethods.mwle_fnUndoManager_pushCompound(sbundomanager, sba2, returnbuff);
return returnbuff.ToString();

}
/// <summary>
/// ( UndoManager, popCompound, void, 2, 3, ( bool discard=false ) - Pop the current CompoundUndoAction off the stack. )
/// 
/// </summary>

internal void fnUndoManager_popCompound (string undomanager, string a2)
{
var sbundomanager = new StringBuilder(undomanager, 1024);
var sba2 = new StringBuilder(a2, 4096);

SafeNativeMethods.mwle_fnUndoManager_popCompound(sbundomanager, sba2);
}
/// <summary>
/// ( EventManager, registerEvent, bool, 3, 3, ( String event )
///               Register an event with the event manager.
///               @param event The event to register.
///               @return Whether or not the event was registered successfully. )
/// 
/// </summary>

internal bool fnEventManager_registerEvent (string eventmanager, string a2)
{
var sbeventmanager = new StringBuilder(eventmanager, 1024);
var sba2 = new StringBuilder(a2, 4096);

return  SafeNativeMethods.mwle_fnEventManager_registerEvent(sbeventmanager, sba2)>=1;
}
/// <summary>
/// ( EventManager, unregisterEvent, void, 3, 3, ( String event )
///               Remove an event from the EventManager.
///               @param event The event to remove. )
/// 
/// </summary>

internal void fnEventManager_unregisterEvent (string eventmanager, string a2)
{
var sbeventmanager = new StringBuilder(eventmanager, 1024);
var sba2 = new StringBuilder(a2, 4096);

SafeNativeMethods.mwle_fnEventManager_unregisterEvent(sbeventmanager, sba2);
}
/// <summary>
/// ( EventManager, isRegisteredEvent, bool, 3, 3, ( String event )
///               Check if an event is registered or not.
///               @param event The event to check.
///               @return Whether or not the event exists. )
/// 
/// </summary>

internal bool fnEventManager_isRegisteredEvent (string eventmanager, string a2)
{
var sbeventmanager = new StringBuilder(eventmanager, 1024);
var sba2 = new StringBuilder(a2, 4096);

return  SafeNativeMethods.mwle_fnEventManager_isRegisteredEvent(sbeventmanager, sba2)>=1;
}
/// <summary>
/// ( EventManager, postEvent, bool, 3, 4, ( String event, String data )
///               ~Trigger an event.
///               @param event The event to trigger.
///               @param data The data associated with the event.
///               @return Whether or not the event was dispatched successfully. )
/// 
/// </summary>

internal bool fnEventManager_postEvent (string eventmanager, string a2, string a3)
{
var sbeventmanager = new StringBuilder(eventmanager, 1024);
var sba2 = new StringBuilder(a2, 4096);
var sba3 = new StringBuilder(a3, 4096);

return  SafeNativeMethods.mwle_fnEventManager_postEvent(sbeventmanager, sba2, sba3)>=1;
}
/// <summary>
/// ( EventManager, subscribe, bool, 4, 5, ( SimObject listener, String event, String callback )
///               Subscribe a listener to an event.
///               @param listener The listener to subscribe.
///               @param event The event to subscribe to.
///               @param callback Optional method name to receive the event notification. If this is not specified, \"on[event]\" will be used.
///               @return Whether or not the subscription was successful. )
/// 
/// </summary>

internal bool fnEventManager_subscribe (string eventmanager, string a2, string a3, string a4)
{
var sbeventmanager = new StringBuilder(eventmanager, 1024);
var sba2 = new StringBuilder(a2, 4096);
var sba3 = new StringBuilder(a3, 4096);
var sba4 = new StringBuilder(a4, 4096);

return  SafeNativeMethods.mwle_fnEventManager_subscribe(sbeventmanager, sba2, sba3, sba4)>=1;
}
/// <summary>
/// ( EventManager, remove, void, 4, 4, ( SimObject listener, String event )
///               Remove a listener from an event.
///               @param listener The listener to remove.
///               @param event The event to be removed from.)
/// 
/// </summary>

internal void fnEventManager_remove (string eventmanager, string a2, string a3)
{
var sbeventmanager = new StringBuilder(eventmanager, 1024);
var sba2 = new StringBuilder(a2, 4096);
var sba3 = new StringBuilder(a3, 4096);

SafeNativeMethods.mwle_fnEventManager_remove(sbeventmanager, sba2, sba3);
}
/// <summary>
/// ( EventManager, removeAll, void, 3, 3, ( SimObject listener )
///               Remove a listener from all events.
///               @param listener The listener to remove.)
/// 
/// </summary>

internal void fnEventManager_removeAll (string eventmanager, string a2)
{
var sbeventmanager = new StringBuilder(eventmanager, 1024);
var sba2 = new StringBuilder(a2, 4096);

SafeNativeMethods.mwle_fnEventManager_removeAll(sbeventmanager, sba2);
}
/// <summary>
/// ( EventManager, dumpEvents, void, 2, 2, ()
///               Print all registered events to the console. )
/// 
/// </summary>

internal void fnEventManager_dumpEvents (string eventmanager)
{
var sbeventmanager = new StringBuilder(eventmanager, 1024);

SafeNativeMethods.mwle_fnEventManager_dumpEvents(sbeventmanager);
}
/// <summary>
/// ( EventManager, dumpSubscribers, void, 2, 3, ( String event )
///               Print all subscribers to an event to the console.
///               @param event The event whose subscribers are to be printed. If this parameter isn't specified, all events will be dumped. )
/// 
/// </summary>

internal void fnEventManager_dumpSubscribers (string eventmanager, string a2)
{
var sbeventmanager = new StringBuilder(eventmanager, 1024);
var sba2 = new StringBuilder(a2, 4096);

SafeNativeMethods.mwle_fnEventManager_dumpSubscribers(sbeventmanager, sba2);
}
/// <summary>
/// (Message, getType, const char *, 2, 2, () Get message type (script class name or C++ class name if no script defined class))
/// 
/// </summary>

internal string fnMessage_getType (string message)
{
var returnbuff = new StringBuilder(4096);
var sbmessage = new StringBuilder(message, 1024);

SafeNativeMethods.mwle_fnMessage_getType(sbmessage, returnbuff);
return returnbuff.ToString();

}
/// <summary>
/// (Message, addReference, void, 2, 2, () Increment the reference count for this message)
/// 
/// </summary>

internal void fnMessage_addReference (string message)
{
var sbmessage = new StringBuilder(message, 1024);

SafeNativeMethods.mwle_fnMessage_addReference(sbmessage);
}
/// <summary>
/// (Message, freeReference, void, 2, 2, () Decrement the reference count for this message)
/// 
/// </summary>

internal void fnMessage_freeReference (string message)
{
var sbmessage = new StringBuilder(message, 1024);

SafeNativeMethods.mwle_fnMessage_freeReference(sbmessage);
}
/// <summary>
/// (dnEval_Direct_New, const char *, 2, 20, () )
/// 
/// </summary>

internal string fn__dnEval_Direct_New (string a1, string a2, string a3, string a4, string a5, string a6, string a7, string a8, string a9, string a10, string a11, string a12, string a13, string a14, string a15, string a16, string a17, string a18, string a19)
{
var returnbuff = new StringBuilder(4096);
var sba1 = new StringBuilder(a1, 4096);
var sba2 = new StringBuilder(a2, 4096);
var sba3 = new StringBuilder(a3, 4096);
var sba4 = new StringBuilder(a4, 4096);
var sba5 = new StringBuilder(a5, 4096);
var sba6 = new StringBuilder(a6, 4096);
var sba7 = new StringBuilder(a7, 4096);
var sba8 = new StringBuilder(a8, 4096);
var sba9 = new StringBuilder(a9, 4096);
var sba10 = new StringBuilder(a10, 4096);
var sba11 = new StringBuilder(a11, 4096);
var sba12 = new StringBuilder(a12, 4096);
var sba13 = new StringBuilder(a13, 4096);
var sba14 = new StringBuilder(a14, 4096);
var sba15 = new StringBuilder(a15, 4096);
var sba16 = new StringBuilder(a16, 4096);
var sba17 = new StringBuilder(a17, 4096);
var sba18 = new StringBuilder(a18, 4096);
var sba19 = new StringBuilder(a19, 4096);

SafeNativeMethods.mwle_fn__dnEval_Direct_New(sba1, sba2, sba3, sba4, sba5, sba6, sba7, sba8, sba9, sba10, sba11, sba12, sba13, sba14, sba15, sba16, sba17, sba18, sba19, returnbuff);
return returnbuff.ToString();

}
/// <summary>
///  ),@brief Sends a string to DotNet @script csharp or vb.)
/// 
/// </summary>

internal string fn_dnEval (string script)
{
var returnbuff = new StringBuilder(4096);
var sbscript = new StringBuilder(script, 4096);

SafeNativeMethods.mwle_fn_dnEval(sbscript, returnbuff);
return returnbuff.ToString();

}
/// <summary>
/// Returns the ghost-index for an object.
///                    @ingroup AFX)
/// 
/// </summary>

internal int fnNetConnection_GetGhostIndex (string netconnection, string obj)
{
var sbnetconnection = new StringBuilder(netconnection, 1024);
var sbobj = new StringBuilder(obj, 1024);

return  SafeNativeMethods.mwle_fnNetConnection_GetGhostIndex(sbnetconnection, sbobj);
}
/// <summary>
/// Resolves a ghost-index into an object ID.
///                    @ingroup AFX)
/// 
/// </summary>

internal int fnNetConnection_ResolveGhost (string netconnection, int ghostIndex)
{
var sbnetconnection = new StringBuilder(netconnection, 1024);

return  SafeNativeMethods.mwle_fnNetConnection_ResolveGhost(sbnetconnection, ghostIndex);
}
	}
}

