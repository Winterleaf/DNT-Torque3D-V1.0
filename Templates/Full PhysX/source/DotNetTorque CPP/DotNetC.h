// Copyright (C) 2012 Winterleaf Entertainment L,L,C.
// 
// THE SOFTW ARE IS PROVIDED ON AN ? AS IS? BASIS, WITHOUT W ARRANTY OF ANY KIND,
// INCLUDING WITHOUT LIMIT ATION THE W ARRANTIES OF MERCHANT ABILITY, FITNESS
// FOR A PARTICULAR PURPOSE OR NON-INFRINGEMENT . THE ENTIRE RISK AS TO THE
// QUALITY AND PERFORMANCE OF THE SOFTW ARE IS THE RESPONSIBILITY OF LICENSEE.
// SHOULD THE SOFTW ARE PROVE DEFECTIVE IN ANY RESPECT , LICENSEE AND NOT LICEN -
// SOR OR ITS SUPPLIERS OR RESELLERS ASSUMES THE ENTIRE COST OF AN Y SERVICE AND
// REPAIR. THIS DISCLAIMER OF W ARRANTY CONSTITUTES AN ESSENTIAL PART OF THIS
// AGREEMENT. NO USE OF THE SOFTW ARE IS AUTHORIZED HEREUNDER EXCEPT UNDER
// THIS DISCLAIMER.
// 
// The use of the WinterLeaf Entertainment LLC DotNetT orque (?DNT ?) and DotNetT orque
// Customizer (?DNTC?)is governed by this license agreement (? Agreement?).
// 
// R E S T R I C T I O N S
// 
// (a) Licensee may not: (i) create any derivative works of DNT or DNTC, including but not
// limited to translations, localizations, technology add-ons, or game making software
// other than Games; (ii) reverse engineer , or otherwise attempt to derive the algorithms
// for DNT or DNTC (iii) redistribute, encumber , sell, rent, lease, sublicense, or otherwise
// transfer rights to DNT or DNTC; or (iv) remove or alter any tra demark, logo, copyright
// or other proprietary notices, legends, symbols or labels in DNT or DNTC; or (iiv) use
// the Software to develop or distribute any software that compete s with the Software
// without WinterLeaf Entertainment?s prior written consent; or (i iiv) use the Software for
// any illegal purpose.
// (b) Licensee may not distribute the DNTC in any manner.
// 
// LI C E N S E G R A N T .
// This license allows companies of any size, government entities or individuals to cre -
// ate, sell, rent, lease, or otherwise profit commercially from, games using executables
// created from the source code of DNT
// 
// **********************************************************************************
// **********************************************************************************
// **********************************************************************************
// THE SOURCE CODE GENERATED BY DNTC CAN BE  DISTRIBUTED PUBLICLY PROVIDED THAT THE 
// DISTRIBUTOR PROVIDES  THE GENERATE SOURCE CODE FREE OF CHARGE.
// 
// THIS SOURCE CODE (DNT) CAN BE DISTRIBUTED PUBLICLY PROVIDED THAT THE DISTRIBUTOR 
// PROVIDES  THE SOURCE CODE (DNT) FREE OF CHARGE.
// **********************************************************************************
// **********************************************************************************
// **********************************************************************************
// 
// Please visit http://www.winterleafentertainment.com for more information about the project and latest updates.
// 
// Last updated: 10/18/2012
// 
#include "gui/worldEditor/worldEditorSelection.h"
#include "platform/platformRedBook.h"
#include "postFx/postEffect.h"
#include "app/auth.h"
#include "app/game.h"
//#include "app/net/net.cpp"
#include "app/net/serverQuery.h"
#include "collision/earlyOutPolyList.h"
#include "collision/extrudedPolyList.h"
#include "console/arrayObject.h"
#include "console/ast.h"
#include "console/compiler.h"
#include "console/console.h"
#include "console/consoleInternal.h"
#include "console/consoleTypes.h"
#include "console/engineAPI.h"
#include "console/simBase.h"
#include "console/simSet.h"
#include "core/dnet.h"
#include "core/idGenerator.h"
#include "core/stream/bitStream.h"
#include "core/stream/fileStream.h"
#include "core/strings/findMatch.h"
#include "core/strings/stringUnit.h"
#include "core/strings/unicode.h"
#include "core/util/journal/journal.h"
#include "core/util/safeDelete.h"
#include "core/util/uuid.h"

#include "gfx/gfxDebugEvent.h"
#include "gfx/gfxDrawUtil.h"
#include "gfx/gfxTransformSaver.h"
#include "gfx/primBuilder.h"
#include "gui/core/guiCanvas.h"
#include "gui/worldEditor/editor.h"
#include "materials/materialFeatureTypes.h"
#include "materials/materialManager.h"
#include "math/mathIO.h" 
#include "math/mMathFn.h"  
#include "math/mTransform.h"
#include "math/util/frustum.h"
#include "math/mPoint3.h"
#include "platform/event.h"
#include "platform/platform.h"
#include "platform/platformInput.h"
#include "platform/profiler.h"
#include "platform/threads/semaphore.h"  
#include "platformWin32/platformWin32.h"
#include "platformWin32/winConsole.h"
#include "platformWin32/winDirectInput.h"
#include "renderInstance/renderBinManager.h"
#include "scene/pathManager.h"
#include "scene/sceneContainer.h"
#include "scene/sceneManager.h"
#include "scene/sceneObject.h"
#include "scene/sceneRenderState.h"
#include "scene/simPath.h"
#include "sfx/sfxDescription.h"
#include "sfx/sfxModifier.h"
#include "sfx/sfxProfile.h"
#include "sfx/sfxSource.h"
#include "sfx/sfxSystem.h"
#include "sfx/sfxTrack.h"
#include "sfx/sfxTypes.h"
#include "sim/netConnection.h"
#include "sim/netObject.h"
#include "T3D/camera.h"
#include "T3D/containerQuery.h" 
#include "T3D/gameBase/gameConnection.h"
#include "T3D/gameBase/gameConnectionEvents.h"
#include "T3D/gameBase/gameProcess.h"
#include "T3D/missionArea.h"
#include "T3D/physics/physicsPlugin.h"
#include "T3D/player.h"
#include "T3D/shapeBase.h"
#include "T3D/vehicles/vehicle.h"
#include "T3D/vehicles/wheeledVehicle.h"
#include "terrain/terrData.h"
#include "ts/tsMaterialList.h"
#include "ts/tsPartInstance.h"
#include "ts/tsShapeInstance.h"
#include "util/messaging/eventManager.h"  
#include <cwchar>
#include <string>
#include <vector>
#include "gui/editor/guiGraphCtrl.h"
#include "gui/utility/messageVector.h"
#include "gui/worldEditor/worldEditor.h"
#include "T3D/convexShape.h"


 #include "gui/containers/guiContainer.h"


#include "sim/netObject.h"
#include "app/net/httpObject.h"
#include "console/SimXMLDocument.h"
#include "core/fileObject.h"
#include "core/stream/fileStreamObject.h"
#include "core/util/zip/zipObject.h"
#include "core/util/safeDelete.h"
#include "environment/decalRoad.h"
#include "console/consoleTypes.h"
#include "environment/meshRoad.h"
#include "renderInstance/renderPassManager.h"
#include "collision/collision.h"
#include "math/util/frustum.h"
#include "math/mathUtils.h"
#include "gfx/gfxPrimitiveBuffer.h"
#include "gfx/gfxTextureHandle.h"
#include "gfx/gfxTransformSaver.h"
#include "gfx/primBuilder.h"
#include "gfx/gfxDrawUtil.h"
#include "scene/sceneRenderState.h"
#include "scene/sceneManager.h"
#include "gui/core/guiCanvas.h"
#include "gui/buttons/guiButtonCtrl.h"
#include "gui/worldEditor/undoActions.h"
#include "T3D/gameBase/gameConnection.h"
#include "gfx/sim/debugDraw.h"
#include "materials/materialDefinition.h"
#include "T3D/prefab.h"
#include "environment/river.h"
#include "environment/scatterSky.h"

#include "forest/forestWindEmitter.h"

#include "forest/forestWindMgr.h"
#include "gui/buttons/guiBitmapButtonCtrl.h"
#include "gui/buttons/guiCheckBoxCtrl.h"
#include "gui/buttons/guiIconButtonCtrl.h"
#include "gui/buttons/guiSwatchButtonCtrl.h"
#include "gui/containers/guiAutoScrollCtrl.h"
#include "gui/containers/guiDynamicCtrlArrayCtrl.h"
#include "gui/containers/guiFormCtrl.h"
#include "gui/containers/guiFrameCtrl.h"
#include "gui/containers/guiPaneCtrl.h"
#include "gui/containers/guiRolloutCtrl.h"
#include "gui/containers/guiScrollCtrl.h"
#include "gui/containers/guiTabBookCtrl.h"
#include "gui/controls/guiBitmapCtrl.h"
#include "gui/controls/guiDirectoryFileListCtrl.h"
#include "gui/controls/guiGameListMenuCtrl.h"
#include "gui/controls/guiGameListOptionsCtrl.h"
#include "gui/controls/guiMLTextCtrl.h"
#include "gui/controls/guiPopUpCtrlEx.h"
#include "gui/controls/guiSliderCtrl.h"
#include "gui/core/guiDefaultControlRender.h"
#include "gui/game/guiMessageVectorCtrl.h"
#include "gui/controls/guiTreeViewCtrl.h"
#include "gui/editor/guiImageList.h"
#include "gui/editor/guiShapeEdPreview.h"
#include "gui/theora/guiTheoraCtrl.h"
#include "gui/game/guiProgressBitmapCtrl.h"
#include "gui/worldEditor/guiMissionArea.h"
#include "interior/interior.h"
#include "platform/nativeDialogs/fileDialog.h"
#include "renderInstance/renderPassStateToken.h"
#include "sfx/sfxController.h"
//#include "sfx/fmod/sfxFMODEventGroup.h"
#include "sim/actionMap.h"
#include "T3D/aiPlayer.h"
#include "T3D/debris.h"
#include "T3D/groundPlane.h"
#include "T3D/guiMaterialPreview.h"
#include "T3D/guiObjectView.h"
#include "T3D/item.h"
#include "T3D/lightBase.h"
#include "T3D/lightDescription.h"
#include "T3D/pathCamera.h"
#include "T3D/physicalZone.h"
#include "T3D/portal.h"
#include "T3D/projectile.h"
#include "T3D/proximityMine.h"
#include "T3D/trigger.h"
#include "T3D/tsStatic.h"
#include "T3D/examples/renderMeshExample.h"
#include "T3D/fx/lightning.h"
#include "T3D/fx/precipitation.h"
#include "T3D/fx/particleEmitter.h"
#include "T3D/fx/particleEmitterNode.h"
#include "T3D/physics/physicsForce.h"

#include "T3D/physics/physicsPlugin.h"
#include "T3D/physics/physicsWorld.h"
#include "T3D/physics/physicsBody.h"
#include "T3D/turret/aiTurretShape.h"
#include "T3D/physics/physicsShape.h"
#include "T3D/vehicles/flyingVehicle.h"
#include "core/util/path.h"
#include "app/badWordFilter.h"
#include "console/console.h"
#include "console/consoleInternal.h"

#include "platform/platform.h"
#include "gfx/video/videoCapture.h"

#include "console/console.h"
#include "core/strings/stringFunctions.h"
#include "core/util/journal/journal.h"
#include "core/module.h"
#include "gui/core/guiCanvas.h"
#include "gfx/gfxTextureManager.h"
#include "console/engineAPI.h"

#include "sfx/sfxProvider.h"
#include "T3D/decal/decalInstance.h"
#include "T3D/cameraSpline.h"
#include "gfx/screenshot.h"
#include "T3D/fx/fxFoliageReplicator.h"
#include "T3D/fx/fxShapeReplicator.h"

#include "scene/reflectionManager.h"
#include "component/dynamicConsoleMethodComponent.h"
#include "component/simComponent.h"
#include "console/consoleLogger.h"
#include "console/fieldBrushObject.h"
#include "console/persistenceManager.h"
#include "console/simPersistSet.h"
#include "environment/editors/guiMeshRoadEditorCtrl.h"
#include "environment/editors/guiRiverEditorCtrl.h"
#include "environment/editors/guiRoadEditorCtrl.h"
#include "environment/skyBox.h"
#include "environment/sun.h"
#include "forest/editor/forestBrushElement.h"
#include "forest/editor/forestBrushTool.h"
#include "forest/editor/forestEditorCtrl.h"
#include "forest/editor/forestSelectionTool.h"
#include "forest/forest.h"
#include "forest/forestItem.h"
#include "forest/forestWindEmitter.h"
#include "forest/forestWindMgr.h"
#include "gui/buttons/guiIconButtonCtrl.h"
#include "gui/buttons/guiToolboxButtonCtrl.h"
#include "gui/controls/guiBitmapCtrl.h"
#include "gui/controls/guiColorPicker.h"
#include "gui/controls/guiFileTreeCtrl.h"
#include "gui/controls/guiGradientCtrl.h"
#include "gui/controls/guiMaterialCtrl.h"
#include "gui/controls/guiPopUpCtrl.h"
#include "gui/controls/guiPopUpCtrl.h"
#include "gui/editor/guiDebugger.h"
#include "gui/editor/guiEditCtrl.h"
#include "gui/editor/guiFilterCtrl.h"
#include "gui/editor/guiInspector.h"
#include "gui/editor/guiInspector.h"
#include "gui/editor/guiInspector.h"
#include "gui/editor/guiInspectorTypes.h"
#include "gui/editor/guiMenuBar.h"
#include "gui/editor/guiParticleGraphCtrl.h"
#include "gui/editor/inspector/dynamicField.h"
#include "gui/editor/inspector/dynamicGroup.h"
#include "gui/editor/inspector/field.h"
#include "gui/editor/inspector/group.h"
#include "gui/editor/inspector/variableInspector.h"
#include "interior/pathedInterior.h"
#include "platform/menus/menuBar.h"
#include "platform/menus/popupMenu.h"
#include "T3D/aiClient.h"
#include "T3D/missionMarker.h"
#include "T3D/physics/physicsDebris.h"
#include "T3D/staticShape.h"
#include "util/settings.h"
#include "core/resourceManager.h"
#include "interior/interiorInstance.h"
#include "lighting/advanced/advancedLightManager.h"
#include "platformWin32/platformWin32.h"
#include "dom/domCOLLADA.h"
#ifndef _TDICTIONARY_H_
#include "core/tDictionary.h"
#endif
#ifndef _APPMESH_H_
#include "ts/loader/appMesh.h"
#endif
#ifndef _TSSHAPELOADER_H_
#include "ts/loader/tsShapeLoader.h"
#endif
#ifndef _COLLADA_APPNODE_H_
#include "ts/collada/colladaAppNode.h"
#endif
#ifndef _COLLADA_EXTENSIONS_H_
#include "ts/collada/colladaExtensions.h"
#endif
#include "T3D/physics/physicsWorld.h"
#include "util/messaging/dispatcher.h"


#ifndef _GFXINIT_H_
#include "gfx/gfxInit.h"
#endif
#ifndef _GUITEXTEDITCTRL_H_
#include "gui/controls/guiTextEditCtrl.h"
#endif
#ifndef _GUISCROLLCTRL_H_
#include "gui/containers/guiScrollCtrl.h"
#endif

//#include "sfx/fmod/sfxFMODDevice.h"
#include "dom/domCOLLADA.h"
#include "ts/collada/colladaShapeLoader.h"
#include "util/sampler.h"



#ifndef _MMATH_H_
#include "math/mMath.h"
#endif
#ifndef _MPLANETRANSFORMER_H_
#include "math/mPlaneTransformer.h"
#endif
#ifndef _TVECTOR_H_
#include "core/util/tVector.h"
#endif

#ifndef _PLATFORMTHREAD_H_   
       #include "platform/threads/thread.h"   
#endif  

static char scriptFilenameBuffer[1024];
static U32 execDepth = 0;
static U32 journalDepth = 1;
static const U32 MaxPlayerNameLength = 16;
static U32 sgServerQueryIndex = 0;
static SimpleQueryList sgServerQueryList;
static char sgScriptFilenameBuffer[1024];

static Vector<String>   sgFindFilesResults;
static U32              sgFindFilesPos = 0;


typedef void (__stdcall * Instance_Eval)(const char *evalstring,const char * buffer);
typedef void (__stdcall * Instance_Eval_Direct_New)(S32 argc,const char** argv,const char * buffer);




Instance_Eval Handler_Instance_Eval =0;
Instance_Eval_Direct_New Handler_Instance_Eval_Direct_New =0;

const U32 bufferSizes = 1024 * 4;

namespace {
   S32 QSORT_CALLBACK compareFields( const void* a,const void* b )
   {
      const AbstractClassRep::Field* fa = *((const AbstractClassRep::Field**)a);
      const AbstractClassRep::Field* fb = *((const AbstractClassRep::Field**)b);

      return dStricmp(fa->pFieldname, fb->pFieldname);
   }
   struct DocString
   {
      char mPadding[ 8 ];
      String mPrototype;
      String mDescription;
      const char* mReturnType;
      
      DocString( Namespace::Entry* entry )
         : mPrototype( entry->getArgumentsString() ),
           mDescription( entry->getBriefDescription() )
      {
         mReturnType = "        ";
         mPadding[ 0 ] = 0;
         if( entry->mType == -4 )
         {
            //TODO: need to have script callbacks set up proper return type info
         }
         else
         {
            switch( entry->mType )
            {
               case Namespace::Entry::StringCallbackType:
                  mReturnType = "string";
                  mPadding[ 0 ] = ' ';
                  mPadding[ 1 ] = ' ';
                  mPadding[ 2 ] = 0;
                  break;
                  
               case Namespace::Entry::IntCallbackType:
                  mReturnType = "int";
                  mPadding[ 0 ] = ' ';
                  mPadding[ 1 ] = ' ';
                  mPadding[ 2 ] = ' ';
                  mPadding[ 3 ] = ' ';
                  mPadding[ 4 ] = ' ';
                  mPadding[ 5 ] = 0;
                  break;

               case Namespace::Entry::FloatCallbackType:
                  mReturnType = "float";
                  mPadding[ 0 ] = ' ';
                  mPadding[ 1 ] = ' ';
                  mPadding[ 2 ] = ' ';
                  mPadding[ 3 ] = 0;
                  break;

               case Namespace::Entry::VoidCallbackType:
                  mReturnType = "void";
                  mPadding[ 0 ] = ' ';
                  mPadding[ 1 ] = ' ';
                  mPadding[ 2 ] = ' ';
                  mPadding[ 3 ] = ' ';
                  mPadding[ 4 ] = 0;
                  break;

               case Namespace::Entry::BoolCallbackType:
                  mReturnType = "bool";
                  mPadding[ 0 ] = ' ';
                  mPadding[ 1 ] = ' ';
                  mPadding[ 2 ] = ' ';
                  mPadding[ 3 ] = ' ';
                  mPadding[ 4 ] = 0;
                  break;                  
            }
         }
      }
   };
}

	static const struct
{
   const char *strMode;
   Zip::ZipArchive::AccessMode mode;
} zgModeMap[]=
{
   { "read", Zip::ZipArchive::Read },
   { "write", Zip::ZipArchive::Write },
   { "readwrite", Zip::ZipArchive::ReadWrite },
   { NULL, (Zip::ZipArchive::AccessMode)0 }
};

static const struct
{
   const char *strMode;
   Torque::FS::File::AccessMode mode;
} gModeMap[]=
{
   { "read", Torque::FS::File::Read },
   { "write", Torque::FS::File::Write },
   { "readwrite", Torque::FS::File::ReadWrite },
   { "writeappend", Torque::FS::File::WriteAppend },
   { NULL, (Torque::FS::File::AccessMode)0 }
};
struct MemDumpLog
{
   U32 size;
   U32 count;
   U32 depthTotal;
   U32 maxDepth;
   U32 minDepth;
};


//-----------------------------------------------------------------------------
// Console functions & methods
//-----------------------------------------------------------------------------

//-----------------------------------------------------------------------------

static inline F32 moveClamp(F32 v)
{
   // Support function to convert/clamp the input into a move rotation
   // which only allows 0 -> M_2PI.
   F32 a = mClampF(v, -M_2PI_F, M_2PI_F);
   return (a < 0) ? a + M_2PI_F : a;
}


//-----------------------------------------------------------------------------
// Suppress Spaces.
//-----------------------------------------------------------------------------
static char replacebuf[1024];
static char* suppressSpaces(const char* in_pname)
{
	U32 i = 0;
	char chr;
	do
	{
		chr = in_pname[i];
		replacebuf[i++] = (chr != 32) ? chr : '_';
	} while(chr);

	return replacebuf;
}
 
 
namespace Winterleaf
{
extern "C" __declspec(dllexport) S32  __cdecl wle_fn_addBadWord(char * x__badWord);
extern "C" __declspec(dllexport) void  __cdecl wle_fn_filterString(char * x__baseString, char * x__replacementChars,  char* retval);
extern "C" __declspec(dllexport) S32  __cdecl wle_fn_containsBadWords(char * x__text);
extern "C" __declspec(dllexport) void  __cdecl wle_fn__strToPlayerName(char * x__a1,  char* retval);
extern "C" __declspec(dllexport) void  __cdecl wle_fn__lockMouse(char * x__a1);
extern "C" __declspec(dllexport) S32  __cdecl wle_fn__setNetPort(char * x__a1, char * x__a2);
extern "C" __declspec(dllexport) S32  __cdecl wle_fn__getVersionNumber();
extern "C" __declspec(dllexport) void  __cdecl wle_fn__getVersionString(char* retval);
extern "C" __declspec(dllexport) void  __cdecl wle_fn__getEngineName(char* retval);
extern "C" __declspec(dllexport) void  __cdecl wle_fn__getBuildString(char* retval);
extern "C" __declspec(dllexport) void  __cdecl wle_fnHTTPObject_get(char * x__object, char * x__Address, char * x__requirstURI, char * x__query);
extern "C" __declspec(dllexport) void  __cdecl wle_fnHTTPObject_post(char * x__object, char * x__Address, char * x__requirstURI, char * x__query, char * x__post);
extern "C" __declspec(dllexport) void  __cdecl wle_fn__removeTaggedString(char * x__a1);
extern "C" __declspec(dllexport) void  __cdecl wle_fn__addTaggedString(char * x__a1,  char* retval);
extern "C" __declspec(dllexport) void  __cdecl wle_fn__buildTaggedString(char * x__a1, char * x__a2, char * x__a3, char * x__a4, char * x__a5, char * x__a6, char * x__a7, char * x__a8, char * x__a9, char * x__a10,  char* retval);
extern "C" __declspec(dllexport) void  __cdecl wle_fn__queryAllServers(char * x__a1, char * x__a2, char * x__a3, char * x__a4, char * x__a5, char * x__a6, char * x__a7, char * x__a8, char * x__a9, char * x__a10, char * x__a11);
extern "C" __declspec(dllexport) void  __cdecl wle_fn__queryLanServers(char * x__a1, char * x__a2, char * x__a3, char * x__a4, char * x__a5, char * x__a6, char * x__a7, char * x__a8, char * x__a9, char * x__a10, char * x__a11);
extern "C" __declspec(dllexport) void  __cdecl wle_fn__queryMasterServer(char * x__a1, char * x__a2, char * x__a3, char * x__a4, char * x__a5, char * x__a6, char * x__a7, char * x__a8, char * x__a9, char * x__a10);
extern "C" __declspec(dllexport) void  __cdecl wle_fn__querySingleServer(char * x__a1, char * x__a2);
extern "C" __declspec(dllexport) S32  __cdecl wle_fn__setServerInfo(char * x__a1);
extern "C" __declspec(dllexport) void  __cdecl wle_fnTCPObject_send(char * x__object, char * x__data);
extern "C" __declspec(dllexport) void  __cdecl wle_fnTCPObject_listen(char * x__object, int port);
extern "C" __declspec(dllexport) void  __cdecl wle_fnTCPObject_connect(char * x__object, char * x__address);
extern "C" __declspec(dllexport) void  __cdecl wle_fnTCPObject_disconnect(char * x__object);
extern "C" __declspec(dllexport) void  __cdecl wle_fn__testJavaScriptBridge(char * x__a1, char * x__a2, char * x__a3,  char* retval);
extern "C" __declspec(dllexport) void  __cdecl wle_fn__TestFunction2Args(char * x__a1, char * x__a2,  char* retval);
extern "C" __declspec(dllexport) void  __cdecl wle_fnDynamicConsoleMethodComponent_callMethod(char * x__object, char * x__a2, char * x__a3, char * x__a4, char * x__a5, char * x__a6, char * x__a7, char * x__a8, char * x__a9, char * x__a10, char * x__a11, char * x__a12, char * x__a13, char * x__a14, char * x__a15, char * x__a16, char * x__a17, char * x__a18, char * x__a19, char * x__a20, char * x__a21, char * x__a22, char * x__a23, char * x__a24, char * x__a25, char * x__a26, char * x__a27, char * x__a28, char * x__a29, char * x__a30, char * x__a31, char * x__a32, char * x__a33, char * x__a34, char * x__a35, char * x__a36, char * x__a37, char * x__a38, char * x__a39, char * x__a40, char * x__a41, char * x__a42, char * x__a43, char * x__a44, char * x__a45, char * x__a46, char * x__a47, char * x__a48, char * x__a49, char * x__a50, char * x__a51, char * x__a52, char * x__a53, char * x__a54, char * x__a55, char * x__a56, char * x__a57, char * x__a58, char * x__a59, char * x__a60, char * x__a61, char * x__a62, char * x__a63);
extern "C" __declspec(dllexport) S32  __cdecl wle_fnSimComponent_addComponents(char * x__object, char * x__a2, char * x__a3, char * x__a4, char * x__a5, char * x__a6, char * x__a7, char * x__a8, char * x__a9, char * x__a10, char * x__a11, char * x__a12, char * x__a13, char * x__a14, char * x__a15, char * x__a16, char * x__a17, char * x__a18, char * x__a19, char * x__a20, char * x__a21, char * x__a22, char * x__a23, char * x__a24, char * x__a25, char * x__a26, char * x__a27, char * x__a28, char * x__a29, char * x__a30, char * x__a31, char * x__a32, char * x__a33, char * x__a34, char * x__a35, char * x__a36, char * x__a37, char * x__a38, char * x__a39, char * x__a40, char * x__a41, char * x__a42, char * x__a43, char * x__a44, char * x__a45, char * x__a46, char * x__a47, char * x__a48, char * x__a49, char * x__a50, char * x__a51, char * x__a52, char * x__a53, char * x__a54, char * x__a55, char * x__a56, char * x__a57, char * x__a58, char * x__a59, char * x__a60, char * x__a61, char * x__a62, char * x__a63);
extern "C" __declspec(dllexport) S32  __cdecl wle_fnSimComponent_removeComponents(char * x__object, char * x__a2, char * x__a3, char * x__a4, char * x__a5, char * x__a6, char * x__a7, char * x__a8, char * x__a9, char * x__a10, char * x__a11, char * x__a12, char * x__a13, char * x__a14, char * x__a15, char * x__a16, char * x__a17, char * x__a18, char * x__a19, char * x__a20, char * x__a21, char * x__a22, char * x__a23, char * x__a24, char * x__a25, char * x__a26, char * x__a27, char * x__a28, char * x__a29, char * x__a30, char * x__a31, char * x__a32, char * x__a33, char * x__a34, char * x__a35, char * x__a36, char * x__a37, char * x__a38, char * x__a39, char * x__a40, char * x__a41, char * x__a42, char * x__a43, char * x__a44, char * x__a45, char * x__a46, char * x__a47, char * x__a48, char * x__a49, char * x__a50, char * x__a51, char * x__a52, char * x__a53, char * x__a54, char * x__a55, char * x__a56, char * x__a57, char * x__a58, char * x__a59, char * x__a60, char * x__a61, char * x__a62, char * x__a63);
extern "C" __declspec(dllexport) S32  __cdecl wle_fnSimComponent_getComponentCount(char * x__object);
extern "C" __declspec(dllexport) S32  __cdecl wle_fnSimComponent_getComponent(char * x__object, char * x__a2);
extern "C" __declspec(dllexport) void  __cdecl wle_fnSimComponent_setEnabled(char * x__object, char * x__a2);
extern "C" __declspec(dllexport) S32  __cdecl wle_fnSimComponent_isEnabled(char * x__object);
extern "C" __declspec(dllexport) void  __cdecl wle_fnSimComponent_setIsTemplate(char * x__object, char * x__a2);
extern "C" __declspec(dllexport) S32  __cdecl wle_fnSimComponent_getIsTemplate(char * x__object);
extern "C" __declspec(dllexport) S32  __cdecl wle_fnArrayObject_getIndexFromValue(char * x__object, char * x__value);
extern "C" __declspec(dllexport) S32  __cdecl wle_fnArrayObject_getIndexFromKey(char * x__object, char * x__key);
extern "C" __declspec(dllexport) void  __cdecl wle_fnArrayObject_getValue(char * x__object, S32 index,  char* retval);
extern "C" __declspec(dllexport) void  __cdecl wle_fnArrayObject_getKey(char * x__object, S32 index,  char* retval);
extern "C" __declspec(dllexport) void  __cdecl wle_fnArrayObject_setKey(char * x__object, char * x__key, S32 index);
extern "C" __declspec(dllexport) void  __cdecl wle_fnArrayObject_setValue(char * x__object, char * x__value, S32 index);
extern "C" __declspec(dllexport) S32  __cdecl wle_fnArrayObject_count(char * x__object);
extern "C" __declspec(dllexport) S32  __cdecl wle_fnArrayObject_countValue(char * x__object, char * x__value);
extern "C" __declspec(dllexport) S32  __cdecl wle_fnArrayObject_countKey(char * x__object, char * x__key);
extern "C" __declspec(dllexport) void  __cdecl wle_fnArrayObject_add(char * x__object, char * x__key, char * x__value);
extern "C" __declspec(dllexport) void  __cdecl wle_fnArrayObject_push_back(char * x__object, char * x__key, char * x__value);
extern "C" __declspec(dllexport) void  __cdecl wle_fnArrayObject_push_front(char * x__object, char * x__key, char * x__value);
extern "C" __declspec(dllexport) void  __cdecl wle_fnArrayObject_insert(char * x__object, char * x__key, char * x__value, S32 index);
extern "C" __declspec(dllexport) void  __cdecl wle_fnArrayObject_pop_back(char * x__object);
extern "C" __declspec(dllexport) void  __cdecl wle_fnArrayObject_pop_front(char * x__object);
extern "C" __declspec(dllexport) void  __cdecl wle_fnArrayObject_erase(char * x__object, S32 index);
extern "C" __declspec(dllexport) void  __cdecl wle_fnArrayObject_empty(char * x__object);
extern "C" __declspec(dllexport) void  __cdecl wle_fnArrayObject_uniqueValue(char * x__object);
extern "C" __declspec(dllexport) void  __cdecl wle_fnArrayObject_uniqueKey(char * x__object);
extern "C" __declspec(dllexport) S32  __cdecl wle_fnArrayObject_duplicate(char * x__object, char * x__target);
extern "C" __declspec(dllexport) S32  __cdecl wle_fnArrayObject_crop(char * x__object, char * x__target);
extern "C" __declspec(dllexport) S32  __cdecl wle_fnArrayObject_append(char * x__object, char * x__target);
extern "C" __declspec(dllexport) void  __cdecl wle_fnArrayObject_sort(char * x__object, bool ascending);
extern "C" __declspec(dllexport) void  __cdecl wle_fnArrayObject_sorta(char * x__object);
extern "C" __declspec(dllexport) void  __cdecl wle_fnArrayObject_sortd(char * x__object);
extern "C" __declspec(dllexport) void  __cdecl wle_fnArrayObject_sortk(char * x__object, bool ascending);
extern "C" __declspec(dllexport) void  __cdecl wle_fnArrayObject_sortka(char * x__object);
extern "C" __declspec(dllexport) void  __cdecl wle_fnArrayObject_sortkd(char * x__object);
extern "C" __declspec(dllexport) void  __cdecl wle_fnArrayObject_sortn(char * x__object, bool ascending);
extern "C" __declspec(dllexport) void  __cdecl wle_fnArrayObject_sortna(char * x__object);
extern "C" __declspec(dllexport) void  __cdecl wle_fnArrayObject_sortnd(char * x__object);
extern "C" __declspec(dllexport) void  __cdecl wle_fnArrayObject_sortnk(char * x__object, bool ascending);
extern "C" __declspec(dllexport) void  __cdecl wle_fnArrayObject_sortnka(char * x__object);
extern "C" __declspec(dllexport) void  __cdecl wle_fnArrayObject_sortnkd(char * x__object);
extern "C" __declspec(dllexport) void  __cdecl wle_fnArrayObject_sortf(char * x__object, char * x__functionName);
extern "C" __declspec(dllexport) void  __cdecl wle_fnArrayObject_sortfk(char * x__object, char * x__functionName);
extern "C" __declspec(dllexport) void  __cdecl wle_fnArrayObject_sortfd(char * x__object, char * x__functionName);
extern "C" __declspec(dllexport) void  __cdecl wle_fnArrayObject_sortfkd(char * x__object, char * x__functionName);
extern "C" __declspec(dllexport) S32  __cdecl wle_fnArrayObject_moveFirst(char * x__object);
extern "C" __declspec(dllexport) S32  __cdecl wle_fnArrayObject_moveLast(char * x__object);
extern "C" __declspec(dllexport) S32  __cdecl wle_fnArrayObject_moveNext(char * x__object);
extern "C" __declspec(dllexport) S32  __cdecl wle_fnArrayObject_movePrev(char * x__object);
extern "C" __declspec(dllexport) S32  __cdecl wle_fnArrayObject_getCurrent(char * x__object);
extern "C" __declspec(dllexport) void  __cdecl wle_fnArrayObject_setCurrent(char * x__object, S32 index);
extern "C" __declspec(dllexport) void  __cdecl wle_fnArrayObject_echo(char * x__object);
extern "C" __declspec(dllexport) void  __cdecl wle_fn_log(char * x__message);
extern "C" __declspec(dllexport) void  __cdecl wle_fn_logError(char * x__message);
extern "C" __declspec(dllexport) void  __cdecl wle_fn_logWarning(char * x__message);
extern "C" __declspec(dllexport) void  __cdecl wle_fn_dumpConsoleClasses(bool dumpScript, bool dumpEngine);
extern "C" __declspec(dllexport) void  __cdecl wle_fn_dumpConsoleFunctions(bool dumpScript, bool dumpEngine);
extern "C" __declspec(dllexport) void  __cdecl wle_fn__nextToken(char * x__a1, char * x__a2, char * x__a3,  char* retval);
extern "C" __declspec(dllexport) void  __cdecl wle_fn__getTag(char * x__a1,  char* retval);
extern "C" __declspec(dllexport) void  __cdecl wle_fn__echo(char * x__a1, char * x__a2, char * x__a3, char * x__a4, char * x__a5, char * x__a6, char * x__a7, char * x__a8, char * x__a9, char * x__a10, char * x__a11, char * x__a12, char * x__a13, char * x__a14, char * x__a15, char * x__a16, char * x__a17, char * x__a18, char * x__a19);
extern "C" __declspec(dllexport) void  __cdecl wle_fn__warn(char * x__a1, char * x__a2, char * x__a3, char * x__a4, char * x__a5, char * x__a6, char * x__a7, char * x__a8, char * x__a9, char * x__a10, char * x__a11, char * x__a12, char * x__a13, char * x__a14, char * x__a15, char * x__a16, char * x__a17, char * x__a18, char * x__a19);
extern "C" __declspec(dllexport) void  __cdecl wle_fn__error(char * x__a1, char * x__a2, char * x__a3, char * x__a4, char * x__a5, char * x__a6, char * x__a7, char * x__a8, char * x__a9, char * x__a10, char * x__a11, char * x__a12, char * x__a13, char * x__a14, char * x__a15, char * x__a16, char * x__a17, char * x__a18, char * x__a19);
extern "C" __declspec(dllexport) void  __cdecl wle_fn__realQuit();
extern "C" __declspec(dllexport) void  __cdecl wle_fn__call(char * x__a1, char * x__a2, char * x__a3, char * x__a4, char * x__a5, char * x__a6, char * x__a7, char * x__a8, char * x__a9, char * x__a10, char * x__a11, char * x__a12, char * x__a13, char * x__a14, char * x__a15, char * x__a16, char * x__a17, char * x__a18, char * x__a19,  char* retval);
extern "C" __declspec(dllexport) void  __cdecl wle_fn__eval(char * x__a1,  char* retval);
extern "C" __declspec(dllexport) void  __cdecl wle_fn__getVariable(char * x__a1,  char* retval);
extern "C" __declspec(dllexport) void  __cdecl wle_fn__setVariable(char * x__a1, char * x__a2);
extern "C" __declspec(dllexport) S32  __cdecl wle_fn__isFunction(char * x__a1);
extern "C" __declspec(dllexport) S32  __cdecl wle_fn__isMethod(char * x__a1, char * x__a2);
extern "C" __declspec(dllexport) void  __cdecl wle_fn__getMethodPackage(char * x__a1, char * x__a2,  char* retval);
extern "C" __declspec(dllexport) S32  __cdecl wle_fn__isDefined(char * x__a1, char * x__a2);
extern "C" __declspec(dllexport) void  __cdecl wle_fn__getModNameFromPath(char * x__a1,  char* retval);
extern "C" __declspec(dllexport) void  __cdecl wle_fn__getPrefsPath(char * x__a1,  char* retval);
extern "C" __declspec(dllexport) S32  __cdecl wle_fn__execPrefs(char * x__a1, char * x__a2, char * x__a3);
extern "C" __declspec(dllexport) S32  __cdecl wle_fn_strasc(char * x__chr);
extern "C" __declspec(dllexport) void  __cdecl wle_fn_strformat(char * x__format, char * x__value,  char* retval);
extern "C" __declspec(dllexport) S32  __cdecl wle_fn_strcmp(char * x__str1, char * x__str2);
extern "C" __declspec(dllexport) S32  __cdecl wle_fn_stricmp(char * x__str1, char * x__str2);
extern "C" __declspec(dllexport) S32  __cdecl wle_fn_strnatcmp(char * x__str1, char * x__str2);
extern "C" __declspec(dllexport) S32  __cdecl wle_fn_strinatcmp(char * x__str1, char * x__str2);
extern "C" __declspec(dllexport) S32  __cdecl wle_fn_strlen(char * x__str);
extern "C" __declspec(dllexport) S32  __cdecl wle_fn_strstr(char * x__string, char * x__substring);
extern "C" __declspec(dllexport) S32  __cdecl wle_fn_strpos(char * x__haystack, char * x__needle, int offset);
extern "C" __declspec(dllexport) void  __cdecl wle_fn_ltrim(char * x__str,  char* retval);
extern "C" __declspec(dllexport) void  __cdecl wle_fn_rtrim(char * x__str,  char* retval);
extern "C" __declspec(dllexport) void  __cdecl wle_fn_trim(char * x__str,  char* retval);
extern "C" __declspec(dllexport) void  __cdecl wle_fn_stripChars(char * x__str, char * x__chars,  char* retval);
extern "C" __declspec(dllexport) void  __cdecl wle_fn_strlwr(char * x__str,  char* retval);
extern "C" __declspec(dllexport) void  __cdecl wle_fn_strupr(char * x__str,  char* retval);
extern "C" __declspec(dllexport) void  __cdecl wle_fn_strchr(char * x__str, char * x__chr,  char* retval);
extern "C" __declspec(dllexport) void  __cdecl wle_fn_strrchr(char * x__str, char * x__chr,  char* retval);
extern "C" __declspec(dllexport) void  __cdecl wle_fn_strreplace(char * x__source, char * x__from, char * x__to,  char* retval);
extern "C" __declspec(dllexport) void  __cdecl wle_fn_strrepeat(char * x__str, S32 numTimes, char * x__delimiter,  char* retval);
extern "C" __declspec(dllexport) void  __cdecl wle_fn_getSubStr(char * x__str, S32 start, S32 numChars,  char* retval);
extern "C" __declspec(dllexport) S32  __cdecl wle_fn_strIsMatchExpr(char * x__pattern, char * x__str, bool caseSensitive);
extern "C" __declspec(dllexport) S32  __cdecl wle_fn_strIsMatchMultipleExpr(char * x__patterns, char * x__str, bool caseSensitive);
extern "C" __declspec(dllexport) S32  __cdecl wle_fn_getTrailingNumber(char * x__str);
extern "C" __declspec(dllexport) void  __cdecl wle_fn_stripTrailingNumber(char * x__str,  char* retval);
extern "C" __declspec(dllexport) S32  __cdecl wle_fn_isspace(char * x__str, S32 index);
extern "C" __declspec(dllexport) S32  __cdecl wle_fn_isalnum(char * x__str, S32 index);
extern "C" __declspec(dllexport) S32  __cdecl wle_fn_startsWith(char * x__str, char * x__prefix, bool caseSensitive);
extern "C" __declspec(dllexport) S32  __cdecl wle_fn_endsWith(char * x__str, char * x__suffix, bool caseSensitive);
extern "C" __declspec(dllexport) S32  __cdecl wle_fn_strchrpos(char * x__str, char * x__chr, S32 start);
extern "C" __declspec(dllexport) S32  __cdecl wle_fn_strrchrpos(char * x__str, char * x__chr, S32 start);
extern "C" __declspec(dllexport) void  __cdecl wle_fn_getWord(char * x__text, S32 index,  char* retval);
extern "C" __declspec(dllexport) void  __cdecl wle_fn_getWords(char * x__text, S32 startIndex, S32 endIndex,  char* retval);
extern "C" __declspec(dllexport) void  __cdecl wle_fn_setWord(char * x__text, S32 index, char * x__replacement,  char* retval);
extern "C" __declspec(dllexport) void  __cdecl wle_fn_removeWord(char * x__text, S32 index,  char* retval);
extern "C" __declspec(dllexport) S32  __cdecl wle_fn_getWordCount(char * x__text);
extern "C" __declspec(dllexport) void  __cdecl wle_fn_getField(char * x__text, S32 index,  char* retval);
extern "C" __declspec(dllexport) void  __cdecl wle_fn_getFields(char * x__text, S32 startIndex, S32 endIndex,  char* retval);
extern "C" __declspec(dllexport) void  __cdecl wle_fn_setField(char * x__text, S32 index, char * x__replacement,  char* retval);
extern "C" __declspec(dllexport) void  __cdecl wle_fn_removeField(char * x__text, S32 index,  char* retval);
extern "C" __declspec(dllexport) S32  __cdecl wle_fn_getFieldCount(char * x__text);
extern "C" __declspec(dllexport) void  __cdecl wle_fn_getRecord(char * x__text, S32 index,  char* retval);
extern "C" __declspec(dllexport) void  __cdecl wle_fn_getRecords(char * x__text, S32 startIndex, S32 endIndex,  char* retval);
extern "C" __declspec(dllexport) void  __cdecl wle_fn_setRecord(char * x__text, S32 index, char * x__replacement,  char* retval);
extern "C" __declspec(dllexport) void  __cdecl wle_fn_removeRecord(char * x__text, S32 index,  char* retval);
extern "C" __declspec(dllexport) S32  __cdecl wle_fn_getRecordCount(char * x__text);
extern "C" __declspec(dllexport) void  __cdecl wle_fn_firstWord(char * x__text,  char* retval);
extern "C" __declspec(dllexport) void  __cdecl wle_fn_restWords(char * x__text,  char* retval);
extern "C" __declspec(dllexport) void  __cdecl wle_fn_expandEscape(char * x__text,  char* retval);
extern "C" __declspec(dllexport) void  __cdecl wle_fn_collapseEscape(char * x__text,  char* retval);
extern "C" __declspec(dllexport) void  __cdecl wle_fn_quit();
extern "C" __declspec(dllexport) void  __cdecl wle_fn_quitWithErrorMessage(char * x__message);
extern "C" __declspec(dllexport) void  __cdecl wle_fn_export(char * x__pattern, char * x__filename, bool append);
extern "C" __declspec(dllexport) void  __cdecl wle_fn_trace(bool enable);
extern "C" __declspec(dllexport) void  __cdecl wle_fn_debug();
extern "C" __declspec(dllexport) void  __cdecl wle_fn_detag(char * x__str,  char* retval);
extern "C" __declspec(dllexport) void  __cdecl wle_fn_debugv(char * x__variableName);
extern "C" __declspec(dllexport) void  __cdecl wle_fn_setLogMode(S32 mode);
extern "C" __declspec(dllexport) void  __cdecl wle_fn_gotoWebPage(char * x__address);
extern "C" __declspec(dllexport) S32  __cdecl wle_fn_displaySplashWindow();
extern "C" __declspec(dllexport) S32  __cdecl wle_fn_getWebDeployment();
extern "C" __declspec(dllexport) S32  __cdecl wle_fn_countBits(S32 v);
extern "C" __declspec(dllexport) S32  __cdecl wle_fn_compile(char * x__fileName, bool overrideNoDSO);
extern "C" __declspec(dllexport) S32  __cdecl wle_fn_exec(char * x__fileName, bool noCalls, bool journalScript);
extern "C" __declspec(dllexport) void  __cdecl wle_fn_deleteVariables(char * x__pattern);
extern "C" __declspec(dllexport) S32  __cdecl wle_fn_isShippingBuild();
extern "C" __declspec(dllexport) S32  __cdecl wle_fn_isDebugBuild();
extern "C" __declspec(dllexport) S32  __cdecl wle_fn_isToolBuild();
extern "C" __declspec(dllexport) void  __cdecl wle_fn_backtrace();
extern "C" __declspec(dllexport) S32  __cdecl wle_fn_isPackage(char * x__identifier);
extern "C" __declspec(dllexport) void  __cdecl wle_fn_activatePackage(char * x__packageName);
extern "C" __declspec(dllexport) void  __cdecl wle_fn_deactivatePackage(char * x__packageName);
extern "C" __declspec(dllexport) void  __cdecl wle_fn_getPackageList(char* retval);
extern "C" __declspec(dllexport) S32  __cdecl wle_fnConsoleLogger_attach(char * x__object);
extern "C" __declspec(dllexport) S32  __cdecl wle_fnConsoleLogger_detach(char * x__object);
extern "C" __declspec(dllexport) S32  __cdecl wle_fn_isClass(char * x__identifier);
extern "C" __declspec(dllexport) S32  __cdecl wle_fn_isMemberOfClass(char * x__className, char * x__superClassName);
extern "C" __declspec(dllexport) void  __cdecl wle_fn_getDescriptionOfClass(char * x__className,  char* retval);
extern "C" __declspec(dllexport) void  __cdecl wle_fn_getCategoryOfClass(char * x__className,  char* retval);
extern "C" __declspec(dllexport) void  __cdecl wle_fn_dumpNetStats();
extern "C" __declspec(dllexport) void  __cdecl wle_fnFieldBrushObject_queryGroups(char * x__object, char * x__a2,  char* retval);
extern "C" __declspec(dllexport) void  __cdecl wle_fnFieldBrushObject_queryFields(char * x__object, char * x__a2, char * x__a3,  char* retval);
extern "C" __declspec(dllexport) void  __cdecl wle_fnFieldBrushObject_copyFields(char * x__object, char * x__a2, char * x__a3);
extern "C" __declspec(dllexport) void  __cdecl wle_fnFieldBrushObject_pasteFields(char * x__object, char * x__a2);
extern "C" __declspec(dllexport) void  __cdecl wle_fn_findFirstFile(char * x__pattern, bool recurse,  char* retval);
extern "C" __declspec(dllexport) void  __cdecl wle_fn_findNextFile(char * x__pattern,  char* retval);
extern "C" __declspec(dllexport) S32  __cdecl wle_fn_getFileCount(char * x__pattern, bool recurse);
extern "C" __declspec(dllexport) void  __cdecl wle_fn_findFirstFileMultiExpr(char * x__pattern, bool recurse,  char* retval);
extern "C" __declspec(dllexport) void  __cdecl wle_fn_findNextFileMultiExpr(char * x__pattern,  char* retval);
extern "C" __declspec(dllexport) S32  __cdecl wle_fn_getFileCountMultiExpr(char * x__pattern, bool recurse);
extern "C" __declspec(dllexport) S32  __cdecl wle_fn_getFileCRC(char * x__fileName);
extern "C" __declspec(dllexport) S32  __cdecl wle_fn_isFile(char * x__fileName);
extern "C" __declspec(dllexport) S32  __cdecl wle_fn_IsDirectory(char * x__directory);
extern "C" __declspec(dllexport) S32  __cdecl wle_fn_isWriteableFileName(char * x__fileName);
extern "C" __declspec(dllexport) void  __cdecl wle_fn_startFileChangeNotifications();
extern "C" __declspec(dllexport) void  __cdecl wle_fn_stopFileChangeNotifications();
extern "C" __declspec(dllexport) void  __cdecl wle_fn_getDirectoryList(char * x__path, S32 depth,  char* retval);
extern "C" __declspec(dllexport) S32  __cdecl wle_fn_fileSize(char * x__fileName);
extern "C" __declspec(dllexport) void  __cdecl wle_fn_fileModifiedTime(char * x__fileName,  char* retval);
extern "C" __declspec(dllexport) void  __cdecl wle_fn_fileCreatedTime(char * x__fileName,  char* retval);
extern "C" __declspec(dllexport) S32  __cdecl wle_fn_fileDelete(char * x__path);
extern "C" __declspec(dllexport) void  __cdecl wle_fn_fileExt(char * x__fileName,  char* retval);
extern "C" __declspec(dllexport) void  __cdecl wle_fn_fileBase(char * x__fileName,  char* retval);
extern "C" __declspec(dllexport) void  __cdecl wle_fn_fileName(char * x__fileName,  char* retval);
extern "C" __declspec(dllexport) void  __cdecl wle_fn_filePath(char * x__fileName,  char* retval);
extern "C" __declspec(dllexport) void  __cdecl wle_fn_getWorkingDirectory(char* retval);
extern "C" __declspec(dllexport) void  __cdecl wle_fn_makeFullPath(char * x__path, char * x__cwd,  char* retval);
extern "C" __declspec(dllexport) void  __cdecl wle_fn_makeRelativePath(char * x__path, char * x__to,  char* retval);
extern "C" __declspec(dllexport) void  __cdecl wle_fn_pathConcat(char * x__path, char * x__file,  char* retval);
extern "C" __declspec(dllexport) void  __cdecl wle_fn_getExecutableName(char* retval);
extern "C" __declspec(dllexport) void  __cdecl wle_fn_getMainDotCsDir(char* retval);
extern "C" __declspec(dllexport) void  __cdecl wle_fn_openFolder(char * x__path);
extern "C" __declspec(dllexport) void  __cdecl wle_fn_openFile(char * x__file);
extern "C" __declspec(dllexport) S32  __cdecl wle_fn_pathCopy(char * x__fromFile, char * x__toFile, bool noOverwrite);
extern "C" __declspec(dllexport) void  __cdecl wle_fn_getCurrentDirectory(char* retval);
extern "C" __declspec(dllexport) S32  __cdecl wle_fn_setCurrentDirectory(char * x__path);
extern "C" __declspec(dllexport) S32  __cdecl wle_fn_createPath(char * x__path);
extern "C" __declspec(dllexport) void  __cdecl wle_fnPersistenceManager_deleteObjectsFromFile(char * x__object, char * x__a2);
extern "C" __declspec(dllexport) void  __cdecl wle_fnPersistenceManager_setDirty(char * x__object, char * x__a2, char * x__a3);
extern "C" __declspec(dllexport) void  __cdecl wle_fnPersistenceManager_removeDirty(char * x__object, char * x__a2);
extern "C" __declspec(dllexport) S32  __cdecl wle_fnPersistenceManager_isDirty(char * x__object, char * x__a2);
extern "C" __declspec(dllexport) S32  __cdecl wle_fnPersistenceManager_hasDirty(char * x__object);
extern "C" __declspec(dllexport) S32  __cdecl wle_fnPersistenceManager_getDirtyObjectCount(char * x__object);
extern "C" __declspec(dllexport) S32  __cdecl wle_fnPersistenceManager_getDirtyObject(char * x__object, char * x__a2);
extern "C" __declspec(dllexport) void  __cdecl wle_fnPersistenceManager_listDirty(char * x__object);
extern "C" __declspec(dllexport) S32  __cdecl wle_fnPersistenceManager_saveDirty(char * x__object);
extern "C" __declspec(dllexport) S32  __cdecl wle_fnPersistenceManager_saveDirtyObject(char * x__object, char * x__a2);
extern "C" __declspec(dllexport) void  __cdecl wle_fnPersistenceManager_clearAll(char * x__object);
extern "C" __declspec(dllexport) void  __cdecl wle_fnPersistenceManager_removeObjectFromFile(char * x__object, char * x__a2, char * x__a3);
extern "C" __declspec(dllexport) void  __cdecl wle_fnPersistenceManager_removeField(char * x__object, char * x__a2, char * x__a3);
extern "C" __declspec(dllexport) void  __cdecl wle_fn__expandFilename(char * x__a1,  char* retval);
extern "C" __declspec(dllexport) S32  __cdecl wle_fn__isObject(char * x__a1);
extern "C" __declspec(dllexport) S32  __cdecl wle_fn__spawnObject(char * x__a1, char * x__a2, char * x__a3, char * x__a4, char * x__a5);
extern "C" __declspec(dllexport) S32  __cdecl wle_fn__schedule(char * x__a1, char * x__a2, char * x__a3, char * x__a4, char * x__a5, char * x__a6, char * x__a7, char * x__a8, char * x__a9, char * x__a10, char * x__a11, char * x__a12, char * x__a13, char * x__a14, char * x__a15, char * x__a16, char * x__a17, char * x__a18, char * x__a19);
extern "C" __declspec(dllexport) void  __cdecl wle_fn__getUniqueName(char * x__a1,  char* retval);
extern "C" __declspec(dllexport) void  __cdecl wle_fn__getUniqueInternalName(char * x__a1, char * x__a2, char * x__a3,  char* retval);
extern "C" __declspec(dllexport) S32  __cdecl wle_fn__isValidObjectName(char * x__a1);
extern "C" __declspec(dllexport) void  __cdecl wle_fn_SimDataBlock_reloadOnLocalClient(char * x__object);
extern "C" __declspec(dllexport) void  __cdecl wle_fn_preloadClientDataBlocks();
extern "C" __declspec(dllexport) void  __cdecl wle_fn_deleteDataBlocks();
extern "C" __declspec(dllexport) void  __cdecl wle_fnSimObject_call(char * x__object, char * x__a2, char * x__a3, char * x__a4, char * x__a5, char * x__a6, char * x__a7, char * x__a8, char * x__a9, char * x__a10, char * x__a11, char * x__a12, char * x__a13, char * x__a14, char * x__a15, char * x__a16, char * x__a17, char * x__a18, char * x__a19,  char* retval);
extern "C" __declspec(dllexport) S32  __cdecl wle_fnSimObject_schedule(char * x__object, char * x__a2, char * x__a3, char * x__a4, char * x__a5, char * x__a6, char * x__a7, char * x__a8, char * x__a9, char * x__a10, char * x__a11, char * x__a12, char * x__a13, char * x__a14, char * x__a15, char * x__a16, char * x__a17, char * x__a18, char * x__a19);
extern "C" __declspec(dllexport) S32  __cdecl wle_fn_SimObject_isMethod(char * x__object, char * x__methodName);
extern "C" __declspec(dllexport) void  __cdecl wle_fn_SimObject_getClassNamespace(char * x__object,  char* retval);
extern "C" __declspec(dllexport) void  __cdecl wle_fn_SimObject_getSuperClassNamespace(char * x__object,  char* retval);
extern "C" __declspec(dllexport) void  __cdecl wle_fn_SimObject_setClassNamespace(char * x__object, char * x__name);
extern "C" __declspec(dllexport) void  __cdecl wle_fn_SimObject_setSuperClassNamespace(char * x__object, char * x__name);
extern "C" __declspec(dllexport) S32  __cdecl wle_fn_SimObject_isExpanded(char * x__object);
extern "C" __declspec(dllexport) void  __cdecl wle_fn_SimObject_setIsExpanded(char * x__object, bool state);
extern "C" __declspec(dllexport) void  __cdecl wle_fn_SimObject_getFilename(char * x__object,  char* retval);
extern "C" __declspec(dllexport) void  __cdecl wle_fn_SimObject_setFilename(char * x__object, char * x__fileName);
extern "C" __declspec(dllexport) S32  __cdecl wle_fn_SimObject_getDeclarationLine(char * x__object);
extern "C" __declspec(dllexport) void  __cdecl wle_fn_SimObject_assignFieldsFrom(char * x__object, char * x__fromObject);
extern "C" __declspec(dllexport) S32  __cdecl wle_fn_SimObject_getCanSave(char * x__object);
extern "C" __declspec(dllexport) void  __cdecl wle_fn_SimObject_setCanSave(char * x__object, bool value);
extern "C" __declspec(dllexport) void  __cdecl wle_fn_SimObject_dumpMethods(char * x__object,  char* retval);
extern "C" __declspec(dllexport) S32  __cdecl wle_fn_SimObject_save(char * x__object, char * x__fileName, bool selectedOnly, char * x__preAppendString);
extern "C" __declspec(dllexport) void  __cdecl wle_fn_SimObject_getClassName(char * x__object,  char* retval);
extern "C" __declspec(dllexport) S32  __cdecl wle_fn_SimObject_isField(char * x__object, char * x__fieldName);
extern "C" __declspec(dllexport) void  __cdecl wle_fn_SimObject_getFieldValue(char * x__object, char * x__fieldName, S32 index,  char* retval);
extern "C" __declspec(dllexport) S32  __cdecl wle_fn_SimObject_setFieldValue(char * x__object, char * x__fieldName, char * x__value, S32 index);
extern "C" __declspec(dllexport) void  __cdecl wle_fn_SimObject_getFieldType(char * x__object, char * x__fieldName,  char* retval);
extern "C" __declspec(dllexport) void  __cdecl wle_fn_SimObject_setFieldType(char * x__object, char * x__fieldName, char * x__type);
extern "C" __declspec(dllexport) void  __cdecl wle_fn_SimObject_dumpClassHierarchy(char * x__object);
extern "C" __declspec(dllexport) S32  __cdecl wle_fn_SimObject_isMemberOfClass(char * x__object, char * x__className);
extern "C" __declspec(dllexport) S32  __cdecl wle_fn_SimObject_isInNamespaceHierarchy(char * x__object, char * x__name);
extern "C" __declspec(dllexport) void  __cdecl wle_fn_SimObject_delete(char * x__object);
extern "C" __declspec(dllexport) S32  __cdecl wle_fn_SimObject_getDynamicFieldCount(char * x__object);
extern "C" __declspec(dllexport) void  __cdecl wle_fn_SimObject_getDynamicField(char * x__object, int index,  char* retval);
extern "C" __declspec(dllexport) S32  __cdecl wle_fn_SimObject_getFieldCount(char * x__object);
extern "C" __declspec(dllexport) void  __cdecl wle_fn_SimObject_getField(char * x__object, int index,  char* retval);
extern "C" __declspec(dllexport) void  __cdecl wle_fnSimObject_dumpGroupHierarchy(char * x__object);
extern "C" __declspec(dllexport) S32  __cdecl wle_fnSimObject_isChildOfGroup(char * x__object, char * x__group);
extern "C" __declspec(dllexport) S32  __cdecl wle_fnSimObject_isSelected(char * x__object);
extern "C" __declspec(dllexport) void  __cdecl wle_fnSimObject_setIsSelected(char * x__object, bool state);
extern "C" __declspec(dllexport) void  __cdecl wle_fnSimObject_assignPersistentId(char * x__object);
extern "C" __declspec(dllexport) S32  __cdecl wle_fnSimObject_isEditorOnly(char * x__object);
extern "C" __declspec(dllexport) void  __cdecl wle_fnSimObject_setEditorOnly(char * x__object, bool value);
extern "C" __declspec(dllexport) S32  __cdecl wle_fnSimObject_isNameChangeAllowed(char * x__object);
extern "C" __declspec(dllexport) void  __cdecl wle_fnSimObject_setNameChangeAllowed(char * x__object, bool value);
extern "C" __declspec(dllexport) void  __cdecl wle_fnSimObject_clone(char * x__object,  char* retval);
extern "C" __declspec(dllexport) void  __cdecl wle_fnSimObject_deepClone(char * x__object,  char* retval);
extern "C" __declspec(dllexport) void  __cdecl wle_fnSimObject_setLocked(char * x__object, bool value);
extern "C" __declspec(dllexport) void  __cdecl wle_fnSimObject_setHidden(char * x__object, bool value);
extern "C" __declspec(dllexport) void  __cdecl wle_fnSimObject_dump(char * x__object, bool detailed);
extern "C" __declspec(dllexport) void  __cdecl wle_fnSimObject_setName(char * x__object, char * x__newName);
extern "C" __declspec(dllexport) void  __cdecl wle_fnSimObject_getName(char * x__object,  char* retval);
extern "C" __declspec(dllexport) void  __cdecl wle_fnSimObject_setInternalName(char * x__object, char * x__newInternalName);
extern "C" __declspec(dllexport) void  __cdecl wle_fnSimObject_getInternalName(char * x__object,  char* retval);
extern "C" __declspec(dllexport) S32  __cdecl wle_fnSimObject_getId(char * x__object);
extern "C" __declspec(dllexport) void  __cdecl wle_fnSimObject_getGroup(char * x__object,  char* retval);
extern "C" __declspec(dllexport) void  __cdecl wle_fnSimObject_getDebugInfo(char * x__object,  char* retval);
extern "C" __declspec(dllexport) void  __cdecl wle_fnSimPersistSet_resolvePersistentIds(char * x__object);
extern "C" __declspec(dllexport) S32  __cdecl wle_fn_saveObject(char * x__object, char * x__filename);
extern "C" __declspec(dllexport) void  __cdecl wle_fn_loadObject(char * x__filename,  char* retval);
extern "C" __declspec(dllexport) void  __cdecl wle_fnSimSet_add(char * x__object, char * x__a2, char * x__a3, char * x__a4, char * x__a5, char * x__a6, char * x__a7, char * x__a8, char * x__a9, char * x__a10, char * x__a11, char * x__a12, char * x__a13, char * x__a14, char * x__a15, char * x__a16, char * x__a17, char * x__a18, char * x__a19);
extern "C" __declspec(dllexport) void  __cdecl wle_fnSimSet_remove(char * x__object, char * x__a2, char * x__a3, char * x__a4, char * x__a5, char * x__a6, char * x__a7, char * x__a8, char * x__a9, char * x__a10, char * x__a11, char * x__a12, char * x__a13, char * x__a14, char * x__a15, char * x__a16, char * x__a17, char * x__a18, char * x__a19);
extern "C" __declspec(dllexport) void  __cdecl wle_fnSimSet_deleteAllObjects(char * x__object);
extern "C" __declspec(dllexport) void  __cdecl wle_fnSimSet_callOnChildren(char * x__object, char * x__a2, char * x__a3, char * x__a4, char * x__a5, char * x__a6, char * x__a7, char * x__a8, char * x__a9, char * x__a10, char * x__a11, char * x__a12, char * x__a13, char * x__a14, char * x__a15, char * x__a16, char * x__a17, char * x__a18, char * x__a19);
extern "C" __declspec(dllexport) void  __cdecl wle_fnSimSet_callOnChildrenNoRecurse(char * x__object, char * x__a2, char * x__a3, char * x__a4, char * x__a5, char * x__a6, char * x__a7, char * x__a8, char * x__a9, char * x__a10, char * x__a11, char * x__a12, char * x__a13, char * x__a14, char * x__a15, char * x__a16, char * x__a17, char * x__a18, char * x__a19);
extern "C" __declspec(dllexport) S32  __cdecl wle_fnSimSet_getFullCount(char * x__object);
extern "C" __declspec(dllexport) void  __cdecl wle_fnSimSet_sort(char * x__object, char * x__a2);
extern "C" __declspec(dllexport) void  __cdecl wle_fnSimSet_listObjects(char * x__object);
extern "C" __declspec(dllexport) void  __cdecl wle_fnSimSet_clear(char * x__object);
extern "C" __declspec(dllexport) void  __cdecl wle_fnSimSet_getRandom(char * x__object,  char* retval);
extern "C" __declspec(dllexport) void  __cdecl wle_fnSimSet_reorderChild(char * x__object, char * x__child1, char * x__child2);
extern "C" __declspec(dllexport) S32  __cdecl wle_fnSimSet_getCount(char * x__object);
extern "C" __declspec(dllexport) void  __cdecl wle_fnSimSet_getObject(char * x__object, U32 index,  char* retval);
extern "C" __declspec(dllexport) S32  __cdecl wle_fnSimSet_getObjectIndex(char * x__object, char * x__obj);
extern "C" __declspec(dllexport) S32  __cdecl wle_fnSimSet_isMember(char * x__object, char * x__obj);
extern "C" __declspec(dllexport) void  __cdecl wle_fnSimSet_findObjectByInternalName(char * x__object, char * x__internalName, bool searchChildren,  char* retval);
extern "C" __declspec(dllexport) void  __cdecl wle_fnSimSet_bringToFront(char * x__object, char * x__obj);
extern "C" __declspec(dllexport) void  __cdecl wle_fnSimSet_pushToBack(char * x__object, char * x__obj);
extern "C" __declspec(dllexport) S32  __cdecl wle_fnSimSet_acceptsAsChild(char * x__object, char * x__obj);
extern "C" __declspec(dllexport) F32  __cdecl wle_fnSimXMLDocument_attributeF32(char * x__object, char * x__a2);
extern "C" __declspec(dllexport) S32  __cdecl wle_fnSimXMLDocument_attributeS32(char * x__object, char * x__a2);
extern "C" __declspec(dllexport) void  __cdecl wle_fnSimXMLDocument_reset(char * x__object);
extern "C" __declspec(dllexport) S32  __cdecl wle_fnSimXMLDocument_loadFile(char * x__object, char * x__fileName);
extern "C" __declspec(dllexport) S32  __cdecl wle_fnSimXMLDocument_saveFile(char * x__object, char * x__fileName);
extern "C" __declspec(dllexport) void  __cdecl wle_fnSimXMLDocument_parse(char * x__object, char * x__xmlString);
extern "C" __declspec(dllexport) void  __cdecl wle_fnSimXMLDocument_clear(char * x__object);
extern "C" __declspec(dllexport) void  __cdecl wle_fnSimXMLDocument_getErrorDesc(char * x__object,  char* retval);
extern "C" __declspec(dllexport) void  __cdecl wle_fnSimXMLDocument_clearError(char * x__object);
extern "C" __declspec(dllexport) S32  __cdecl wle_fnSimXMLDocument_pushFirstChildElement(char * x__object, char * x__name);
extern "C" __declspec(dllexport) S32  __cdecl wle_fnSimXMLDocument_pushChildElement(char * x__object, S32 index);
extern "C" __declspec(dllexport) S32  __cdecl wle_fnSimXMLDocument_nextSiblingElement(char * x__object, char * x__name);
extern "C" __declspec(dllexport) void  __cdecl wle_fnSimXMLDocument_elementValue(char * x__object,  char* retval);
extern "C" __declspec(dllexport) void  __cdecl wle_fnSimXMLDocument_popElement(char * x__object);
extern "C" __declspec(dllexport) void  __cdecl wle_fnSimXMLDocument_attribute(char * x__object, char * x__attributeName,  char* retval);
extern "C" __declspec(dllexport) S32  __cdecl wle_fnSimXMLDocument_attributeExists(char * x__object, char * x__attributeName);
extern "C" __declspec(dllexport) void  __cdecl wle_fnSimXMLDocument_firstAttribute(char * x__object,  char* retval);
extern "C" __declspec(dllexport) void  __cdecl wle_fnSimXMLDocument_lastAttribute(char * x__object,  char* retval);
extern "C" __declspec(dllexport) void  __cdecl wle_fnSimXMLDocument_nextAttribute(char * x__object,  char* retval);
extern "C" __declspec(dllexport) void  __cdecl wle_fnSimXMLDocument_prevAttribute(char * x__object,  char* retval);
extern "C" __declspec(dllexport) void  __cdecl wle_fnSimXMLDocument_setAttribute(char * x__object, char * x__attributeName, char * x__value);
extern "C" __declspec(dllexport) void  __cdecl wle_fnSimXMLDocument_setObjectAttributes(char * x__object, char * x__objectID);
extern "C" __declspec(dllexport) void  __cdecl wle_fnSimXMLDocument_pushNewElement(char * x__object, char * x__name);
extern "C" __declspec(dllexport) void  __cdecl wle_fnSimXMLDocument_addNewElement(char * x__object, char * x__name);
extern "C" __declspec(dllexport) void  __cdecl wle_fnSimXMLDocument_addHeader(char * x__object);
extern "C" __declspec(dllexport) void  __cdecl wle_fnSimXMLDocument_addComment(char * x__object, char * x__comment);
extern "C" __declspec(dllexport) void  __cdecl wle_fnSimXMLDocument_readComment(char * x__object, S32 index,  char* retval);
extern "C" __declspec(dllexport) void  __cdecl wle_fnSimXMLDocument_addText(char * x__object, char * x__text);
extern "C" __declspec(dllexport) void  __cdecl wle_fnSimXMLDocument_getText(char * x__object,  char* retval);
extern "C" __declspec(dllexport) void  __cdecl wle_fnSimXMLDocument_removeText(char * x__object);
extern "C" __declspec(dllexport) void  __cdecl wle_fnSimXMLDocument_addData(char * x__object, char * x__text);
extern "C" __declspec(dllexport) void  __cdecl wle_fnSimXMLDocument_getData(char * x__object,  char* retval);
extern "C" __declspec(dllexport) void  __cdecl wle_fnFileObject_writeObject(char * x__object, char * x__a2, char * x__a3);
extern "C" __declspec(dllexport) S32  __cdecl wle_fnFileObject_openForRead(char * x__object, char * x__filename);
extern "C" __declspec(dllexport) S32  __cdecl wle_fnFileObject_openForWrite(char * x__object, char * x__filename);
extern "C" __declspec(dllexport) S32  __cdecl wle_fnFileObject_openForAppend(char * x__object, char * x__filename);
extern "C" __declspec(dllexport) S32  __cdecl wle_fnFileObject_isEOF(char * x__object);
extern "C" __declspec(dllexport) void  __cdecl wle_fnFileObject_readLine(char * x__object,  char* retval);
extern "C" __declspec(dllexport) void  __cdecl wle_fnFileObject_peekLine(char * x__object,  char* retval);
extern "C" __declspec(dllexport) void  __cdecl wle_fnFileObject_writeLine(char * x__object, char * x__text);
extern "C" __declspec(dllexport) void  __cdecl wle_fnFileObject_close(char * x__object);
extern "C" __declspec(dllexport) void  __cdecl wle_fn_reloadResource(char * x__path);
extern "C" __declspec(dllexport) S32  __cdecl wle_fnFileStreamObject_open(char * x__object, char * x__filename, char * x__openMode);
extern "C" __declspec(dllexport) void  __cdecl wle_fnFileStreamObject_close(char * x__object);
extern "C" __declspec(dllexport) void  __cdecl wle_fnStreamObject_getStatus(char * x__object,  char* retval);
extern "C" __declspec(dllexport) S32  __cdecl wle_fnStreamObject_isEOS(char * x__object);
extern "C" __declspec(dllexport) S32  __cdecl wle_fnStreamObject_isEOF(char * x__object);
extern "C" __declspec(dllexport) S32  __cdecl wle_fnStreamObject_getPosition(char * x__object);
extern "C" __declspec(dllexport) S32  __cdecl wle_fnStreamObject_setPosition(char * x__object, S32 newPosition);
extern "C" __declspec(dllexport) S32  __cdecl wle_fnStreamObject_getStreamSize(char * x__object);
extern "C" __declspec(dllexport) void  __cdecl wle_fnStreamObject_readLine(char * x__object,  char* retval);
extern "C" __declspec(dllexport) void  __cdecl wle_fnStreamObject_writeLine(char * x__object, char * x__line);
extern "C" __declspec(dllexport) void  __cdecl wle_fnStreamObject_readSTString(char * x__object, bool caseSensitive,  char* retval);
extern "C" __declspec(dllexport) void  __cdecl wle_fnStreamObject_readString(char * x__object,  char* retval);
extern "C" __declspec(dllexport) void  __cdecl wle_fnStreamObject_readLongString(char * x__object, S32 maxLength,  char* retval);
extern "C" __declspec(dllexport) void  __cdecl wle_fnStreamObject_writeLongString(char * x__object, S32 maxLength, char * x__string);
extern "C" __declspec(dllexport) void  __cdecl wle_fnStreamObject_writeString(char * x__object, char * x__string, S32 maxLength);
extern "C" __declspec(dllexport) S32  __cdecl wle_fnStreamObject_copyFrom(char * x__object, char * x__other);
extern "C" __declspec(dllexport) S32  __cdecl wle_fnZipObject_openArchive(char * x__object, char * x__filename, char * x__accessMode);
extern "C" __declspec(dllexport) void  __cdecl wle_fnZipObject_closeArchive(char * x__object);
extern "C" __declspec(dllexport) void  __cdecl wle_fnZipObject_openFileForRead(char * x__object, char * x__filename,  char* retval);
extern "C" __declspec(dllexport) void  __cdecl wle_fnZipObject_openFileForWrite(char * x__object, char * x__filename,  char* retval);
extern "C" __declspec(dllexport) void  __cdecl wle_fnZipObject_closeFile(char * x__object, char * x__stream);
extern "C" __declspec(dllexport) S32  __cdecl wle_fnZipObject_addFile(char * x__object, char * x__filename, char * x__pathInZip, bool replace);
extern "C" __declspec(dllexport) S32  __cdecl wle_fnZipObject_extractFile(char * x__object, char * x__pathInZip, char * x__filename);
extern "C" __declspec(dllexport) S32  __cdecl wle_fnZipObject_deleteFile(char * x__object, char * x__pathInZip);
extern "C" __declspec(dllexport) S32  __cdecl wle_fnZipObject_getFileEntryCount(char * x__object);
extern "C" __declspec(dllexport) void  __cdecl wle_fnZipObject_getFileEntry(char * x__object, S32 index,  char* retval);
extern "C" __declspec(dllexport) void  __cdecl wle_fnDecalRoad_regenerate(char * x__object);
extern "C" __declspec(dllexport) void  __cdecl wle_fnDecalRoad_postApply(char * x__object);
extern "C" __declspec(dllexport) void  __cdecl wle_fnMeshRoad_setNodeDepth(char * x__object, S32 idx, F32 meters);
extern "C" __declspec(dllexport) void  __cdecl wle_fnMeshRoad_regenerate(char * x__object);
extern "C" __declspec(dllexport) void  __cdecl wle_fnMeshRoad_postApply(char * x__object);
extern "C" __declspec(dllexport) void  __cdecl wle_fnRiver_regenerate(char * x__object);
extern "C" __declspec(dllexport) void  __cdecl wle_fnRiver_setMetersPerSegment(char * x__object, F32 meters);
extern "C" __declspec(dllexport) void  __cdecl wle_fnRiver_setBatchSize(char * x__object, F32 meters);
extern "C" __declspec(dllexport) void  __cdecl wle_fnRiver_setNodeDepth(char * x__object, S32 idx, F32 meters);
extern "C" __declspec(dllexport) void  __cdecl wle_fnRiver_setMaxDivisionSize(char * x__object, F32 meters);
extern "C" __declspec(dllexport) void  __cdecl wle_fnScatterSky_applyChanges(char * x__object);
extern "C" __declspec(dllexport) void  __cdecl wle_fnSkyBox_postApply(char * x__object);
extern "C" __declspec(dllexport) void  __cdecl wle_fnSun_apply(char * x__object);
extern "C" __declspec(dllexport) void  __cdecl wle_fnSun_animate(char * x__object, char * x__a2, char * x__a3, char * x__a4, char * x__a5, char * x__a6);
extern "C" __declspec(dllexport) void  __cdecl wle_fnGuiRoadEditorCtrl_deleteNode(char * x__object);
extern "C" __declspec(dllexport) void  __cdecl wle_fnGuiRoadEditorCtrl_getMode(char * x__object,  char* retval);
extern "C" __declspec(dllexport) F32  __cdecl wle_fnGuiRoadEditorCtrl_getNodeWidth(char * x__object);
extern "C" __declspec(dllexport) void  __cdecl wle_fnGuiRoadEditorCtrl_setNodeWidth(char * x__object, char * x__a2);
extern "C" __declspec(dllexport) void  __cdecl wle_fnGuiRoadEditorCtrl_getNodePosition(char * x__object,  char* retval);
extern "C" __declspec(dllexport) void  __cdecl wle_fnGuiRoadEditorCtrl_setNodePosition(char * x__object, char * x__a2);
extern "C" __declspec(dllexport) void  __cdecl wle_fnGuiRoadEditorCtrl_setSelectedRoad(char * x__object, char * x__a2);
extern "C" __declspec(dllexport) void  __cdecl wle_fnGuiRoadEditorCtrl_getSelectedRoad(char * x__object,  char* retval);
extern "C" __declspec(dllexport) S32  __cdecl wle_fnGuiRoadEditorCtrl_getSelectedNode(char * x__object);
extern "C" __declspec(dllexport) void  __cdecl wle_fnGuiRoadEditorCtrl_deleteRoad(char * x__object);
extern "C" __declspec(dllexport) S32  __cdecl wle_fnForest_saveDataFile(char * x__object, char * x__a2);
extern "C" __declspec(dllexport) S32  __cdecl wle_fnForest_isDirty(char * x__object);
extern "C" __declspec(dllexport) void  __cdecl wle_fnForest_regenCells(char * x__object);
extern "C" __declspec(dllexport) void  __cdecl wle_fnForest_clear(char * x__object);
extern "C" __declspec(dllexport) void  __cdecl wle_fnForestWindEmitter_attachToObject(char * x__object, U32 objectID);
extern "C" __declspec(dllexport) S32  __cdecl wle_fnForestBrush_containsItemData(char * x__object, char * x__a2);
extern "C" __declspec(dllexport) void  __cdecl wle_fnForestBrushTool_collectElements(char * x__object);
extern "C" __declspec(dllexport) void  __cdecl wle_fnForestEditorCtrl_updateActiveForest(char * x__object);
extern "C" __declspec(dllexport) void  __cdecl wle_fnForestEditorCtrl_setActiveTool(char * x__object, char * x__a2);
extern "C" __declspec(dllexport) S32  __cdecl wle_fnForestEditorCtrl_getActiveTool(char * x__object);
extern "C" __declspec(dllexport) void  __cdecl wle_fnForestEditorCtrl_deleteMeshSafe(char * x__object, char * x__a2);
extern "C" __declspec(dllexport) S32  __cdecl wle_fnForestEditorCtrl_isDirty(char * x__object);
extern "C" __declspec(dllexport) S32  __cdecl wle_fnForestSelectionTool_getSelectionCount(char * x__object);
extern "C" __declspec(dllexport) void  __cdecl wle_fnForestSelectionTool_deleteSelection(char * x__object);
extern "C" __declspec(dllexport) void  __cdecl wle_fnForestSelectionTool_clearSelection(char * x__object);
extern "C" __declspec(dllexport) void  __cdecl wle_fnForestSelectionTool_cutSelection(char * x__object);
extern "C" __declspec(dllexport) void  __cdecl wle_fnForestSelectionTool_copySelection(char * x__object);
extern "C" __declspec(dllexport) void  __cdecl wle_fnForestSelectionTool_pasteSelection(char * x__object);
extern "C" __declspec(dllexport) void  __cdecl wle_fn_populateFontCacheString(char * x__faceName, S32 fontSize, char * x__string);
extern "C" __declspec(dllexport) void  __cdecl wle_fn_populateFontCacheRange(char * x__faceName, S32 fontSize, U32 rangeStart, U32 rangeEnd);
extern "C" __declspec(dllexport) void  __cdecl wle_fn_dumpFontCacheStatus();
extern "C" __declspec(dllexport) void  __cdecl wle_fn_writeFontCache();
extern "C" __declspec(dllexport) void  __cdecl wle_fn_populateAllFontCacheString(char * x__string);
extern "C" __declspec(dllexport) void  __cdecl wle_fn_populateAllFontCacheRange(U32 rangeStart, U32 rangeEnd);
extern "C" __declspec(dllexport) void  __cdecl wle_fn_exportCachedFont(char * x__faceName, S32 fontSize, char * x__fileName, S32 padding, S32 kerning);
extern "C" __declspec(dllexport) void  __cdecl wle_fn_importCachedFont(char * x__faceName, S32 fontSize, char * x__fileName, S32 padding, S32 kerning);
extern "C" __declspec(dllexport) void  __cdecl wle_fn_duplicateCachedFont(char * x__oldFontName, S32 oldFontSize, char * x__newFontName);
extern "C" __declspec(dllexport) void  __cdecl wle_fn_getDisplayDeviceList(char* retval);
extern "C" __declspec(dllexport) void  __cdecl wle_fn_listGFXResources(bool unflaggedOnly);
extern "C" __declspec(dllexport) void  __cdecl wle_fn_flagCurrentGFXResources();
extern "C" __declspec(dllexport) void  __cdecl wle_fn_clearGFXResourceFlags();
extern "C" __declspec(dllexport) void  __cdecl wle_fn_describeGFXResources(char * x__resourceTypes, char * x__filePath, bool unflaggedOnly);
extern "C" __declspec(dllexport) void  __cdecl wle_fn_describeGFXStateBlocks(char * x__filePath);
extern "C" __declspec(dllexport) F32  __cdecl wle_fn_getPixelShaderVersion();
extern "C" __declspec(dllexport) void  __cdecl wle_fn_setPixelShaderVersion(float version);
extern "C" __declspec(dllexport) void  __cdecl wle_fn_getDisplayDeviceInformation(char* retval);
extern "C" __declspec(dllexport) S32  __cdecl wle_fn_getBestHDRFormat();
extern "C" __declspec(dllexport) void  __cdecl wle_fn_getDesktopResolution(char* retval);
extern "C" __declspec(dllexport) void  __cdecl wle_fn_addGlobalShaderMacro(char * x__name, char * x__value);
extern "C" __declspec(dllexport) void  __cdecl wle_fn_removeGlobalShaderMacro(char * x__name);
extern "C" __declspec(dllexport) void  __cdecl wle_fn_flushTextureCache();
extern "C" __declspec(dllexport) void  __cdecl wle_fn_cleanupTexturePool();
extern "C" __declspec(dllexport) void  __cdecl wle_fn_reloadTextures();
extern "C" __declspec(dllexport) void  __cdecl wle_fn_getTextureProfileStats(char* retval);
extern "C" __declspec(dllexport) void  __cdecl wle_fn_screenShot(char * x__file, char * x__format, U32 tileCount, F32 tileOverlap);
extern "C" __declspec(dllexport) S32  __cdecl wle_fn_getActiveDDSFiles();
extern "C" __declspec(dllexport) void  __cdecl wle_fn_getBitmapInfo(char * x__filename,  char* retval);
extern "C" __declspec(dllexport) void  __cdecl wle_fnCubemapData_updateFaces(char * x__object);
extern "C" __declspec(dllexport) void  __cdecl wle_fnCubemapData_getFilename(char * x__object,  char* retval);
extern "C" __declspec(dllexport) void  __cdecl wle_fnDebugDrawer_drawLine(char * x__object, char * x__a, char * x__b, char * x__color);
extern "C" __declspec(dllexport) void  __cdecl wle_fnDebugDrawer_drawBox(char * x__object, char * x__a, char * x__b, char * x__color);
extern "C" __declspec(dllexport) void  __cdecl wle_fnDebugDrawer_setLastTTL(char * x__object, U32 ms);
extern "C" __declspec(dllexport) void  __cdecl wle_fnDebugDrawer_setLastZTest(char * x__object, bool enabled);
extern "C" __declspec(dllexport) void  __cdecl wle_fnDebugDrawer_toggleFreeze(char * x__object);
extern "C" __declspec(dllexport) void  __cdecl wle_fnDebugDrawer_toggleDrawing(char * x__object);
extern "C" __declspec(dllexport) void  __cdecl wle_fn_startVideoCapture(char * x__canvas, char * x__filename, char * x__encoder, F32 framerate, char * x__resolution);
extern "C" __declspec(dllexport) void  __cdecl wle_fn_stopVideoCapture();
extern "C" __declspec(dllexport) void  __cdecl wle_fn_playJournalToVideo(char * x__journalFile, char * x__videoFile, char * x__encoder, F32 framerate, char * x__resolution);
extern "C" __declspec(dllexport) void  __cdecl wle_fnGuiTSCtrl_unproject(char * x__object, char * x__screenPosition,  char* retval);
extern "C" __declspec(dllexport) void  __cdecl wle_fnGuiTSCtrl_project(char * x__object, char * x__worldPosition,  char* retval);
extern "C" __declspec(dllexport) void  __cdecl wle_fnGuiTSCtrl_getWorldToScreenScale(char * x__object,  char* retval);
extern "C" __declspec(dllexport) F32  __cdecl wle_fnGuiTSCtrl_calculateViewDistance(char * x__object, float radius);
extern "C" __declspec(dllexport) void  __cdecl wle_fnGuiBitmapButtonCtrl_setBitmap(char * x__object, char * x__path);
extern "C" __declspec(dllexport) void  __cdecl wle_fnGuiButtonBaseCtrl_performClick(char * x__object);
extern "C" __declspec(dllexport) void  __cdecl wle_fnGuiButtonBaseCtrl_setText(char * x__object, char * x__text);
extern "C" __declspec(dllexport) void  __cdecl wle_fnGuiButtonBaseCtrl_setTextID(char * x__object, char * x__id);
extern "C" __declspec(dllexport) void  __cdecl wle_fnGuiButtonBaseCtrl_getText(char * x__object,  char* retval);
extern "C" __declspec(dllexport) void  __cdecl wle_fnGuiButtonBaseCtrl_setStateOn(char * x__object, bool isOn);
extern "C" __declspec(dllexport) void  __cdecl wle_fnGuiButtonBaseCtrl_resetState(char * x__object);
extern "C" __declspec(dllexport) void  __cdecl wle_fnGuiCheckBoxCtrl_setStateOn(char * x__object, bool newState);
extern "C" __declspec(dllexport) S32  __cdecl wle_fnGuiCheckBoxCtrl_isStateOn(char * x__object);
extern "C" __declspec(dllexport) void  __cdecl wle_fnGuiIconButtonCtrl_setBitmap(char * x__object, char * x__buttonFilename);
extern "C" __declspec(dllexport) void  __cdecl wle_fnGuiSwatchButtonCtrl_setColor(char * x__object, char * x__newColor);
extern "C" __declspec(dllexport) void  __cdecl wle_fnGuiToolboxButtonCtrl_setNormalBitmap(char * x__object, char * x__a2);
extern "C" __declspec(dllexport) void  __cdecl wle_fnGuiToolboxButtonCtrl_setLoweredBitmap(char * x__object, char * x__a2);
extern "C" __declspec(dllexport) void  __cdecl wle_fnGuiToolboxButtonCtrl_setHoverBitmap(char * x__object, char * x__a2);
extern "C" __declspec(dllexport) void  __cdecl wle_fnGuiAutoScrollCtrl_reset(char * x__object);
extern "C" __declspec(dllexport) void  __cdecl wle_fnGuiDynamicCtrlArrayControl_refresh(char * x__object);
extern "C" __declspec(dllexport) void  __cdecl wle_fnGuiFormCtrl_setCaption(char * x__object, char * x__caption);
extern "C" __declspec(dllexport) void  __cdecl wle_fnGuiFrameSetCtrl_frameBorder(char * x__object, S32 index, char * x__state);
extern "C" __declspec(dllexport) void  __cdecl wle_fnGuiFrameSetCtrl_frameMovable(char * x__object, S32 index, char * x__state);
extern "C" __declspec(dllexport) void  __cdecl wle_fnGuiFrameSetCtrl_frameMinExtent(char * x__object, S32 index, S32 width, S32 height);
extern "C" __declspec(dllexport) void  __cdecl wle_fnGuiFrameSetCtrl_framePadding(char * x__object, S32 index, char * x__padding);
extern "C" __declspec(dllexport) void  __cdecl wle_fnGuiFrameSetCtrl_getFramePadding(char * x__object, S32 index,  char* retval);
extern "C" __declspec(dllexport) void  __cdecl wle_fnGuiFrameSetCtrl_addColumn(char * x__object);
extern "C" __declspec(dllexport) void  __cdecl wle_fnGuiFrameSetCtrl_addRow(char * x__object);
extern "C" __declspec(dllexport) void  __cdecl wle_fnGuiFrameSetCtrl_removeColumn(char * x__object);
extern "C" __declspec(dllexport) void  __cdecl wle_fnGuiFrameSetCtrl_removeRow(char * x__object);
extern "C" __declspec(dllexport) S32  __cdecl wle_fnGuiFrameSetCtrl_getColumnCount(char * x__object);
extern "C" __declspec(dllexport) S32  __cdecl wle_fnGuiFrameSetCtrl_getRowCount(char * x__object);
extern "C" __declspec(dllexport) S32  __cdecl wle_fnGuiFrameSetCtrl_getColumnOffset(char * x__object, S32 index);
extern "C" __declspec(dllexport) S32  __cdecl wle_fnGuiFrameSetCtrl_getRowOffset(char * x__object, S32 index);
extern "C" __declspec(dllexport) void  __cdecl wle_fnGuiFrameSetCtrl_setColumnOffset(char * x__object, S32 index, S32 offset);
extern "C" __declspec(dllexport) void  __cdecl wle_fnGuiFrameSetCtrl_setRowOffset(char * x__object, S32 index, S32 offset);
extern "C" __declspec(dllexport) void  __cdecl wle_fnGuiFrameSetCtrl_updateSizes(char * x__object);
extern "C" __declspec(dllexport) void  __cdecl wle_fnGuiPaneControl_setCollapsed(char * x__object, bool collapse);
extern "C" __declspec(dllexport) S32  __cdecl wle_fnGuiRolloutCtrl_isExpanded(char * x__object);
extern "C" __declspec(dllexport) void  __cdecl wle_fnGuiRolloutCtrl_collapse(char * x__object);
extern "C" __declspec(dllexport) void  __cdecl wle_fnGuiRolloutCtrl_expand(char * x__object);
extern "C" __declspec(dllexport) void  __cdecl wle_fnGuiRolloutCtrl_toggleCollapse(char * x__object);
extern "C" __declspec(dllexport) void  __cdecl wle_fnGuiRolloutCtrl_toggleExpanded(char * x__object, bool instantly);
extern "C" __declspec(dllexport) void  __cdecl wle_fnGuiRolloutCtrl_instantCollapse(char * x__object);
extern "C" __declspec(dllexport) void  __cdecl wle_fnGuiRolloutCtrl_instantExpand(char * x__object);
extern "C" __declspec(dllexport) void  __cdecl wle_fnGuiRolloutCtrl_sizeToContents(char * x__object);
extern "C" __declspec(dllexport) void  __cdecl wle_fnGuiScrollCtrl_scrollToTop(char * x__object);
extern "C" __declspec(dllexport) void  __cdecl wle_fnGuiScrollCtrl_scrollToBottom(char * x__object);
extern "C" __declspec(dllexport) void  __cdecl wle_fnGuiScrollCtrl_setScrollPosition(char * x__object, S32 x, S32 y);
extern "C" __declspec(dllexport) void  __cdecl wle_fnGuiScrollCtrl_scrollToObject(char * x__object, char * x__control);
extern "C" __declspec(dllexport) void  __cdecl wle_fnGuiScrollCtrl_getScrollPosition(char * x__object,  char* retval);
extern "C" __declspec(dllexport) S32  __cdecl wle_fnGuiScrollCtrl_getScrollPositionX(char * x__object);
extern "C" __declspec(dllexport) S32  __cdecl wle_fnGuiScrollCtrl_getScrollPositionY(char * x__object);
extern "C" __declspec(dllexport) void  __cdecl wle_fnGuiScrollCtrl_computeSizes(char * x__object);
extern "C" __declspec(dllexport) S32  __cdecl wle_fnGuiStackControl_isFrozen(char * x__object);
extern "C" __declspec(dllexport) void  __cdecl wle_fnGuiStackControl_freeze(char * x__object, bool freeze);
extern "C" __declspec(dllexport) void  __cdecl wle_fnGuiStackControl_updateStack(char * x__object);
extern "C" __declspec(dllexport) void  __cdecl wle_fnGuiTabBookCtrl_addPage(char * x__object, char * x__title);
extern "C" __declspec(dllexport) void  __cdecl wle_fnGuiTabBookCtrl_selectPage(char * x__object, S32 index);
extern "C" __declspec(dllexport) S32  __cdecl wle_fnGuiTabBookCtrl_getSelectedPage(char * x__object);
extern "C" __declspec(dllexport) void  __cdecl wle_fnGuiBitmapCtrl_setBitmap(char * x__object, char * x__a2, char * x__a3);
extern "C" __declspec(dllexport) void  __cdecl wle_fnGuiBitmapCtrl_setValue(char * x__object, S32 x, S32 y);
extern "C" __declspec(dllexport) void  __cdecl wle_fnGuiColorPickerCtrl_getSelectorPos(char * x__object,  char* retval);
extern "C" __declspec(dllexport) void  __cdecl wle_fnGuiColorPickerCtrl_setSelectorPos(char * x__object, char * x__a2);
extern "C" __declspec(dllexport) void  __cdecl wle_fnGuiColorPickerCtrl_updateColor(char * x__object);
extern "C" __declspec(dllexport) void  __cdecl wle_fnGuiDirectoryFileListCtrl_setFilter(char * x__object, char * x__filter);
extern "C" __declspec(dllexport) void  __cdecl wle_fnGuiDirectoryFileListCtrl_reload(char * x__object);
extern "C" __declspec(dllexport) S32  __cdecl wle_fnGuiDirectoryFileListCtrl_setPath(char * x__object, char * x__path, char * x__filter);
extern "C" __declspec(dllexport) void  __cdecl wle_fnGuiDirectoryFileListCtrl_getSelectedFiles(char * x__object,  char* retval);
extern "C" __declspec(dllexport) void  __cdecl wle_fnGuiDirectoryFileListCtrl_getSelectedFile(char * x__object,  char* retval);
extern "C" __declspec(dllexport) void  __cdecl wle_fnGuiFileTreeCtrl_getSelectedPath(char * x__object,  char* retval);
extern "C" __declspec(dllexport) S32  __cdecl wle_fnGuiFileTreeCtrl_setSelectedPath(char * x__object, char * x__a2);
extern "C" __declspec(dllexport) void  __cdecl wle_fnGuiFileTreeCtrl_reload(char * x__object);
extern "C" __declspec(dllexport) void  __cdecl wle_fnGuiGameListMenuCtrl_addRow(char * x__object, char * x__label, char * x__callback, S32 icon, S32 yPad, bool useHighlightIcon, bool enabled);
extern "C" __declspec(dllexport) S32  __cdecl wle_fnGuiGameListMenuCtrl_isRowEnabled(char * x__object, S32 row);
extern "C" __declspec(dllexport) void  __cdecl wle_fnGuiGameListMenuCtrl_setRowEnabled(char * x__object, S32 row, bool enabled);
extern "C" __declspec(dllexport) void  __cdecl wle_fnGuiGameListMenuCtrl_activateRow(char * x__object);
extern "C" __declspec(dllexport) S32  __cdecl wle_fnGuiGameListMenuCtrl_getRowCount(char * x__object);
extern "C" __declspec(dllexport) void  __cdecl wle_fnGuiGameListMenuCtrl_getRowLabel(char * x__object, S32 row,  char* retval);
extern "C" __declspec(dllexport) void  __cdecl wle_fnGuiGameListMenuCtrl_setRowLabel(char * x__object, S32 row, char * x__label);
extern "C" __declspec(dllexport) void  __cdecl wle_fnGuiGameListMenuCtrl_setSelected(char * x__object, S32 row);
extern "C" __declspec(dllexport) S32  __cdecl wle_fnGuiGameListMenuCtrl_getSelectedRow(char * x__object);
extern "C" __declspec(dllexport) void  __cdecl wle_fnGuiGameListOptionsCtrl_addRow(char * x__object, char * x__label, char * x__options, bool wrapOptions, char * x__callback, S32 icon, S32 yPad, bool enabled);
extern "C" __declspec(dllexport) void  __cdecl wle_fnGuiGameListOptionsCtrl_getCurrentOption(char * x__object, S32 row,  char* retval);
extern "C" __declspec(dllexport) S32  __cdecl wle_fnGuiGameListOptionsCtrl_selectOption(char * x__object, S32 row, char * x__option);
extern "C" __declspec(dllexport) void  __cdecl wle_fnGuiGameListOptionsCtrl_setOptions(char * x__object, S32 row, char * x__optionsList);
extern "C" __declspec(dllexport) S32  __cdecl wle_fnGuiGradientCtrl_getColorCount(char * x__object);
extern "C" __declspec(dllexport) void  __cdecl wle_fnGuiGradientCtrl_getColor(char * x__object, char * x__a2,  char* retval);
extern "C" __declspec(dllexport) void  __cdecl wle_fnGuiListBoxCtrl_setMultipleSelection(char * x__object, bool allowMultSelections);
extern "C" __declspec(dllexport) void  __cdecl wle_fnGuiListBoxCtrl_clearItems(char * x__object);
extern "C" __declspec(dllexport) void  __cdecl wle_fnGuiListBoxCtrl_clearSelection(char * x__object);
extern "C" __declspec(dllexport) void  __cdecl wle_fnGuiListBoxCtrl_setSelected(char * x__object, S32 index, bool setSelected);
extern "C" __declspec(dllexport) S32  __cdecl wle_fnGuiListBoxCtrl_getItemCount(char * x__object);
extern "C" __declspec(dllexport) S32  __cdecl wle_fnGuiListBoxCtrl_getSelCount(char * x__object);
extern "C" __declspec(dllexport) S32  __cdecl wle_fnGuiListBoxCtrl_getSelectedItem(char * x__object);
extern "C" __declspec(dllexport) void  __cdecl wle_fnGuiListBoxCtrl_getSelectedItems(char * x__object,  char* retval);
extern "C" __declspec(dllexport) S32  __cdecl wle_fnGuiListBoxCtrl_findItemText(char * x__object, char * x__findText, bool bCaseSensitive);
extern "C" __declspec(dllexport) void  __cdecl wle_fnGuiListBoxCtrl_setCurSel(char * x__object, S32 indexId);
extern "C" __declspec(dllexport) void  __cdecl wle_fnGuiListBoxCtrl_setCurSelRange(char * x__object, S32 indexStart, S32 indexStop);
extern "C" __declspec(dllexport) S32  __cdecl wle_fnGuiListBoxCtrl_addItem(char * x__object, char * x__newItem, char * x__color);
extern "C" __declspec(dllexport) void  __cdecl wle_fnGuiListBoxCtrl_setItemColor(char * x__object, S32 index, char * x__color);
extern "C" __declspec(dllexport) void  __cdecl wle_fnGuiListBoxCtrl_clearItemColor(char * x__object, S32 index);
extern "C" __declspec(dllexport) void  __cdecl wle_fnGuiListBoxCtrl_insertItem(char * x__object, char * x__text, S32 index);
extern "C" __declspec(dllexport) void  __cdecl wle_fnGuiListBoxCtrl_deleteItem(char * x__object, S32 itemIndex);
extern "C" __declspec(dllexport) void  __cdecl wle_fnGuiListBoxCtrl_getItemText(char * x__object, S32 index,  char* retval);
extern "C" __declspec(dllexport) void  __cdecl wle_fnGuiListBoxCtrl_getItemObject(char * x__object, S32 index,  char* retval);
extern "C" __declspec(dllexport) void  __cdecl wle_fnGuiListBoxCtrl_setItemText(char * x__object, S32 index, char * x__newtext);
extern "C" __declspec(dllexport) void  __cdecl wle_fnGuiListBoxCtrl_setItemTooltip(char * x__object, S32 index, char * x__text);
extern "C" __declspec(dllexport) S32  __cdecl wle_fnGuiListBoxCtrl_getLastClickItem(char * x__object);
extern "C" __declspec(dllexport) void  __cdecl wle_fnGuiListBoxCtrl_doMirror(char * x__object);
extern "C" __declspec(dllexport) void  __cdecl wle_fnGuiListBoxCtrl_addFilteredItem(char * x__object, char * x__newItem);
extern "C" __declspec(dllexport) void  __cdecl wle_fnGuiListBoxCtrl_removeFilteredItem(char * x__object, char * x__itemName);
extern "C" __declspec(dllexport) S32  __cdecl wle_fnGuiMaterialCtrl_setMaterial(char * x__object, char * x__a2);
extern "C" __declspec(dllexport) void  __cdecl wle_fn_StripMLControlChars(char * x__inString,  char* retval);
extern "C" __declspec(dllexport) void  __cdecl wle_fnGuiMLTextCtrl_setText(char * x__object, char * x__text);
extern "C" __declspec(dllexport) void  __cdecl wle_fnGuiMLTextCtrl_getText(char * x__object,  char* retval);
extern "C" __declspec(dllexport) void  __cdecl wle_fnGuiMLTextCtrl_addText(char * x__object, char * x__text, bool reformat);
extern "C" __declspec(dllexport) S32  __cdecl wle_fnGuiMLTextCtrl_setCursorPosition(char * x__object, int newPos);
extern "C" __declspec(dllexport) void  __cdecl wle_fnGuiMLTextCtrl_scrollToTag(char * x__object, int tagID);
extern "C" __declspec(dllexport) void  __cdecl wle_fnGuiMLTextCtrl_scrollToTop(char * x__object, S32 param1, S32 param2);
extern "C" __declspec(dllexport) void  __cdecl wle_fnGuiMLTextCtrl_scrollToBottom(char * x__object);
extern "C" __declspec(dllexport) void  __cdecl wle_fnGuiMLTextCtrl_forceReflow(char * x__object);
extern "C" __declspec(dllexport) void  __cdecl wle_fnGuiMLTextCtrl_setAlpha(char * x__object, F32 alphaVal);
extern "C" __declspec(dllexport) void  __cdecl wle_fnGuiPopUpMenuCtrl_add(char * x__object, char * x__a2, char * x__a3, char * x__a4);
extern "C" __declspec(dllexport) void  __cdecl wle_fnGuiPopUpMenuCtrl_addScheme(char * x__object, char * x__a2, char * x__a3, char * x__a4, char * x__a5);
extern "C" __declspec(dllexport) void  __cdecl wle_fnGuiPopUpMenuCtrl_getText(char * x__object,  char* retval);
extern "C" __declspec(dllexport) void  __cdecl wle_fnGuiPopUpMenuCtrl_clear(char * x__object);
extern "C" __declspec(dllexport) void  __cdecl wle_fnGuiPopUpMenuCtrl_sort(char * x__object);
extern "C" __declspec(dllexport) void  __cdecl wle_fnGuiPopUpMenuCtrl_sortID(char * x__object);
extern "C" __declspec(dllexport) void  __cdecl wle_fnGuiPopUpMenuCtrl_forceOnAction(char * x__object);
extern "C" __declspec(dllexport) void  __cdecl wle_fnGuiPopUpMenuCtrl_forceClose(char * x__object);
extern "C" __declspec(dllexport) S32  __cdecl wle_fnGuiPopUpMenuCtrl_getSelected(char * x__object);
extern "C" __declspec(dllexport) void  __cdecl wle_fnGuiPopUpMenuCtrl_setSelected(char * x__object, char * x__a2, char * x__a3);
extern "C" __declspec(dllexport) void  __cdecl wle_fnGuiPopUpMenuCtrl_setFirstSelected(char * x__object, char * x__a2);
extern "C" __declspec(dllexport) void  __cdecl wle_fnGuiPopUpMenuCtrl_setNoneSelected(char * x__object);
extern "C" __declspec(dllexport) void  __cdecl wle_fnGuiPopUpMenuCtrl_getTextById(char * x__object, char * x__a2,  char* retval);
extern "C" __declspec(dllexport) void  __cdecl wle_fnGuiPopUpMenuCtrl_changeTextById(char * x__object, char * x__a2, char * x__a3);
extern "C" __declspec(dllexport) void  __cdecl wle_fnGuiPopUpMenuCtrl_setEnumContent(char * x__object, char * x__a2, char * x__a3);
extern "C" __declspec(dllexport) S32  __cdecl wle_fnGuiPopUpMenuCtrl_findText(char * x__object, char * x__a2);
extern "C" __declspec(dllexport) S32  __cdecl wle_fnGuiPopUpMenuCtrl_size(char * x__object);
extern "C" __declspec(dllexport) void  __cdecl wle_fnGuiPopUpMenuCtrl_replaceText(char * x__object, char * x__a2);
extern "C" __declspec(dllexport) void  __cdecl wle_fnGuiPopUpMenuCtrl_clearEntry(char * x__object, char * x__a2);
extern "C" __declspec(dllexport) void  __cdecl wle_fnGuiPopUpMenuCtrlEx_add(char * x__object, char * x__a2, char * x__a3, char * x__a4);
extern "C" __declspec(dllexport) void  __cdecl wle_fnGuiPopUpMenuCtrlEx_setSelected(char * x__object, char * x__a2, char * x__a3);
extern "C" __declspec(dllexport) void  __cdecl wle_fnGuiPopUpMenuCtrlEx_setFirstSelected(char * x__object, char * x__a2);
extern "C" __declspec(dllexport) void  __cdecl wle_fnGuiPopUpMenuCtrlEx_getColorById(char * x__object, char * x__a2,  char* retval);
extern "C" __declspec(dllexport) void  __cdecl wle_fnGuiPopUpMenuCtrlEx_setEnumContent(char * x__object, char * x__a2, char * x__a3);
extern "C" __declspec(dllexport) S32  __cdecl wle_fnGuiPopUpMenuCtrlEx_findText(char * x__object, char * x__a2);
extern "C" __declspec(dllexport) S32  __cdecl wle_fnGuiPopUpMenuCtrlEx_size(char * x__object);
extern "C" __declspec(dllexport) void  __cdecl wle_fnGuiPopUpMenuCtrlEx_replaceText(char * x__object, char * x__a2);
extern "C" __declspec(dllexport) void  __cdecl wle_fnGuiPopUpMenuCtrlEx_clearEntry(char * x__object, char * x__a2);
extern "C" __declspec(dllexport) void  __cdecl wle_fnGuiPopUpMenuCtrlEx_addCategory(char * x__object, char * x__text);
extern "C" __declspec(dllexport) void  __cdecl wle_fnGuiPopUpMenuCtrlEx_addScheme(char * x__object, S32 id, char * x__fontColor, char * x__fontColorHL, char * x__fontColorSEL);
extern "C" __declspec(dllexport) void  __cdecl wle_fnGuiPopUpMenuCtrlEx_setText(char * x__object, char * x__text);
extern "C" __declspec(dllexport) void  __cdecl wle_fnGuiPopUpMenuCtrlEx_getText(char * x__object,  char* retval);
extern "C" __declspec(dllexport) void  __cdecl wle_fnGuiPopUpMenuCtrlEx_clear(char * x__object);
extern "C" __declspec(dllexport) void  __cdecl wle_fnGuiPopUpMenuCtrlEx_sort(char * x__object);
extern "C" __declspec(dllexport) void  __cdecl wle_fnGuiPopUpMenuCtrlEx_sortID(char * x__object);
extern "C" __declspec(dllexport) void  __cdecl wle_fnGuiPopUpMenuCtrlEx_forceOnAction(char * x__object);
extern "C" __declspec(dllexport) void  __cdecl wle_fnGuiPopUpMenuCtrlEx_forceClose(char * x__object);
extern "C" __declspec(dllexport) S32  __cdecl wle_fnGuiPopUpMenuCtrlEx_getSelected(char * x__object);
extern "C" __declspec(dllexport) void  __cdecl wle_fnGuiPopUpMenuCtrlEx_setNoneSelected(char * x__object, S32 param);
extern "C" __declspec(dllexport) void  __cdecl wle_fnGuiPopUpMenuCtrlEx_getTextById(char * x__object, S32 id,  char* retval);
extern "C" __declspec(dllexport) F32  __cdecl wle_fnGuiSliderCtrl_getValue(char * x__object);
extern "C" __declspec(dllexport) void  __cdecl wle_fnGuiSliderCtrl_setValue(char * x__object, F32 pos, bool doCallback);
extern "C" __declspec(dllexport) S32  __cdecl wle_fnGuiSliderCtrl_isThumbBeingDragged(char * x__object);
extern "C" __declspec(dllexport) void  __cdecl wle_fnGuiTabPageCtrl_select(char * x__object);
extern "C" __declspec(dllexport) void  __cdecl wle_fnGuiTextCtrl_setText(char * x__object, char * x__text);
extern "C" __declspec(dllexport) void  __cdecl wle_fnGuiTextCtrl_setTextID(char * x__object, char * x__textID);
extern "C" __declspec(dllexport) void  __cdecl wle_fnGuiTextEditCtrl_getText(char * x__object,  char* retval);
extern "C" __declspec(dllexport) void  __cdecl wle_fnGuiTextEditCtrl_setText(char * x__object, char * x__text);
extern "C" __declspec(dllexport) S32  __cdecl wle_fnGuiTextEditCtrl_getCursorPos(char * x__object);
extern "C" __declspec(dllexport) void  __cdecl wle_fnGuiTextEditCtrl_setCursorPos(char * x__object, int position);
extern "C" __declspec(dllexport) S32  __cdecl wle_fnGuiTextEditCtrl_isAllTextSelected(char * x__object);
extern "C" __declspec(dllexport) void  __cdecl wle_fnGuiTextEditCtrl_selectAllText(char * x__object);
extern "C" __declspec(dllexport) void  __cdecl wle_fnGuiTextEditCtrl_clearSelectedText(char * x__object);
extern "C" __declspec(dllexport) void  __cdecl wle_fnGuiTextEditCtrl_forceValidateText(char * x__object);
extern "C" __declspec(dllexport) S32  __cdecl wle_fnGuiTextListCtrl_getSelectedId(char * x__object);
extern "C" __declspec(dllexport) void  __cdecl wle_fnGuiTextListCtrl_setSelectedById(char * x__object, int id);
extern "C" __declspec(dllexport) void  __cdecl wle_fnGuiTextListCtrl_setSelectedRow(char * x__object, int rowNum);
extern "C" __declspec(dllexport) S32  __cdecl wle_fnGuiTextListCtrl_getSelectedRow(char * x__object);
extern "C" __declspec(dllexport) void  __cdecl wle_fnGuiTextListCtrl_clearSelection(char * x__object);
extern "C" __declspec(dllexport) S32  __cdecl wle_fnGuiTextListCtrl_addRow(char * x__object, int id, char * x__text, int index);
extern "C" __declspec(dllexport) void  __cdecl wle_fnGuiTextListCtrl_setRowById(char * x__object, int id, char * x__text);
extern "C" __declspec(dllexport) void  __cdecl wle_fnGuiTextListCtrl_sort(char * x__object, int columnId, bool increasing);
extern "C" __declspec(dllexport) void  __cdecl wle_fnGuiTextListCtrl_sortNumerical(char * x__object, int columnID, bool increasing);
extern "C" __declspec(dllexport) void  __cdecl wle_fnGuiTextListCtrl_clear(char * x__object);
extern "C" __declspec(dllexport) S32  __cdecl wle_fnGuiTextListCtrl_rowCount(char * x__object);
extern "C" __declspec(dllexport) S32  __cdecl wle_fnGuiTextListCtrl_getRowId(char * x__object, int index);
extern "C" __declspec(dllexport) void  __cdecl wle_fnGuiTextListCtrl_getRowTextById(char * x__object, int id,  char* retval);
extern "C" __declspec(dllexport) S32  __cdecl wle_fnGuiTextListCtrl_getRowNumById(char * x__object, int id);
extern "C" __declspec(dllexport) void  __cdecl wle_fnGuiTextListCtrl_getRowText(char * x__object, int index,  char* retval);
extern "C" __declspec(dllexport) void  __cdecl wle_fnGuiTextListCtrl_removeRowById(char * x__object, int id);
extern "C" __declspec(dllexport) void  __cdecl wle_fnGuiTextListCtrl_removeRow(char * x__object, int index);
extern "C" __declspec(dllexport) void  __cdecl wle_fnGuiTextListCtrl_scrollVisible(char * x__object, int rowNum);
extern "C" __declspec(dllexport) S32  __cdecl wle_fnGuiTextListCtrl_findTextIndex(char * x__object, char * x__needle);
extern "C" __declspec(dllexport) void  __cdecl wle_fnGuiTextListCtrl_setRowActive(char * x__object, int rowNum, bool active);
extern "C" __declspec(dllexport) S32  __cdecl wle_fnGuiTextListCtrl_isRowActive(char * x__object, int rowNum);
extern "C" __declspec(dllexport) void  __cdecl wle_fnGuiTreeViewCtrl_addChildSelectionByValue(char * x__object, char * x__a2, char * x__a3);
extern "C" __declspec(dllexport) void  __cdecl wle_fnGuiTreeViewCtrl_removeSelection(char * x__object, char * x__a2);
extern "C" __declspec(dllexport) void  __cdecl wle_fnGuiTreeViewCtrl_removeChildSelectionByValue(char * x__object, char * x__a2, char * x__a3);
extern "C" __declspec(dllexport) S32  __cdecl wle_fnGuiTreeViewCtrl_selectItem(char * x__object, char * x__a2, char * x__a3);
extern "C" __declspec(dllexport) S32  __cdecl wle_fnGuiTreeViewCtrl_expandItem(char * x__object, char * x__a2, char * x__a3);
extern "C" __declspec(dllexport) S32  __cdecl wle_fnGuiTreeViewCtrl_markItem(char * x__object, char * x__a2, char * x__a3);
extern "C" __declspec(dllexport) void  __cdecl wle_fnGuiTreeViewCtrl_scrollVisible(char * x__object, char * x__a2);
extern "C" __declspec(dllexport) S32  __cdecl wle_fnGuiTreeViewCtrl_buildIconTable(char * x__object, char * x__a2);
extern "C" __declspec(dllexport) void  __cdecl wle_fnGuiTreeViewCtrl_open(char * x__object, char * x__a2, char * x__a3);
extern "C" __declspec(dllexport) void  __cdecl wle_fnGuiTreeViewCtrl_setItemTooltip(char * x__object, char * x__a2, char * x__a3);
extern "C" __declspec(dllexport) void  __cdecl wle_fnGuiTreeViewCtrl_setItemImages(char * x__object, char * x__a2, char * x__a3, char * x__a4);
extern "C" __declspec(dllexport) S32  __cdecl wle_fnGuiTreeViewCtrl_isParentItem(char * x__object, char * x__a2);
extern "C" __declspec(dllexport) void  __cdecl wle_fnGuiTreeViewCtrl_getItemText(char * x__object, char * x__a2,  char* retval);
extern "C" __declspec(dllexport) void  __cdecl wle_fnGuiTreeViewCtrl_getItemValue(char * x__object, char * x__a2,  char* retval);
extern "C" __declspec(dllexport) S32  __cdecl wle_fnGuiTreeViewCtrl_editItem(char * x__object, char * x__a2, char * x__a3, char * x__a4);
extern "C" __declspec(dllexport) S32  __cdecl wle_fnGuiTreeViewCtrl_removeItem(char * x__object, char * x__a2);
extern "C" __declspec(dllexport) void  __cdecl wle_fnGuiTreeViewCtrl_removeAllChildren(char * x__object, char * x__a2);
extern "C" __declspec(dllexport) void  __cdecl wle_fnGuiTreeViewCtrl_clear(char * x__object);
extern "C" __declspec(dllexport) S32  __cdecl wle_fnGuiTreeViewCtrl_getFirstRootItem(char * x__object);
extern "C" __declspec(dllexport) S32  __cdecl wle_fnGuiTreeViewCtrl_getChild(char * x__object, char * x__a2);
extern "C" __declspec(dllexport) void  __cdecl wle_fnGuiTreeViewCtrl_buildVisibleTree(char * x__object, char * x__a2);
extern "C" __declspec(dllexport) S32  __cdecl wle_fnGuiTreeViewCtrl_getParent(char * x__object, char * x__a2);
extern "C" __declspec(dllexport) S32  __cdecl wle_fnGuiTreeViewCtrl_getNextSibling(char * x__object, char * x__a2);
extern "C" __declspec(dllexport) S32  __cdecl wle_fnGuiTreeViewCtrl_getPrevSibling(char * x__object, char * x__a2);
extern "C" __declspec(dllexport) S32  __cdecl wle_fnGuiTreeViewCtrl_getItemCount(char * x__object);
extern "C" __declspec(dllexport) S32  __cdecl wle_fnGuiTreeViewCtrl_getSelectedItem(char * x__object, char * x__a2);
extern "C" __declspec(dllexport) S32  __cdecl wle_fnGuiTreeViewCtrl_getSelectedObject(char * x__object, char * x__a2);
extern "C" __declspec(dllexport) void  __cdecl wle_fnGuiTreeViewCtrl_getSelectedObjectList(char * x__object,  char* retval);
extern "C" __declspec(dllexport) void  __cdecl wle_fnGuiTreeViewCtrl_moveItemUp(char * x__object, char * x__a2);
extern "C" __declspec(dllexport) S32  __cdecl wle_fnGuiTreeViewCtrl_getSelectedItemsCount(char * x__object);
extern "C" __declspec(dllexport) void  __cdecl wle_fnGuiTreeViewCtrl_moveItemDown(char * x__object, char * x__a2);
extern "C" __declspec(dllexport) void  __cdecl wle_fnGuiTreeViewCtrl_getTextToRoot(char * x__object, char * x__a2, char * x__a3,  char* retval);
extern "C" __declspec(dllexport) void  __cdecl wle_fnGuiTreeViewCtrl_getSelectedItemList(char * x__object,  char* retval);
extern "C" __declspec(dllexport) S32  __cdecl wle_fnGuiTreeViewCtrl_findItemByObjectId(char * x__object, char * x__a2);
extern "C" __declspec(dllexport) S32  __cdecl wle_fnGuiTreeViewCtrl_scrollVisibleByObjectId(char * x__object, char * x__a2);
extern "C" __declspec(dllexport) void  __cdecl wle_fnGuiTreeViewCtrl_sort(char * x__object, char * x__a2, char * x__a3, char * x__a4, char * x__a5);
extern "C" __declspec(dllexport) void  __cdecl wle_fnGuiTreeViewCtrl_cancelRename(char * x__object);
extern "C" __declspec(dllexport) void  __cdecl wle_fnGuiTreeViewCtrl_onRenameValidate(char * x__object);
extern "C" __declspec(dllexport) void  __cdecl wle_fnGuiTreeViewCtrl_showItemRenameCtrl(char * x__object, char * x__a2);
extern "C" __declspec(dllexport) void  __cdecl wle_fnGuiTreeViewCtrl_setDebug(char * x__object, char * x__a2);
extern "C" __declspec(dllexport) S32  __cdecl wle_fnGuiTreeViewCtrl_findItemByName(char * x__object, char * x__text);
extern "C" __declspec(dllexport) S32  __cdecl wle_fnGuiTreeViewCtrl_findItemByValue(char * x__object, char * x__value);
extern "C" __declspec(dllexport) S32  __cdecl wle_fnGuiTreeViewCtrl_findChildItemByName(char * x__object, S32 parentId, char * x__childName);
extern "C" __declspec(dllexport) S32  __cdecl wle_fnGuiTreeViewCtrl_insertItem(char * x__object, S32 parentId, char * x__text, char * x__value, char * x__icon, S32 normalImage, S32 expandedImage);
extern "C" __declspec(dllexport) void  __cdecl wle_fnGuiTreeViewCtrl_lockSelection(char * x__object, bool lock);
extern "C" __declspec(dllexport) void  __cdecl wle_fnGuiTreeViewCtrl_hideSelection(char * x__object, bool state);
extern "C" __declspec(dllexport) void  __cdecl wle_fnGuiTreeViewCtrl_toggleLockSelection(char * x__object);
extern "C" __declspec(dllexport) void  __cdecl wle_fnGuiTreeViewCtrl_toggleHideSelection(char * x__object);
extern "C" __declspec(dllexport) void  __cdecl wle_fnGuiTreeViewCtrl_clearSelection(char * x__object);
extern "C" __declspec(dllexport) void  __cdecl wle_fnGuiTreeViewCtrl_deleteSelection(char * x__object);
extern "C" __declspec(dllexport) void  __cdecl wle_fnGuiTreeViewCtrl_addSelection(char * x__object, S32 id, bool isLastSelection);
extern "C" __declspec(dllexport) S32  __cdecl wle_fnGuiTreeViewCtrl_isItemSelected(char * x__object, S32 id);
extern "C" __declspec(dllexport) void  __cdecl wle_fnGuiTreeViewCtrl_getFilterText(char * x__object,  char* retval);
extern "C" __declspec(dllexport) void  __cdecl wle_fnGuiTreeViewCtrl_setFilterText(char * x__object, char * x__pattern);
extern "C" __declspec(dllexport) void  __cdecl wle_fnGuiTreeViewCtrl_clearFilterText(char * x__object);
extern "C" __declspec(dllexport) void  __cdecl wle_fnGuiCanvas_pushDialog(char * x__object, char * x__a2, char * x__a3, char * x__a4);
extern "C" __declspec(dllexport) void  __cdecl wle_fnGuiCanvas_popDialog(char * x__object, char * x__a2);
extern "C" __declspec(dllexport) void  __cdecl wle_fnGuiCanvas_popLayer(char * x__object, char * x__a2);
extern "C" __declspec(dllexport) void  __cdecl wle_fnGuiCanvas_setCursorPos(char * x__object, char * x__a2, char * x__a3);
extern "C" __declspec(dllexport) S32  __cdecl wle_fnGuiCanvas_isFullscreen(char * x__object);
extern "C" __declspec(dllexport) void  __cdecl wle_fnGuiCanvas_minimizeWindow(char * x__object);
extern "C" __declspec(dllexport) S32  __cdecl wle_fnGuiCanvas_isMinimized(char * x__object);
extern "C" __declspec(dllexport) S32  __cdecl wle_fnGuiCanvas_isMaximized(char * x__object);
extern "C" __declspec(dllexport) void  __cdecl wle_fnGuiCanvas_maximizeWindow(char * x__object);
extern "C" __declspec(dllexport) void  __cdecl wle_fnGuiCanvas_restoreWindow(char * x__object);
extern "C" __declspec(dllexport) void  __cdecl wle_fnGuiCanvas_setFocus(char * x__object);
extern "C" __declspec(dllexport) void  __cdecl wle_fnGuiCanvas_setVideoMode(char * x__object, char * x__a2, char * x__a3, char * x__a4, char * x__a5, char * x__a6, char * x__a7);
extern "C" __declspec(dllexport) S32  __cdecl wle_fn_excludeOtherInstance(char * x__appIdentifer);
extern "C" __declspec(dllexport) S32  __cdecl wle_fnGuiCanvas_getContent(char * x__object);
extern "C" __declspec(dllexport) void  __cdecl wle_fnGuiCanvas_setContent(char * x__object, char * x__ctrl);
extern "C" __declspec(dllexport) void  __cdecl wle_fnGuiCanvas_cursorOn(char * x__object);
extern "C" __declspec(dllexport) void  __cdecl wle_fnGuiCanvas_cursorOff(char * x__object);
extern "C" __declspec(dllexport) void  __cdecl wle_fnGuiCanvas_setCursor(char * x__object, char * x__cursor);
extern "C" __declspec(dllexport) void  __cdecl wle_fnGuiCanvas_renderFront(char * x__object, bool enable);
extern "C" __declspec(dllexport) void  __cdecl wle_fnGuiCanvas_showCursor(char * x__object);
extern "C" __declspec(dllexport) void  __cdecl wle_fnGuiCanvas_hideCursor(char * x__object);
extern "C" __declspec(dllexport) S32  __cdecl wle_fnGuiCanvas_isCursorOn(char * x__object);
extern "C" __declspec(dllexport) S32  __cdecl wle_fnGuiCanvas_isCursorShown(char * x__object);
extern "C" __declspec(dllexport) void  __cdecl wle_fnGuiCanvas_repaint(char * x__object, S32 elapsedMS);
extern "C" __declspec(dllexport) void  __cdecl wle_fnGuiCanvas_reset(char * x__object);
extern "C" __declspec(dllexport) void  __cdecl wle_fnGuiCanvas_getCursorPos(char * x__object,  char* retval);
extern "C" __declspec(dllexport) S32  __cdecl wle_fnGuiCanvas_getMouseControl(char * x__object);
extern "C" __declspec(dllexport) void  __cdecl wle_fnGuiCanvas_getExtent(char * x__object,  char* retval);
extern "C" __declspec(dllexport) void  __cdecl wle_fnGuiCanvas_setWindowTitle(char * x__object, char * x__newTitle);
extern "C" __declspec(dllexport) void  __cdecl wle_fnGuiCanvas_getVideoMode(char * x__object,  char* retval);
extern "C" __declspec(dllexport) S32  __cdecl wle_fnGuiCanvas_getModeCount(char * x__object);
extern "C" __declspec(dllexport) void  __cdecl wle_fnGuiCanvas_getMode(char * x__object, S32 modeId,  char* retval);
extern "C" __declspec(dllexport) void  __cdecl wle_fnGuiCanvas_toggleFullscreen(char * x__object);
extern "C" __declspec(dllexport) void  __cdecl wle_fnGuiCanvas_clientToScreen(char * x__object, char * x__coordinate,  char* retval);
extern "C" __declspec(dllexport) void  __cdecl wle_fnGuiCanvas_screenToClient(char * x__object, char * x__coordinate,  char* retval);
extern "C" __declspec(dllexport) void  __cdecl wle_fnGuiCanvas_getWindowPosition(char * x__object,  char* retval);
extern "C" __declspec(dllexport) void  __cdecl wle_fnGuiCanvas_setWindowPosition(char * x__object, char * x__position);
extern "C" __declspec(dllexport) void  __cdecl wle_fnGuiControl_getValue(char * x__object,  char* retval);
extern "C" __declspec(dllexport) void  __cdecl wle_fnGuiControl_makeFirstResponder(char * x__object, char * x__a2);
extern "C" __declspec(dllexport) S32  __cdecl wle_fnGuiControl_isActive(char * x__object);
extern "C" __declspec(dllexport) void  __cdecl wle_fnGuiControl_setExtent(char * x__object, char * x__a2, char * x__a3);
extern "C" __declspec(dllexport) void  __cdecl wle_fnGuiControl_findHitControl(char * x__object, S32 x, S32 y,  char* retval);
extern "C" __declspec(dllexport) void  __cdecl wle_fnGuiControl_findHitControls(char * x__object, S32 x, S32 y, S32 width, S32 height,  char* retval);
extern "C" __declspec(dllexport) S32  __cdecl wle_fnGuiControl_controlIsChild(char * x__object, char * x__control);
extern "C" __declspec(dllexport) S32  __cdecl wle_fnGuiControl_isFirstResponder(char * x__object);
extern "C" __declspec(dllexport) void  __cdecl wle_fnGuiControl_setFirstResponder(char * x__object);
extern "C" __declspec(dllexport) void  __cdecl wle_fnGuiControl_getFirstResponder(char * x__object,  char* retval);
extern "C" __declspec(dllexport) void  __cdecl wle_fnGuiControl_clearFirstResponder(char * x__object, bool ignored);
extern "C" __declspec(dllexport) S32  __cdecl wle_fnGuiControl_pointInControl(char * x__object, S32 x, S32 y);
extern "C" __declspec(dllexport) void  __cdecl wle_fnGuiControl_addGuiControl(char * x__object, char * x__control);
extern "C" __declspec(dllexport) void  __cdecl wle_fnGuiControl_getRoot(char * x__object,  char* retval);
extern "C" __declspec(dllexport) void  __cdecl wle_fnGuiControl_getParent(char * x__object,  char* retval);
extern "C" __declspec(dllexport) S32  __cdecl wle_fnGuiControl_isMouseLocked(char * x__object);
extern "C" __declspec(dllexport) void  __cdecl wle_fnGuiControl_setValue(char * x__object, char * x__value);
extern "C" __declspec(dllexport) void  __cdecl wle_fnGuiControl_setActive(char * x__object, bool state);
extern "C" __declspec(dllexport) S32  __cdecl wle_fnGuiControl_isVisible(char * x__object);
extern "C" __declspec(dllexport) void  __cdecl wle_fnGuiControl_setVisible(char * x__object, bool state);
extern "C" __declspec(dllexport) S32  __cdecl wle_fnGuiControl_isAwake(char * x__object);
extern "C" __declspec(dllexport) void  __cdecl wle_fnGuiControl_setProfile(char * x__object, char * x__profile);
extern "C" __declspec(dllexport) void  __cdecl wle_fnGuiControl_resize(char * x__object, S32 x, S32 y, S32 width, S32 height);
extern "C" __declspec(dllexport) void  __cdecl wle_fnGuiControl_getPosition(char * x__object,  char* retval);
extern "C" __declspec(dllexport) void  __cdecl wle_fnGuiControl_getCenter(char * x__object,  char* retval);
extern "C" __declspec(dllexport) void  __cdecl wle_fnGuiControl_setCenter(char * x__object, S32 x, S32 y);
extern "C" __declspec(dllexport) void  __cdecl wle_fnGuiControl_getGlobalCenter(char * x__object,  char* retval);
extern "C" __declspec(dllexport) void  __cdecl wle_fnGuiControl_getGlobalPosition(char * x__object,  char* retval);
extern "C" __declspec(dllexport) void  __cdecl wle_fnGuiControl_setPositionGlobal(char * x__object, S32 x, S32 y);
extern "C" __declspec(dllexport) void  __cdecl wle_fnGuiControl_setPosition(char * x__object, S32 x, S32 y);
extern "C" __declspec(dllexport) void  __cdecl wle_fnGuiControl_getExtent(char * x__object,  char* retval);
extern "C" __declspec(dllexport) void  __cdecl wle_fnGuiControl_getMinExtent(char * x__object,  char* retval);
extern "C" __declspec(dllexport) F32  __cdecl wle_fnGuiControl_getAspect(char * x__object);
extern "C" __declspec(dllexport) S32  __cdecl wle_fnGuiControlProfile_getStringWidth(char * x__object, char * x__a2);
extern "C" __declspec(dllexport) void  __cdecl wle_fnDbgFileView_setCurrentLine(char * x__object, char * x__a2, char * x__a3);
extern "C" __declspec(dllexport) void  __cdecl wle_fnDbgFileView_getCurrentLine(char * x__object,  char* retval);
extern "C" __declspec(dllexport) S32  __cdecl wle_fnDbgFileView_open(char * x__object, char * x__a2);
extern "C" __declspec(dllexport) void  __cdecl wle_fnDbgFileView_clearBreakPositions(char * x__object);
extern "C" __declspec(dllexport) void  __cdecl wle_fnDbgFileView_setBreakPosition(char * x__object, char * x__a2);
extern "C" __declspec(dllexport) void  __cdecl wle_fnDbgFileView_setBreak(char * x__object, char * x__a2);
extern "C" __declspec(dllexport) void  __cdecl wle_fnDbgFileView_removeBreak(char * x__object, char * x__a2);
extern "C" __declspec(dllexport) S32  __cdecl wle_fnDbgFileView_findString(char * x__object, char * x__a2);
extern "C" __declspec(dllexport) S32  __cdecl wle_fnGuiEditCtrl_getContentControl(char * x__object);
extern "C" __declspec(dllexport) void  __cdecl wle_fnGuiEditCtrl_setContentControl(char * x__object, char * x__a2);
extern "C" __declspec(dllexport) void  __cdecl wle_fnGuiEditCtrl_addNewCtrl(char * x__object, char * x__a2);
extern "C" __declspec(dllexport) void  __cdecl wle_fnGuiEditCtrl_addSelection(char * x__object, char * x__a2);
extern "C" __declspec(dllexport) void  __cdecl wle_fnGuiEditCtrl_removeSelection(char * x__object, char * x__a2);
extern "C" __declspec(dllexport) void  __cdecl wle_fnGuiEditCtrl_clearSelection(char * x__object);
extern "C" __declspec(dllexport) void  __cdecl wle_fnGuiEditCtrl_select(char * x__object, char * x__a2);
extern "C" __declspec(dllexport) void  __cdecl wle_fnGuiEditCtrl_setCurrentAddSet(char * x__object, char * x__a2);
extern "C" __declspec(dllexport) S32  __cdecl wle_fnGuiEditCtrl_getCurrentAddSet(char * x__object);
extern "C" __declspec(dllexport) void  __cdecl wle_fnGuiEditCtrl_toggle(char * x__object);
extern "C" __declspec(dllexport) void  __cdecl wle_fnGuiEditCtrl_justify(char * x__object, char * x__a2);
extern "C" __declspec(dllexport) void  __cdecl wle_fnGuiEditCtrl_bringToFront(char * x__object);
extern "C" __declspec(dllexport) void  __cdecl wle_fnGuiEditCtrl_pushToBack(char * x__object);
extern "C" __declspec(dllexport) void  __cdecl wle_fnGuiEditCtrl_deleteSelection(char * x__object);
extern "C" __declspec(dllexport) void  __cdecl wle_fnGuiEditCtrl_moveSelection(char * x__object, char * x__a2, char * x__a3);
extern "C" __declspec(dllexport) void  __cdecl wle_fnGuiEditCtrl_saveSelection(char * x__object, char * x__a2);
extern "C" __declspec(dllexport) void  __cdecl wle_fnGuiEditCtrl_loadSelection(char * x__object, char * x__a2);
extern "C" __declspec(dllexport) void  __cdecl wle_fnGuiEditCtrl_selectAll(char * x__object);
extern "C" __declspec(dllexport) S32  __cdecl wle_fnGuiEditCtrl_getNumSelected(char * x__object);
extern "C" __declspec(dllexport) void  __cdecl wle_fnGuiEditCtrl_getSelectionGlobalBounds(char * x__object,  char* retval);
extern "C" __declspec(dllexport) void  __cdecl wle_fnGuiEditCtrl_selectParents(char * x__object, char * x__a2);
extern "C" __declspec(dllexport) void  __cdecl wle_fnGuiEditCtrl_selectChildren(char * x__object, char * x__a2);
extern "C" __declspec(dllexport) void  __cdecl wle_fnGuiEditCtrl_setSnapToGrid(char * x__object, char * x__a2);
extern "C" __declspec(dllexport) void  __cdecl wle_fnGuiEditCtrl_readGuides(char * x__object, char * x__a2, char * x__a3);
extern "C" __declspec(dllexport) void  __cdecl wle_fnGuiEditCtrl_writeGuides(char * x__object, char * x__a2, char * x__a3);
extern "C" __declspec(dllexport) void  __cdecl wle_fnGuiEditCtrl_clearGuides(char * x__object, char * x__a2);
extern "C" __declspec(dllexport) void  __cdecl wle_fnGuiEditCtrl_fitIntoParents(char * x__object, char * x__a2, char * x__a3);
extern "C" __declspec(dllexport) void  __cdecl wle_fnGuiEditCtrl_getMouseMode(char * x__object,  char* retval);
extern "C" __declspec(dllexport) void  __cdecl wle_fnGuiEditCtrl_getSelection(char * x__object,  char* retval);
extern "C" __declspec(dllexport) void  __cdecl wle_fnGuiEditCtrl_getTrash(char * x__object,  char* retval);
extern "C" __declspec(dllexport) void  __cdecl wle_fnGuiFilterCtrl_getValue(char * x__object,  char* retval);
extern "C" __declspec(dllexport) void  __cdecl wle_fnGuiFilterCtrl_setValue(char * x__object, char * x__a2, char * x__a3, char * x__a4, char * x__a5, char * x__a6, char * x__a7, char * x__a8, char * x__a9, char * x__a10, char * x__a11, char * x__a12, char * x__a13, char * x__a14, char * x__a15, char * x__a16, char * x__a17, char * x__a18, char * x__a19);
extern "C" __declspec(dllexport) void  __cdecl wle_fnGuiFilterCtrl_identity(char * x__object);
extern "C" __declspec(dllexport) void  __cdecl wle_fnGuiGraphCtrl_addDatum(char * x__object, S32 plotId, F32 value);
extern "C" __declspec(dllexport) F32  __cdecl wle_fnGuiGraphCtrl_getDatum(char * x__object, S32 plotId, S32 index);
extern "C" __declspec(dllexport) void  __cdecl wle_fnGuiGraphCtrl_addAutoPlot(char * x__object, S32 plotId, char * x__variable, S32 updateFrequency);
extern "C" __declspec(dllexport) void  __cdecl wle_fnGuiGraphCtrl_removeAutoPlot(char * x__object, S32 plotId);
extern "C" __declspec(dllexport) void  __cdecl wle_fnGuiGraphCtrl_setGraphType(char * x__object, S32 plotId, S32 x__graphType);
extern "C" __declspec(dllexport) void  __cdecl wle_fnGuiImageList_getImage(char * x__object, int index,  char* retval);
extern "C" __declspec(dllexport) S32  __cdecl wle_fnGuiImageList_clear(char * x__object);
extern "C" __declspec(dllexport) S32  __cdecl wle_fnGuiImageList_count(char * x__object);
extern "C" __declspec(dllexport) S32  __cdecl wle_fnGuiImageList_remove(char * x__object, int index);
extern "C" __declspec(dllexport) S32  __cdecl wle_fnGuiImageList_getIndex(char * x__object, char * x__imagePath);
extern "C" __declspec(dllexport) S32  __cdecl wle_fnGuiImageList_insert(char * x__object, char * x__imagePath);
extern "C" __declspec(dllexport) void  __cdecl wle_fnGuiInspector_inspect(char * x__object, char * x__a2);
extern "C" __declspec(dllexport) void  __cdecl wle_fnGuiInspector_addInspect(char * x__object, char * x__a2, char * x__a3);
extern "C" __declspec(dllexport) void  __cdecl wle_fnGuiInspector_removeInspect(char * x__object, char * x__a2);
extern "C" __declspec(dllexport) void  __cdecl wle_fnGuiInspector_refresh(char * x__object);
extern "C" __declspec(dllexport) void  __cdecl wle_fnGuiInspector_getInspectObject(char * x__object, char * x__a2,  char* retval);
extern "C" __declspec(dllexport) S32  __cdecl wle_fnGuiInspector_getNumInspectObjects(char * x__object);
extern "C" __declspec(dllexport) void  __cdecl wle_fnGuiInspector_setName(char * x__object, char * x__a2);
extern "C" __declspec(dllexport) void  __cdecl wle_fnGuiInspector_apply(char * x__object);
extern "C" __declspec(dllexport) void  __cdecl wle_fnGuiInspector_setObjectField(char * x__object, char * x__a2, char * x__a3);
extern "C" __declspec(dllexport) void  __cdecl wle_fnGuiInspectorTypeFileName_apply(char * x__object, char * x__a2);
extern "C" __declspec(dllexport) void  __cdecl wle_fnGuiInspectorTypeBitMask32_applyBit(char * x__object);
extern "C" __declspec(dllexport) void  __cdecl wle_fnGuiMenuBar_clearMenus(char * x__object, S32 param1, S32 param2);
extern "C" __declspec(dllexport) void  __cdecl wle_fnGuiMenuBar_setMenuMargins(char * x__object, S32 horizontalMargin, S32 verticalMargin, S32 bitmapToTextSpacing);
extern "C" __declspec(dllexport) void  __cdecl wle_fnGuiMenuBar_addMenu(char * x__object, char * x__menuText, int menuId);
extern "C" __declspec(dllexport) void  __cdecl wle_fnGuiMenuBar_addMenuItem(char * x__object, char * x__targetMenu, char * x__menuItemText, int menuItemId, char * x__accelerator, int checkGroup);
extern "C" __declspec(dllexport) void  __cdecl wle_fnGuiMenuBar_setMenuItemEnable(char * x__object, char * x__menuTarget, char * x__menuItemTarget, bool enabled);
extern "C" __declspec(dllexport) void  __cdecl wle_fnGuiMenuBar_setCheckmarkBitmapIndex(char * x__object, S32 bitmapindex);
extern "C" __declspec(dllexport) void  __cdecl wle_fnGuiMenuBar_setMenuItemChecked(char * x__object, char * x__menuTarget, char * x__menuItemTarget, bool checked);
extern "C" __declspec(dllexport) void  __cdecl wle_fnGuiMenuBar_setMenuText(char * x__object, char * x__menuTarget, char * x__newMenuText);
extern "C" __declspec(dllexport) void  __cdecl wle_fnGuiMenuBar_setMenuBitmapIndex(char * x__object, char * x__menuTarget, S32 bitmapindex, bool bitmaponly, bool drawborder);
extern "C" __declspec(dllexport) void  __cdecl wle_fnGuiMenuBar_setMenuVisible(char * x__object, char * x__menuTarget, bool visible);
extern "C" __declspec(dllexport) void  __cdecl wle_fnGuiMenuBar_setMenuItemText(char * x__object, char * x__menuTarget, char * x__menuItemTarget, char * x__newMenuItemText);
extern "C" __declspec(dllexport) void  __cdecl wle_fnGuiMenuBar_setMenuItemVisible(char * x__object, char * x__menuTarget, char * x__menuItemTarget, bool isVisible);
extern "C" __declspec(dllexport) void  __cdecl wle_fnGuiMenuBar_setMenuItemBitmap(char * x__object, char * x__menuTarget, char * x__menuItemTarget, int bitmapIndex);
extern "C" __declspec(dllexport) void  __cdecl wle_fnGuiMenuBar_removeMenuItem(char * x__object, char * x__menuTarget, char * x__menuItemTarget);
extern "C" __declspec(dllexport) void  __cdecl wle_fnGuiMenuBar_clearMenuItems(char * x__object, char * x__menuTarget);
extern "C" __declspec(dllexport) void  __cdecl wle_fnGuiMenuBar_removeMenu(char * x__object, char * x__menuTarget);
extern "C" __declspec(dllexport) void  __cdecl wle_fnGuiMenuBar_setMenuItemSubmenuState(char * x__object, char * x__menuTarget, char * x__menuItem, bool isSubmenu);
extern "C" __declspec(dllexport) void  __cdecl wle_fnGuiMenuBar_addSubmenuItem(char * x__object, char * x__menuTarget, char * x__menuItem, char * x__submenuItemText, int submenuItemId, char * x__accelerator, int checkGroup);
extern "C" __declspec(dllexport) void  __cdecl wle_fnGuiMenuBar_clearSubmenuItems(char * x__object, char * x__menuTarget, char * x__menuItem);
extern "C" __declspec(dllexport) void  __cdecl wle_fnGuiMenuBar_setSubmenuItemChecked(char * x__object, char * x__menuTarget, char * x__menuItemTarget, char * x__submenuItemText, bool checked);
extern "C" __declspec(dllexport) void  __cdecl wle_fnGuiParticleGraphCtrl_setSelectedPoint(char * x__object, char * x__a2);
extern "C" __declspec(dllexport) void  __cdecl wle_fnGuiParticleGraphCtrl_setSelectedPlot(char * x__object, char * x__a2);
extern "C" __declspec(dllexport) void  __cdecl wle_fnGuiParticleGraphCtrl_clearGraph(char * x__object, char * x__a2);
extern "C" __declspec(dllexport) void  __cdecl wle_fnGuiParticleGraphCtrl_clearAllGraphs(char * x__object);
extern "C" __declspec(dllexport) void  __cdecl wle_fnGuiParticleGraphCtrl_addPlotPoint(char * x__object, char * x__a2, char * x__a3, char * x__a4, char * x__a5,  char* retval);
extern "C" __declspec(dllexport) void  __cdecl wle_fnGuiParticleGraphCtrl_insertPlotPoint(char * x__object, char * x__a2, char * x__a3, char * x__a4, char * x__a5);
extern "C" __declspec(dllexport) void  __cdecl wle_fnGuiParticleGraphCtrl_changePlotPoint(char * x__object, char * x__a2, char * x__a3, char * x__a4, char * x__a5,  char* retval);
extern "C" __declspec(dllexport) void  __cdecl wle_fnGuiParticleGraphCtrl_getSelectedPlot(char * x__object,  char* retval);
extern "C" __declspec(dllexport) void  __cdecl wle_fnGuiParticleGraphCtrl_getSelectedPoint(char * x__object,  char* retval);
extern "C" __declspec(dllexport) void  __cdecl wle_fnGuiParticleGraphCtrl_isExistingPoint(char * x__object, char * x__a2, char * x__a3,  char* retval);
extern "C" __declspec(dllexport) void  __cdecl wle_fnGuiParticleGraphCtrl_getPlotPoint(char * x__object, char * x__a2, char * x__a3,  char* retval);
extern "C" __declspec(dllexport) void  __cdecl wle_fnGuiParticleGraphCtrl_getPlotIndex(char * x__object, char * x__a2, char * x__a3, char * x__a4,  char* retval);
extern "C" __declspec(dllexport) void  __cdecl wle_fnGuiParticleGraphCtrl_getGraphColor(char * x__object, char * x__a2,  char* retval);
extern "C" __declspec(dllexport) void  __cdecl wle_fnGuiParticleGraphCtrl_getGraphMin(char * x__object, char * x__a2,  char* retval);
extern "C" __declspec(dllexport) void  __cdecl wle_fnGuiParticleGraphCtrl_getGraphMax(char * x__object, char * x__a2,  char* retval);
extern "C" __declspec(dllexport) void  __cdecl wle_fnGuiParticleGraphCtrl_getGraphName(char * x__object, char * x__a2,  char* retval);
extern "C" __declspec(dllexport) void  __cdecl wle_fnGuiParticleGraphCtrl_setGraphMin(char * x__object, char * x__a2, char * x__a3, char * x__a4);
extern "C" __declspec(dllexport) void  __cdecl wle_fnGuiParticleGraphCtrl_setGraphMinX(char * x__object, char * x__a2, char * x__a3);
extern "C" __declspec(dllexport) void  __cdecl wle_fnGuiParticleGraphCtrl_setGraphMinY(char * x__object, char * x__a2, char * x__a3);
extern "C" __declspec(dllexport) void  __cdecl wle_fnGuiParticleGraphCtrl_setGraphMax(char * x__object, char * x__a2, char * x__a3, char * x__a4);
extern "C" __declspec(dllexport) void  __cdecl wle_fnGuiParticleGraphCtrl_setGraphMaxX(char * x__object, char * x__a2, char * x__a3);
extern "C" __declspec(dllexport) void  __cdecl wle_fnGuiParticleGraphCtrl_setGraphMaxY(char * x__object, char * x__a2, char * x__a3);
extern "C" __declspec(dllexport) void  __cdecl wle_fnGuiParticleGraphCtrl_setGraphHidden(char * x__object, char * x__a2, char * x__a3);
extern "C" __declspec(dllexport) void  __cdecl wle_fnGuiParticleGraphCtrl_setAutoGraphMax(char * x__object, char * x__a2);
extern "C" __declspec(dllexport) void  __cdecl wle_fnGuiParticleGraphCtrl_setAutoRemove(char * x__object, char * x__a2);
extern "C" __declspec(dllexport) void  __cdecl wle_fnGuiParticleGraphCtrl_setRenderAll(char * x__object, char * x__a2);
extern "C" __declspec(dllexport) void  __cdecl wle_fnGuiParticleGraphCtrl_setPointXMovementClamped(char * x__object, char * x__a2);
extern "C" __declspec(dllexport) void  __cdecl wle_fnGuiParticleGraphCtrl_setRenderGraphTooltip(char * x__object, char * x__a2);
extern "C" __declspec(dllexport) void  __cdecl wle_fnGuiParticleGraphCtrl_setGraphName(char * x__object, char * x__a2, char * x__a3);
extern "C" __declspec(dllexport) void  __cdecl wle_fnGuiParticleGraphCtrl_resetSelectedPoint(char * x__object);
extern "C" __declspec(dllexport) void  __cdecl wle_fnGuiShapeEdPreview_setOrbitPos(char * x__object, char * x__pos);
extern "C" __declspec(dllexport) S32  __cdecl wle_fnGuiShapeEdPreview_setModel(char * x__object, char * x__shapePath);
extern "C" __declspec(dllexport) void  __cdecl wle_fnGuiShapeEdPreview_fitToShape(char * x__object);
extern "C" __declspec(dllexport) void  __cdecl wle_fnGuiShapeEdPreview_refreshShape(char * x__object);
extern "C" __declspec(dllexport) void  __cdecl wle_fnGuiShapeEdPreview_updateNodeTransforms(char * x__object);
extern "C" __declspec(dllexport) void  __cdecl wle_fnGuiShapeEdPreview_computeShapeBounds(char * x__object,  char* retval);
extern "C" __declspec(dllexport) S32  __cdecl wle_fnGuiShapeEdPreview_getMeshHidden(char * x__object, char * x__name);
extern "C" __declspec(dllexport) void  __cdecl wle_fnGuiShapeEdPreview_setMeshHidden(char * x__object, char * x__name, bool hidden);
extern "C" __declspec(dllexport) void  __cdecl wle_fnGuiShapeEdPreview_setAllMeshesHidden(char * x__object, bool hidden);
extern "C" __declspec(dllexport) void  __cdecl wle_fnGuiShapeEdPreview_exportToCollada(char * x__object, char * x__path);
extern "C" __declspec(dllexport) void  __cdecl wle_fnGuiShapeEdPreview_addThread(char * x__object);
extern "C" __declspec(dllexport) void  __cdecl wle_fnGuiShapeEdPreview_removeThread(char * x__object, S32 slot);
extern "C" __declspec(dllexport) S32  __cdecl wle_fnGuiShapeEdPreview_getThreadCount(char * x__object);
extern "C" __declspec(dllexport) void  __cdecl wle_fnGuiShapeEdPreview_setTimeScale(char * x__object, F32 scale);
extern "C" __declspec(dllexport) void  __cdecl wle_fnGuiShapeEdPreview_setThreadSequence(char * x__object, char * x__name, F32 duration, F32 pos, bool play);
extern "C" __declspec(dllexport) void  __cdecl wle_fnGuiShapeEdPreview_getThreadSequence(char * x__object,  char* retval);
extern "C" __declspec(dllexport) void  __cdecl wle_fnGuiShapeEdPreview_refreshThreadSequences(char * x__object);
extern "C" __declspec(dllexport) S32  __cdecl wle_fnGuiShapeEdPreview_mountShape(char * x__object, char * x__shapePath, char * x__nodeName, char * x__type, S32 slot);
extern "C" __declspec(dllexport) void  __cdecl wle_fnGuiShapeEdPreview_setMountNode(char * x__object, S32 slot, char * x__nodeName);
extern "C" __declspec(dllexport) void  __cdecl wle_fnGuiShapeEdPreview_getMountThreadSequence(char * x__object, S32 slot,  char* retval);
extern "C" __declspec(dllexport) void  __cdecl wle_fnGuiShapeEdPreview_setMountThreadSequence(char * x__object, S32 slot, char * x__name);
extern "C" __declspec(dllexport) F32  __cdecl wle_fnGuiShapeEdPreview_getMountThreadPos(char * x__object, S32 slot);
extern "C" __declspec(dllexport) void  __cdecl wle_fnGuiShapeEdPreview_setMountThreadPos(char * x__object, S32 slot, F32 pos);
extern "C" __declspec(dllexport) F32  __cdecl wle_fnGuiShapeEdPreview_getMountThreadDir(char * x__object, S32 slot);
extern "C" __declspec(dllexport) void  __cdecl wle_fnGuiShapeEdPreview_setMountThreadDir(char * x__object, S32 slot, F32 dir);
extern "C" __declspec(dllexport) void  __cdecl wle_fnGuiShapeEdPreview_unmountShape(char * x__object, S32 slot);
extern "C" __declspec(dllexport) void  __cdecl wle_fnGuiShapeEdPreview_unmountAll(char * x__object);
extern "C" __declspec(dllexport) void  __cdecl wle_fnGuiInspectorDynamicField_renameField(char * x__object, char * x__a2);
extern "C" __declspec(dllexport) S32  __cdecl wle_fnGuiInspectorDynamicGroup_inspectGroup(char * x__object);
extern "C" __declspec(dllexport) void  __cdecl wle_fnGuiInspectorDynamicGroup_addDynamicField(char * x__object);
extern "C" __declspec(dllexport) void  __cdecl wle_fnGuiInspectorDynamicGroup_removeDynamicField(char * x__object, char * x__a2);
extern "C" __declspec(dllexport) S32  __cdecl wle_fnGuiInspectorField_getInspector(char * x__object);
extern "C" __declspec(dllexport) void  __cdecl wle_fnGuiInspectorField_getInspectedFieldName(char * x__object,  char* retval);
extern "C" __declspec(dllexport) void  __cdecl wle_fnGuiInspectorField_getInspectedFieldType(char * x__object,  char* retval);
extern "C" __declspec(dllexport) void  __cdecl wle_fnGuiInspectorField_apply(char * x__object, char * x__a2, char * x__a3);
extern "C" __declspec(dllexport) void  __cdecl wle_fnGuiInspectorField_applyWithoutUndo(char * x__object, char * x__a2);
extern "C" __declspec(dllexport) void  __cdecl wle_fnGuiInspectorField_getData(char * x__object,  char* retval);
extern "C" __declspec(dllexport) void  __cdecl wle_fnGuiInspectorField_reset(char * x__object);
extern "C" __declspec(dllexport) void  __cdecl wle_fnGuiVariableInspector_loadVars(char * x__object, char * x__a2);
extern "C" __declspec(dllexport) S32  __cdecl wle_fnGuiMessageVectorCtrl_attach(char * x__object, char * x__item);
extern "C" __declspec(dllexport) void  __cdecl wle_fnGuiMessageVectorCtrl_detach(char * x__object);
extern "C" __declspec(dllexport) void  __cdecl wle_fnGuiProgressBitmapCtrl_setBitmap(char * x__object, char * x__filename);
extern "C" __declspec(dllexport) void  __cdecl wle_fnGuiTickCtrl_setProcessTicks(char * x__object, char * x__a2);
extern "C" __declspec(dllexport) void  __cdecl wle_fnGuiTheoraCtrl_setFile(char * x__object, char * x__filename);
extern "C" __declspec(dllexport) void  __cdecl wle_fnGuiTheoraCtrl_play(char * x__object);
extern "C" __declspec(dllexport) void  __cdecl wle_fnGuiTheoraCtrl_pause(char * x__object);
extern "C" __declspec(dllexport) void  __cdecl wle_fnGuiTheoraCtrl_stop(char * x__object);
extern "C" __declspec(dllexport) F32  __cdecl wle_fnGuiTheoraCtrl_getCurrentTime(char * x__object);
extern "C" __declspec(dllexport) S32  __cdecl wle_fnGuiTheoraCtrl_isPlaybackDone(char * x__object);
extern "C" __declspec(dllexport) void  __cdecl wle_fnMessageVector_dump(char * x__object, char * x__a2, char * x__a3);
extern "C" __declspec(dllexport) void  __cdecl wle_fnMessageVector_clear(char * x__object);
extern "C" __declspec(dllexport) void  __cdecl wle_fnMessageVector_pushBackLine(char * x__object, char * x__msg, S32 tag);
extern "C" __declspec(dllexport) S32  __cdecl wle_fnMessageVector_popBackLine(char * x__object);
extern "C" __declspec(dllexport) void  __cdecl wle_fnMessageVector_pushFrontLine(char * x__object, char * x__msg, S32 tag);
extern "C" __declspec(dllexport) S32  __cdecl wle_fnMessageVector_popFrontLine(char * x__object);
extern "C" __declspec(dllexport) S32  __cdecl wle_fnMessageVector_insertLine(char * x__object, S32 insertPos, char * x__msg, S32 tag);
extern "C" __declspec(dllexport) S32  __cdecl wle_fnMessageVector_deleteLine(char * x__object, S32 deletePos);
extern "C" __declspec(dllexport) S32  __cdecl wle_fnMessageVector_getNumLines(char * x__object);
extern "C" __declspec(dllexport) void  __cdecl wle_fnMessageVector_getLineTextByTag(char * x__object, S32 tag,  char* retval);
extern "C" __declspec(dllexport) S32  __cdecl wle_fnMessageVector_getLineIndexByTag(char * x__object, S32 tag);
extern "C" __declspec(dllexport) void  __cdecl wle_fnMessageVector_getLineText(char * x__object, S32 pos,  char* retval);
extern "C" __declspec(dllexport) S32  __cdecl wle_fnMessageVector_getLineTag(char * x__object, S32 pos);
extern "C" __declspec(dllexport) S32  __cdecl wle_fnEditTSCtrl_getDisplayType(char * x__object);
extern "C" __declspec(dllexport) void  __cdecl wle_fnEditTSCtrl_setDisplayType(char * x__object, S32 displayType);
extern "C" __declspec(dllexport) F32  __cdecl wle_fnEditTSCtrl_getOrthoFOV(char * x__object);
extern "C" __declspec(dllexport) void  __cdecl wle_fnEditTSCtrl_setOrthoFOV(char * x__object, F32 fov);
extern "C" __declspec(dllexport) void  __cdecl wle_fnEditTSCtrl_renderBox(char * x__object, char * x__pos, char * x__size);
extern "C" __declspec(dllexport) void  __cdecl wle_fnEditTSCtrl_renderSphere(char * x__object, char * x__pos, F32 radius, S32 sphereLevel);
extern "C" __declspec(dllexport) void  __cdecl wle_fnEditTSCtrl_renderCircle(char * x__object, char * x__pos, char * x__normal, F32 radius, S32 segments);
extern "C" __declspec(dllexport) void  __cdecl wle_fnEditTSCtrl_renderTriangle(char * x__object, char * x__a, char * x__b, char * x__c);
extern "C" __declspec(dllexport) void  __cdecl wle_fnEditTSCtrl_renderLine(char * x__object, char * x__start, char * x__end, F32 lineWidth);
extern "C" __declspec(dllexport) S32  __cdecl wle_fnEditTSCtrl_getGizmo(char * x__object);
extern "C" __declspec(dllexport) S32  __cdecl wle_fnEditTSCtrl_isMiddleMouseDown(char * x__object);
extern "C" __declspec(dllexport) void  __cdecl wle_fnGuiMissionAreaCtrl_setMissionArea(char * x__object, char * x__area);
extern "C" __declspec(dllexport) void  __cdecl wle_fnGuiMissionAreaCtrl_updateTerrain(char * x__object);
extern "C" __declspec(dllexport) void  __cdecl wle_fnMECreateUndoAction_addObject(char * x__object, char * x__a2);
extern "C" __declspec(dllexport) void  __cdecl wle_fnMEDeleteUndoAction_deleteObject(char * x__object, char * x__a2);
extern "C" __declspec(dllexport) void  __cdecl wle_fnWorldEditor_ignoreObjClass(char * x__object, char * x__a2, char * x__a3, char * x__a4, char * x__a5, char * x__a6, char * x__a7, char * x__a8, char * x__a9, char * x__a10, char * x__a11, char * x__a12, char * x__a13, char * x__a14, char * x__a15, char * x__a16, char * x__a17, char * x__a18, char * x__a19);
extern "C" __declspec(dllexport) void  __cdecl wle_fnWorldEditor_clearIgnoreList(char * x__object);
extern "C" __declspec(dllexport) void  __cdecl wle_fnWorldEditor_clearSelection(char * x__object);
extern "C" __declspec(dllexport) S32  __cdecl wle_fnWorldEditor_getActiveSelection(char * x__object);
extern "C" __declspec(dllexport) void  __cdecl wle_fnWorldEditor_setActiveSelection(char * x__object, char * x__a2);
extern "C" __declspec(dllexport) void  __cdecl wle_fnWorldEditor_selectObject(char * x__object, char * x__a2);
extern "C" __declspec(dllexport) void  __cdecl wle_fnWorldEditor_unselectObject(char * x__object, char * x__a2);
extern "C" __declspec(dllexport) void  __cdecl wle_fnWorldEditor_invalidateSelectionCentroid(char * x__object);
extern "C" __declspec(dllexport) S32  __cdecl wle_fnWorldEditor_getSelectionSize(char * x__object);
extern "C" __declspec(dllexport) S32  __cdecl wle_fnWorldEditor_getSelectedObject(char * x__object, char * x__a2);
extern "C" __declspec(dllexport) F32  __cdecl wle_fnWorldEditor_getSelectionRadius(char * x__object);
extern "C" __declspec(dllexport) void  __cdecl wle_fnWorldEditor_getSelectionCentroid(char * x__object,  char* retval);
extern "C" __declspec(dllexport) void  __cdecl wle_fnWorldEditor_getSelectionExtent(char * x__object,  char* retval);
extern "C" __declspec(dllexport) void  __cdecl wle_fnWorldEditor_dropSelection(char * x__object, char * x__a2);
extern "C" __declspec(dllexport) void  __cdecl wle_fnWorldEditor_cutSelection(char * x__object);
extern "C" __declspec(dllexport) void  __cdecl wle_fnWorldEditor_copySelection(char * x__object);
extern "C" __declspec(dllexport) void  __cdecl wle_fnWorldEditor_pasteSelection(char * x__object);
extern "C" __declspec(dllexport) S32  __cdecl wle_fnWorldEditor_canPasteSelection(char * x__object);
extern "C" __declspec(dllexport) void  __cdecl wle_fnWorldEditor_hideObject(char * x__object, char * x__a2, char * x__a3);
extern "C" __declspec(dllexport) void  __cdecl wle_fnWorldEditor_hideSelection(char * x__object, char * x__a2);
extern "C" __declspec(dllexport) void  __cdecl wle_fnWorldEditor_lockSelection(char * x__object, char * x__a2);
extern "C" __declspec(dllexport) void  __cdecl wle_fnWorldEditor_alignByBounds(char * x__object, char * x__a2);
extern "C" __declspec(dllexport) void  __cdecl wle_fnWorldEditor_alignByAxis(char * x__object, char * x__a2);
extern "C" __declspec(dllexport) void  __cdecl wle_fnWorldEditor_resetSelectedRotation(char * x__object);
extern "C" __declspec(dllexport) void  __cdecl wle_fnWorldEditor_resetSelectedScale(char * x__object);
extern "C" __declspec(dllexport) void  __cdecl wle_fnWorldEditor_redirectConsole(char * x__object, char * x__a2);
extern "C" __declspec(dllexport) void  __cdecl wle_fnWorldEditor_addUndoState(char * x__object);
extern "C" __declspec(dllexport) S32  __cdecl wle_fnWorldEditor_getSoftSnap(char * x__object);
extern "C" __declspec(dllexport) void  __cdecl wle_fnWorldEditor_setSoftSnap(char * x__object, char * x__a2);
extern "C" __declspec(dllexport) F32  __cdecl wle_fnWorldEditor_getSoftSnapSize(char * x__object);
extern "C" __declspec(dllexport) void  __cdecl wle_fnWorldEditor_setSoftSnapSize(char * x__object, char * x__a2);
extern "C" __declspec(dllexport) void  __cdecl wle_fnWorldEditor_softSnapSizeByBounds(char * x__object, char * x__a2);
extern "C" __declspec(dllexport) F32  __cdecl wle_fnWorldEditor_getSoftSnapBackfaceTolerance(char * x__object);
extern "C" __declspec(dllexport) void  __cdecl wle_fnWorldEditor_setSoftSnapBackfaceTolerance(char * x__object, char * x__a2);
extern "C" __declspec(dllexport) void  __cdecl wle_fnWorldEditor_softSnapRender(char * x__object, char * x__a2);
extern "C" __declspec(dllexport) void  __cdecl wle_fnWorldEditor_softSnapRenderTriangle(char * x__object, char * x__a2);
extern "C" __declspec(dllexport) void  __cdecl wle_fnWorldEditor_softSnapDebugRender(char * x__object, char * x__a2);
extern "C" __declspec(dllexport) void  __cdecl wle_fnWorldEditor_transformSelection(char * x__object, char * x__a2, char * x__a3, char * x__a4, char * x__a5, char * x__a6, char * x__a7, char * x__a8, char * x__a9, char * x__a10, char * x__a11, char * x__a12);
extern "C" __declspec(dllexport) void  __cdecl wle_fnWorldEditor_colladaExportSelection(char * x__object, char * x__a2);
extern "C" __declspec(dllexport) void  __cdecl wle_fnWorldEditor_makeSelectionPrefab(char * x__object, char * x__a2);
extern "C" __declspec(dllexport) void  __cdecl wle_fnWorldEditor_explodeSelectedPrefab(char * x__object);
extern "C" __declspec(dllexport) void  __cdecl wle_fnWorldEditor_mountRelative(char * x__object, char * x__a2, char * x__a3);
extern "C" __declspec(dllexport) S32  __cdecl wle_fnWorldEditor_getSoftSnapAlignment(char * x__object);
extern "C" __declspec(dllexport) void  __cdecl wle_fnWorldEditor_setSoftSnapAlignment(char * x__object, S32 x__type);
extern "C" __declspec(dllexport) S32  __cdecl wle_fnWorldEditor_getTerrainSnapAlignment(char * x__object);
extern "C" __declspec(dllexport) void  __cdecl wle_fnWorldEditor_setTerrainSnapAlignment(char * x__object, S32 x__alignment);
extern "C" __declspec(dllexport) void  __cdecl wle_fnWorldEditor_createPolyhedralObject(char * x__object, char * x__className, char * x__geometryProvider,  char* retval);
extern "C" __declspec(dllexport) void  __cdecl wle_fnWorldEditor_createConvexShapeFrom(char * x__object, char * x__polyObject,  char* retval);
extern "C" __declspec(dllexport) S32  __cdecl wle_fnLangTable_addLanguage(char * x__object, char * x__a2, char * x__a3);
extern "C" __declspec(dllexport) void  __cdecl wle_fnLangTable_getString(char * x__object, char * x__a2,  char* retval);
extern "C" __declspec(dllexport) void  __cdecl wle_fnLangTable_setDefaultLanguage(char * x__object, char * x__a2);
extern "C" __declspec(dllexport) void  __cdecl wle_fnLangTable_setCurrentLanguage(char * x__object, char * x__a2);
extern "C" __declspec(dllexport) S32  __cdecl wle_fnLangTable_getCurrentLanguage(char * x__object);
extern "C" __declspec(dllexport) void  __cdecl wle_fnLangTable_getLangName(char * x__object, char * x__a2,  char* retval);
extern "C" __declspec(dllexport) S32  __cdecl wle_fnLangTable_getNumLang(char * x__object);
extern "C" __declspec(dllexport) void  __cdecl wle_fn__setInteriorFocusedDebug(char * x__a1);
extern "C" __declspec(dllexport) S32  __cdecl wle_fn__isPointInside(char * x__a1, char * x__a2, char * x__a3);
extern "C" __declspec(dllexport) void  __cdecl wle_fn_setInteriorRenderMode(S32 mode);
extern "C" __declspec(dllexport) void  __cdecl wle_fnPathedInterior_setPathPosition(char * x__object, char * x__a2);
extern "C" __declspec(dllexport) void  __cdecl wle_fnPathedInterior_setTargetPosition(char * x__object, char * x__a2);
extern "C" __declspec(dllexport) S32  __cdecl wle_fn_setLightManager(char * x__name);
extern "C" __declspec(dllexport) S32  __cdecl wle_fn_lightScene(char * x__completeCallbackFn, char * x__mode);
extern "C" __declspec(dllexport) void  __cdecl wle_fn_getLightManagerNames(char* retval);
extern "C" __declspec(dllexport) void  __cdecl wle_fn_getActiveLightManager(char* retval);
extern "C" __declspec(dllexport) void  __cdecl wle_fn_resetLightManager();
extern "C" __declspec(dllexport) void  __cdecl wle_fn__setShadowVizLight(char * x__a1,  char* retval);
extern "C" __declspec(dllexport) void  __cdecl wle_fnMaterial_flush(char * x__object);
extern "C" __declspec(dllexport) void  __cdecl wle_fnMaterial_reload(char * x__object);
extern "C" __declspec(dllexport) void  __cdecl wle_fnMaterial_dumpInstances(char * x__object);
extern "C" __declspec(dllexport) void  __cdecl wle_fnMaterial_getAnimFlags(char * x__object, char * x__a2,  char* retval);
extern "C" __declspec(dllexport) void  __cdecl wle_fnMaterial_getFilename(char * x__object,  char* retval);
extern "C" __declspec(dllexport) S32  __cdecl wle_fnMaterial_isAutoGenerated(char * x__object);
extern "C" __declspec(dllexport) void  __cdecl wle_fnMaterial_setAutoGenerated(char * x__object, char * x__a2);
extern "C" __declspec(dllexport) void  __cdecl wle_fn__addMaterialMapping(char * x__a1, char * x__a2);
extern "C" __declspec(dllexport) void  __cdecl wle_fn__getMaterialMapping(char * x__a1,  char* retval);
extern "C" __declspec(dllexport) F32  __cdecl wle_fn__getRandom(char * x__a1, char * x__a2);
extern "C" __declspec(dllexport) void  __cdecl wle_fn_VectorAdd(char * x__a, char * x__b,  char* retval);
extern "C" __declspec(dllexport) void  __cdecl wle_fn_VectorSub(char * x__a, char * x__b,  char* retval);
extern "C" __declspec(dllexport) void  __cdecl wle_fn_VectorScale(char * x__a, F32 scalar,  char* retval);
extern "C" __declspec(dllexport) void  __cdecl wle_fn_VectorNormalize(char * x__v,  char* retval);
extern "C" __declspec(dllexport) F32  __cdecl wle_fn_VectorDot(char * x__a, char * x__b);
extern "C" __declspec(dllexport) void  __cdecl wle_fn_VectorCross(char * x__a, char * x__b,  char* retval);
extern "C" __declspec(dllexport) F32  __cdecl wle_fn_VectorDist(char * x__a, char * x__b);
extern "C" __declspec(dllexport) F32  __cdecl wle_fn_VectorLen(char * x__v);
extern "C" __declspec(dllexport) void  __cdecl wle_fn_VectorOrthoBasis(char * x__aa,  char* retval);
extern "C" __declspec(dllexport) void  __cdecl wle_fn_VectorLerp(char * x__a, char * x__b, F32 t,  char* retval);
extern "C" __declspec(dllexport) void  __cdecl wle_fn_MatrixCreate(char * x__position, char * x__orientation,  char* retval);
extern "C" __declspec(dllexport) void  __cdecl wle_fn_MatrixCreateFromEuler(char * x__angles,  char* retval);
extern "C" __declspec(dllexport) void  __cdecl wle_fn_MatrixMultiply(char * x__left, char * x__right,  char* retval);
extern "C" __declspec(dllexport) void  __cdecl wle_fn_MatrixMulVector(char * x__transform, char * x__vector,  char* retval);
extern "C" __declspec(dllexport) void  __cdecl wle_fn_MatrixMulPoint(char * x__transform, char * x__point,  char* retval);
extern "C" __declspec(dllexport) void  __cdecl wle_fn_getBoxCenter(char * x__box,  char* retval);
extern "C" __declspec(dllexport) void  __cdecl wle_fn_setRandomSeed(S32 seed);
extern "C" __declspec(dllexport) S32  __cdecl wle_fn_getRandomSeed();
extern "C" __declspec(dllexport) void  __cdecl wle_fn_mSolveQuadratic(F32 a, F32 b, F32 c,  char* retval);
extern "C" __declspec(dllexport) void  __cdecl wle_fn_mSolveCubic(F32 a, F32 b, F32 c, F32 d,  char* retval);
extern "C" __declspec(dllexport) void  __cdecl wle_fn_mSolveQuartic(F32 a, F32 b, F32 c, F32 d, F32 e,  char* retval);
extern "C" __declspec(dllexport) S32  __cdecl wle_fn_mFloor(F32 v);
extern "C" __declspec(dllexport) S32  __cdecl wle_fn_mRound(F32 v);
extern "C" __declspec(dllexport) S32  __cdecl wle_fn_mCeil(F32 v);
extern "C" __declspec(dllexport) void  __cdecl wle_fn_mFloatLength(F32 v, U32 precision,  char* retval);
extern "C" __declspec(dllexport) F32  __cdecl wle_fn_mAbs(F32 v);
extern "C" __declspec(dllexport) F32  __cdecl wle_fn_mFMod(F32 v, F32 d);
extern "C" __declspec(dllexport) F32  __cdecl wle_fn_mSqrt(F32 v);
extern "C" __declspec(dllexport) F32  __cdecl wle_fn_mPow(F32 v, F32 p);
extern "C" __declspec(dllexport) F32  __cdecl wle_fn_mLog(F32 v);
extern "C" __declspec(dllexport) F32  __cdecl wle_fn_mSin(F32 v);
extern "C" __declspec(dllexport) F32  __cdecl wle_fn_mCos(F32 v);
extern "C" __declspec(dllexport) F32  __cdecl wle_fn_mTan(F32 v);
extern "C" __declspec(dllexport) F32  __cdecl wle_fn_mAsin(F32 v);
extern "C" __declspec(dllexport) F32  __cdecl wle_fn_mAcos(F32 v);
extern "C" __declspec(dllexport) F32  __cdecl wle_fn_mAtan(F32 rise, F32 run);
extern "C" __declspec(dllexport) F32  __cdecl wle_fn_mRadToDeg(F32 radians);
extern "C" __declspec(dllexport) F32  __cdecl wle_fn_mDegToRad(F32 degrees);
extern "C" __declspec(dllexport) F32  __cdecl wle_fn_mClamp(F32 v, F32 min, F32 max);
extern "C" __declspec(dllexport) F32  __cdecl wle_fn_mSaturate(F32 v);
extern "C" __declspec(dllexport) F32  __cdecl wle_fn_getMax(F32 v1, F32 v2);
extern "C" __declspec(dllexport) F32  __cdecl wle_fn_getMin(F32 v1, F32 v2);
extern "C" __declspec(dllexport) F32  __cdecl wle_fn_mLerp(F32 v1, F32 v2, F32 time);
extern "C" __declspec(dllexport) F32  __cdecl wle_fn_mPi();
extern "C" __declspec(dllexport) F32  __cdecl wle_fn_m2Pi();
extern "C" __declspec(dllexport) S32  __cdecl wle_fn_mIsPow2(S32 v);
extern "C" __declspec(dllexport) void  __cdecl wle_fnSimResponseCurve_addPoint(char * x__object, char * x__a2, char * x__a3);
extern "C" __declspec(dllexport) F32  __cdecl wle_fnSimResponseCurve_getValue(char * x__object, char * x__a2);
extern "C" __declspec(dllexport) void  __cdecl wle_fnSimResponseCurve_clear(char * x__object);
extern "C" __declspec(dllexport) void  __cdecl wle_fn__getTemporaryDirectory(char* retval);
extern "C" __declspec(dllexport) void  __cdecl wle_fn__getTemporaryFileName(char* retval);
extern "C" __declspec(dllexport) void  __cdecl wle_fn_profilerMarkerEnable(char * x__markerName, bool enable);
extern "C" __declspec(dllexport) void  __cdecl wle_fn_profilerEnable(bool enable);
extern "C" __declspec(dllexport) void  __cdecl wle_fn_profilerDump();
extern "C" __declspec(dllexport) void  __cdecl wle_fn_profilerDumpToFile(char * x__fileName);
extern "C" __declspec(dllexport) void  __cdecl wle_fn_profilerReset();
extern "C" __declspec(dllexport) void  __cdecl wle_fnMenuBar_attachToCanvas(char * x__object, char * x__a2, char * x__a3);
extern "C" __declspec(dllexport) void  __cdecl wle_fnMenuBar_removeFromCanvas(char * x__object);
extern "C" __declspec(dllexport) void  __cdecl wle_fnMenuBar_insert(char * x__object, char * x__a2, char * x__a3);
extern "C" __declspec(dllexport) S32  __cdecl wle_fnPopupMenu_insertItem(char * x__object, char * x__a2, char * x__a3, char * x__a4);
extern "C" __declspec(dllexport) void  __cdecl wle_fnPopupMenu_removeItem(char * x__object, char * x__a2);
extern "C" __declspec(dllexport) S32  __cdecl wle_fnPopupMenu_insertSubMenu(char * x__object, char * x__a2, char * x__a3, char * x__a4);
extern "C" __declspec(dllexport) S32  __cdecl wle_fnPopupMenu_setItem(char * x__object, char * x__a2, char * x__a3, char * x__a4);
extern "C" __declspec(dllexport) void  __cdecl wle_fnPopupMenu_enableItem(char * x__object, char * x__a2, char * x__a3);
extern "C" __declspec(dllexport) void  __cdecl wle_fnPopupMenu_checkItem(char * x__object, char * x__a2, char * x__a3);
extern "C" __declspec(dllexport) void  __cdecl wle_fnPopupMenu_checkRadioItem(char * x__object, char * x__a2, char * x__a3, char * x__a4);
extern "C" __declspec(dllexport) S32  __cdecl wle_fnPopupMenu_isItemChecked(char * x__object, char * x__a2);
extern "C" __declspec(dllexport) S32  __cdecl wle_fnPopupMenu_getItemCount(char * x__object);
extern "C" __declspec(dllexport) void  __cdecl wle_fnPopupMenu_attachToMenuBar(char * x__object, char * x__a2, char * x__a3, char * x__a4);
extern "C" __declspec(dllexport) void  __cdecl wle_fnPopupMenu_removeFromMenuBar(char * x__object);
extern "C" __declspec(dllexport) void  __cdecl wle_fnPopupMenu_showPopup(char * x__object, char * x__a2, char * x__a3, char * x__a4);
extern "C" __declspec(dllexport) S32  __cdecl wle_fn_messageBox(char * x__title, char * x__message, S32 x__buttons, S32 x__icons);
extern "C" __declspec(dllexport) S32  __cdecl wle_fn__isJoystickEnabled();
extern "C" __declspec(dllexport) S32  __cdecl wle_fn__enableXInput();
extern "C" __declspec(dllexport) S32  __cdecl wle_fn__isXInputConnected(char * x__a1);
extern "C" __declspec(dllexport) S32  __cdecl wle_fn__getXInputState(char * x__a1, char * x__a2, char * x__a3);
extern "C" __declspec(dllexport) void  __cdecl wle_fn__rumble(char * x__a1, char * x__a2, char * x__a3);
extern "C" __declspec(dllexport) S32  __cdecl wle_fnFileDialog_Execute(char * x__object);
extern "C" __declspec(dllexport) void  __cdecl wle_fn__debug_debugbreak();
extern "C" __declspec(dllexport) void  __cdecl wle_fn_dumpRandomNormalMap();
extern "C" __declspec(dllexport) void  __cdecl wle_fnPostEffect_reload(char * x__object);
extern "C" __declspec(dllexport) void  __cdecl wle_fnPostEffect_enable(char * x__object);
extern "C" __declspec(dllexport) void  __cdecl wle_fnPostEffect_disable(char * x__object);
extern "C" __declspec(dllexport) S32  __cdecl wle_fnPostEffect_toggle(char * x__object);
extern "C" __declspec(dllexport) S32  __cdecl wle_fnPostEffect_isEnabled(char * x__object);
extern "C" __declspec(dllexport) void  __cdecl wle_fnPostEffect_setTexture(char * x__object, S32 index, char * x__filePath);
extern "C" __declspec(dllexport) void  __cdecl wle_fnPostEffect_setShaderConst(char * x__object, char * x__name, char * x__value);
extern "C" __declspec(dllexport) F32  __cdecl wle_fnPostEffect_getAspectRatio(char * x__object);
extern "C" __declspec(dllexport) void  __cdecl wle_fnPostEffect_dumpShaderDisassembly(char * x__object,  char* retval);
extern "C" __declspec(dllexport) void  __cdecl wle_fnPostEffect_setShaderMacro(char * x__object, char * x__key, char * x__value);
extern "C" __declspec(dllexport) void  __cdecl wle_fnPostEffect_removeShaderMacro(char * x__object, char * x__key);
extern "C" __declspec(dllexport) void  __cdecl wle_fnPostEffect_clearShaderMacros(char * x__object);
extern "C" __declspec(dllexport) void  __cdecl wle_fnRenderBinManager_getBinType(char * x__object,  char* retval);
extern "C" __declspec(dllexport) S32  __cdecl wle_fnRenderPassManager_getManagerCount(char * x__object);
extern "C" __declspec(dllexport) void  __cdecl wle_fnRenderPassManager_getManager(char * x__object, S32 index,  char* retval);
extern "C" __declspec(dllexport) void  __cdecl wle_fnRenderPassManager_addManager(char * x__object, char * x__renderBin);
extern "C" __declspec(dllexport) void  __cdecl wle_fnRenderPassManager_removeManager(char * x__object, char * x__renderBin);
extern "C" __declspec(dllexport) void  __cdecl wle_fnRenderPassStateToken_enable(char * x__object);
extern "C" __declspec(dllexport) void  __cdecl wle_fnRenderPassStateToken_disable(char * x__object);
extern "C" __declspec(dllexport) void  __cdecl wle_fnRenderPassStateToken_toggle(char * x__object);
extern "C" __declspec(dllexport) void  __cdecl wle_fn__clearClientPaths();
extern "C" __declspec(dllexport) void  __cdecl wle_fn_setReflectFormat(S32 x__format);
extern "C" __declspec(dllexport) S32  __cdecl wle_fn_containerBoxEmpty(U32 mask, char * x__center, F32 xRadius, F32 yRadius, F32 zRadius, bool useClientContainer);
extern "C" __declspec(dllexport) void  __cdecl wle_fn_initContainerRadiusSearch(char * x__pos, F32 radius, U32 mask, bool useClientContainer);
extern "C" __declspec(dllexport) void  __cdecl wle_fn_initContainerTypeSearch(U32 mask, bool useClientContainer);
extern "C" __declspec(dllexport) void  __cdecl wle_fn_containerSearchNext(bool useClientContainer,  char* retval);
extern "C" __declspec(dllexport) F32  __cdecl wle_fn_containerSearchCurrDist(bool useClientContainer);
extern "C" __declspec(dllexport) F32  __cdecl wle_fn_containerSearchCurrRadiusDist(bool useClientContainer);
extern "C" __declspec(dllexport) void  __cdecl wle_fn_containerRayCast(char * x__start, char * x__end, U32 mask, char * x__pExempt, bool useClientContainer,  char* retval);
extern "C" __declspec(dllexport) void  __cdecl wle_fn_sceneDumpZoneStates(bool updateFirst);
extern "C" __declspec(dllexport) void  __cdecl wle_fn_sceneGetZoneOwner(U32 zoneId,  char* retval);
extern "C" __declspec(dllexport) S32  __cdecl wle_fnSceneObject_getType(char * x__object);
extern "C" __declspec(dllexport) S32  __cdecl wle_fnSceneObject_mountObject(char * x__object, char * x__objB, S32 slot, char * x__txfm);
extern "C" __declspec(dllexport) S32  __cdecl wle_fnSceneObject_unmountObject(char * x__object, char * x__target);
extern "C" __declspec(dllexport) void  __cdecl wle_fnSceneObject_unmount(char * x__object);
extern "C" __declspec(dllexport) S32  __cdecl wle_fnSceneObject_isMounted(char * x__object);
extern "C" __declspec(dllexport) S32  __cdecl wle_fnSceneObject_getObjectMount(char * x__object);
extern "C" __declspec(dllexport) S32  __cdecl wle_fnSceneObject_getMountedObjectCount(char * x__object);
extern "C" __declspec(dllexport) S32  __cdecl wle_fnSceneObject_getMountedObject(char * x__object, S32 slot);
extern "C" __declspec(dllexport) S32  __cdecl wle_fnSceneObject_getMountedObjectNode(char * x__object, S32 slot);
extern "C" __declspec(dllexport) S32  __cdecl wle_fnSceneObject_getMountNodeObject(char * x__object, S32 node);
extern "C" __declspec(dllexport) void  __cdecl wle_fnSceneObject_getTransform(char * x__object,  char* retval);
extern "C" __declspec(dllexport) void  __cdecl wle_fnSceneObject_getInverseTransform(char * x__object,  char* retval);
extern "C" __declspec(dllexport) void  __cdecl wle_fnSceneObject_getPosition(char * x__object,  char* retval);
extern "C" __declspec(dllexport) void  __cdecl wle_fnSceneObject_getEulerRotation(char * x__object,  char* retval);
extern "C" __declspec(dllexport) void  __cdecl wle_fnSceneObject_getForwardVector(char * x__object,  char* retval);
extern "C" __declspec(dllexport) void  __cdecl wle_fnSceneObject_getRightVector(char * x__object,  char* retval);
extern "C" __declspec(dllexport) void  __cdecl wle_fnSceneObject_getUpVector(char * x__object,  char* retval);
extern "C" __declspec(dllexport) void  __cdecl wle_fnSceneObject_setTransform(char * x__object, char * x__txfm);
extern "C" __declspec(dllexport) void  __cdecl wle_fnSceneObject_getScale(char * x__object,  char* retval);
extern "C" __declspec(dllexport) void  __cdecl wle_fnSceneObject_setScale(char * x__object, char * x__scale);
extern "C" __declspec(dllexport) void  __cdecl wle_fnSceneObject_getWorldBox(char * x__object,  char* retval);
extern "C" __declspec(dllexport) void  __cdecl wle_fnSceneObject_getWorldBoxCenter(char * x__object,  char* retval);
extern "C" __declspec(dllexport) void  __cdecl wle_fnSceneObject_getObjectBox(char * x__object,  char* retval);
extern "C" __declspec(dllexport) S32  __cdecl wle_fnSceneObject_isGlobalBounds(char * x__object);
extern "C" __declspec(dllexport) void  __cdecl wle_fn_pathOnMissionLoadDone();
extern "C" __declspec(dllexport) S32  __cdecl wle_fnSFXController_getCurrentSlot(char * x__object);
extern "C" __declspec(dllexport) void  __cdecl wle_fnSFXController_setCurrentSlot(char * x__object, S32 index);
extern "C" __declspec(dllexport) void  __cdecl wle_fnSFXParameter_getParameterName(char * x__object,  char* retval);
extern "C" __declspec(dllexport) void  __cdecl wle_fnSFXParameter_reset(char * x__object);
extern "C" __declspec(dllexport) F32  __cdecl wle_fnSFXProfile_getSoundDuration(char * x__object);
extern "C" __declspec(dllexport) void  __cdecl wle_fnSFXSource_setTransform(char * x__object, char * x__a2, char * x__a3);
extern "C" __declspec(dllexport) void  __cdecl wle_fnSFXSource_play(char * x__object, F32 fadeInTime);
extern "C" __declspec(dllexport) void  __cdecl wle_fnSFXSource_stop(char * x__object, F32 fadeOutTime);
extern "C" __declspec(dllexport) void  __cdecl wle_fnSFXSource_pause(char * x__object, F32 fadeOutTime);
extern "C" __declspec(dllexport) S32  __cdecl wle_fnSFXSource_isPlaying(char * x__object);
extern "C" __declspec(dllexport) S32  __cdecl wle_fnSFXSource_isPaused(char * x__object);
extern "C" __declspec(dllexport) S32  __cdecl wle_fnSFXSource_isStopped(char * x__object);
extern "C" __declspec(dllexport) S32  __cdecl wle_fnSFXSource_getStatus(char * x__object);
extern "C" __declspec(dllexport) F32  __cdecl wle_fnSFXSource_getVolume(char * x__object);
extern "C" __declspec(dllexport) void  __cdecl wle_fnSFXSource_setVolume(char * x__object, F32 volume);
extern "C" __declspec(dllexport) F32  __cdecl wle_fnSFXSource_getAttenuatedVolume(char * x__object);
extern "C" __declspec(dllexport) F32  __cdecl wle_fnSFXSource_getFadeInTime(char * x__object);
extern "C" __declspec(dllexport) F32  __cdecl wle_fnSFXSource_getFadeOutTime(char * x__object);
extern "C" __declspec(dllexport) void  __cdecl wle_fnSFXSource_setFadeTimes(char * x__object, F32 fadeInTime, F32 fadeOutTime);
extern "C" __declspec(dllexport) F32  __cdecl wle_fnSFXSource_getPitch(char * x__object);
extern "C" __declspec(dllexport) void  __cdecl wle_fnSFXSource_setPitch(char * x__object, F32 pitch);
extern "C" __declspec(dllexport) void  __cdecl wle_fnSFXSource_setCone(char * x__object, F32 innerAngle, F32 outerAngle, F32 outsideVolume);
extern "C" __declspec(dllexport) S32  __cdecl wle_fnSFXSource_getParameterCount(char * x__object);
extern "C" __declspec(dllexport) void  __cdecl wle_fnSFXSource_addParameter(char * x__object, char * x__parameter);
extern "C" __declspec(dllexport) void  __cdecl wle_fnSFXSource_removeParameter(char * x__object, char * x__parameter);
extern "C" __declspec(dllexport) void  __cdecl wle_fnSFXSource_getParameter(char * x__object, S32 index,  char* retval);
extern "C" __declspec(dllexport) void  __cdecl wle_fnSFXSource_addMarker(char * x__object, char * x__name, F32 pos);
extern "C" __declspec(dllexport) S32  __cdecl wle_fn__sfxCreateSource(char * x__a1, char * x__a2, char * x__a3, char * x__a4, char * x__a5);
extern "C" __declspec(dllexport) S32  __cdecl wle_fn__sfxPlay(char * x__a1, char * x__a2, char * x__a3, char * x__a4);
extern "C" __declspec(dllexport) S32  __cdecl wle_fn__sfxPlayOnce(char * x__a1, char * x__a2, char * x__a3, char * x__a4, char * x__a5);
extern "C" __declspec(dllexport) void  __cdecl wle_fn_sfxGetAvailableDevices(char* retval);
extern "C" __declspec(dllexport) S32  __cdecl wle_fn_sfxCreateDevice(char * x__provider, char * x__device, bool useHardware, S32 maxBuffers);
extern "C" __declspec(dllexport) void  __cdecl wle_fn_sfxDeleteDevice();
extern "C" __declspec(dllexport) void  __cdecl wle_fn_sfxGetDeviceInfo(char* retval);
extern "C" __declspec(dllexport) void  __cdecl wle_fn_sfxStop(char * x__source);
extern "C" __declspec(dllexport) void  __cdecl wle_fn_sfxStopAndDelete(char * x__source);
extern "C" __declspec(dllexport) void  __cdecl wle_fn_sfxDeleteWhenStopped(char * x__source);
extern "C" __declspec(dllexport) S32  __cdecl wle_fn_sfxGetDistanceModel();
extern "C" __declspec(dllexport) void  __cdecl wle_fn_sfxSetDistanceModel(S32 x__model);
extern "C" __declspec(dllexport) F32  __cdecl wle_fn_sfxGetDopplerFactor();
extern "C" __declspec(dllexport) void  __cdecl wle_fn_sfxSetDopplerFactor(F32 value);
extern "C" __declspec(dllexport) F32  __cdecl wle_fn_sfxGetRolloffFactor();
extern "C" __declspec(dllexport) void  __cdecl wle_fn_sfxSetRolloffFactor(F32 value);
extern "C" __declspec(dllexport) void  __cdecl wle_fn_sfxDumpSources(bool includeGroups);
extern "C" __declspec(dllexport) void  __cdecl wle_fn_sfxDumpSourcesToString(bool includeGroups,  char* retval);
extern "C" __declspec(dllexport) S32  __cdecl wle_fnActionMap_bind(char * x__object, char * x__a2, char * x__a3, char * x__a4, char * x__a5, char * x__a6, char * x__a7, char * x__a8, char * x__a9);
extern "C" __declspec(dllexport) S32  __cdecl wle_fnActionMap_bindObj(char * x__object, char * x__a2, char * x__a3, char * x__a4, char * x__a5, char * x__a6, char * x__a7, char * x__a8, char * x__a9, char * x__a10);
extern "C" __declspec(dllexport) void  __cdecl wle_fn_getCurrentActionMap(char* retval);
extern "C" __declspec(dllexport) S32  __cdecl wle_fnActionMap_bindCmd(char * x__object, char * x__device, char * x__action, char * x__makeCmd, char * x__breakCmd);
extern "C" __declspec(dllexport) S32  __cdecl wle_fnActionMap_unbind(char * x__object, char * x__device, char * x__action);
extern "C" __declspec(dllexport) S32  __cdecl wle_fnActionMap_unbindObj(char * x__object, char * x__device, char * x__action, char * x__obj);
extern "C" __declspec(dllexport) void  __cdecl wle_fnActionMap_save(char * x__object, char * x__fileName, bool append);
extern "C" __declspec(dllexport) void  __cdecl wle_fnActionMap_push(char * x__object);
extern "C" __declspec(dllexport) void  __cdecl wle_fnActionMap_pop(char * x__object);
extern "C" __declspec(dllexport) void  __cdecl wle_fnActionMap_getBinding(char * x__object, char * x__command,  char* retval);
extern "C" __declspec(dllexport) void  __cdecl wle_fnActionMap_getCommand(char * x__object, char * x__device, char * x__action,  char* retval);
extern "C" __declspec(dllexport) S32  __cdecl wle_fnActionMap_isInverted(char * x__object, char * x__device, char * x__action);
extern "C" __declspec(dllexport) F32  __cdecl wle_fnActionMap_getScale(char * x__object, char * x__device, char * x__action);
extern "C" __declspec(dllexport) void  __cdecl wle_fnActionMap_getDeadZone(char * x__object, char * x__device, char * x__action,  char* retval);
extern "C" __declspec(dllexport) void  __cdecl wle_fnNetConnection_transmitPaths(char * x__object);
extern "C" __declspec(dllexport) void  __cdecl wle_fnNetConnection_clearPaths(char * x__object);
extern "C" __declspec(dllexport) void  __cdecl wle_fnNetConnection_getAddress(char * x__object,  char* retval);
extern "C" __declspec(dllexport) void  __cdecl wle_fnNetConnection_setSimulatedNetParams(char * x__object, F32 packetLoss, S32 delay);
extern "C" __declspec(dllexport) S32  __cdecl wle_fnNetConnection_getPing(char * x__object);
extern "C" __declspec(dllexport) S32  __cdecl wle_fnNetConnection_getPacketLoss(char * x__object);
extern "C" __declspec(dllexport) void  __cdecl wle_fnNetConnection_checkMaxRate(char * x__object);
extern "C" __declspec(dllexport) S32  __cdecl wle_fnNetConnection_resolveGhostID(char * x__object, S32 ghostID);
extern "C" __declspec(dllexport) S32  __cdecl wle_fnNetConnection_resolveObjectFromGhostIndex(char * x__object, S32 ghostID);
extern "C" __declspec(dllexport) S32  __cdecl wle_fnNetConnection_getGhostID(char * x__object, S32 realID);
extern "C" __declspec(dllexport) void  __cdecl wle_fnNetConnection_connect(char * x__object, char * x__remoteAddress);
extern "C" __declspec(dllexport) void  __cdecl wle_fnNetConnection_connectLocal(char * x__object,  char* retval);
extern "C" __declspec(dllexport) S32  __cdecl wle_fnNetConnection_getGhostsActive(char * x__object);
extern "C" __declspec(dllexport) void  __cdecl wle_fnNetObject_scopeToClient(char * x__object, char * x__client);
extern "C" __declspec(dllexport) void  __cdecl wle_fnNetObject_clearScopeToClient(char * x__object, char * x__client);
extern "C" __declspec(dllexport) void  __cdecl wle_fnNetObject_setScopeAlways(char * x__object);
extern "C" __declspec(dllexport) S32  __cdecl wle_fnNetObject_getGhostID(char * x__object);
extern "C" __declspec(dllexport) S32  __cdecl wle_fnNetObject_getClientObject(char * x__object);
extern "C" __declspec(dllexport) S32  __cdecl wle_fnNetObject_getServerObject(char * x__object);
extern "C" __declspec(dllexport) S32  __cdecl wle_fnNetObject_isClientObject(char * x__object);
extern "C" __declspec(dllexport) S32  __cdecl wle_fnNetObject_isServerObject(char * x__object);
extern "C" __declspec(dllexport) S32  __cdecl wle_fn__aiAddPlayer(char * x__a1, char * x__a2);
extern "C" __declspec(dllexport) void  __cdecl wle_fnAIClient_setMoveSpeed(char * x__object, char * x__a2);
extern "C" __declspec(dllexport) void  __cdecl wle_fnAIClient_stop(char * x__object);
extern "C" __declspec(dllexport) void  __cdecl wle_fnAIClient_setAimLocation(char * x__object, char * x__a2);
extern "C" __declspec(dllexport) void  __cdecl wle_fnAIClient_setMoveDestination(char * x__object, char * x__a2);
extern "C" __declspec(dllexport) void  __cdecl wle_fnAIClient_getAimLocation(char * x__object,  char* retval);
extern "C" __declspec(dllexport) void  __cdecl wle_fnAIClient_getMoveDestination(char * x__object,  char* retval);
extern "C" __declspec(dllexport) void  __cdecl wle_fnAIClient_setTargetObject(char * x__object, char * x__a2);
extern "C" __declspec(dllexport) S32  __cdecl wle_fnAIClient_getTargetObject(char * x__object);
extern "C" __declspec(dllexport) void  __cdecl wle_fnAIClient_missionCycleCleanup(char * x__object);
extern "C" __declspec(dllexport) void  __cdecl wle_fnAIClient_move(char * x__object);
extern "C" __declspec(dllexport) void  __cdecl wle_fnAIClient_getLocation(char * x__object,  char* retval);
extern "C" __declspec(dllexport) void  __cdecl wle_fnAIClient_moveForward(char * x__object);
extern "C" __declspec(dllexport) S32  __cdecl wle_fn__aiConnect(char * x__a1, char * x__a2, char * x__a3, char * x__a4, char * x__a5, char * x__a6, char * x__a7, char * x__a8, char * x__a9, char * x__a10, char * x__a11, char * x__a12, char * x__a13, char * x__a14, char * x__a15, char * x__a16, char * x__a17, char * x__a18, char * x__a19);
extern "C" __declspec(dllexport) void  __cdecl wle_fnAIConnection_setMove(char * x__object, char * x__a2, char * x__a3);
extern "C" __declspec(dllexport) F32  __cdecl wle_fnAIConnection_getMove(char * x__object, char * x__a2);
extern "C" __declspec(dllexport) void  __cdecl wle_fnAIConnection_setFreeLook(char * x__object, char * x__a2);
extern "C" __declspec(dllexport) S32  __cdecl wle_fnAIConnection_getFreeLook(char * x__object);
extern "C" __declspec(dllexport) void  __cdecl wle_fnAIConnection_setTrigger(char * x__object, char * x__a2, char * x__a3);
extern "C" __declspec(dllexport) S32  __cdecl wle_fnAIConnection_getTrigger(char * x__object, char * x__a2, char * x__a3);
extern "C" __declspec(dllexport) void  __cdecl wle_fnAIConnection_getAddress(char * x__object,  char* retval);
extern "C" __declspec(dllexport) void  __cdecl wle_fnAIPlayer_setAimObject(char * x__object, char * x__a2, char * x__a3);
extern "C" __declspec(dllexport) void  __cdecl wle_fnAIPlayer_stop(char * x__object);
extern "C" __declspec(dllexport) void  __cdecl wle_fnAIPlayer_clearAim(char * x__object);
extern "C" __declspec(dllexport) void  __cdecl wle_fnAIPlayer_setMoveSpeed(char * x__object, F32 speed);
extern "C" __declspec(dllexport) F32  __cdecl wle_fnAIPlayer_getMoveSpeed(char * x__object);
extern "C" __declspec(dllexport) void  __cdecl wle_fnAIPlayer_setMoveDestination(char * x__object, char * x__goal, bool slowDown);
extern "C" __declspec(dllexport) void  __cdecl wle_fnAIPlayer_getMoveDestination(char * x__object,  char* retval);
extern "C" __declspec(dllexport) void  __cdecl wle_fnAIPlayer_setAimLocation(char * x__object, char * x__target);
extern "C" __declspec(dllexport) void  __cdecl wle_fnAIPlayer_getAimLocation(char * x__object,  char* retval);
extern "C" __declspec(dllexport) S32  __cdecl wle_fnAIPlayer_getAimObject(char * x__object);
extern "C" __declspec(dllexport) S32  __cdecl wle_fnCamera_getMode(char * x__object);
extern "C" __declspec(dllexport) void  __cdecl wle_fnCamera_getPosition(char * x__object,  char* retval);
extern "C" __declspec(dllexport) void  __cdecl wle_fnCamera_getRotation(char * x__object,  char* retval);
extern "C" __declspec(dllexport) void  __cdecl wle_fnCamera_setRotation(char * x__object, char * x__rot);
extern "C" __declspec(dllexport) void  __cdecl wle_fnCamera_getOffset(char * x__object,  char* retval);
extern "C" __declspec(dllexport) void  __cdecl wle_fnCamera_setOffset(char * x__object, char * x__offset);
extern "C" __declspec(dllexport) void  __cdecl wle_fnCamera_setOrbitMode(char * x__object, char * x__orbitObject, char * x__orbitPoint, F32 minDistance, F32 maxDistance, F32 initDistance, bool ownClientObj, char * x__offset, bool locked);
extern "C" __declspec(dllexport) S32  __cdecl wle_fnCamera_setOrbitObject(char * x__object, char * x__orbitObject, char * x__rotation, F32 minDistance, F32 maxDistance, F32 initDistance, bool ownClientObject, char * x__offset, bool locked);
extern "C" __declspec(dllexport) void  __cdecl wle_fnCamera_setOrbitPoint(char * x__object, char * x__orbitPoint, F32 minDistance, F32 maxDistance, F32 initDistance, char * x__offset, bool locked);
extern "C" __declspec(dllexport) S32  __cdecl wle_fnCamera_setTrackObject(char * x__object, char * x__trackObject, char * x__offset);
extern "C" __declspec(dllexport) void  __cdecl wle_fnCamera_setEditOrbitMode(char * x__object);
extern "C" __declspec(dllexport) void  __cdecl wle_fnCamera_setFlyMode(char * x__object);
extern "C" __declspec(dllexport) void  __cdecl wle_fnCamera_setNewtonFlyMode(char * x__object);
extern "C" __declspec(dllexport) S32  __cdecl wle_fnCamera_isRotationDamped(char * x__object);
extern "C" __declspec(dllexport) void  __cdecl wle_fnCamera_getAngularVelocity(char * x__object,  char* retval);
extern "C" __declspec(dllexport) void  __cdecl wle_fnCamera_setAngularVelocity(char * x__object, char * x__velocity);
extern "C" __declspec(dllexport) void  __cdecl wle_fnCamera_setAngularForce(char * x__object, F32 force);
extern "C" __declspec(dllexport) void  __cdecl wle_fnCamera_setAngularDrag(char * x__object, F32 drag);
extern "C" __declspec(dllexport) void  __cdecl wle_fnCamera_setMass(char * x__object, F32 mass);
extern "C" __declspec(dllexport) void  __cdecl wle_fnCamera_getVelocity(char * x__object,  char* retval);
extern "C" __declspec(dllexport) void  __cdecl wle_fnCamera_setVelocity(char * x__object, char * x__velocity);
extern "C" __declspec(dllexport) void  __cdecl wle_fnCamera_setDrag(char * x__object, F32 drag);
extern "C" __declspec(dllexport) void  __cdecl wle_fnCamera_setFlyForce(char * x__object, F32 force);
extern "C" __declspec(dllexport) void  __cdecl wle_fnCamera_setSpeedMultiplier(char * x__object, F32 multiplier);
extern "C" __declspec(dllexport) void  __cdecl wle_fnCamera_setBrakeMultiplier(char * x__object, F32 multiplier);
extern "C" __declspec(dllexport) S32  __cdecl wle_fnCamera_isEditOrbitMode(char * x__object);
extern "C" __declspec(dllexport) void  __cdecl wle_fnCamera_setValidEditOrbitPoint(char * x__object, bool validPoint);
extern "C" __declspec(dllexport) void  __cdecl wle_fnCamera_setEditOrbitPoint(char * x__object, char * x__point);
extern "C" __declspec(dllexport) void  __cdecl wle_fnCamera_autoFitRadius(char * x__object, F32 radius);
extern "C" __declspec(dllexport) void  __cdecl wle_fnCamera_lookAt(char * x__object, char * x__point);
extern "C" __declspec(dllexport) S32  __cdecl wle_fnDebris_init(char * x__object, char * x__inputPosition, char * x__inputVelocity);
extern "C" __declspec(dllexport) void  __cdecl wle_fn__containerFindFirst(char * x__a1, char * x__a2, char * x__a3, char * x__a4, char * x__a5,  char* retval);
extern "C" __declspec(dllexport) void  __cdecl wle_fn__containerFindNext(char* retval);
extern "C" __declspec(dllexport) void  __cdecl wle_fnGroundPlane_postApply(char * x__object);
extern "C" __declspec(dllexport) void  __cdecl wle_fnGuiMaterialPreview_setModel(char * x__object, char * x__shapeName);
extern "C" __declspec(dllexport) void  __cdecl wle_fnGuiMaterialPreview_deleteModel(char * x__object);
extern "C" __declspec(dllexport) void  __cdecl wle_fnGuiMaterialPreview_setOrbitDistance(char * x__object, F32 distance);
extern "C" __declspec(dllexport) void  __cdecl wle_fnGuiMaterialPreview_reset(char * x__object);
extern "C" __declspec(dllexport) void  __cdecl wle_fnGuiMaterialPreview_setLightColor(char * x__object, char * x__color);
extern "C" __declspec(dllexport) void  __cdecl wle_fnGuiMaterialPreview_setAmbientLightColor(char * x__object, char * x__color);
extern "C" __declspec(dllexport) void  __cdecl wle_fnGuiObjectView_getModel(char * x__object,  char* retval);
extern "C" __declspec(dllexport) void  __cdecl wle_fnGuiObjectView_setModel(char * x__object, char * x__shapeName);
extern "C" __declspec(dllexport) void  __cdecl wle_fnGuiObjectView_getMountedModel(char * x__object,  char* retval);
extern "C" __declspec(dllexport) void  __cdecl wle_fnGuiObjectView_setMountedModel(char * x__object, char * x__shapeName);
extern "C" __declspec(dllexport) void  __cdecl wle_fnGuiObjectView_getSkin(char * x__object,  char* retval);
extern "C" __declspec(dllexport) void  __cdecl wle_fnGuiObjectView_setSkin(char * x__object, char * x__skinName);
extern "C" __declspec(dllexport) void  __cdecl wle_fnGuiObjectView_getMountSkin(char * x__object, S32 param1, S32 param2,  char* retval);
extern "C" __declspec(dllexport) void  __cdecl wle_fnGuiObjectView_setMountSkin(char * x__object, char * x__skinName);
extern "C" __declspec(dllexport) void  __cdecl wle_fnGuiObjectView_setSeq(char * x__object, char * x__indexOrName);
extern "C" __declspec(dllexport) void  __cdecl wle_fnGuiObjectView_setMount(char * x__object, char * x__shapeName, char * x__mountNodeIndexOrName);
extern "C" __declspec(dllexport) F32  __cdecl wle_fnGuiObjectView_getOrbitDistance(char * x__object);
extern "C" __declspec(dllexport) void  __cdecl wle_fnGuiObjectView_setOrbitDistance(char * x__object, F32 distance);
extern "C" __declspec(dllexport) F32  __cdecl wle_fnGuiObjectView_getCameraSpeed(char * x__object);
extern "C" __declspec(dllexport) void  __cdecl wle_fnGuiObjectView_setCameraSpeed(char * x__object, F32 factor);
extern "C" __declspec(dllexport) void  __cdecl wle_fnGuiObjectView_setLightColor(char * x__object, char * x__color);
extern "C" __declspec(dllexport) void  __cdecl wle_fnGuiObjectView_setLightAmbient(char * x__object, char * x__color);
extern "C" __declspec(dllexport) void  __cdecl wle_fnGuiObjectView_setLightDirection(char * x__object, char * x__direction);
extern "C" __declspec(dllexport) S32  __cdecl wle_fnItem_isStatic(char * x__object);
extern "C" __declspec(dllexport) S32  __cdecl wle_fnItem_isAtRest(char * x__object);
extern "C" __declspec(dllexport) S32  __cdecl wle_fnItem_isRotating(char * x__object);
extern "C" __declspec(dllexport) S32  __cdecl wle_fnItem_setCollisionTimeout(char * x__object, int ignoreColObj);
extern "C" __declspec(dllexport) void  __cdecl wle_fnItem_getLastStickyPos(char * x__object,  char* retval);
extern "C" __declspec(dllexport) void  __cdecl wle_fnItem_getLastStickyNormal(char * x__object,  char* retval);
extern "C" __declspec(dllexport) void  __cdecl wle_fnLightBase_playAnimation(char * x__object, char * x__a2);
extern "C" __declspec(dllexport) void  __cdecl wle_fnLightBase_pauseAnimation(char * x__object);
extern "C" __declspec(dllexport) void  __cdecl wle_fnLightBase_setLightEnabled(char * x__object, bool state);
extern "C" __declspec(dllexport) void  __cdecl wle_fnLightDescription_apply(char * x__object);
extern "C" __declspec(dllexport) void  __cdecl wle_fnLightFlareData_apply(char * x__object);
extern "C" __declspec(dllexport) void  __cdecl wle_fn_getMissionAreaServerObject(char* retval);
extern "C" __declspec(dllexport) void  __cdecl wle_fnMissionArea_getArea(char * x__object,  char* retval);
extern "C" __declspec(dllexport) void  __cdecl wle_fnMissionArea_setArea(char * x__object, S32 x, S32 y, S32 width, S32 height);
extern "C" __declspec(dllexport) void  __cdecl wle_fnMissionArea_postApply(char * x__object);
extern "C" __declspec(dllexport) S32  __cdecl wle_fnSpawnSphere_spawnObject(char * x__object, char * x__a2);
extern "C" __declspec(dllexport) void  __cdecl wle_fnPathCamera_setPosition(char * x__object, F32 position);
extern "C" __declspec(dllexport) void  __cdecl wle_fnPathCamera_setTarget(char * x__object, F32 position);
extern "C" __declspec(dllexport) void  __cdecl wle_fnPathCamera_setState(char * x__object, char * x__newState);
extern "C" __declspec(dllexport) void  __cdecl wle_fnPathCamera_reset(char * x__object, F32 speed);
extern "C" __declspec(dllexport) void  __cdecl wle_fnPathCamera_pushBack(char * x__object, char * x__transform, F32 speed, char * x__type, char * x__path);
extern "C" __declspec(dllexport) void  __cdecl wle_fnPathCamera_pushFront(char * x__object, char * x__transform, F32 speed, char * x__type, char * x__path);
extern "C" __declspec(dllexport) void  __cdecl wle_fnPathCamera_popFront(char * x__object);
extern "C" __declspec(dllexport) void  __cdecl wle_fnPhysicalZone_activate(char * x__object);
extern "C" __declspec(dllexport) void  __cdecl wle_fnPhysicalZone_deactivate(char * x__object);
extern "C" __declspec(dllexport) void  __cdecl wle_fnPlayer_getPose(char * x__object,  char* retval);
extern "C" __declspec(dllexport) void  __cdecl wle_fnPlayer_allowAllPoses(char * x__object);
extern "C" __declspec(dllexport) void  __cdecl wle_fnPlayer_allowJumping(char * x__object, bool state);
extern "C" __declspec(dllexport) void  __cdecl wle_fnPlayer_allowJetJumping(char * x__object, bool state);
extern "C" __declspec(dllexport) void  __cdecl wle_fnPlayer_allowSprinting(char * x__object, bool state);
extern "C" __declspec(dllexport) void  __cdecl wle_fnPlayer_allowCrouching(char * x__object, bool state);
extern "C" __declspec(dllexport) void  __cdecl wle_fnPlayer_allowProne(char * x__object, bool state);
extern "C" __declspec(dllexport) void  __cdecl wle_fnPlayer_allowSwimming(char * x__object, bool state);
extern "C" __declspec(dllexport) void  __cdecl wle_fnPlayer_getState(char * x__object,  char* retval);
extern "C" __declspec(dllexport) void  __cdecl wle_fnPlayer_getDamageLocation(char * x__object, char * x__pos,  char* retval);
extern "C" __declspec(dllexport) S32  __cdecl wle_fnPlayer_setArmThread(char * x__object, char * x__name);
extern "C" __declspec(dllexport) S32  __cdecl wle_fnPlayer_setActionThread(char * x__object, char * x__name, bool hold, bool fsp);
extern "C" __declspec(dllexport) S32  __cdecl wle_fnPlayer_setControlObject(char * x__object, char * x__obj);
extern "C" __declspec(dllexport) S32  __cdecl wle_fnPlayer_getControlObject(char * x__object);
extern "C" __declspec(dllexport) void  __cdecl wle_fnPlayer_clearControlObject(char * x__object);
extern "C" __declspec(dllexport) S32  __cdecl wle_fnPlayer_checkDismountPoint(char * x__object, char * x__oldPos, char * x__pos);
extern "C" __declspec(dllexport) S32  __cdecl wle_fnPlayer_getNumDeathAnimations(char * x__object);
extern "C" __declspec(dllexport) S32  __cdecl wle_fnPortal_isInteriorPortal(char * x__object);
extern "C" __declspec(dllexport) S32  __cdecl wle_fnPortal_isExteriorPortal(char * x__object);
extern "C" __declspec(dllexport) void  __cdecl wle_fnProjectile_presimulate(char * x__object, F32 seconds);
extern "C" __declspec(dllexport) void  __cdecl wle_fnProximityMine_explode(char * x__object);
extern "C" __declspec(dllexport) S32  __cdecl wle_fnShapeBaseData_checkDeployPos(char * x__object, char * x__txfm);
extern "C" __declspec(dllexport) void  __cdecl wle_fnShapeBaseData_getDeployTransform(char * x__object, char * x__pos, char * x__normal,  char* retval);
extern "C" __declspec(dllexport) void  __cdecl wle_fnShapeBase_setHidden(char * x__object, bool show);
extern "C" __declspec(dllexport) S32  __cdecl wle_fnShapeBase_isHidden(char * x__object);
extern "C" __declspec(dllexport) S32  __cdecl wle_fnShapeBase_playAudio(char * x__object, S32 slot, char * x__track);
extern "C" __declspec(dllexport) S32  __cdecl wle_fnShapeBase_stopAudio(char * x__object, S32 slot);
extern "C" __declspec(dllexport) S32  __cdecl wle_fnShapeBase_playThread(char * x__object, S32 slot, char * x__name);
extern "C" __declspec(dllexport) S32  __cdecl wle_fnShapeBase_setThreadDir(char * x__object, S32 slot, bool fwd);
extern "C" __declspec(dllexport) S32  __cdecl wle_fnShapeBase_setThreadTimeScale(char * x__object, S32 slot, F32 scale);
extern "C" __declspec(dllexport) S32  __cdecl wle_fnShapeBase_setThreadPosition(char * x__object, S32 slot, F32 pos);
extern "C" __declspec(dllexport) S32  __cdecl wle_fnShapeBase_stopThread(char * x__object, S32 slot);
extern "C" __declspec(dllexport) S32  __cdecl wle_fnShapeBase_destroyThread(char * x__object, S32 slot);
extern "C" __declspec(dllexport) S32  __cdecl wle_fnShapeBase_pauseThread(char * x__object, S32 slot);
extern "C" __declspec(dllexport) S32  __cdecl wle_fnShapeBase_mountImage(char * x__object, char * x__image, S32 slot, bool loaded, char * x__skinTag);
extern "C" __declspec(dllexport) S32  __cdecl wle_fnShapeBase_unmountImage(char * x__object, S32 slot);
extern "C" __declspec(dllexport) S32  __cdecl wle_fnShapeBase_getMountedImage(char * x__object, S32 slot);
extern "C" __declspec(dllexport) S32  __cdecl wle_fnShapeBase_getPendingImage(char * x__object, S32 slot);
extern "C" __declspec(dllexport) S32  __cdecl wle_fnShapeBase_isImageFiring(char * x__object, S32 slot);
extern "C" __declspec(dllexport) S32  __cdecl wle_fnShapeBase_isImageMounted(char * x__object, char * x__image);
extern "C" __declspec(dllexport) S32  __cdecl wle_fnShapeBase_getMountSlot(char * x__object, char * x__image);
extern "C" __declspec(dllexport) S32  __cdecl wle_fnShapeBase_getImageSkinTag(char * x__object, S32 slot);
extern "C" __declspec(dllexport) void  __cdecl wle_fnShapeBase_getImageState(char * x__object, S32 slot,  char* retval);
extern "C" __declspec(dllexport) S32  __cdecl wle_fnShapeBase_hasImageState(char * x__object, S32 slot, char * x__state);
extern "C" __declspec(dllexport) S32  __cdecl wle_fnShapeBase_getImageTrigger(char * x__object, S32 slot);
extern "C" __declspec(dllexport) S32  __cdecl wle_fnShapeBase_setImageTrigger(char * x__object, S32 slot, bool state);
extern "C" __declspec(dllexport) S32  __cdecl wle_fnShapeBase_getImageGenericTrigger(char * x__object, S32 slot, S32 trigger);
extern "C" __declspec(dllexport) S32  __cdecl wle_fnShapeBase_setImageGenericTrigger(char * x__object, S32 slot, S32 trigger, bool state);
extern "C" __declspec(dllexport) S32  __cdecl wle_fnShapeBase_getImageAltTrigger(char * x__object, S32 slot);
extern "C" __declspec(dllexport) S32  __cdecl wle_fnShapeBase_setImageAltTrigger(char * x__object, S32 slot, bool state);
extern "C" __declspec(dllexport) S32  __cdecl wle_fnShapeBase_getImageAmmo(char * x__object, S32 slot);
extern "C" __declspec(dllexport) S32  __cdecl wle_fnShapeBase_setImageAmmo(char * x__object, S32 slot, bool state);
extern "C" __declspec(dllexport) S32  __cdecl wle_fnShapeBase_getImageLoaded(char * x__object, S32 slot);
extern "C" __declspec(dllexport) S32  __cdecl wle_fnShapeBase_setImageLoaded(char * x__object, S32 slot, bool state);
extern "C" __declspec(dllexport) S32  __cdecl wle_fnShapeBase_getImageTarget(char * x__object, S32 slot);
extern "C" __declspec(dllexport) S32  __cdecl wle_fnShapeBase_setImageTarget(char * x__object, S32 slot, bool state);
extern "C" __declspec(dllexport) void  __cdecl wle_fnShapeBase_getImageScriptAnimPrefix(char * x__object, S32 slot,  char* retval);
extern "C" __declspec(dllexport) void  __cdecl wle_fnShapeBase_setImageScriptAnimPrefix(char * x__object, S32 slot, char * x__prefix);
extern "C" __declspec(dllexport) void  __cdecl wle_fnShapeBase_getMuzzleVector(char * x__object, S32 slot,  char* retval);
extern "C" __declspec(dllexport) void  __cdecl wle_fnShapeBase_getMuzzlePoint(char * x__object, S32 slot,  char* retval);
extern "C" __declspec(dllexport) void  __cdecl wle_fnShapeBase_getSlotTransform(char * x__object, S32 slot,  char* retval);
extern "C" __declspec(dllexport) void  __cdecl wle_fnShapeBase_getAIRepairPoint(char * x__object,  char* retval);
extern "C" __declspec(dllexport) void  __cdecl wle_fnShapeBase_getVelocity(char * x__object,  char* retval);
extern "C" __declspec(dllexport) S32  __cdecl wle_fnShapeBase_setVelocity(char * x__object, char * x__vel);
extern "C" __declspec(dllexport) S32  __cdecl wle_fnShapeBase_applyImpulse(char * x__object, char * x__pos, char * x__vec);
extern "C" __declspec(dllexport) void  __cdecl wle_fnShapeBase_getEyeVector(char * x__object,  char* retval);
extern "C" __declspec(dllexport) void  __cdecl wle_fnShapeBase_getEyePoint(char * x__object,  char* retval);
extern "C" __declspec(dllexport) void  __cdecl wle_fnShapeBase_getEyeTransform(char * x__object,  char* retval);
extern "C" __declspec(dllexport) void  __cdecl wle_fnShapeBase_getLookAtPoint(char * x__object, F32 distance, S32 typeMask,  char* retval);
extern "C" __declspec(dllexport) void  __cdecl wle_fnShapeBase_setEnergyLevel(char * x__object, F32 level);
extern "C" __declspec(dllexport) F32  __cdecl wle_fnShapeBase_getEnergyLevel(char * x__object);
extern "C" __declspec(dllexport) F32  __cdecl wle_fnShapeBase_getEnergyPercent(char * x__object);
extern "C" __declspec(dllexport) void  __cdecl wle_fnShapeBase_setDamageLevel(char * x__object, F32 level);
extern "C" __declspec(dllexport) F32  __cdecl wle_fnShapeBase_getDamageLevel(char * x__object);
extern "C" __declspec(dllexport) F32  __cdecl wle_fnShapeBase_getDamagePercent(char * x__object);
extern "C" __declspec(dllexport) F32  __cdecl wle_fnShapeBase_getMaxDamage(char * x__object);
extern "C" __declspec(dllexport) S32  __cdecl wle_fnShapeBase_setDamageState(char * x__object, char * x__state);
extern "C" __declspec(dllexport) void  __cdecl wle_fnShapeBase_getDamageState(char * x__object,  char* retval);
extern "C" __declspec(dllexport) S32  __cdecl wle_fnShapeBase_isDestroyed(char * x__object);
extern "C" __declspec(dllexport) S32  __cdecl wle_fnShapeBase_isDisabled(char * x__object);
extern "C" __declspec(dllexport) S32  __cdecl wle_fnShapeBase_isEnabled(char * x__object);
extern "C" __declspec(dllexport) void  __cdecl wle_fnShapeBase_applyDamage(char * x__object, F32 amount);
extern "C" __declspec(dllexport) void  __cdecl wle_fnShapeBase_applyRepair(char * x__object, F32 amount);
extern "C" __declspec(dllexport) void  __cdecl wle_fnShapeBase_setRepairRate(char * x__object, F32 rate);
extern "C" __declspec(dllexport) F32  __cdecl wle_fnShapeBase_getRepairRate(char * x__object);
extern "C" __declspec(dllexport) void  __cdecl wle_fnShapeBase_setRechargeRate(char * x__object, F32 rate);
extern "C" __declspec(dllexport) F32  __cdecl wle_fnShapeBase_getRechargeRate(char * x__object);
extern "C" __declspec(dllexport) S32  __cdecl wle_fnShapeBase_getControllingClient(char * x__object);
extern "C" __declspec(dllexport) S32  __cdecl wle_fnShapeBase_getControllingObject(char * x__object);
extern "C" __declspec(dllexport) S32  __cdecl wle_fnShapeBase_canCloak(char * x__object);
extern "C" __declspec(dllexport) void  __cdecl wle_fnShapeBase_setCloaked(char * x__object, bool cloak);
extern "C" __declspec(dllexport) S32  __cdecl wle_fnShapeBase_isCloaked(char * x__object);
extern "C" __declspec(dllexport) void  __cdecl wle_fnShapeBase_setDamageFlash(char * x__object, F32 level);
extern "C" __declspec(dllexport) F32  __cdecl wle_fnShapeBase_getDamageFlash(char * x__object);
extern "C" __declspec(dllexport) void  __cdecl wle_fnShapeBase_setWhiteOut(char * x__object, F32 level);
extern "C" __declspec(dllexport) F32  __cdecl wle_fnShapeBase_getWhiteOut(char * x__object);
extern "C" __declspec(dllexport) F32  __cdecl wle_fnShapeBase_getDefaultCameraFov(char * x__object);
extern "C" __declspec(dllexport) F32  __cdecl wle_fnShapeBase_getCameraFov(char * x__object);
extern "C" __declspec(dllexport) void  __cdecl wle_fnShapeBase_setCameraFov(char * x__object, F32 fov);
extern "C" __declspec(dllexport) void  __cdecl wle_fnShapeBase_setInvincibleMode(char * x__object, F32 time, F32 speed);
extern "C" __declspec(dllexport) void  __cdecl wle_fnShapeBase_startFade(char * x__object, S32 time, S32 delay, bool fadeOut);
extern "C" __declspec(dllexport) void  __cdecl wle_fnShapeBase_setDamageVector(char * x__object, char * x__vec);
extern "C" __declspec(dllexport) void  __cdecl wle_fnShapeBase_setShapeName(char * x__object, char * x__name);
extern "C" __declspec(dllexport) void  __cdecl wle_fnShapeBase_getShapeName(char * x__object,  char* retval);
extern "C" __declspec(dllexport) void  __cdecl wle_fnShapeBase_setSkinName(char * x__object, char * x__name);
extern "C" __declspec(dllexport) void  __cdecl wle_fnShapeBase_getSkinName(char * x__object,  char* retval);
extern "C" __declspec(dllexport) S32  __cdecl wle_fnShapeBase_getVisibleDistance(char * x__object);
extern "C" __declspec(dllexport) void  __cdecl wle_fnShapeBase_setVisibleDistance(char * x__object, S32 dist);
extern "C" __declspec(dllexport) void  __cdecl wle_fnShapeBase_setAllMeshesHidden(char * x__object, bool hide);
extern "C" __declspec(dllexport) void  __cdecl wle_fnShapeBase_setMeshHidden(char * x__object, char * x__name, bool hide);
extern "C" __declspec(dllexport) void  __cdecl wle_fnShapeBase_dumpMeshVisibility(char * x__object);
extern "C" __declspec(dllexport) void  __cdecl wle_fnShapeBase_getTargetName(char * x__object, S32 index,  char* retval);
extern "C" __declspec(dllexport) S32  __cdecl wle_fnShapeBase_getTargetCount(char * x__object);
extern "C" __declspec(dllexport) void  __cdecl wle_fnShapeBase_changeMaterial(char * x__object, char * x__mapTo, char * x__oldMat, char * x__newMat);
extern "C" __declspec(dllexport) void  __cdecl wle_fnShapeBase_getModelFile(char * x__object,  char* retval);
extern "C" __declspec(dllexport) void  __cdecl wle_fnStaticShape_setPoweredState(char * x__object, char * x__a2);
extern "C" __declspec(dllexport) S32  __cdecl wle_fnStaticShape_getPoweredState(char * x__object);
extern "C" __declspec(dllexport) S32  __cdecl wle_fnTrigger_getNumObjects(char * x__object);
extern "C" __declspec(dllexport) S32  __cdecl wle_fnTrigger_getObject(char * x__object, S32 index);
extern "C" __declspec(dllexport) void  __cdecl wle_fnTSStatic_getTargetName(char * x__object, S32 index,  char* retval);
extern "C" __declspec(dllexport) S32  __cdecl wle_fnTSStatic_getTargetCount(char * x__object);
extern "C" __declspec(dllexport) void  __cdecl wle_fnTSStatic_changeMaterial(char * x__object, char * x__mapTo, char * x__oldMat, char * x__newMat);
extern "C" __declspec(dllexport) void  __cdecl wle_fnTSStatic_getModelFile(char * x__object,  char* retval);
extern "C" __declspec(dllexport) S32  __cdecl wle_fnZone_getZoneId(char * x__object);
extern "C" __declspec(dllexport) void  __cdecl wle_fnZone_dumpZoneState(char * x__object, bool updateFirst);
extern "C" __declspec(dllexport) void  __cdecl wle_fnRenderMeshExample_postApply(char * x__object);
extern "C" __declspec(dllexport) F32  __cdecl wle_fn_calcExplosionCoverage(char * x__pos, S32 id, U32 covMask);
extern "C" __declspec(dllexport) void  __cdecl wle_fn_StartFoliageReplication();
extern "C" __declspec(dllexport) void  __cdecl wle_fn_StartClientReplication();
extern "C" __declspec(dllexport) void  __cdecl wle_fnLightning_warningFlashes(char * x__object);
extern "C" __declspec(dllexport) void  __cdecl wle_fnLightning_strikeRandomPoint(char * x__object);
extern "C" __declspec(dllexport) void  __cdecl wle_fnLightning_strikeObject(char * x__object, S32 id);
extern "C" __declspec(dllexport) void  __cdecl wle_fnParticleData_reload(char * x__object);
extern "C" __declspec(dllexport) void  __cdecl wle_fnParticleEmitterData_reload(char * x__object);
extern "C" __declspec(dllexport) void  __cdecl wle_fnParticleEmitterNode_setEmitterDataBlock(char * x__object, char * x__emitterDatablock);
extern "C" __declspec(dllexport) void  __cdecl wle_fnParticleEmitterNode_setActive(char * x__object, bool active);
extern "C" __declspec(dllexport) void  __cdecl wle_fnPrecipitation_setPercentage(char * x__object, F32 percentage);
extern "C" __declspec(dllexport) void  __cdecl wle_fnPrecipitation_modifyStorm(char * x__object, F32 percentage, F32 seconds);
extern "C" __declspec(dllexport) void  __cdecl wle_fnPrecipitation_setTurbulence(char * x__object, F32 max, F32 speed, F32 seconds);
extern "C" __declspec(dllexport) S32  __cdecl wle_fnGameBase_getDataBlock(char * x__object);
extern "C" __declspec(dllexport) S32  __cdecl wle_fnGameBase_setDataBlock(char * x__object, char * x__data);
extern "C" __declspec(dllexport) S32  __cdecl wle_fnGameBase_applyImpulse(char * x__object, char * x__pos, char * x__vel);
extern "C" __declspec(dllexport) void  __cdecl wle_fnGameBase_applyRadialImpulse(char * x__object, char * x__origin, F32 radius, F32 magnitude);
extern "C" __declspec(dllexport) void  __cdecl wle_fnGameConnection_setConnectArgs(char * x__object, char * x__a2, char * x__a3, char * x__a4, char * x__a5, char * x__a6, char * x__a7, char * x__a8, char * x__a9, char * x__a10, char * x__a11, char * x__a12, char * x__a13, char * x__a14, char * x__a15, char * x__a16);
extern "C" __declspec(dllexport) void  __cdecl wle_fnGameConnection_setJoinPassword(char * x__object, char * x__password);
extern "C" __declspec(dllexport) void  __cdecl wle_fnGameConnection_transmitDataBlocks(char * x__object, S32 sequence);
extern "C" __declspec(dllexport) void  __cdecl wle_fnGameConnection_activateGhosting(char * x__object);
extern "C" __declspec(dllexport) void  __cdecl wle_fnGameConnection_resetGhosting(char * x__object);
extern "C" __declspec(dllexport) S32  __cdecl wle_fnGameConnection_setControlObject(char * x__object, char * x__ctrlObj);
extern "C" __declspec(dllexport) void  __cdecl wle_fnGameConnection_getControlObject(char * x__object,  char* retval);
extern "C" __declspec(dllexport) S32  __cdecl wle_fnGameConnection_isAIControlled(char * x__object);
extern "C" __declspec(dllexport) S32  __cdecl wle_fnGameConnection_isControlObjectRotDampedCamera(char * x__object);
extern "C" __declspec(dllexport) S32  __cdecl wle_fnGameConnection_play2D(char * x__object, char * x__profile);
extern "C" __declspec(dllexport) S32  __cdecl wle_fnGameConnection_play3D(char * x__object, char * x__profile, char * x__location);
extern "C" __declspec(dllexport) S32  __cdecl wle_fnGameConnection_chaseCam(char * x__object, S32 size);
extern "C" __declspec(dllexport) F32  __cdecl wle_fnGameConnection_getControlCameraDefaultFov(char * x__object);
extern "C" __declspec(dllexport) void  __cdecl wle_fnGameConnection_setControlCameraFov(char * x__object, F32 newFOV);
extern "C" __declspec(dllexport) F32  __cdecl wle_fnGameConnection_getControlCameraFov(char * x__object);
extern "C" __declspec(dllexport) F32  __cdecl wle_fnGameConnection_getDamageFlash(char * x__object);
extern "C" __declspec(dllexport) F32  __cdecl wle_fnGameConnection_getWhiteOut(char * x__object);
extern "C" __declspec(dllexport) void  __cdecl wle_fnGameConnection_setBlackOut(char * x__object, bool doFade, S32 timeMS);
extern "C" __declspec(dllexport) void  __cdecl wle_fnGameConnection_setMissionCRC(char * x__object, S32 CRC);
extern "C" __declspec(dllexport) void  __cdecl wle_fnGameConnection_delete(char * x__object, char * x__reason);
extern "C" __declspec(dllexport) void  __cdecl wle_fnGameConnection_startRecording(char * x__object, char * x__fileName);
extern "C" __declspec(dllexport) void  __cdecl wle_fnGameConnection_stopRecording(char * x__object);
extern "C" __declspec(dllexport) S32  __cdecl wle_fnGameConnection_playDemo(char * x__object, char * x__demoFileName);
extern "C" __declspec(dllexport) S32  __cdecl wle_fnGameConnection_isDemoPlaying(char * x__object);
extern "C" __declspec(dllexport) S32  __cdecl wle_fnGameConnection_isDemoRecording(char * x__object);
extern "C" __declspec(dllexport) void  __cdecl wle_fnGameConnection_listClassIDs(char * x__object);
extern "C" __declspec(dllexport) S32  __cdecl wle_fnGameConnection_setCameraObject(char * x__object, char * x__camera);
extern "C" __declspec(dllexport) void  __cdecl wle_fnGameConnection_getCameraObject(char * x__object,  char* retval);
extern "C" __declspec(dllexport) void  __cdecl wle_fnGameConnection_clearCameraObject(char * x__object);
extern "C" __declspec(dllexport) S32  __cdecl wle_fnGameConnection_isFirstPerson(char * x__object);
extern "C" __declspec(dllexport) void  __cdecl wle_fnGameConnection_setFirstPerson(char * x__object, bool firstPerson);
extern "C" __declspec(dllexport) void  __cdecl wle_fn__dumpProcessList();
extern "C" __declspec(dllexport) void  __cdecl wle_fnPhysicsDebrisData_preload(char * x__object);
extern "C" __declspec(dllexport) void  __cdecl wle_fnPhysicsForce_attach(char * x__object, char * x__start, char * x__direction, F32 maxDist);
extern "C" __declspec(dllexport) void  __cdecl wle_fnPhysicsForce_detach(char * x__object, char * x__force);
extern "C" __declspec(dllexport) S32  __cdecl wle_fnPhysicsForce_isAttached(char * x__object);
extern "C" __declspec(dllexport) void  __cdecl wle_fn__physicsStartSimulation(char * x__a1);
extern "C" __declspec(dllexport) void  __cdecl wle_fn__physicsStopSimulation(char * x__a1);
extern "C" __declspec(dllexport) S32  __cdecl wle_fn__physicsSimulationEnabled();
extern "C" __declspec(dllexport) F32  __cdecl wle_fn__physicsGetTimeScale();
extern "C" __declspec(dllexport) void  __cdecl wle_fn__physicsStoreState();
extern "C" __declspec(dllexport) S32  __cdecl wle_fnPhysicsShape_isDestroyed(char * x__object);
extern "C" __declspec(dllexport) void  __cdecl wle_fnPhysicsShape_destroy(char * x__object);
extern "C" __declspec(dllexport) void  __cdecl wle_fnPhysicsShape_restore(char * x__object);
extern "C" __declspec(dllexport) void  __cdecl wle_fnAITurretShape_addToIgnoreList(char * x__object, char * x__obj);
extern "C" __declspec(dllexport) void  __cdecl wle_fnAITurretShape_removeFromIgnoreList(char * x__object, char * x__obj);
extern "C" __declspec(dllexport) void  __cdecl wle_fnAITurretShape_setTurretState(char * x__object, char * x__newState, bool force);
extern "C" __declspec(dllexport) void  __cdecl wle_fnAITurretShape_activateTurret(char * x__object);
extern "C" __declspec(dllexport) void  __cdecl wle_fnAITurretShape_deactivateTurret(char * x__object);
extern "C" __declspec(dllexport) void  __cdecl wle_fnAITurretShape_startScanForTargets(char * x__object);
extern "C" __declspec(dllexport) void  __cdecl wle_fnAITurretShape_stopScanForTargets(char * x__object);
extern "C" __declspec(dllexport) void  __cdecl wle_fnAITurretShape_startTrackingTarget(char * x__object);
extern "C" __declspec(dllexport) void  __cdecl wle_fnAITurretShape_stopTrackingTarget(char * x__object);
extern "C" __declspec(dllexport) S32  __cdecl wle_fnAITurretShape_hasTarget(char * x__object);
extern "C" __declspec(dllexport) void  __cdecl wle_fnAITurretShape_getTarget(char * x__object,  char* retval);
extern "C" __declspec(dllexport) void  __cdecl wle_fnAITurretShape_resetTarget(char * x__object);
extern "C" __declspec(dllexport) void  __cdecl wle_fnAITurretShape_setWeaponLeadVelocity(char * x__object, F32 velocity);
extern "C" __declspec(dllexport) F32  __cdecl wle_fnAITurretShape_getWeaponLeadVelocity(char * x__object);
extern "C" __declspec(dllexport) void  __cdecl wle_fnAITurretShape_setAllGunsFiring(char * x__object, bool fire);
extern "C" __declspec(dllexport) void  __cdecl wle_fnAITurretShape_setGunSlotFiring(char * x__object, S32 slot, bool fire);
extern "C" __declspec(dllexport) void  __cdecl wle_fnAITurretShape_recenterTurret(char * x__object);
extern "C" __declspec(dllexport) S32  __cdecl wle_fnTurretShape_getAllowManualRotation(char * x__object);
extern "C" __declspec(dllexport) void  __cdecl wle_fnTurretShape_setAllowManualRotation(char * x__object, bool allow);
extern "C" __declspec(dllexport) S32  __cdecl wle_fnTurretShape_getAllowManualFire(char * x__object);
extern "C" __declspec(dllexport) void  __cdecl wle_fnTurretShape_setAllowManualFire(char * x__object, bool allow);
extern "C" __declspec(dllexport) void  __cdecl wle_fnTurretShape_getState(char * x__object,  char* retval);
extern "C" __declspec(dllexport) void  __cdecl wle_fnTurretShape_getTurretEulerRotation(char * x__object,  char* retval);
extern "C" __declspec(dllexport) void  __cdecl wle_fnTurretShape_setTurretEulerRotation(char * x__object, char * x__rot);
extern "C" __declspec(dllexport) S32  __cdecl wle_fnTurretShape_doRespawn(char * x__object);
extern "C" __declspec(dllexport) void  __cdecl wle_fnFlyingVehicle_useCreateHeight(char * x__object, bool enabled);
extern "C" __declspec(dllexport) S32  __cdecl wle_fnWheeledVehicle_setWheelSteering(char * x__object, S32 wheel, F32 steering);
extern "C" __declspec(dllexport) S32  __cdecl wle_fnWheeledVehicle_setWheelPowered(char * x__object, S32 wheel, bool powered);
extern "C" __declspec(dllexport) S32  __cdecl wle_fnWheeledVehicle_setWheelTire(char * x__object, S32 wheel, char * x__tire);
extern "C" __declspec(dllexport) S32  __cdecl wle_fnWheeledVehicle_setWheelSpring(char * x__object, S32 wheel, char * x__spring);
extern "C" __declspec(dllexport) S32  __cdecl wle_fnWheeledVehicle_getWheelCount(char * x__object);
extern "C" __declspec(dllexport) S32  __cdecl wle_fnTerrainBlock_save(char * x__object, char * x__fileName);
extern "C" __declspec(dllexport) void  __cdecl wle_fn__enableSamples(char * x__a1, char * x__a2);
extern "C" __declspec(dllexport) void  __cdecl wle_fnSettings_findFirstValue(char * x__object, char * x__a2, char * x__a3, char * x__a4,  char* retval);
extern "C" __declspec(dllexport) void  __cdecl wle_fnSettings_findNextValue(char * x__object,  char* retval);
extern "C" __declspec(dllexport) void  __cdecl wle_fnSettings_setValue(char * x__object, char * x__a2, char * x__a3);
extern "C" __declspec(dllexport) void  __cdecl wle_fnSettings_setDefaultValue(char * x__object, char * x__a2, char * x__a3);
extern "C" __declspec(dllexport) void  __cdecl wle_fnSettings_value(char * x__object, char * x__a2, char * x__a3,  char* retval);
extern "C" __declspec(dllexport) void  __cdecl wle_fnSettings_remove(char * x__object, char * x__a2, char * x__a3);
extern "C" __declspec(dllexport) S32  __cdecl wle_fnSettings_write(char * x__object);
extern "C" __declspec(dllexport) S32  __cdecl wle_fnSettings_read(char * x__object);
extern "C" __declspec(dllexport) void  __cdecl wle_fnSettings_beginGroup(char * x__object, char * x__a2, char * x__a3);
extern "C" __declspec(dllexport) void  __cdecl wle_fnSettings_endGroup(char * x__object);
extern "C" __declspec(dllexport) void  __cdecl wle_fnSettings_clearGroups(char * x__object);
extern "C" __declspec(dllexport) void  __cdecl wle_fnSettings_getCurrentGroups(char * x__object,  char* retval);
extern "C" __declspec(dllexport) void  __cdecl wle_fnCompoundUndoAction_addAction(char * x__object, char * x__a2);
extern "C" __declspec(dllexport) void  __cdecl wle_fnUndoManager_clearAll(char * x__object);
extern "C" __declspec(dllexport) S32  __cdecl wle_fnUndoManager_getUndoCount(char * x__object);
extern "C" __declspec(dllexport) void  __cdecl wle_fnUndoManager_getUndoName(char * x__object, char * x__a2,  char* retval);
extern "C" __declspec(dllexport) S32  __cdecl wle_fnUndoManager_getUndoAction(char * x__object, char * x__a2);
extern "C" __declspec(dllexport) S32  __cdecl wle_fnUndoManager_getRedoCount(char * x__object);
extern "C" __declspec(dllexport) void  __cdecl wle_fnUndoManager_getRedoName(char * x__object, char * x__a2,  char* retval);
extern "C" __declspec(dllexport) S32  __cdecl wle_fnUndoManager_getRedoAction(char * x__object, char * x__a2);
extern "C" __declspec(dllexport) void  __cdecl wle_fnUndoAction_addToManager(char * x__object, char * x__a2);
extern "C" __declspec(dllexport) void  __cdecl wle_fnUndoAction_undo(char * x__object);
extern "C" __declspec(dllexport) void  __cdecl wle_fnUndoAction_redo(char * x__object);
extern "C" __declspec(dllexport) void  __cdecl wle_fnUndoManager_undo(char * x__object);
extern "C" __declspec(dllexport) void  __cdecl wle_fnUndoManager_redo(char * x__object);
extern "C" __declspec(dllexport) void  __cdecl wle_fnUndoManager_getNextUndoName(char * x__object,  char* retval);
extern "C" __declspec(dllexport) void  __cdecl wle_fnUndoManager_getNextRedoName(char * x__object,  char* retval);
extern "C" __declspec(dllexport) void  __cdecl wle_fnUndoManager_pushCompound(char * x__object, char * x__a2,  char* retval);
extern "C" __declspec(dllexport) void  __cdecl wle_fnUndoManager_popCompound(char * x__object, char * x__a2);
extern "C" __declspec(dllexport) S32  __cdecl wle_fnEventManager_registerEvent(char * x__object, char * x__a2);
extern "C" __declspec(dllexport) void  __cdecl wle_fnEventManager_unregisterEvent(char * x__object, char * x__a2);
extern "C" __declspec(dllexport) S32  __cdecl wle_fnEventManager_isRegisteredEvent(char * x__object, char * x__a2);
extern "C" __declspec(dllexport) S32  __cdecl wle_fnEventManager_postEvent(char * x__object, char * x__a2, char * x__a3);
extern "C" __declspec(dllexport) S32  __cdecl wle_fnEventManager_subscribe(char * x__object, char * x__a2, char * x__a3, char * x__a4);
extern "C" __declspec(dllexport) void  __cdecl wle_fnEventManager_remove(char * x__object, char * x__a2, char * x__a3);
extern "C" __declspec(dllexport) void  __cdecl wle_fnEventManager_removeAll(char * x__object, char * x__a2);
extern "C" __declspec(dllexport) void  __cdecl wle_fnEventManager_dumpEvents(char * x__object);
extern "C" __declspec(dllexport) void  __cdecl wle_fnEventManager_dumpSubscribers(char * x__object, char * x__a2);
extern "C" __declspec(dllexport) void  __cdecl wle_fnMessage_getType(char * x__object,  char* retval);
extern "C" __declspec(dllexport) void  __cdecl wle_fnMessage_addReference(char * x__object);
extern "C" __declspec(dllexport) void  __cdecl wle_fnMessage_freeReference(char * x__object);
extern "C" __declspec(dllexport) void  __cdecl wle_fn__dnEval_Direct_New(char * x__a1, char * x__a2, char * x__a3, char * x__a4, char * x__a5, char * x__a6, char * x__a7, char * x__a8, char * x__a9, char * x__a10, char * x__a11, char * x__a12, char * x__a13, char * x__a14, char * x__a15, char * x__a16, char * x__a17, char * x__a18, char * x__a19,  char* retval);
extern "C" __declspec(dllexport) void  __cdecl wle_fn_dnEval(char * x__script,  char* retval);
extern "C" __declspec(dllexport) S32  __cdecl wle_fnNetConnection_GetGhostIndex(char * x__object, char * x__obj);
extern "C" __declspec(dllexport) S32  __cdecl wle_fnNetConnection_ResolveGhost(char * x__object, int ghostIndex);

}
