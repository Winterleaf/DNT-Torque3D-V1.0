// Copyright (C) 2012 Winterleaf Entertainment L,L,C.
// 
// THE SOFTW ARE IS PROVIDED ON AN “ AS IS” BASIS, WITHOUT W ARRANTY OF ANY KIND,
// INCLUDING WITHOUT LIMIT ATION THE W ARRANTIES OF MERCHANT ABILITY, FITNESS
// FOR A PARTICULAR PURPOSE OR NON-INFRINGEMENT . THE ENTIRE RISK AS TO THE
// QUALITY AND PERFORMANCE OF THE SOFTW ARE IS THE RESPONSIBILITY OF LICENSEE.
// SHOULD THE SOFTW ARE PROVE DEFECTIVE IN ANY RESPECT , LICENSEE AND NOT LICEN -
// SOR OR ITS SUPPLIERS OR RESELLERS ASSUMES THE ENTIRE COST OF AN Y SERVICE AND
// REPAIR. THIS DISCLAIMER OF W ARRANTY CONSTITUTES AN ESSENTIAL PART OF THIS
// AGREEMENT. NO USE OF THE SOFTW ARE IS AUTHORIZED HEREUNDER EXCEPT UNDER
// THIS DISCLAIMER.
// 
// The use of the WinterLeaf Entertainment LLC DotNetT orque (“DNT ”) and DotNetT orque
// Customizer (“DNTC”)is governed by this license agreement (“ Agreement”).
// 
// R E S T R I C T I O N S
// 
// (a) Licensee may not: (i) create any derivative works of DNTC, including but not
// limited to translations, localizations, technology add-ons, or game making software
// other than Games; (ii) reverse engineer , or otherwise attempt to derive the algorithms
// for DNT or DNTC (iii) redistribute, encumber , sell, rent, lease, sublicense, or otherwise
// transfer rights to  DNTC; or (iv) remove or alter any tra demark, logo, copyright
// or other proprietary notices, legends, symbols or labels in DNT or DNTC; or (iiv) use
// the Software to develop or distribute any software that compete s with the Software
// without WinterLeaf Entertainment’s prior written consent; or (i iiv) use the Software for
// any illegal purpose.
// (b) Licensee may not distribute the DNTC in any manner.
// 
// LI C E N S E G R A N T .
// This license allows companies of any size, government entities or individuals to cre -
// ate, sell, rent, lease, or otherwise profit commercially from, games using executables
// created from the source code of DNT
// 
// **********************************************************************************
// **********************************************************************************
// **********************************************************************************
// THE SOURCE CODE GENERATED BY DNTC CAN BE  DISTRIBUTED PUBLICLY PROVIDED THAT THE 
// DISTRIBUTOR PROVIDES  THE GENERATE SOURCE CODE FREE OF CHARGE.
// 
// THIS SOURCE CODE (DNT) CAN BE DISTRIBUTED PUBLICLY PROVIDED THAT THE DISTRIBUTOR 
// PROVIDES  THE SOURCE CODE (DNT) FREE OF CHARGE.
// **********************************************************************************
// **********************************************************************************
// **********************************************************************************
// 
// Please visit http://www.winterleafentertainment.com for more information about the project and latest updates.
// 
// Last updated: 10/18/2012
// 

#region

using System.Globalization;
using WinterLeaf.Classes;
using WinterLeaf.Containers;

#endregion

namespace DNT_FPS_Demo_Game_Dll.Scripts.Server
    {
    public partial class Main : TorqueScriptTemplate
        {
        // Global movement speed that affects all cameras.  This should be moved
        // into the camera datablock.


        [Torque_Decorations.TorqueCallBack("", "", "InitializeCamera", "()", 0, 19000, true)]
        public void InitializeCamera()
            {
            console.SetVar("$Camera::movementSpeed", 30);
            }


        //-----------------------------------------------------------------------------
        // Camera methods
        //-----------------------------------------------------------------------------

        //-----------------------------------------------------------------------------
        [Torque_Decorations.TorqueCallBack("", "Camera", "onAdd", "(%this,%obj)", 2, 19000, false)]
        public void CameraOnAdd(string thisobj, string obj)
            {
            console.Call(thisobj, "setMode", new[] {console.GetVarString(thisobj + ".mode")});
            }

        [Torque_Decorations.TorqueCallBack("", "Camera", "setMode", "(%this,%mode,%arg1,%arg2,%arg3)", 5, 19000, false)]
        public void CameraSetMode(string thisobj, string mode, string arg1, string arg2, string arg3)
            {
            // Punt this one over to our datablock
            console.Call(console.getDatablock(thisobj).AsString(), "setMode", new[] {thisobj, mode, arg1, arg2, arg3});
            }


        [Torque_Decorations.TorqueCallBack("", "Observer", "onTrigger", "(%this,%obj,%trigger,%state)", 4, 19000, false)]
        public void ObserverObserverOnTrigger(string thisobj, string obj, string trigger, string state)
            {
            // state = 0 means that a trigger key was released
            if (state.AsBool() == false)
                return;

            // Default player triggers: 0=fire 1=altFire 2=jump
            string client = ShapeBase.getControllingClient(obj).ToString(CultureInfo.InvariantCulture);
            // Evaluate(obj + ".getControllingClient();");

            string mode = console.GetVarString(string.Format("{0}.mode", obj));
            switch (mode)
                {
                    case "Observer":
                        // Do something interesting.
                        break;
                    case "Corpse":
                        //Here is a winner... if you send the prepare too soon, it will crash out the client.  The GameConnectionOnControlObjectChange needs
                        //time to run, and since it's still processing the first change (Switch to camera) this second change (Camera->player) will crash
                        //out the client.
                        GameConnectiOnPreparePlayer(client);
                        //if (!console.GetVarBool(client + ".isrespawning"))
                        //    {
                        //    console.SetVar(client + ".isrespawning", true);
                        //    SimObject.schedule(client, "2000", "preparePlayer", client); //   GameConnectiOnPreparePlayer(client);
                        //    }
                        break;
                }
            }

        [Torque_Decorations.TorqueCallBack("", "Observer", "setMode", "(%this,%obj,%mode,%arg1,%arg2,%arg3)", 6, 19000, false)]
        public void ObserverObserverSetMode(string thisobj, string obj, string mode, string arg1, string arg2, string arg3)
            {
            switch (mode)
                {
                    case "Observer":
                        console.Call(obj, "setFlyMode");
                        break;
                    case "Corpse":
                        string transform = SceneObject.getTransform(arg1).AsString();
                        Camera.setOrbitMode(obj, arg1, new TransformF(transform), (float) 0.5, (float) 4.5, (float) 4.5, false, new Point3F(), false);
                        console.SetVar(obj + ".orbitObj", arg1);
                        break;
                }
            console.SetVar(string.Format("{0}.mode", obj), mode);
            }
        }
    }