// Copyright (C) 2012 Winterleaf Entertainment L,L,C.
// 
// THE SOFTW ARE IS PROVIDED ON AN “ AS IS” BASIS, WITHOUT W ARRANTY OF ANY KIND,
// INCLUDING WITHOUT LIMIT ATION THE W ARRANTIES OF MERCHANT ABILITY, FITNESS
// FOR A PARTICULAR PURPOSE OR NON-INFRINGEMENT . THE ENTIRE RISK AS TO THE
// QUALITY AND PERFORMANCE OF THE SOFTW ARE IS THE RESPONSIBILITY OF LICENSEE.
// SHOULD THE SOFTW ARE PROVE DEFECTIVE IN ANY RESPECT , LICENSEE AND NOT LICEN -
// SOR OR ITS SUPPLIERS OR RESELLERS ASSUMES THE ENTIRE COST OF AN Y SERVICE AND
// REPAIR. THIS DISCLAIMER OF W ARRANTY CONSTITUTES AN ESSENTIAL PART OF THIS
// AGREEMENT. NO USE OF THE SOFTW ARE IS AUTHORIZED HEREUNDER EXCEPT UNDER
// THIS DISCLAIMER.
// 
// The use of the WinterLeaf Entertainment LLC DotNetT orque (“DNT ”) and DotNetT orque
// Customizer (“DNTC”)is governed by this license agreement (“ Agreement”).
// 
// R E S T R I C T I O N S
// 
// (a) Licensee may not: (i) create any derivative works of DNTC, including but not
// limited to translations, localizations, technology add-ons, or game making software
// other than Games; (ii) reverse engineer , or otherwise attempt to derive the algorithms
// for DNT or DNTC (iii) redistribute, encumber , sell, rent, lease, sublicense, or otherwise
// transfer rights to  DNTC; or (iv) remove or alter any tra demark, logo, copyright
// or other proprietary notices, legends, symbols or labels in DNT or DNTC; or (iiv) use
// the Software to develop or distribute any software that compete s with the Software
// without WinterLeaf Entertainment’s prior written consent; or (i iiv) use the Software for
// any illegal purpose.
// (b) Licensee may not distribute the DNTC in any manner.
// 
// LI C E N S E G R A N T .
// This license allows companies of any size, government entities or individuals to cre -
// ate, sell, rent, lease, or otherwise profit commercially from, games using executables
// created from the source code of DNT
// 
// **********************************************************************************
// **********************************************************************************
// **********************************************************************************
// THE SOURCE CODE GENERATED BY DNTC CAN BE  DISTRIBUTED PUBLICLY PROVIDED THAT THE 
// DISTRIBUTOR PROVIDES  THE GENERATE SOURCE CODE FREE OF CHARGE.
// 
// THIS SOURCE CODE (DNT) CAN BE DISTRIBUTED PUBLICLY PROVIDED THAT THE DISTRIBUTOR 
// PROVIDES  THE SOURCE CODE (DNT) FREE OF CHARGE.
// **********************************************************************************
// **********************************************************************************
// **********************************************************************************
// 
// Please visit http://www.winterleafentertainment.com for more information about the project and latest updates.
// 
// Last updated: 10/18/2012
// 

#region

using WinterLeaf.Classes;

#endregion

namespace DNT_FPS_Demo_Game_Dll.Scripts.Client
    {
    public partial class Main : TorqueScriptTemplate
        {
        //-----------------------------------------------------------------------------
        // Torque
        // Copyright GarageGames, LLC 2011
        //-----------------------------------------------------------------------------

        //*****************************************************************************
        // Shaders  ( For Custom Materials )
        //*****************************************************************************


        [Torque_Decorations.TorqueCallBack("", "", "shaders_Init", "", 0, 41000, true)]
        public void shaders_Init()
            {
            TorqueSingleton ts = new TorqueSingleton("ShaderData", "_DebugInterior_");

            ts.PropsAddString("DXVertexShaderFile", "shaders/common/debugInteriorsV.hlsl");
            ts.PropsAddString("DXPixelShaderFile", "shaders/common/debugInteriorsP.hlsl");
            ts.PropsAddString("OGLVertexShaderFile", "shaders/common/gl/debugInteriorsV.glsl");
            ts.PropsAddString("OGLPixelShaderFile", "shaders/common/gl/debugInteriorsP.glsl");
            ts.Props.Add("pixVersion", "1.1");
            ts.Create(m_ts);

            ts = new TorqueSingleton("ShaderData", "ParticlesShaderData");
            ts.PropsAddString("DXVertexShaderFile", "shaders/common/particlesV.hlsl");
            ts.PropsAddString("DXPixelShaderFile", "shaders/common/particlesP.hlsl");

            ts.PropsAddString("OGLVertexShaderFile", "shaders/common/gl/particlesV.glsl");
            ts.PropsAddString("OGLPixelShaderFile", "shaders/common/gl/particlesP.glsl");
            ts.Props.Add("pixVersion", "2.0");
            ts.Create(m_ts);

            ts = new TorqueSingleton("ShaderData", "OffscreenParticleCompositeShaderData");
            ts.PropsAddString("DXVertexShaderFile", "shaders/common/particleCompositeV.hlsl");
            ts.PropsAddString("DXPixelShaderFile", "shaders/common/particleCompositeP.hlsl");

            ts.PropsAddString("OGLVertexShaderFile", "shaders/common/gl/particleCompositeV.glsl");
            ts.PropsAddString("OGLPixelShaderFile", "shaders/common/gl/particleCompositeP.glsl");
            ts.Props.Add("pixVersion", "2.0");
            ts.Create(m_ts);

            //-----------------------------------------------------------------------------
            // Planar Reflection
            //-----------------------------------------------------------------------------

            Torque_Class_Helper tch = new Torque_Class_Helper("ShaderData", "ReflectBump");

            tch.PropsAddString("DXVertexShaderFile", "shaders/common/planarReflectBumpV.hlsl");
            tch.PropsAddString("DXPixelShaderFile", "shaders/common/planarReflectBumpP.hlsl");

            tch.PropsAddString("OGLVertexShaderFile", "shaders/common/gl/planarReflectBumpV.glsl");
            tch.PropsAddString("OGLPixelShaderFile", "shaders/common/gl/planarReflectBumpP.glsl");

            tch.PropsAddString("samplerNames[0]", "$diffuseMap");
            tch.PropsAddString("samplerNames[1]", "$refractMap");
            tch.PropsAddString("samplerNames[2]", "$bumpMap");
            tch.Props.Add("pixVersion", "2.0");
            tch.Create(m_ts);

            tch = new Torque_Class_Helper("ShaderData", "Reflect");
            tch.PropsAddString("DXVertexShaderFile", "shaders/common/planarReflectV.hlsl");
            tch.PropsAddString("DXPixelShaderFile", "shaders/common/planarReflectP.hlsl");

            tch.PropsAddString("OGLVertexShaderFile", "shaders/common/gl/planarReflectV.glsl");
            tch.PropsAddString("OGLPixelShaderFile", "shaders/common/gl/planarReflectP.glsl");

            tch.PropsAddString("samplerNames[0]", "$diffuseMap");
            tch.PropsAddString("samplerNames[1]", "$refractMap");
            tch.Props.Add("pixVersion", "1.4");
            tch.Create(m_ts);

            tch = new Torque_Class_Helper("ShaderData", "fxFoliageReplicatorShader");
            tch.PropsAddString("DXVertexShaderFile", "shaders/common/fxFoliageReplicatorV.hlsl");
            tch.PropsAddString("DXPixelShaderFile", "shaders/common/fxFoliageReplicatorP.hlsl");

            tch.PropsAddString("OGLVertexShaderFile", "shaders/common/gl/fxFoliageReplicatorV.glsl");
            tch.PropsAddString("OGLPixelShaderFile", "shaders/common/gl/fxFoliageReplicatorP.glsl");

            tch.PropsAddString("samplerNames[0]", "$diffuseMap");
            tch.PropsAddString("samplerNames[1]", "$alphaMap");
            tch.Props.Add("pixVersion", "1.4");
            tch.Create(m_ts);
            }
        }
    }