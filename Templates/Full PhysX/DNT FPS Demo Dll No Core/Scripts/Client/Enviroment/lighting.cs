// Copyright (C) 2012 Winterleaf Entertainment L,L,C.
// 
// THE SOFTW ARE IS PROVIDED ON AN “ AS IS” BASIS, WITHOUT W ARRANTY OF ANY KIND,
// INCLUDING WITHOUT LIMIT ATION THE W ARRANTIES OF MERCHANT ABILITY, FITNESS
// FOR A PARTICULAR PURPOSE OR NON-INFRINGEMENT . THE ENTIRE RISK AS TO THE
// QUALITY AND PERFORMANCE OF THE SOFTW ARE IS THE RESPONSIBILITY OF LICENSEE.
// SHOULD THE SOFTW ARE PROVE DEFECTIVE IN ANY RESPECT , LICENSEE AND NOT LICEN -
// SOR OR ITS SUPPLIERS OR RESELLERS ASSUMES THE ENTIRE COST OF AN Y SERVICE AND
// REPAIR. THIS DISCLAIMER OF W ARRANTY CONSTITUTES AN ESSENTIAL PART OF THIS
// AGREEMENT. NO USE OF THE SOFTW ARE IS AUTHORIZED HEREUNDER EXCEPT UNDER
// THIS DISCLAIMER.
// 
// The use of the WinterLeaf Entertainment LLC DotNetT orque (“DNT ”) and DotNetT orque
// Customizer (“DNTC”)is governed by this license agreement (“ Agreement”).
// 
// R E S T R I C T I O N S
// 
// (a) Licensee may not: (i) create any derivative works of DNTC, including but not
// limited to translations, localizations, technology add-ons, or game making software
// other than Games; (ii) reverse engineer , or otherwise attempt to derive the algorithms
// for DNT or DNTC (iii) redistribute, encumber , sell, rent, lease, sublicense, or otherwise
// transfer rights to  DNTC; or (iv) remove or alter any tra demark, logo, copyright
// or other proprietary notices, legends, symbols or labels in DNT or DNTC; or (iiv) use
// the Software to develop or distribute any software that compete s with the Software
// without WinterLeaf Entertainment’s prior written consent; or (i iiv) use the Software for
// any illegal purpose.
// (b) Licensee may not distribute the DNTC in any manner.
// 
// LI C E N S E G R A N T .
// This license allows companies of any size, government entities or individuals to cre -
// ate, sell, rent, lease, or otherwise profit commercially from, games using executables
// created from the source code of DNT
// 
// **********************************************************************************
// **********************************************************************************
// **********************************************************************************
// THE SOURCE CODE GENERATED BY DNTC CAN BE  DISTRIBUTED PUBLICLY PROVIDED THAT THE 
// DISTRIBUTOR PROVIDES  THE GENERATE SOURCE CODE FREE OF CHARGE.
// 
// THIS SOURCE CODE (DNT) CAN BE DISTRIBUTED PUBLICLY PROVIDED THAT THE DISTRIBUTOR 
// PROVIDES  THE SOURCE CODE (DNT) FREE OF CHARGE.
// **********************************************************************************
// **********************************************************************************
// **********************************************************************************
// 
// Please visit http://www.winterleafentertainment.com for more information about the project and latest updates.
// 
// Last updated: 10/18/2012
// 

#region

using WinterLeaf;
using WinterLeaf.Classes;

#endregion

namespace DNT_FPS_Demo_Game_Dll.Scripts.Client
    {
    public partial class Main : TorqueScriptTemplate
        {
        [Torque_Decorations.TorqueCallBack("", "", "initLightingSystems", "", 0, 55000, false)]
        public void initLightingSystems()
            {
            /* client/lighting/advanced/shaders.cs          60000
             * client/lighting/advanced/lightViz.cs         61000
             * client/lighting/advanced/shadowViz.cs        62000
             * client/lighting/advanced/shadowViz.gui       63000
             * client/lighting/advanced/init.cs             64000
             * client/lighting/basic/init.cs                65000
             * client/lighting/basic/shadowFilter           66000
             * client/lighting/shadowMaps/init              67000
             */
            dnt.DoScriptInjection(ScriptType.Client, 60000, 67999);


            // Try the perfered one first.
            bool success = Util.setLightManager(console.GetVarString("$pref::lightManager"));
            if (!success)
                {
                // The perfered one fell thru... so go thru the default
                // light managers until we find one that works.
                int lmCount = Util.getFieldCount(console.GetVarString("$lightManager::defaults"));
                for (int i = 0; i < lmCount; i++)
                    {
                    string lmName = Util.getField(console.GetVarString("$lightManager::defaults"), i);
                    success = Util.setLightManager(lmName);
                    if (success)
                        break;
                    }
                }
            // Did we completely fail to initialize a light manager?
            if (!success)
                {
                // If we completely failed to initialize a light 
                // manager then the 3d scene cannot be rendered.
                Util.quitWithErrorMessage("Failed to set a light manager!");
                }
            console.print("\n");
            }

        [Torque_Decorations.TorqueCallBack("", "", "onLightManagerActivate", "%lmName", 1, 55100, false)]
        public void onLightManagerActivate(string lmName)
            {
            console.SetVar("$pref::lightManager", lmName);
            console.print("Using " + lmName);

            string activateNewFn = "onActivate" + lmName.Split(' ')[0] + "LM";
            if (console.isFunction(activateNewFn))
                console.Call(activateNewFn);
            }

        [Torque_Decorations.TorqueCallBack("", "", "onLightManagerDeactivate", "%lmName", 1, 55200, false)]
        public void onLightManagerDeactivate(string lmName)
            {
            string deactivateOldfn = "onDeactivate" + lmName.Split(' ')[0] + "LM";
            if (console.isFunction(deactivateOldfn))
                console.Call(deactivateOldfn);
            }
        }
    }