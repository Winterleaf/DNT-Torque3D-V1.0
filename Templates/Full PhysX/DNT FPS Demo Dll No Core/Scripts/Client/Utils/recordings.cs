// Copyright (C) 2012 Winterleaf Entertainment L,L,C.
// 
// THE SOFTW ARE IS PROVIDED ON AN “ AS IS” BASIS, WITHOUT W ARRANTY OF ANY KIND,
// INCLUDING WITHOUT LIMIT ATION THE W ARRANTIES OF MERCHANT ABILITY, FITNESS
// FOR A PARTICULAR PURPOSE OR NON-INFRINGEMENT . THE ENTIRE RISK AS TO THE
// QUALITY AND PERFORMANCE OF THE SOFTW ARE IS THE RESPONSIBILITY OF LICENSEE.
// SHOULD THE SOFTW ARE PROVE DEFECTIVE IN ANY RESPECT , LICENSEE AND NOT LICEN -
// SOR OR ITS SUPPLIERS OR RESELLERS ASSUMES THE ENTIRE COST OF AN Y SERVICE AND
// REPAIR. THIS DISCLAIMER OF W ARRANTY CONSTITUTES AN ESSENTIAL PART OF THIS
// AGREEMENT. NO USE OF THE SOFTW ARE IS AUTHORIZED HEREUNDER EXCEPT UNDER
// THIS DISCLAIMER.
// 
// The use of the WinterLeaf Entertainment LLC DotNetT orque (“DNT ”) and DotNetT orque
// Customizer (“DNTC”)is governed by this license agreement (“ Agreement”).
// 
// R E S T R I C T I O N S
// 
// (a) Licensee may not: (i) create any derivative works of DNTC, including but not
// limited to translations, localizations, technology add-ons, or game making software
// other than Games; (ii) reverse engineer , or otherwise attempt to derive the algorithms
// for DNT or DNTC (iii) redistribute, encumber , sell, rent, lease, sublicense, or otherwise
// transfer rights to  DNTC; or (iv) remove or alter any tra demark, logo, copyright
// or other proprietary notices, legends, symbols or labels in DNT or DNTC; or (iiv) use
// the Software to develop or distribute any software that compete s with the Software
// without WinterLeaf Entertainment’s prior written consent; or (i iiv) use the Software for
// any illegal purpose.
// (b) Licensee may not distribute the DNTC in any manner.
// 
// LI C E N S E G R A N T .
// This license allows companies of any size, government entities or individuals to cre -
// ate, sell, rent, lease, or otherwise profit commercially from, games using executables
// created from the source code of DNT
// 
// **********************************************************************************
// **********************************************************************************
// **********************************************************************************
// THE SOURCE CODE GENERATED BY DNTC CAN BE  DISTRIBUTED PUBLICLY PROVIDED THAT THE 
// DISTRIBUTOR PROVIDES  THE GENERATE SOURCE CODE FREE OF CHARGE.
// 
// THIS SOURCE CODE (DNT) CAN BE DISTRIBUTED PUBLICLY PROVIDED THAT THE DISTRIBUTOR 
// PROVIDES  THE SOURCE CODE (DNT) FREE OF CHARGE.
// **********************************************************************************
// **********************************************************************************
// **********************************************************************************
// 
// Please visit http://www.winterleafentertainment.com for more information about the project and latest updates.
// 
// Last updated: 10/18/2012
// 

#region

using WinterLeaf.Classes;

#endregion

namespace DNT_FPS_Demo_Game_Dll.Scripts.Client
    {
    public partial class Main : TorqueScriptTemplate
        {
        /// Shortcut for typi1ng dbgSetParameters with the default values torsion uses.
        [Torque_Decorations.TorqueCallBack("", "recordingsDlg", "onWake", "", 0, 37000, false)]
        public void RecordingsDlgonWake()
            {
            GuiTextListCtrl.clear("RecordingsDlgList");

            int i = 0;
            string filespec = console.GetVarString("$currentMod") + "/recordings/*.rec";
            console.print(filespec);

            for (string file = Util.findFirstFile(filespec, false); file != ""; file = Util.findNextFile(filespec))

                GuiTextListCtrl.addRow("RecordingsDlgList", i++, Util.fileBase(file), 0);

            GuiTextListCtrl.sort("RecordingsDlgList", 0, false);

            GuiTextListCtrl.setSelectedRow("RecordingsDlgList", 0);

            GuiTextListCtrl.scrollVisible("RecordingsDlgList", 0);
            }

        [Torque_Decorations.TorqueCallBack("", "", "StartSelectedDemo", "", 0, 37000, false)]
        public void StartSelectedDemo()
            {
            int sel = GuiTextListCtrl.getSelectedId("RecordingsDlgList"); //console.Call("RecordingsDlgList", "getSelectedId");
            string rowText = GuiTextListCtrl.getRowTextById("RecordingsDlgList", sel); // console.Call("RecordingsDlgList", "getRowTextById", new string[] { sel });

            string file = console.GetVarString("$currentMod") + "/recordings/" + Util.getField(rowText, 0) + ".rec";
            new Torque_Class_Helper("GameConnection", "ServerConnection").Create(m_ts);


            console.Call("RootGroup", "add", new[] {"ServerConnection"});
            // Start up important client-side stuff, such as the group
            // for particle emitters.  This doesn't get launched during a demo
            // as we short circuit the whole mission loading sequence.

            clientStartMission();
            if (console.Call("ServerConnection", "playDemo", new[] {file}).AsBool())
                {
                GuiCanvas.setContent("Canvas", "PlayGui");
                GuiCanvas.popDialog("Canvas", "RecordingsDlg");

                console.Call("ServerConnection", "prepDemoPlayback");
                }
            else
                {
                console.Call("MessageBoxOK", new[] {"Playback Failed", "Demo playback failed for file '" + file + "'."});
                if (console.isObject("ServerConnection"))

                    GameConnection.delete("ServerConnection", "");
                }
            }

        [Torque_Decorations.TorqueCallBack("", "", "startDemoRecord", "", 0, 37000, false)]
        public void StartDemoRecord()
            {
            GameConnection.stopRecording("ServerConnection");


            if (GameConnection.isDemoPlaying("ServerConnection")) //(console.Call("ServerConnection", "isDemoPlaying").AsBool())
                return;

            string file = "";
            int i;
            for (i = 0; i < 1000; i++)
                {
                string num = i.AsString();
                if (i < 10)
                    num = "0" + num;
                if (i < 100)
                    num = "0" + num;

                file = console.GetVarString("$currentMod") + "/recordings/demo" + num + ".rec";
                if (!Util.isFile(file))
                    break;
                }
            if (i == 1000)
                return;

            console.SetVar("$DemoFileName", file);

            ChatHudAddLine("ChatHud", console.ColorEncode(@"\c4Recording to file [\c2" + file + @"\cr]."));

            console.Call("ServerConnection", "prepDemoRecord");


            GameConnection.startRecording("ServerConnection", file);

            if (GameConnection.isDemoRecording("ServerConnection"))
                return; //"console.Call("ServerConnection", "isDemoRecording").AsBool()) return;


            console.Call("deleteFile", new[] {file});


            ChatHudAddLine("ChatHud", console.ColorEncode(@"\c3 *** Failed to record to file [\c2" + file + @"\cr]."));

            console.SetVar("DemoFileName", "");
            }

        [Torque_Decorations.TorqueCallBack("", "", "stopDemoRecord", "", 0, 37000, false)]
        public void StopDemoRecord()
            {
            if (!GameConnection.isDemoRecording("ServerConnection"))
                return;


            ChatHudAddLine("ChatHud", console.ColorEncode(@"\c4Recording file [\c2" + console.GetVarString("$DemoFileName") + @"\cr] finished."));

            GameConnection.stopRecording("ServerConnection");
            }

        [Torque_Decorations.TorqueCallBack("", "", "demoPlaybackComplete", "", 0, 37000, false)]
        public void DemoPlaybackComplete()
            {
            disconnect();

            clientEndMission();
            if (console.GetVarBool("$UseUnifiedShell"))
                {
                if (console.isObject("UnifiedMainMenuGui"))
                    GuiCanvas.setContent("Canvas", "UnifiedMainMenuGui");
                else if (console.isObject("MainMenuGui"))
                    GuiCanvas.setContent("Canvas", "MainMenuGui");
                }
            else if (console.isObject("MainMenuGui"))
                GuiCanvas.setContent("Canvas", "MainMenuGui");


            GuiCanvas.pushDialog("Canvas", "RecordingsDlg");
            }
        }
    }