// Copyright (C) 2012 Winterleaf Entertainment L,L,C.
// 
// THE SOFTW ARE IS PROVIDED ON AN “ AS IS” BASIS, WITHOUT W ARRANTY OF ANY KIND,
// INCLUDING WITHOUT LIMIT ATION THE W ARRANTIES OF MERCHANT ABILITY, FITNESS
// FOR A PARTICULAR PURPOSE OR NON-INFRINGEMENT . THE ENTIRE RISK AS TO THE
// QUALITY AND PERFORMANCE OF THE SOFTW ARE IS THE RESPONSIBILITY OF LICENSEE.
// SHOULD THE SOFTW ARE PROVE DEFECTIVE IN ANY RESPECT , LICENSEE AND NOT LICEN -
// SOR OR ITS SUPPLIERS OR RESELLERS ASSUMES THE ENTIRE COST OF AN Y SERVICE AND
// REPAIR. THIS DISCLAIMER OF W ARRANTY CONSTITUTES AN ESSENTIAL PART OF THIS
// AGREEMENT. NO USE OF THE SOFTW ARE IS AUTHORIZED HEREUNDER EXCEPT UNDER
// THIS DISCLAIMER.
// 
// The use of the WinterLeaf Entertainment LLC DotNetT orque (“DNT ”) and DotNetT orque
// Customizer (“DNTC”)is governed by this license agreement (“ Agreement”).
// 
// R E S T R I C T I O N S
// 
// (a) Licensee may not: (i) create any derivative works of DNTC, including but not
// limited to translations, localizations, technology add-ons, or game making software
// other than Games; (ii) reverse engineer , or otherwise attempt to derive the algorithms
// for DNT or DNTC (iii) redistribute, encumber , sell, rent, lease, sublicense, or otherwise
// transfer rights to  DNTC; or (iv) remove or alter any tra demark, logo, copyright
// or other proprietary notices, legends, symbols or labels in DNT or DNTC; or (iiv) use
// the Software to develop or distribute any software that compete s with the Software
// without WinterLeaf Entertainment’s prior written consent; or (i iiv) use the Software for
// any illegal purpose.
// (b) Licensee may not distribute the DNTC in any manner.
// 
// LI C E N S E G R A N T .
// This license allows companies of any size, government entities or individuals to cre -
// ate, sell, rent, lease, or otherwise profit commercially from, games using executables
// created from the source code of DNT
// 
// **********************************************************************************
// **********************************************************************************
// **********************************************************************************
// THE SOURCE CODE GENERATED BY DNTC CAN BE  DISTRIBUTED PUBLICLY PROVIDED THAT THE 
// DISTRIBUTOR PROVIDES  THE GENERATE SOURCE CODE FREE OF CHARGE.
// 
// THIS SOURCE CODE (DNT) CAN BE DISTRIBUTED PUBLICLY PROVIDED THAT THE DISTRIBUTOR 
// PROVIDES  THE SOURCE CODE (DNT) FREE OF CHARGE.
// **********************************************************************************
// **********************************************************************************
// **********************************************************************************
// 
// Please visit http://www.winterleafentertainment.com for more information about the project and latest updates.
// 
// Last updated: 10/18/2012
// 

#region

using WinterLeaf.Classes;

#endregion

namespace DNT_FPS_Demo_Game_Dll.Scripts.Client
    {
    public partial class Main : TorqueScriptTemplate
        {
        //-----------------------------------------------------------------------------
        // Torque
        // Copyright GarageGames, LLC 2011
        //-----------------------------------------------------------------------------

        //-----------------------------------------------------------------------------
        // StartupGui is the splash screen that initially shows when the game is loaded
        //-----------------------------------------------------------------------------

        [Torque_Decorations.TorqueCallBack("", "", "loadStartup", "()", 0, 4950, false)]
        public void loadStartup()
            {
            // The index of the current splash screen
            console.SetVar("$StartupIdx", 0);
            // A list of the splash screens and logos
            // to cycle through. Note that they have to
            // be in consecutive numerical order
            console.SetVar("StartupGui.bitmap[0]", "art/gui/background");
            console.SetVar("StartupGui.logo[0]", "art/gui/Torque-3D-logo");
            console.SetVar("StartupGui.logoPos[0]", "178 251");
            console.SetVar("StartupGui.logoExtent[0]", "443 139");
            // Call the next() function to set our firt
            // splash screen
            console.Call("StartupGui", "next");
            // Play our startup sound
            //SFXPlayOnce(AudioGui, "art/sound/gui/startup");//SFXPlay(startsnd);
            //MessageBox.Show("test" + m_ts._hwndhndl.ToInt32());
            }

        [Torque_Decorations.TorqueCallBack("", "StartupGui", "click", "(this)", 1, 4950, false)]
        public void StartupGuiClick(string thisobj)
            {
            console.SetVar(thisobj + ".done", true);
            console.Call(thisobj, "onDone");
            }

        [Torque_Decorations.TorqueCallBack("", "StartupGui", "next", "(this)", 1, 4950, false)]
        public void StartupGuiNext(string thisobj)
            {
            // Set us to a blank screen while we load the next one
            GuiCanvas.setContent("Canvas", "BlankGui");
            // Set our bitmap and reset the done variable
            console.Call(thisobj, "setBitmap", new[] {console.GetVarString(thisobj + ".bitmap[" + console.GetVarString("$StartupIdx") + "]")});

            console.SetVar(thisobj + ".done", false);
            // If we have a logo then set it


            string stl = SimSet.findObjectByInternalName(thisobj, "StartupLogo", false);
            if (console.isObject(stl))
                {
                if (console.GetVarString(thisobj + ".logo[" + console.GetVarString("$StartupIdx") + "]") != "")
                    {
                    console.Call(stl, "setBitmap", new[] {console.GetVarString(thisobj + ".logo" + console.GetVarString("$StartupIdx"))});

                    if (console.GetVarString(thisobj + ".logoPos[" + console.GetVarString("$StartupIdx") + "]") != "")
                        {
                        string pos = console.GetVarString(thisobj + ".logoPos[" + console.GetVarString("$StartupIdx") + "]");
                        console.Call(stl, "setPosition", new[] {pos.Split(' ')[0], pos.Split(' ')[1]});
                        }
                    if (console.GetVarString(thisobj + ".logoExtent[" + console.GetVarString("$StartupIdx") + "]") != "")
                        {
                        console.Call(stl, "setExtent", new[] {console.GetVarString(thisobj + ".logoExtent[" + console.GetVarString("$StartupIdx") + "]")});
                        }
                    console.Call(stl, "setVisible", new[] {"True"});
                    }
                else
                    {
                    console.Call(stl, "setVisible", new[] {"false"});
                    }
                }


            string st2 = SimSet.findObjectByInternalName(thisobj, "StartupLogoSecondary", false);
            if (console.isObject(st2))
                {
                if (console.GetVarString(thisobj + ".seclogo[" + console.GetVarString("$StartupIdx") + "]") != "")
                    {
                    console.Call(st2, "setBitmap", new[] {console.GetVarString(thisobj + ".seclogo[" + console.GetVarString("$StartupIdx") + "]")});

                    if (console.GetVarString(thisobj + ".seclogoPos[" + console.GetVarString("$StartupIdx") + "]") != "")
                        {
                        string pos = console.GetVarString(thisobj + ".seclogoPos[" + console.GetVarString("$StartupIdx") + "]");
                        console.Call(st2, "setPosition", new[] {pos.Split(' ')[0], pos.Split(' ')[1]});
                        }
                    if (console.GetVarString(thisobj + ".seclogoExtent[" + console.GetVarString("$StartupIdx") + "]") != "")
                        {
                        console.Call(st2, "setExtent", new[] {console.GetVarString(thisobj + ".seclogoExtent[" + console.GetVarString("$StartupIdx") + "]")});
                        }
                    console.Call(st2, "setVisible", new[] {"True"});
                    }
                else
                    {
                    console.Call(st2, "setVisible", new[] {"false"});
                    }
                }

            console.SetVar("$StartupIdx", console.GetVarInt("$StartupIdx") + 1);
            GuiCanvas.setContent("Canvas", thisobj);
            }

        [Torque_Decorations.TorqueCallBack("", "StartupGui", "onDone", "(this)", 1, 4950, false)]
        public void StartupGuionDone(string thisobj)
            {
            if (!console.GetVarBool(thisobj + ".done"))
                return;
            if (console.GetVarString(thisobj + ".bitmap[" + console.GetVarString("$StartupIdx") + "]") == "")
                {
                console.SetVar(thisobj + ".done", true);
                console.Call("loadMainMenu");
                }
            else
                {
                console.Call(thisobj, "next");
                }
            }
        }
    }