// Copyright (C) 2012 Winterleaf Entertainment L,L,C.
// 
// THE SOFTW ARE IS PROVIDED ON AN “ AS IS” BASIS, WITHOUT W ARRANTY OF ANY KIND,
// INCLUDING WITHOUT LIMIT ATION THE W ARRANTIES OF MERCHANT ABILITY, FITNESS
// FOR A PARTICULAR PURPOSE OR NON-INFRINGEMENT . THE ENTIRE RISK AS TO THE
// QUALITY AND PERFORMANCE OF THE SOFTW ARE IS THE RESPONSIBILITY OF LICENSEE.
// SHOULD THE SOFTW ARE PROVE DEFECTIVE IN ANY RESPECT , LICENSEE AND NOT LICEN -
// SOR OR ITS SUPPLIERS OR RESELLERS ASSUMES THE ENTIRE COST OF AN Y SERVICE AND
// REPAIR. THIS DISCLAIMER OF W ARRANTY CONSTITUTES AN ESSENTIAL PART OF THIS
// AGREEMENT. NO USE OF THE SOFTW ARE IS AUTHORIZED HEREUNDER EXCEPT UNDER
// THIS DISCLAIMER.
// 
// The use of the WinterLeaf Entertainment LLC DotNetT orque (“DNT ”) and DotNetT orque
// Customizer (“DNTC”)is governed by this license agreement (“ Agreement”).
// 
// R E S T R I C T I O N S
// 
// (a) Licensee may not: (i) create any derivative works of DNTC, including but not
// limited to translations, localizations, technology add-ons, or game making software
// other than Games; (ii) reverse engineer , or otherwise attempt to derive the algorithms
// for DNT or DNTC (iii) redistribute, encumber , sell, rent, lease, sublicense, or otherwise
// transfer rights to  DNTC; or (iv) remove or alter any tra demark, logo, copyright
// or other proprietary notices, legends, symbols or labels in DNT or DNTC; or (iiv) use
// the Software to develop or distribute any software that compete s with the Software
// without WinterLeaf Entertainment’s prior written consent; or (i iiv) use the Software for
// any illegal purpose.
// (b) Licensee may not distribute the DNTC in any manner.
// 
// LI C E N S E G R A N T .
// This license allows companies of any size, government entities or individuals to cre -
// ate, sell, rent, lease, or otherwise profit commercially from, games using executables
// created from the source code of DNT
// 
// **********************************************************************************
// **********************************************************************************
// **********************************************************************************
// THE SOURCE CODE GENERATED BY DNTC CAN BE  DISTRIBUTED PUBLICLY PROVIDED THAT THE 
// DISTRIBUTOR PROVIDES  THE GENERATE SOURCE CODE FREE OF CHARGE.
// 
// THIS SOURCE CODE (DNT) CAN BE DISTRIBUTED PUBLICLY PROVIDED THAT THE DISTRIBUTOR 
// PROVIDES  THE SOURCE CODE (DNT) FREE OF CHARGE.
// **********************************************************************************
// **********************************************************************************
// **********************************************************************************
// 
// Please visit http://www.winterleafentertainment.com for more information about the project and latest updates.
// 
// Last updated: 10/18/2012
// 

#region

using System;
using WinterLeaf.Classes;

#endregion

namespace DNT_FPS_Demo_Game_Dll.Scripts.Server
    {
    public partial class Main : TorqueScriptTemplate
        {
        [Torque_Decorations.TorqueCallBack("", "ProximityMineData", "onThrow", "( %this, %user, %amount )", 3, 2300, false)]
        public string ProximityMineDataOnThrow(string datablock, string player, string amount)
            {
            ShapeBaseShapeBaseDecInventory(player, datablock, "1");

            Torque_Class_Helper tch = new Torque_Class_Helper("ProximityMine", "");
            tch.Props.Add("datablock", datablock);
            tch.Props.Add("sourceObject", player);
            tch.Props.Add("rotation", string.Format("\"0 0 1 {0} \"", new Random().NextDouble()*360));
            tch.Props.Add("static", "false");
            tch.Props.Add("client", console.GetVarString(string.Format("{0}.client", player)));
            uint obj = tch.Create(m_ts);
            SimSet.pushToBack("MissionCleanup", obj.AsString());
            return obj.AsString();
            }

        [Torque_Decorations.TorqueCallBack("", "ProximityMineData", "onTriggered", "( %this, %obj, %target )", 3, 2300, false)]
        public void ProximityMineDataOnTriggered(string datablock, string obj, string target)
            {
            }

        [Torque_Decorations.TorqueCallBack("", "ProximityMineData", "onExplode", "( %this, %obj, %position )", 3, 2300, false)]
        public void ProximityMineDataOnExplode(string datablock, string shapebase, string position)
            {
            // Damage objects within the mine's damage radius
            if (console.GetVarFloat(datablock + ".damageRadius") > 0)
                RadiusDamage(shapebase, position, console.GetVarString(string.Format("{0}.damageRadius", datablock)), console.GetVarString(string.Format("{0}.radiusDamage", datablock)), console.GetVarString(string.Format("{0}.damageType", datablock)), console.GetVarString(string.Format("{0}.areaImpulse", datablock)));
            }

        [Torque_Decorations.TorqueCallBack("", "ProximityMineData", "damage", "( %this, %obj, %position, %source, %amount, %damageType )", 6, 2300, false)]
        public void ProximityMineDataDamage(string datablock, string shapebase, string position, string source, string amount, string damageType)
            {
            // Explode if any damage is applied to the mine
            int r = 50 + (new Random().Next(0, 50));
            SimObject.schedule(shapebase, r.AsString(), "explode");
            }

        [Torque_Decorations.TorqueCallBack("", "", "sendMsgClientKilled_MineDamage", "( %msgType, %client, %sourceClient, %damLoc )", 4, 2300, false)]
        public void SendMsgClientKilledMineDamage(string msgType, string client, string sourceClient, string damLoc)
            {
            // Customized kill message for deaths caused by proximity mines
            if (sourceClient == "")
                MessageAll(msgType, "%1 was blown up!", console.GetVarString(string.Format("{0}.playerName", client)));
            else if (sourceClient == client)
                MessageAll(msgType, "%1 stepped on his own mine!", console.GetVarString(string.Format("{0}.playerName", client)));
            else
                MessageAll(msgType, "%1 was blown up by %2!", console.GetVarString(string.Format("{0}.playerName", client)), console.GetVarString(string.Format("{0}.playerName", sourceClient)));
            }

        // ----------------------------------------------------------------------------
        // Player deployable proximity mine
        // ----------------------------------------------------------------------------

        // Cannot use the Weapon class for ProximityMineData datablocks as it is already tied
        // to ItemData.

        [Torque_Decorations.TorqueCallBack("", "ProxMine", "onUse", "(%this, %obj)", 2, 2300, false)]
        public void ProxMineOnUser(string thisobj, string obj)
            {
            // Act like a weapon on use
            console.Call_Classname("Weapon", "onUse", new[] {thisobj, obj});
            }

        [Torque_Decorations.TorqueCallBack("", "ProxMine", "onPickup", "( %this, %obj, %shape, %amount )", 4, 2300, false)]
        public void ProxMineOnPickup(string thisobj, string obj, string shape, string amount)
            {
            // Act like a weapon on pickup
            console.Call_Classname("Weapon", "onPickup", new[] {thisobj, obj, shape, amount});
            }

        [Torque_Decorations.TorqueCallBack("", "ProxMine", "onInventory", "( %this, %obj, %amount )", 3, 2300, false)]
        public void ProxMineOnInventory(string thisobj, string player, string amount)
            {
            if (console.isObject(player + ".client"))
                GameConnectionSetAmmoAmountHud(console.GetVarString(player + ".client"), "1", amount);
            if (amount == "0" && console.objectHasMethod(player, "getMountSlot"))
                ShapeBaseCycleWeapon(player, "prev");
            }

        [Torque_Decorations.TorqueCallBack("", "ProxMineImage", "onMount", "( %this, %obj, %slot )", 3, 2300, false)]
        public void ProxMineImageOnMount(string thisobj, string player, string slot)
            {
            ShapeBase.setImageAmmo(player, slot.AsInt(), true);
            int numofmines = ShapeBaseShapeBaseGetInventory(player, console.GetVarString(thisobj + ".item"));

            string previewImage = console.GetVarString(string.Format("{0}.item.previewImage", thisobj));
            string reticle = console.GetVarString(string.Format("{0}.item.reticle", thisobj));
            string zoomReticle = console.GetVarString(string.Format("{0}.item.zoomReticle", thisobj));

            GameConnectionRefreshWeaponHud(console.GetVarString(player + ".client"), "1", previewImage, reticle, zoomReticle, numofmines.AsString());
            }

        [Torque_Decorations.TorqueCallBack("", "ProxMineImage", "onUnmount", "( %this, %obj, %slot )", 3, 2300, false)]
        public void ProxMineImageOnUnmount(string thisobj, string player, string slot)
            {
            GameConnectionRefreshWeaponHud(console.GetVarString(player + ".client"), "0", "", "", "", "");
            }

        [Torque_Decorations.TorqueCallBack("", "ProxMineImage", "onFire", "( %this, %obj, %slot )", 3, 2300, false)]
        public void ProxMineImageOnFire(string image, string player, string slot)
            {
            ShapeBaseShapeBaseThrow(player, console.GetVarString(image + ".item"));
            }
        }
    }