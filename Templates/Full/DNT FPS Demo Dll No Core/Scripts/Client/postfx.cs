// Copyright (C) 2012 Winterleaf Entertainment L,L,C.
// 
// THE SOFTW ARE IS PROVIDED ON AN “ AS IS” BASIS, WITHOUT W ARRANTY OF ANY KIND,
// INCLUDING WITHOUT LIMIT ATION THE W ARRANTIES OF MERCHANT ABILITY, FITNESS
// FOR A PARTICULAR PURPOSE OR NON-INFRINGEMENT . THE ENTIRE RISK AS TO THE
// QUALITY AND PERFORMANCE OF THE SOFTW ARE IS THE RESPONSIBILITY OF LICENSEE.
// SHOULD THE SOFTW ARE PROVE DEFECTIVE IN ANY RESPECT , LICENSEE AND NOT LICEN -
// SOR OR ITS SUPPLIERS OR RESELLERS ASSUMES THE ENTIRE COST OF AN Y SERVICE AND
// REPAIR. THIS DISCLAIMER OF W ARRANTY CONSTITUTES AN ESSENTIAL PART OF THIS
// AGREEMENT. NO USE OF THE SOFTW ARE IS AUTHORIZED HEREUNDER EXCEPT UNDER
// THIS DISCLAIMER.
// 
// The use of the WinterLeaf Entertainment LLC DotNetT orque (“DNT ”) and DotNetT orque
// Customizer (“DNTC”)is governed by this license agreement (“ Agreement”).
// 
// R E S T R I C T I O N S
// 
// (a) Licensee may not: (i) create any derivative works of DNTC, including but not
// limited to translations, localizations, technology add-ons, or game making software
// other than Games; (ii) reverse engineer , or otherwise attempt to derive the algorithms
// for DNT or DNTC (iii) redistribute, encumber , sell, rent, lease, sublicense, or otherwise
// transfer rights to  DNTC; or (iv) remove or alter any tra demark, logo, copyright
// or other proprietary notices, legends, symbols or labels in DNT or DNTC; or (iiv) use
// the Software to develop or distribute any software that compete s with the Software
// without WinterLeaf Entertainment’s prior written consent; or (i iiv) use the Software for
// any illegal purpose.
// (b) Licensee may not distribute the DNTC in any manner.
// 
// LI C E N S E G R A N T .
// This license allows companies of any size, government entities or individuals to cre -
// ate, sell, rent, lease, or otherwise profit commercially from, games using executables
// created from the source code of DNT
// 
// **********************************************************************************
// **********************************************************************************
// **********************************************************************************
// THE SOURCE CODE GENERATED BY DNTC CAN BE  DISTRIBUTED PUBLICLY PROVIDED THAT THE 
// DISTRIBUTOR PROVIDES  THE GENERATE SOURCE CODE FREE OF CHARGE.
// 
// THIS SOURCE CODE (DNT) CAN BE DISTRIBUTED PUBLICLY PROVIDED THAT THE DISTRIBUTOR 
// PROVIDES  THE SOURCE CODE (DNT) FREE OF CHARGE.
// **********************************************************************************
// **********************************************************************************
// **********************************************************************************
// 
// Please visit http://www.winterleafentertainment.com for more information about the project and latest updates.
// 
// Last updated: 10/18/2012
// 

#region

using WinterLeaf;
using WinterLeaf.Classes;

#endregion

namespace DNT_FPS_Demo_Game_Dll.Scripts.Client
    {
    public partial class Main : TorqueScriptTemplate
        {
        //------------------------------------------------------------------------------
        // CloudLayer
        //------------------------------------------------------------------------------

        [Torque_Decorations.TorqueCallBack("", "", "initialize_postFx", "", 0, 48000, true)]
        public void initialize_postFx()
            {
            TorqueSingleton ts = new TorqueSingleton("GFXStateBlockData", "PFX_DefaultStateBlock");


            ts.Props.Add("zDefined", "true");
            ts.Props.Add("zEnable", "false");
            ts.Props.Add("zWriteEnable", "false");

            ts.Props.Add("samplersDefined", "true");
            ts.Props.Add("samplerStates[0]", "SamplerClampLinear");
            ts.Create(m_ts);

            ts = new TorqueSingleton("ShaderData", "PFX_PassthruShader");
            ts.PropsAddString("DXVertexShaderFile", "shaders/common/postFx/postFxV.hlsl");
            ts.PropsAddString("DXPixelShaderFile", "shaders/common/postFx/passthruP.hlsl");
            //   OGLVertexShaderFile  = "shaders/common/postFx/gl//postFxV.glsl";
            //   OGLPixelShaderFile   = "shaders/common/postFx/gl/passthruP.glsl";
            ts.PropsAddString("samplerNames[0]", "$inputTex");
            ts.Props.Add("pixVersion", "2.0");
            ts.Create(m_ts);
            }

        //I should use a script inject here, versus reading the 
        //the torque scripts.  I'll need to make a second pass.
        [Torque_Decorations.TorqueCallBack("", "", "initPostEffects", "", 0, 48001, false)]
        public void initPostEffects()
            {
            // First exec the scripts for the different light managers
            // in the lighting folder.

            dnt.DoScriptInjection(ScriptType.Client, 90000, 90999); //chromaticLens
            dnt.DoScriptInjection(ScriptType.Client, 91000, 91999); //default.postfxpreset
            dnt.DoScriptInjection(ScriptType.Client, 92000, 92999); //dof
            dnt.DoScriptInjection(ScriptType.Client, 93000, 93999); //edgeAA
            dnt.DoScriptInjection(ScriptType.Client, 94000, 94999); //flash
            dnt.DoScriptInjection(ScriptType.Client, 95000, 95999); //Fog

            dnt.DoScriptInjection(ScriptType.Client, 96000, 96999); //fxaa
            dnt.DoScriptInjection(ScriptType.Client, 97000, 97999); //GammaPostFX
            dnt.DoScriptInjection(ScriptType.Client, 98000, 98999); //Glow
            dnt.DoScriptInjection(ScriptType.Client, 99000, 99999); //HDR


            dnt.DoScriptInjection(ScriptType.Client, 100000, 100999); //lightRay
            dnt.DoScriptInjection(ScriptType.Client, 101000, 101999); //MLAA
            dnt.DoScriptInjection(ScriptType.Client, 106000, 106999); //ssao

            dnt.DoScriptInjection(ScriptType.Client, 102000, 102999);
            dnt.DoScriptInjection(ScriptType.Client, 103000, 103999);
            dnt.DoScriptInjection(ScriptType.Client, 104000, 104999);
            dnt.DoScriptInjection(ScriptType.Client, 105000, 105999);
            }

        [Torque_Decorations.TorqueCallBack("", "PostEffect", "inspectVars", "this", 1, 48002, false)]
        public void PostEffectinspectVars(string thisobj)
            {
            string name = console.getName(thisobj);
            string globals = "$" + name + "::*";
            console.Call("inspectVars", new[] {globals});
            }

        [Torque_Decorations.TorqueCallBack("", "PostEffect", "viewDisassembly", "this", 1, 48003, false)]
        public void PostEffectviewDisassembly(string thisobj)
            {
            string file = console.Call(thisobj, "dumpShaderDisassembly");
            if (file != "")
                {
                console.print("PostEffect::viewDisassembly - no shader disassembly found.");
                }
            else
                {
                console.print("PostEffect::viewDisassembly - shader disassembly file dumped ( " + file + " ).");
                Util.openFile(file);
                }
            }

        // Return true if we really want the effect enabled.
        // By default this is the case.
        [Torque_Decorations.TorqueCallBack("", "PostEffect", "onEnabled", "this", 1, 48004, false)]
        public bool PostEffectonEnabled(string thisobj)
            {
            return true;
            }
        }
    }