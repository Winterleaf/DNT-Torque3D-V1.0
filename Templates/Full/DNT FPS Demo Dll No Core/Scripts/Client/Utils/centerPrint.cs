// Copyright (C) 2012 Winterleaf Entertainment L,L,C.
// 
// THE SOFTW ARE IS PROVIDED ON AN “ AS IS” BASIS, WITHOUT W ARRANTY OF ANY KIND,
// INCLUDING WITHOUT LIMIT ATION THE W ARRANTIES OF MERCHANT ABILITY, FITNESS
// FOR A PARTICULAR PURPOSE OR NON-INFRINGEMENT . THE ENTIRE RISK AS TO THE
// QUALITY AND PERFORMANCE OF THE SOFTW ARE IS THE RESPONSIBILITY OF LICENSEE.
// SHOULD THE SOFTW ARE PROVE DEFECTIVE IN ANY RESPECT , LICENSEE AND NOT LICEN -
// SOR OR ITS SUPPLIERS OR RESELLERS ASSUMES THE ENTIRE COST OF AN Y SERVICE AND
// REPAIR. THIS DISCLAIMER OF W ARRANTY CONSTITUTES AN ESSENTIAL PART OF THIS
// AGREEMENT. NO USE OF THE SOFTW ARE IS AUTHORIZED HEREUNDER EXCEPT UNDER
// THIS DISCLAIMER.
// 
// The use of the WinterLeaf Entertainment LLC DotNetT orque (“DNT ”) and DotNetT orque
// Customizer (“DNTC”)is governed by this license agreement (“ Agreement”).
// 
// R E S T R I C T I O N S
// 
// (a) Licensee may not: (i) create any derivative works of DNTC, including but not
// limited to translations, localizations, technology add-ons, or game making software
// other than Games; (ii) reverse engineer , or otherwise attempt to derive the algorithms
// for DNT or DNTC (iii) redistribute, encumber , sell, rent, lease, sublicense, or otherwise
// transfer rights to  DNTC; or (iv) remove or alter any tra demark, logo, copyright
// or other proprietary notices, legends, symbols or labels in DNT or DNTC; or (iiv) use
// the Software to develop or distribute any software that compete s with the Software
// without WinterLeaf Entertainment’s prior written consent; or (i iiv) use the Software for
// any illegal purpose.
// (b) Licensee may not distribute the DNTC in any manner.
// 
// LI C E N S E G R A N T .
// This license allows companies of any size, government entities or individuals to cre -
// ate, sell, rent, lease, or otherwise profit commercially from, games using executables
// created from the source code of DNT
// 
// **********************************************************************************
// **********************************************************************************
// **********************************************************************************
// THE SOURCE CODE GENERATED BY DNTC CAN BE  DISTRIBUTED PUBLICLY PROVIDED THAT THE 
// DISTRIBUTOR PROVIDES  THE GENERATE SOURCE CODE FREE OF CHARGE.
// 
// THIS SOURCE CODE (DNT) CAN BE DISTRIBUTED PUBLICLY PROVIDED THAT THE DISTRIBUTOR 
// PROVIDES  THE SOURCE CODE (DNT) FREE OF CHARGE.
// **********************************************************************************
// **********************************************************************************
// **********************************************************************************
// 
// Please visit http://www.winterleafentertainment.com for more information about the project and latest updates.
// 
// Last updated: 10/18/2012
// 

#region

using WinterLeaf.Classes;

#endregion

namespace DNT_FPS_Demo_Game_Dll.Scripts.Client
    {
    public partial class Main : TorqueScriptTemplate
        {
        [Torque_Decorations.TorqueCallBack("", "", "centerprint_Init", "", 0, 38000, true)]
        public void centerprint_Init()
            {
            console.SetVar("$centerPrintActive", 0);
            console.SetVar("$bottomPrintActive", 0);
            console.SetVar("$CenterPrintSizes[1]", 20);
            console.SetVar("$CenterPrintSizes[2]", 36);
            console.SetVar("$CenterPrintSizes[3]", 56);
            }

        [Torque_Decorations.TorqueCallBack("", "", "clientCmdCenterPrint", "%message, %time, %size", 3, 38000, false)]
        public void clientCmdCenterPrint(string message, string time, string size)
            {
            if (console.GetVarBool("$centerPrintActive"))
                {
                if (console.Call("centerPrintDlg", "removePrint") != "")
                    console.Call("cancel", new[] {"centerPrintDlg.removePrint"});
                }
            else
                {
                console.SetVar("CenterPrintDlg.isVisible", 1);
                console.SetVar("$centerPrintActive", 1);
                }
            console.Call("CenterPrintText", "setText", new[] {"<just:center>" + message});
            console.Call("CenterPrintDlg", "Extent", new[] {console.GetVarString("CenterPrintDlg.extent").Split(' ')[0] + " " + console.GetVarString("$CenterPrintSizes[" + size + "]")});

            if (time.AsInt() > 0)
                console.SetVar("centerPrintDlg.removePrint", Util._schedule((time.AsInt()*1000).AsString(), "0", "clientCmdClearCenterPrint"));
            }

        [Torque_Decorations.TorqueCallBack("", "", "clientCmdBottomPrint", "%message, %time, %size", 3, 38000, false)]
        public void clientCmdBottomPrint(string message, string time, string size)
            {
            if (console.GetVarBool("$bottomPrintActive"))
                {
                if (console.Call("bottomPrintDlg", "removePrint") != "")
                    console.Call("Cancel", new[] {console.GetVarString("bottomPrintDlg.removePrint")});
                }
            else
                {
                GuiControl.setVisible("bottomPrintDlg", true);
                console.SetVar("$bottomPrintActive", 1);
                }
            GuiMLTextCtrl.setText("bottomPrintText", "<just:center>" + message);
            console.Call("bottomPrintDlg", "extent", new[] {console.GetVarString("bottomPrintDlg.extent").Split(' ')[0] + " " + console.GetVarString("$CenterPrintSizes[" + size + "]")});

            if (time.AsInt() > 0)
                console.SetVar("bottomPrintDlg.removePrint", Util._schedule((time.AsInt()*1000).AsString(), "0", "clientCmdClearbottomPrint"));
            }

        [Torque_Decorations.TorqueCallBack("", "BottomPrintText", "onResize", "%this, %width, %height", 3, 38000, false)]
        public void BottomPrintTextonResize(string thisobj, string width, string height)
            {
            console.SetVar(thisobj + ".position", "0 0");
            }

        [Torque_Decorations.TorqueCallBack("", "CenterPrintText", "onResize", "%this, %width, %height", 3, 38000, false)]
        public void CenterPrintTextOnResize(string thisobj, string width, string height)
            {
            console.SetVar(thisobj + ".position", "0 0");
            }

        [Torque_Decorations.TorqueCallBack("", "", "clientCmdClearCenterPrint", "", 0, 38000, false)]
        public void clientCmdClearCenterPrint()
            {
            console.SetVar("$centerPrintActive", 0);
            console.SetVar("CenterPrintDlg.visible", 0);
            console.SetVar("CenterPrintDlg.removePrint", "");
            }

        [Torque_Decorations.TorqueCallBack("", "", "clientCmdClearBottomPrint", "", 0, 38000, false)]
        public void clientCmdClearBottomPrint()
            {
            console.SetVar("$bottomPrintActive", 0);
            console.SetVar("BottomPrintDlg.visible", 0);
            console.SetVar("BottomPrintDlg.removePrint", "");
            }
        }
    }